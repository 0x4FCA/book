<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="records">
  <title>Records</title>

  <para>One of OCaml's best features is its concise and expressive system for
  declaring new data types, and records are a key element of that system. We
  discussed records briefly in <xref linkend="a-guided-tour"/>, but this
  chapter will go into more depth, covering the details of how records work,
  as well as advice on how to use them effectively in your software
  designs.</para>

  <para>A record represents a collection of values stored together as one,
  where each component is identified by a different field name. The basic
  syntax for a record type declaration is as follows:<indexterm
      class="singular">
      <primary>records</primary>

      <secondary>basic syntax for</secondary>
    </indexterm></para>

  <para role="sourcecode">Syntax: <ulink role="orm:hideurl:ital"
  url="https://github.com/realworldocaml/examples/tree/beta3/code/records/record.syntax">records/record.syntax</ulink></para>

  <programlisting format="linespecific" language="">type &lt;record-name&gt; =
  { &lt;field&gt; : &lt;type&gt; ;
    &lt;field&gt; : &lt;type&gt; ;
    ...
  }</programlisting>

  <para>Note that record field names must start with a lowercase
  letter.</para>

  <para>Here's a simple example, a <literal
  moreinfo="none">host_info</literal> record that summarizes information about
  a given computer:</para>

  <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
  url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink></para>

  <programlisting format="linespecific" language="ocaml"><prompt
      moreinfo="none"># </prompt><userinput moreinfo="none">type host_info =</userinput>
<userinput moreinfo="none">    { hostname   : string;</userinput>
<userinput moreinfo="none">      os_name    : string;</userinput>
<userinput moreinfo="none">      cpu_arch   : string;</userinput>
<userinput moreinfo="none">      timestamp  : Time.t;</userinput>
<userinput moreinfo="none">    };;</userinput>
<computeroutput moreinfo="none">type host_info = {</computeroutput>
<computeroutput moreinfo="none">  hostname : string;</computeroutput>
<computeroutput moreinfo="none">  os_name : string;</computeroutput>
<computeroutput moreinfo="none">  cpu_arch : string;</computeroutput>
<computeroutput moreinfo="none">  timestamp : Time.t;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput></programlisting>

  <para>We can construct a <literal moreinfo="none">host_info</literal> just
  as easily. The following code uses the <literal
  moreinfo="none">Shell</literal> module from <literal
  moreinfo="none">Core_extended</literal> to dispatch commands to the shell to
  extract the information we need about the computer we're running on. It also
  uses the <literal moreinfo="none">Time.now</literal> call from Core's
  <literal moreinfo="none">Time</literal> module:</para>

  <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
  url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
  (part 1)</para>

  <programlisting format="linespecific" language="ocaml"><prompt
      moreinfo="none"># </prompt><userinput moreinfo="none">#require "core_extended";;</userinput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">open Core_extended.Std;;</userinput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">let my_host =</userinput>
<userinput moreinfo="none">    let sh = Shell.sh_one_exn in</userinput>
<userinput moreinfo="none">    { hostname   = sh "hostname";</userinput>
<userinput moreinfo="none">      os_name    = sh "uname -s";</userinput>
<userinput moreinfo="none">      cpu_arch   = sh "uname -p";</userinput>
<userinput moreinfo="none">      timestamp  = Time.now ();</userinput>
<userinput moreinfo="none">    };;</userinput>
<computeroutput moreinfo="none">val my_host : host_info =</computeroutput>
<computeroutput moreinfo="none">  {hostname = "ocaml-www1"; os_name = "Linux"; cpu_arch = "unknown";</computeroutput>
<computeroutput moreinfo="none">   timestamp = 2013-08-18 14:50:48.986085+01:00}</computeroutput></programlisting>

  <para>You might wonder how the compiler inferred that <literal
  moreinfo="none">my_host</literal> is of type <literal
  moreinfo="none">host_info</literal>. The hook that the compiler uses in this
  case to figure out the type is the record field name. Later in the chapter,
  we'll talk about what happens when there is more than one record type in
  scope with the same field name.</para>

  <para>Once we have a record value in hand, we can extract elements from the
  record field using dot-notation:</para>

  <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
  url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
  (part 2)</para>

  <programlisting format="linespecific" language="ocaml"><prompt
      moreinfo="none"># </prompt><userinput moreinfo="none">my_host.cpu_arch;;</userinput>
<computeroutput moreinfo="none">- : string = "unknown"</computeroutput></programlisting>

  <para>When declaring an OCaml type, you always have the option of
  parameterizing it by a polymorphic type. Records are no different in this
  regard. So, for example, here's a type one might use to timestamp arbitrary
  items:</para>

  <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
  url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
  (part 3)</para>

  <programlisting format="linespecific" language="ocaml"><prompt
      moreinfo="none"># </prompt><userinput moreinfo="none">type 'a timestamped = { item: 'a; time: Time.t };;</userinput>
<computeroutput moreinfo="none">type 'a timestamped = { item : 'a; time : Time.t; }</computeroutput></programlisting>

  <para>We can then write polymorphic functions that operate over this
  parameterized type:</para>

  <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
  url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
  (part 4)</para>

  <programlisting format="linespecific" language="ocaml"><prompt
      moreinfo="none"># </prompt><userinput moreinfo="none">let first_timestamped list =</userinput>
<userinput moreinfo="none">    List.reduce list ~f:(fun a b -&gt; if a.time &lt; b.time then a else b)</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val first_timestamped : 'a timestamped list -&gt; 'a timestamped option = &lt;fun&gt;</computeroutput></programlisting>

  <sect1 id="patterns-and-exhaustiveness">
    <title>Patterns and Exhaustiveness</title>

    <para>Another way of getting information out of a record is by using a
    pattern match, as in the definition of <literal
    moreinfo="none">host_info_to_string</literal>:<indexterm class="singular">
        <primary>pattern matching</primary>
      </indexterm><indexterm class="singular">
        <primary>records</primary>

        <secondary>patterns and exhaustiveness in</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 5)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let host_info_to_string { hostname = h; os_name = os;</userinput>
<userinput moreinfo="none">                            cpu_arch = c; timestamp = ts;</userinput>
<userinput moreinfo="none">                          } =</userinput>
<userinput moreinfo="none">       sprintf "%s (%s / %s, on %s)" h os c (Time.to_sec_string ts);;</userinput>
<computeroutput moreinfo="none">val host_info_to_string : host_info -&gt; string = &lt;fun&gt;</computeroutput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">host_info_to_string my_host;;</userinput>
<computeroutput moreinfo="none">- : string = "ocaml-www1 (Linux / unknown, on 2013-08-18 14:50:48)"</computeroutput></programlisting>

    <para>Note that the pattern that we used had only a single case, rather
    than using several cases separated by <literal
    moreinfo="none">|</literal>'s. We needed only one pattern because record
    patterns are <emphasis>irrefutable</emphasis>, meaning that a record
    pattern match will never fail at runtime. This makes sense, because the
    set of fields available in a record is always the same. In general,
    patterns for types with a fixed structure, like records and tuples, are
    irrefutable, unlike types with variable structure like lists and
    variants.<indexterm class="singular">
        <primary>irrefutable patterns</primary>
      </indexterm><indexterm class="singular">
        <primary>datatypes</primary>

        <secondary>fixed vs. variable structure of</secondary>
      </indexterm></para>

    <para>Another important characteristic of record patterns is that they
    don't need to be complete; a pattern can mention only a subset of the
    fields in the record. This can be convenient, but it can also be error
    prone. In particular, this means that when new fields are added to the
    record, code that should be updated to react to the presence of those new
    fields will not be flagged by the compiler.</para>

    <para>As an example, imagine that we wanted to add a new field to our
    <literal moreinfo="none">host_info</literal> record called <literal
    moreinfo="none">os_release</literal>:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 6)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">type host_info =</userinput>
<userinput moreinfo="none">    { hostname   : string;</userinput>
<userinput moreinfo="none">      os_name    : string;</userinput>
<userinput moreinfo="none">      cpu_arch   : string;</userinput>
<userinput moreinfo="none">      os_release : string;</userinput>
<userinput moreinfo="none">      timestamp  : Time.t;</userinput>
<userinput moreinfo="none">    } ;;</userinput>
<computeroutput moreinfo="none">type host_info = {</computeroutput>
<computeroutput moreinfo="none">  hostname : string;</computeroutput>
<computeroutput moreinfo="none">  os_name : string;</computeroutput>
<computeroutput moreinfo="none">  cpu_arch : string;</computeroutput>
<computeroutput moreinfo="none">  os_release : string;</computeroutput>
<computeroutput moreinfo="none">  timestamp : Time.t;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput></programlisting>

    <para>The code for <literal moreinfo="none">host_info_to_string</literal>
    would continue to compile without change. In this particular case, it's
    pretty clear that you might want to update <literal
    moreinfo="none">host_info_to_string</literal> in order to include <literal
    moreinfo="none">os_release</literal>, and it would be nice if the type
    system would give you a warning about the change.</para>

    <para>Happily, OCaml does offer an optional warning for missing fields in
    a record pattern. With that warning turned on (which you can do in the
    toplevel by typing <literal moreinfo="none">#warnings "+9"</literal>), the
    compiler will warn about the missing field:<indexterm class="singular">
        <primary>errors</primary>

        <secondary>compiler warnings</secondary>
      </indexterm><indexterm class="singular">
        <primary>code compilers</primary>

        <secondary>warning enable/disable</secondary>
      </indexterm><indexterm class="singular">
        <primary>errors</primary>

        <secondary>missing field warnings</secondary>
      </indexterm><indexterm class="singular">
        <primary>records</primary>

        <secondary>missing field warnings</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 7)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">#warnings "+9";;</userinput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">let host_info_to_string { hostname = h; os_name = os;</userinput>
<userinput moreinfo="none">                            cpu_arch = c; timestamp = ts;</userinput>
<userinput moreinfo="none">                          } =</userinput>
<userinput moreinfo="none">    sprintf "%s (%s / %s, on %s)" h os c (Time.to_sec_string ts);;</userinput>
<computeroutput moreinfo="none">Characters 24-139:</computeroutput>
<computeroutput moreinfo="none">Warning 9: the following labels are not bound in this record pattern:</computeroutput>
<computeroutput moreinfo="none">os_release</computeroutput>
<computeroutput moreinfo="none">Either bind these labels explicitly or add '; _' to the pattern.</computeroutput>
<computeroutput moreinfo="none">val host_info_to_string : host_info -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>We can disable the warning for a given pattern by explicitly
    acknowledging that we are ignoring extra fields. This is done by adding an
    underscore to the pattern:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 8)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let host_info_to_string { hostname = h; os_name = os;</userinput>
<userinput moreinfo="none">                            cpu_arch = c; timestamp = ts; _</userinput>
<userinput moreinfo="none">                          } =</userinput>
<userinput moreinfo="none">    sprintf "%s (%s / %s, on %s)" h os c (Time.to_sec_string ts);;</userinput>
<computeroutput moreinfo="none">val host_info_to_string : host_info -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>It's a good idea to enable the warning for incomplete record matches
    and to explicitly disable it with an <literal moreinfo="none">_</literal>
    where necessary.</para>

    <note>
      <title>Compiler Warnings</title>

      <para>The OCaml compiler is packed full of useful warnings that can be
      enabled and disabled separately. These are documented in the compiler
      itself, so we could have found out about warning 9 as follows:</para>

      <para role="sourcecode">Terminal: <ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/records/warn_help.out">records/warn_help.out</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocaml -warn-help | egrep '\b9\b'</userinput>
<computeroutput moreinfo="none">  9 Missing fields in a record pattern.</computeroutput>
<computeroutput moreinfo="none">  R Synonym for warning 9.</computeroutput></programlisting>

      <para>You should think of OCaml's warnings as a powerful set of optional
      static analysis tools and should eagerly enable them in your build
      environment. You don't typically enable all warnings, but the defaults
      that ship with the compiler are pretty good.</para>

      <para>The warnings used for building the examples in this book are
      specified with the following flag: <literal moreinfo="none">-w
      @A-4-33-41-42-43-34-44</literal>.</para>

      <para>The syntax of this can be found by running <literal
      moreinfo="none">ocaml -help</literal>, but this particular invocation
      turns on all warnings as errors, disabling only the numbers listed
      explicitly after the <literal moreinfo="none">A</literal>.</para>

      <para>Treating warnings as errors (i.e., making OCaml fail to compile
      any code that triggers a warning) is good practice, since without it,
      warnings are too often ignored during development. When preparing a
      package for distribution, however, this is a bad idea, since the list of
      warnings may grow from one release of the compiler to another, and so
      this may lead your package to fail to compile on newer compiler
      releases.</para>
    </note>
  </sect1>

  <sect1 id="field-punning">
    <title>Field Punning</title>

    <para>When the name of a variable coincides with the name of a record
    field, OCaml provides some handy syntactic shortcuts. For example, the
    pattern in the following function binds all of the fields in question to
    variables of the same name. This is called <emphasis>field
    punning</emphasis>:<indexterm class="singular">
        <primary>fields</primary>

        <secondary>field punning</secondary>
      </indexterm><indexterm class="singular">
        <primary>records</primary>

        <secondary>field punning in</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 9)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let host_info_to_string { hostname; os_name; cpu_arch; timestamp; _ } =</userinput>
<userinput moreinfo="none">     sprintf "%s (%s / %s) &lt;%s&gt;" hostname os_name cpu_arch</userinput>
<userinput moreinfo="none">       (Time.to_string timestamp);;</userinput>
<computeroutput moreinfo="none">val host_info_to_string : host_info -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>Field punning can also be used to construct a record. Consider the
    following code for generating a <literal
    moreinfo="none">host_info</literal> record:<indexterm class="singular">
        <primary>records</primary>

        <secondary>construction of</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 10)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let my_host =</userinput>
<userinput moreinfo="none">    let sh cmd = Shell.sh_one_exn cmd in</userinput>
<userinput moreinfo="none">    let hostname   = sh "hostname" in</userinput>
<userinput moreinfo="none">    let os_name    = sh "uname -s" in</userinput>
<userinput moreinfo="none">    let cpu_arch   = sh "uname -p" in</userinput>
<userinput moreinfo="none">    let os_release = sh "uname -r" in</userinput>
<userinput moreinfo="none">    let timestamp  = Time.now () in</userinput>
<userinput moreinfo="none">    { hostname; os_name; cpu_arch; os_release; timestamp };;</userinput>
<computeroutput moreinfo="none">val my_host : host_info =</computeroutput>
<computeroutput moreinfo="none">  {hostname = "ocaml-www1"; os_name = "Linux"; cpu_arch = "unknown";</computeroutput>
<computeroutput moreinfo="none">   os_release = "3.2.0-1-amd64";</computeroutput>
<computeroutput moreinfo="none">   timestamp = 2013-08-18 14:50:55.287342+01:00}</computeroutput></programlisting>

    <para>In the preceding code, we defined variables corresponding to the
    record fields first, and then the record declaration itself simply listed
    the fields that needed to be included.</para>

    <para>You can take advantage of both field punning and label punning when
    writing a function for constructing a record from labeled
    arguments:<indexterm class="singular">
        <primary>label punning</primary>
      </indexterm><indexterm class="singular">
        <primary>records</primary>

        <secondary>label punning in</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 11)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let create_host_info ~hostname ~os_name ~cpu_arch ~os_release =</userinput>
<userinput moreinfo="none">    { os_name; cpu_arch; os_release;</userinput>
<userinput moreinfo="none">      hostname = String.lowercase hostname;</userinput>
<userinput moreinfo="none">      timestamp = Time.now () };;</userinput>
<computeroutput moreinfo="none">val create_host_info :</computeroutput>
<computeroutput moreinfo="none">  hostname:string -&gt;</computeroutput>
<computeroutput moreinfo="none">  os_name:string -&gt; cpu_arch:string -&gt; os_release:string -&gt; host_info = &lt;fun&gt;</computeroutput></programlisting>

    <para>This is considerably more concise than what you would get without
    punning:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 12)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let create_host_info</userinput>
<userinput moreinfo="none">    ~hostname:hostname ~os_name:os_name</userinput>
<userinput moreinfo="none">    ~cpu_arch:cpu_arch ~os_release:os_release =</userinput>
<userinput moreinfo="none">    { os_name = os_name;</userinput>
<userinput moreinfo="none">      cpu_arch = cpu_arch;</userinput>
<userinput moreinfo="none">      os_release = os_release;</userinput>
<userinput moreinfo="none">      hostname = String.lowercase hostname;</userinput>
<userinput moreinfo="none">      timestamp = Time.now () };;</userinput>
<computeroutput moreinfo="none">val create_host_info :</computeroutput>
<computeroutput moreinfo="none">  hostname:string -&gt;</computeroutput>
<computeroutput moreinfo="none">  os_name:string -&gt; cpu_arch:string -&gt; os_release:string -&gt; host_info = &lt;fun&gt;</computeroutput></programlisting>

    <para>Together, labeled arguments, field names, and field and label
    punning encourage a style where you propagate the same names throughout
    your code-base. This is generally good practice, since it encourages
    consistent naming, which makes it easier to navigate the source.</para>
  </sect1>

  <sect1 id="reusing-field-names">
    <title>Reusing Field Names</title>

    <para>Defining records with the same field names can be problematic. Let's
    consider a simple example: building types to represent the protocol used
    for a logging server.<indexterm class="startofrange" id="FNreus">
        <primary>fields</primary>

        <secondary>reusing field names</secondary>
      </indexterm><indexterm class="startofrange" id="RECreusfn">
        <primary>records</primary>

        <secondary>reusing field names</secondary>
      </indexterm></para>

    <para>We'll describe three message types: <literal
    moreinfo="none">log_entry</literal>, <literal
    moreinfo="none">heartbeat</literal>, and <literal
    moreinfo="none">logon</literal>. The <literal
    moreinfo="none">log_entry</literal> message is used to deliver a log entry
    to the server; the <literal moreinfo="none">logon</literal> message is
    sent to initiate a connection, and includes the identity of the user
    connecting and credentials used for authentication; and the <literal
    moreinfo="none">heartbeat</literal> message is periodically sent by the
    client to demonstrate to the server that the client is alive and
    connected. All of these messages include a session ID and the time the
    message was generated:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 13)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">type log_entry =</userinput>
<userinput moreinfo="none">    { session_id: string;</userinput>
<userinput moreinfo="none">      time: Time.t;</userinput>
<userinput moreinfo="none">      important: bool;</userinput>
<userinput moreinfo="none">      message: string;</userinput>
<userinput moreinfo="none">    }</userinput>
<userinput moreinfo="none">  type heartbeat =</userinput>
<userinput moreinfo="none">    { session_id: string;</userinput>
<userinput moreinfo="none">      time: Time.t;</userinput>
<userinput moreinfo="none">      status_message: string;</userinput>
<userinput moreinfo="none">    }</userinput>
<userinput moreinfo="none">  type logon =</userinput>
<userinput moreinfo="none">    { session_id: string;</userinput>
<userinput moreinfo="none">      time: Time.t;</userinput>
<userinput moreinfo="none">      user: string;</userinput>
<userinput moreinfo="none">      credentials: string;</userinput>
<userinput moreinfo="none">    }</userinput>
<userinput moreinfo="none">;;</userinput>
<computeroutput moreinfo="none">type log_entry = {</computeroutput>
<computeroutput moreinfo="none">  session_id : string;</computeroutput>
<computeroutput moreinfo="none">  time : Time.t;</computeroutput>
<computeroutput moreinfo="none">  important : bool;</computeroutput>
<computeroutput moreinfo="none">  message : string;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput>
<computeroutput moreinfo="none">type heartbeat = {</computeroutput>
<computeroutput moreinfo="none">  session_id : string;</computeroutput>
<computeroutput moreinfo="none">  time : Time.t;</computeroutput>
<computeroutput moreinfo="none">  status_message : string;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput>
<computeroutput moreinfo="none">type logon = {</computeroutput>
<computeroutput moreinfo="none">  session_id : string;</computeroutput>
<computeroutput moreinfo="none">  time : Time.t;</computeroutput>
<computeroutput moreinfo="none">  user : string;</computeroutput>
<computeroutput moreinfo="none">  credentials : string;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput></programlisting>

    <para>Reusing field names can lead to some ambiguity. For example, if we
    want to write a function to grab the session_id from a record, what type
    will it have?</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 14)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let get_session_id t = t.session_id;;</userinput>
<computeroutput moreinfo="none">val get_session_id : logon -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>In this case, OCaml just picks the most recent definition of that
    record field. We can force OCaml to assume we're dealing with a different
    type (say, a <literal moreinfo="none">heartbeat</literal>) using a type
    annotation:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 15)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let get_heartbeat_session_id (t:heartbeat) = t.session_id;;</userinput>
<computeroutput moreinfo="none">val get_heartbeat_session_id : heartbeat -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>While it's possible to resolve ambiguous field names using type
    annotations, the ambiguity can be a bit confusing. Consider the following
    functions for grabbing the session ID and status from a heartbeat:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 16)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let status_and_session t = (t.status_message, t.session_id);;</userinput>
<computeroutput moreinfo="none">val status_and_session : heartbeat -&gt; string * string = &lt;fun&gt;</computeroutput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">let session_and_status t = (t.session_id, t.status_message);;</userinput>
<computeroutput moreinfo="none">Characters 44-58:</computeroutput>
<computeroutput moreinfo="none">Error: The record type logon has no field status_message</computeroutput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">let session_and_status (t:heartbeat) = (t.session_id, t.status_message);;</userinput>
<computeroutput moreinfo="none">val session_and_status : heartbeat -&gt; string * string = &lt;fun&gt;</computeroutput></programlisting>

    <para>Why did the first definition succeed without a type annotation and
    the second one fail? The difference is that in the first case, the
    type-checker considered the <literal
    moreinfo="none">status_message</literal> field first and thus concluded
    that the record was a <literal moreinfo="none">heartbeat</literal>. When
    the order was switched, the <literal moreinfo="none">session_id</literal>
    field was considered first, and so that drove the type to be considered to
    be a <literal moreinfo="none">logon</literal>, at which point <literal
    moreinfo="none">t.status_message</literal> no longer made sense.</para>

    <para>We can avoid this ambiguity altogether, either by using
    nonoverlapping field names or, more generally, by minting a module for
    each type. Packing types into modules is a broadly useful idiom (and one
    used quite extensively by Core), providing for each type a namespace
    within which to put related values. When using this style, it is standard
    practice to name the type associated with the module <literal
    moreinfo="none">t</literal>. Using this style we would write:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 17)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">module Log_entry = struct</userinput>
<userinput moreinfo="none">    type t =</userinput>
<userinput moreinfo="none">      { session_id: string;</userinput>
<userinput moreinfo="none">        time: Time.t;</userinput>
<userinput moreinfo="none">        important: bool;</userinput>
<userinput moreinfo="none">        message: string;</userinput>
<userinput moreinfo="none">      }</userinput>
<userinput moreinfo="none">  end</userinput>
<userinput moreinfo="none">  module Heartbeat = struct</userinput>
<userinput moreinfo="none">    type t =</userinput>
<userinput moreinfo="none">      { session_id: string;</userinput>
<userinput moreinfo="none">        time: Time.t;</userinput>
<userinput moreinfo="none">        status_message: string;</userinput>
<userinput moreinfo="none">      }</userinput>
<userinput moreinfo="none">  end</userinput>
<userinput moreinfo="none">  module Logon = struct</userinput>
<userinput moreinfo="none">    type t =</userinput>
<userinput moreinfo="none">      { session_id: string;</userinput>
<userinput moreinfo="none">        time: Time.t;</userinput>
<userinput moreinfo="none">        user: string;</userinput>
<userinput moreinfo="none">        credentials: string;</userinput>
<userinput moreinfo="none">      }</userinput>
<userinput moreinfo="none">  end;;</userinput>
<computeroutput moreinfo="none">module Log_entry :</computeroutput>
<computeroutput moreinfo="none">  sig</computeroutput>
<computeroutput moreinfo="none">    type t = {</computeroutput>
<computeroutput moreinfo="none">      session_id : string;</computeroutput>
<computeroutput moreinfo="none">      time : Time.t;</computeroutput>
<computeroutput moreinfo="none">      important : bool;</computeroutput>
<computeroutput moreinfo="none">      message : string;</computeroutput>
<computeroutput moreinfo="none">    }</computeroutput>
<computeroutput moreinfo="none">  end</computeroutput>
<computeroutput moreinfo="none">module Heartbeat :</computeroutput>
<computeroutput moreinfo="none">  sig</computeroutput>
<computeroutput moreinfo="none">    type t = { session_id : string; time : Time.t; status_message : string; }</computeroutput>
<computeroutput moreinfo="none">  end</computeroutput>
<computeroutput moreinfo="none">module Logon :</computeroutput>
<computeroutput moreinfo="none">  sig</computeroutput>
<computeroutput moreinfo="none">    type t = {</computeroutput>
<computeroutput moreinfo="none">      session_id : string;</computeroutput>
<computeroutput moreinfo="none">      time : Time.t;</computeroutput>
<computeroutput moreinfo="none">      user : string;</computeroutput>
<computeroutput moreinfo="none">      credentials : string;</computeroutput>
<computeroutput moreinfo="none">    }</computeroutput>
<computeroutput moreinfo="none">  end</computeroutput></programlisting>

    <para>Now, our log-entry-creation function can be rendered as
    follows:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 18)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let create_log_entry ~session_id ~important message =</userinput>
<userinput moreinfo="none">     { Log_entry.time = Time.now (); Log_entry.session_id;</userinput>
<userinput moreinfo="none">       Log_entry.important; Log_entry.message }</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val create_log_entry :</computeroutput>
<computeroutput moreinfo="none">  session_id:string -&gt; important:bool -&gt; string -&gt; Log_entry.t = &lt;fun&gt;</computeroutput></programlisting>

    <para>The module name <literal moreinfo="none">Log_entry</literal> is
    required to qualify the fields, because this function is outside of the
    <literal moreinfo="none">Log_entry</literal> module where the record was
    defined. OCaml only requires the module qualification for one record
    field, however, so we can write this more concisely. Note that we are
    allowed to insert whitespace between the module-path and the field
    name:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 19)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let create_log_entry ~session_id ~important message =</userinput>
<userinput moreinfo="none">     { Log_entry.</userinput>
<userinput moreinfo="none">       time = Time.now (); session_id; important; message }</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val create_log_entry :</computeroutput>
<computeroutput moreinfo="none">  session_id:string -&gt; important:bool -&gt; string -&gt; Log_entry.t = &lt;fun&gt;</computeroutput></programlisting>

    <para>This is not restricted to constructing a record; we can use the same
    trick when pattern matching:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 20)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let message_to_string { Log_entry.important; message; _ } =</userinput>
<userinput moreinfo="none">    if important then String.uppercase message else message</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val message_to_string : Log_entry.t -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>When using dot-notation for accessing record fields, we can qualify
    the field by the module directly:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 21)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let is_important t = t.Log_entry.important;;</userinput>
<computeroutput moreinfo="none">val is_important : Log_entry.t -&gt; bool = &lt;fun&gt;</computeroutput></programlisting>

    <para>The syntax here is a little surprising when you first encounter it.
    The thing to keep in mind is that the dot is being used in two ways: the
    first dot is a record field access, with everything to the right of the
    dot being interpreted as a field name; the second dot is accessing the
    contents of a module, referring to the record field <literal
    moreinfo="none">important</literal> from within the module <literal
    moreinfo="none">Log_entry</literal>. The fact that <literal
    moreinfo="none">Log_entry</literal> is capitalized and so can't be a field
    name is what disambiguates the two uses.</para>

    <para>For functions defined within the module where a given record is
    defined, the module qualification goes away entirely.<indexterm
    class="endofrange" startref="RECreusfn"/><indexterm class="endofrange"
    startref="FNreus"/></para>
  </sect1>

  <sect1 id="functional-updates">
    <title>Functional Updates</title>

    <para>Fairly often, you will find yourself wanting to create a new record
    that differs from an existing record in only a subset of the fields. For
    example, imagine our logging server had a record type for representing the
    state of a given client, including when the last heartbeat was received
    from that client. The following defines a type for representing this
    information, as well as a function for updating the client information
    when a new heartbeat arrives:<indexterm class="singular">
        <primary>functional updates</primary>
      </indexterm><indexterm class="singular">
        <primary>records</primary>

        <secondary>functional updates to</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 22)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">type client_info =</userinput>
<userinput moreinfo="none">   { addr: Unix.Inet_addr.t;</userinput>
<userinput moreinfo="none">     port: int;</userinput>
<userinput moreinfo="none">     user: string;</userinput>
<userinput moreinfo="none">     credentials: string;</userinput>
<userinput moreinfo="none">     last_heartbeat_time: Time.t;</userinput>
<userinput moreinfo="none">   };;</userinput>
<computeroutput moreinfo="none">type client_info = {</computeroutput>
<computeroutput moreinfo="none">  addr : UnixLabels.inet_addr;</computeroutput>
<computeroutput moreinfo="none">  port : int;</computeroutput>
<computeroutput moreinfo="none">  user : string;</computeroutput>
<computeroutput moreinfo="none">  credentials : string;</computeroutput>
<computeroutput moreinfo="none">  last_heartbeat_time : Time.t;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">let register_heartbeat t hb =</userinput>
<userinput moreinfo="none">      { addr = t.addr;</userinput>
<userinput moreinfo="none">        port = t.port;</userinput>
<userinput moreinfo="none">        user = t.user;</userinput>
<userinput moreinfo="none">        credentials = t.credentials;</userinput>
<userinput moreinfo="none">        last_heartbeat_time = hb.Heartbeat.time;</userinput>
<userinput moreinfo="none">      };;</userinput>
<computeroutput moreinfo="none">val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; client_info = &lt;fun&gt;</computeroutput></programlisting>

    <para>This is fairly verbose, given that there's only one field that we
    actually want to change, and all the others are just being copied over
    from <literal moreinfo="none">t</literal>. We can use OCaml's
    <emphasis>functional update</emphasis> syntax to do this more tersely. The
    syntax of a functional update is as follows:</para>

    <para role="sourcecode">Syntax: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/functional_update.syntax">records/functional_update.syntax</ulink></para>

    <programlisting format="linespecific" language="">{ &lt;record&gt; with &lt;field&gt; = &lt;value&gt;;
                &lt;field&gt; = &lt;value&gt;;
                ...
}</programlisting>

    <para>The purpose of the functional update is to create a new record based
    on an existing one, with a set of field changes layered on top.</para>

    <para>Given this, we can rewrite <literal
    moreinfo="none">register_heartbeat</literal> more concisely:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 23)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let register_heartbeat t hb =</userinput>
<userinput moreinfo="none">    { t with last_heartbeat_time = hb.Heartbeat.time };;</userinput>
<computeroutput moreinfo="none">val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; client_info = &lt;fun&gt;</computeroutput></programlisting>

    <para>Functional updates make your code independent of the identity of the
    fields in the record that are not changing. This is often what you want,
    but it has downsides as well. In particular, if you change the definition
    of your record to have more fields, the type system will not prompt you to
    reconsider whether your code needs to change to accommodate the new
    fields. Consider what happens if we decided to add a field for the status
    message received on the last heartbeat:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 24)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">type client_info =</userinput>
<userinput moreinfo="none">   { addr: Unix.Inet_addr.t;</userinput>
<userinput moreinfo="none">     port: int;</userinput>
<userinput moreinfo="none">     user: string;</userinput>
<userinput moreinfo="none">     credentials: string;</userinput>
<userinput moreinfo="none">     last_heartbeat_time: Time.t;</userinput>
<userinput moreinfo="none">     last_heartbeat_status: string;</userinput>
<userinput moreinfo="none">   };;</userinput>
<computeroutput moreinfo="none">type client_info = {</computeroutput>
<computeroutput moreinfo="none">  addr : UnixLabels.inet_addr;</computeroutput>
<computeroutput moreinfo="none">  port : int;</computeroutput>
<computeroutput moreinfo="none">  user : string;</computeroutput>
<computeroutput moreinfo="none">  credentials : string;</computeroutput>
<computeroutput moreinfo="none">  last_heartbeat_time : Time.t;</computeroutput>
<computeroutput moreinfo="none">  last_heartbeat_status : string;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput></programlisting>

    <para>The original implementation of <literal
    moreinfo="none">register_heartbeat</literal> would now be invalid, and
    thus the compiler would effectively warn us to think about how to handle
    this new field. But the version using a functional update continues to
    compile as is, even though it incorrectly ignores the new field. The
    correct thing to do would be to update the code as follows:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 25)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let register_heartbeat t hb =</userinput>
<userinput moreinfo="none">    { t with last_heartbeat_time   = hb.Heartbeat.time;</userinput>
<userinput moreinfo="none">             last_heartbeat_status = hb.Heartbeat.status_message;</userinput>
<userinput moreinfo="none">    };;</userinput>
<computeroutput moreinfo="none">val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; client_info = &lt;fun&gt;</computeroutput></programlisting>
  </sect1>

  <sect1 id="mutable-fields">
    <title>Mutable Fields</title>

    <para>Like most OCaml values, records are immutable by default. You can,
    however, declare individual record fields as mutable. In the following
    code, we've made the last two fields of <literal
    moreinfo="none">client_info</literal> mutable:<indexterm class="singular">
        <primary>mutable record fields</primary>
      </indexterm><indexterm class="singular">
        <primary>records</primary>

        <secondary>mutable fields in</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 26)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">type client_info =</userinput>
<userinput moreinfo="none">   { addr: Unix.Inet_addr.t;</userinput>
<userinput moreinfo="none">     port: int;</userinput>
<userinput moreinfo="none">     user: string;</userinput>
<userinput moreinfo="none">     credentials: string;</userinput>
<userinput moreinfo="none">     mutable last_heartbeat_time: Time.t;</userinput>
<userinput moreinfo="none">     mutable last_heartbeat_status: string;</userinput>
<userinput moreinfo="none">   };;</userinput>
<computeroutput moreinfo="none">type client_info = {</computeroutput>
<computeroutput moreinfo="none">  addr : UnixLabels.inet_addr;</computeroutput>
<computeroutput moreinfo="none">  port : int;</computeroutput>
<computeroutput moreinfo="none">  user : string;</computeroutput>
<computeroutput moreinfo="none">  credentials : string;</computeroutput>
<computeroutput moreinfo="none">  mutable last_heartbeat_time : Time.t;</computeroutput>
<computeroutput moreinfo="none">  mutable last_heartbeat_status : string;</computeroutput>
<computeroutput moreinfo="none">}</computeroutput></programlisting>

    <para>The <literal moreinfo="none">&lt;-</literal> operator is used
    setting a mutable field. The side-effecting version of <literal
    moreinfo="none">register_heartbeat</literal> would be written as
    follows:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 27)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let register_heartbeat t hb =</userinput>
<userinput moreinfo="none">    t.last_heartbeat_time   &lt;- hb.Heartbeat.time;</userinput>
<userinput moreinfo="none">    t.last_heartbeat_status &lt;- hb.Heartbeat.status_message</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; unit = &lt;fun&gt;</computeroutput></programlisting>

    <para>Note that mutable assignment, and thus the <literal
    moreinfo="none">&lt;-</literal> operator, is not needed for initialization
    because all fields of a record, including mutable ones, are specified when
    the record is created.</para>

    <para>OCaml's policy of immutable-by-default is a good one, but imperative
    programming is an important part of programming in OCaml. We'll discuss
    more about how (and when) to use OCaml's imperative features in <xref
    linkend="imperative-programming"/>.</para>
  </sect1>

  <sect1 id="first-class-fields">
    <title>First-Class Fields</title>

    <para>Consider the following function for extracting the usernames from a
    list of <literal moreinfo="none">Logon</literal> messages:<indexterm
        class="startofrange" id="firstclass">
        <primary>first-class fields</primary>
      </indexterm><indexterm class="startofrange" id="RECfirstclass">
        <primary>records</primary>

        <secondary>first-class fields in</secondary>
      </indexterm></para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 28)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let get_users logons =</userinput>
<userinput moreinfo="none">     List.dedup (List.map logons ~f:(fun x -&gt; x.Logon.user));;</userinput>
<computeroutput moreinfo="none">val get_users : Logon.t list -&gt; string list = &lt;fun&gt;</computeroutput></programlisting>

    <para>Here, we wrote a small function <literal moreinfo="none">(fun x
    -&gt; x.Logon.user)</literal> to access the <literal
    moreinfo="none">user</literal> field. This kind of accessor function is a
    common-enough pattern that it would be convenient to generate them
    automatically. The <literal moreinfo="none">fieldslib</literal> syntax
    extension that ships with <literal moreinfo="none">Core</literal> does
    just that.<indexterm class="singular">
        <primary>functions</primary>

        <secondary>acessor functions</secondary>
      </indexterm><indexterm class="singular">
        <primary>acessor functions</primary>
      </indexterm></para>

    <para>The <literal moreinfo="none">with fields</literal> annotation at the
    end of the declaration of a record type will cause the extension to be
    applied to a given type declaration. So, for example, we could have
    defined <literal moreinfo="none">Logon</literal> as follows:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main-29.rawscript">records/main-29.rawscript</ulink></para>

    <programlisting format="linespecific" language="ocaml"><userinput
        moreinfo="none"># module Logon = struct
    type t =
      { session_id: string;
        time: Time.t;
        user: string;
        credentials: string;
      }
    with fields
  end;;</userinput>
<computeroutput moreinfo="none">module Logon :
  sig
    type t = {
      session_id : string;
      time : Time.t;
      user : string;
      credentials : string;
    }
    val credentials : t -&gt; string
    val user : t -&gt; string
    val time : t -&gt; Time.t
    val session_id : t -&gt; string
    module Fields :
      sig
        val names : string list
        val credentials :
          ([&lt; `Read | `Set_and_create ], t, string) Field.t_with_perm
        val user :
          ([&lt; `Read | `Set_and_create ], t, string) Field.t_with_perm
        val time :
          ([&lt; `Read | `Set_and_create ], t, Time.t) Field.t_with_perm
        val session_id :
          ([&lt; `Read | `Set_and_create ], t, string) Field.t_with_perm

        [ ... many definitions omitted ... ]

      end
  end</computeroutput></programlisting>

    <para>Note that this will generate <emphasis>a lot</emphasis> of output
    because <literal moreinfo="none">fieldslib</literal> generates a large
    collection of helper functions for working with record fields. We'll only
    discuss a few of these; you can learn about the remainder from the
    documentation that comes with <literal
    moreinfo="none">fieldslib</literal>.</para>

    <para>One of the functions we obtain is <literal
    moreinfo="none">Logon.user</literal>, which we can use to extract the user
    field from a logon message:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 30)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let get_users logons = List.dedup (List.map logons ~f:Logon.user);;</userinput>
<computeroutput moreinfo="none">val get_users : Logon.t list -&gt; string list = &lt;fun&gt;</computeroutput></programlisting>

    <para>In addition to generating field accessor functions, <literal
    moreinfo="none">fieldslib</literal> also creates a submodule called
    <literal moreinfo="none">Fields</literal> that contains a first-class
    representative of each field, in the form of a value of type <literal
    moreinfo="none">Field.t</literal>. The <literal
    moreinfo="none">Field</literal> module provides the following
    functions:<indexterm class="singular">
        <primary>Field module</primary>

        <secondary>Field.setter</secondary>
      </indexterm><indexterm class="singular">
        <primary>Field module</primary>

        <secondary>Field.fset</secondary>
      </indexterm><indexterm class="singular">
        <primary>Field module</primary>

        <secondary>Field.get</secondary>
      </indexterm><indexterm class="singular">
        <primary>Field module</primary>

        <secondary>Field.name</secondary>
      </indexterm><indexterm class="singular">
        <primary>fieldslib</primary>
      </indexterm></para>

    <variablelist>
      <varlistentry>
        <term><literal moreinfo="none">Field.name</literal></term>

        <listitem>
          <para>Returns the name of a field</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal moreinfo="none">Field.get</literal></term>

        <listitem>
          <para>Returns the content of a field</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal moreinfo="none">Field.fset</literal></term>

        <listitem>
          <para>Does a functional update of a field</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal moreinfo="none">Field.setter</literal></term>

        <listitem>
          <para>Returns <literal moreinfo="none">None</literal> if the field
          is not mutable or <literal moreinfo="none">Some f</literal> if it
          is, where <literal moreinfo="none">f</literal> is a function for
          mutating that field</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>A <literal moreinfo="none">Field.t</literal> has two type
    parameters: the first for the type of the record, and the second for the
    type of the field in question. Thus, the type of <literal
    moreinfo="none">Logon.Fields.session_id</literal> is <literal
    moreinfo="none">(Logon.t, string) Field.t</literal>, whereas the type of
    <literal moreinfo="none">Logon.Fields.time</literal> is <literal
    moreinfo="none">(Logon.t, Time.t) Field.t</literal>. Thus, if you call
    <literal moreinfo="none">Field.get</literal> on <literal
    moreinfo="none">Logon.Fields.user</literal>, you'll get a function for
    extracting the <literal moreinfo="none">user</literal> field from a
    <literal moreinfo="none">Logon.t</literal>:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 31)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">Field.get Logon.Fields.user;;</userinput>
<computeroutput moreinfo="none">- : Logon.t -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>Thus, first parameter of the <literal
    moreinfo="none">Field.t</literal> corresponds to the record you pass to
    <literal moreinfo="none">get</literal>, and the second argument
    corresponds to the value contained in the field, which is also the return
    type of <literal moreinfo="none">get</literal>.</para>

    <para>The type of <literal moreinfo="none">Field.get</literal> is a little
    more complicated than you might naively expect from the preceding
    one:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 32)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">Field.get;;</userinput>
<computeroutput moreinfo="none">- : ('b, 'r, 'a) Field.t_with_perm -&gt; 'r -&gt; 'a = &lt;fun&gt;</computeroutput></programlisting>

    <para>The type is <literal moreinfo="none">Field.t_with_perm</literal>
    rather than <literal moreinfo="none">Field.t</literal> because fields have
    a notion of access control that comes up in some special cases where we
    expose the ability to read a field from a record, but not the ability to
    create new records, and so we can't expose functional updates.</para>

    <para>We can use first-class fields to do things like write a generic
    function for displaying a record field:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 33)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let show_field field to_string record =</userinput>
<userinput moreinfo="none">    let name = Field.name field in</userinput>
<userinput moreinfo="none">    let field_string = to_string (Field.get field record) in</userinput>
<userinput moreinfo="none">    name ^ ": " ^ field_string</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val show_field :</computeroutput>
<computeroutput moreinfo="none">  ('a, 'b, 'c) Field.t_with_perm -&gt; ('c -&gt; string) -&gt; 'b -&gt; string = &lt;fun&gt;</computeroutput></programlisting>

    <para>This takes three arguments: the <literal
    moreinfo="none">Field.t</literal>, a function for converting the contents
    of the field in question to a string, and a record from which the field
    can be grabbed.</para>

    <para>Here's an example of <literal moreinfo="none">show_field</literal>
    in action:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 34)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let logon = { Logon.</userinput>
<userinput moreinfo="none">                session_id = "26685";</userinput>
<userinput moreinfo="none">                time = Time.now ();</userinput>
<userinput moreinfo="none">                user = "yminsky";</userinput>
<userinput moreinfo="none">                credentials = "Xy2d9W"; }</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val logon : Logon.t =</computeroutput>
<computeroutput moreinfo="none">  {Logon.session_id = "26685"; time = 2013-08-18 14:51:00.509463+01:00;</computeroutput>
<computeroutput moreinfo="none">   user = "yminsky"; credentials = "Xy2d9W"}</computeroutput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">show_field Logon.Fields.user Fn.id logon;;</userinput>
<computeroutput moreinfo="none">- : string = "user: yminsky"</computeroutput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">show_field Logon.Fields.time Time.to_string logon;;</userinput>
<computeroutput moreinfo="none">- : string = "time: 2013-08-18 14:51:00.509463+01:00"</computeroutput></programlisting>

    <para>As a side note, the preceding example is our first use of the
    <literal moreinfo="none">Fn</literal> module (short for "function"), which
    provides a collection of useful primitives for dealing with functions.
    <literal moreinfo="none">Fn.id</literal> is the identity function.</para>

    <para><literal moreinfo="none">fieldslib</literal> also provides
    higher-level operators, like <literal
    moreinfo="none">Fields.fold</literal> and <literal
    moreinfo="none">Fields.iter</literal>, which let you walk over the fields
    of a record. So, for example, in the case of <literal
    moreinfo="none">Logon.t</literal>, the field iterator has the following
    type:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 35)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">Logon.Fields.iter;;</userinput>
<computeroutput moreinfo="none">- : session_id:(([&lt; `Read | `Set_and_create ], Logon.t, string)</computeroutput>
<computeroutput moreinfo="none">                Field.t_with_perm -&gt; 'a) -&gt;</computeroutput>
<computeroutput moreinfo="none">    time:(([&lt; `Read | `Set_and_create ], Logon.t, Time.t) Field.t_with_perm -&gt;</computeroutput>
<computeroutput moreinfo="none">          'b) -&gt;</computeroutput>
<computeroutput moreinfo="none">    user:(([&lt; `Read | `Set_and_create ], Logon.t, string) Field.t_with_perm -&gt;</computeroutput>
<computeroutput moreinfo="none">          'c) -&gt;</computeroutput>
<computeroutput moreinfo="none">    credentials:(([&lt; `Read | `Set_and_create ], Logon.t, string)</computeroutput>
<computeroutput moreinfo="none">                 Field.t_with_perm -&gt; 'd) -&gt;</computeroutput>
<computeroutput moreinfo="none">    'd</computeroutput>
<computeroutput moreinfo="none">= &lt;fun&gt;</computeroutput></programlisting>

    <para>This is a bit daunting to look at, largely because of the access
    control markers, but the structure is actually pretty simple. Each labeled
    argument is a function that takes a first-class field of the necessary
    type as an argument. Note that <literal moreinfo="none">iter</literal>
    passes each of these callbacks the <literal
    moreinfo="none">Field.t</literal>, not the contents of the specific record
    field. The contents of the field, though, can be looked up using the
    combination of the record and the <literal
    moreinfo="none">Field.t</literal>.</para>

    <para>Now, let's use <literal moreinfo="none">Logon.Fields.iter</literal>
    and <literal moreinfo="none">show_field</literal> to print out all the
    fields of a <literal moreinfo="none">Logon</literal> record:</para>

    <para role="sourcecode">OCaml Utop: <ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/records/main.topscript">records/main.topscript</ulink>
    (part 36)</para>

    <programlisting format="linespecific" language="ocaml"><prompt
        moreinfo="none"># </prompt><userinput moreinfo="none">let print_logon logon =</userinput>
<userinput moreinfo="none">    let print to_string field =</userinput>
<userinput moreinfo="none">      printf "%s\n" (show_field field to_string logon)</userinput>
<userinput moreinfo="none">    in</userinput>
<userinput moreinfo="none">    Logon.Fields.iter</userinput>
<userinput moreinfo="none">      ~session_id:(print Fn.id)</userinput>
<userinput moreinfo="none">      ~time:(print Time.to_string)</userinput>
<userinput moreinfo="none">      ~user:(print Fn.id)</userinput>
<userinput moreinfo="none">      ~credentials:(print Fn.id)</userinput>
<userinput moreinfo="none">  ;;</userinput>
<computeroutput moreinfo="none">val print_logon : Logon.t -&gt; unit = &lt;fun&gt;</computeroutput>
<prompt moreinfo="none"># </prompt><userinput moreinfo="none">print_logon logon;;</userinput>
<computeroutput moreinfo="none">session_id: 26685</computeroutput>
<computeroutput moreinfo="none">time: 2013-08-18 14:51:00.509463+01:00</computeroutput>
<computeroutput moreinfo="none">user: yminsky</computeroutput>
<computeroutput moreinfo="none">credentials: Xy2d9W</computeroutput>
<computeroutput moreinfo="none">- : unit = ()</computeroutput></programlisting>

    <para>One nice side effect of this approach is that it helps you adapt
    your code when the fields of a record change. If you were to add a field
    to <literal moreinfo="none">Logon.t</literal>, the type of <literal
    moreinfo="none">Logon.Fields.iter</literal> would change along with it,
    acquiring a new argument. Any code using <literal
    moreinfo="none">Logon.Fields.iter</literal> won't compile until it's fixed
    to take this new argument into account.</para>

    <para>Field iterators are useful for a variety of record-related tasks,
    from building record validation functions to scaffolding the definition of
    a web form from a record type, and such applications can benefit from the
    guarantee that all fields of the record type in question have been
    considered.<indexterm class="endofrange" startref="firstclass"/><indexterm
    class="endofrange" startref="RECfirstclass"/></para>
  </sect1>
</chapter>
