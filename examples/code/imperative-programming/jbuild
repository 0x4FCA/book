;; autogenerated with rwo-jbuild

(jbuild_version 1)


(alias ((name code) (deps (examples.topscript.stamp))))
(alias ((name sexp) (deps (examples.topscript.sexp))))

(rule
 ((targets (examples.topscript.sexp))
  (deps    (examples.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (examples.topscript.stamp))
  (deps    (examples.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (examples.topscript.corrected as examples.topscript))
  ))))

(alias ((name code) (deps (value_restriction.topscript.stamp))))
(alias ((name sexp) (deps (value_restriction.topscript.sexp))))

(rule
 ((targets (value_restriction.topscript.sexp))
  (deps    (value_restriction.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (value_restriction.topscript.stamp))
  (deps    (value_restriction.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (value_restriction.topscript.corrected as value_restriction.topscript))
  ))))

(alias ((name code) (deps (weak.topscript.stamp))))
(alias ((name sexp) (deps (weak.topscript.sexp))))

(rule
 ((targets (weak.topscript.sexp))
  (deps    (weak.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (weak.topscript.stamp))
  (deps    (weak.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (weak.topscript.corrected as weak.topscript))
  ))))

(alias ((name code) (deps (file2.topscript.stamp))))
(alias ((name sexp) (deps (file2.topscript.sexp))))

(rule
 ((targets (file2.topscript.sexp))
  (deps    (file2.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (file2.topscript.stamp))
  (deps    (file2.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (file2.topscript.corrected as file2.topscript))
  ))))

(alias ((name code) (deps (lazy.topscript.stamp))))
(alias ((name sexp) (deps (lazy.topscript.sexp))))

(rule
 ((targets (lazy.topscript.sexp))
  (deps    (lazy.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (lazy.topscript.stamp))
  (deps    (lazy.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (lazy.topscript.corrected as lazy.topscript))
  ))))

(alias ((name code) (deps (file.topscript.stamp))))
(alias ((name sexp) (deps (file.topscript.sexp))))

(rule
 ((targets (file.topscript.sexp))
  (deps    (file.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (file.topscript.stamp))
  (deps    (file.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (file.topscript.corrected as file.topscript))
  ))))

(alias ((name code) (deps (ref.topscript.stamp))))
(alias ((name sexp) (deps (ref.topscript.sexp))))

(rule
 ((targets (ref.topscript.sexp))
  (deps    (ref.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (ref.topscript.stamp))
  (deps    (ref.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (ref.topscript.corrected as ref.topscript))
  ))))

(alias ((name code) (deps (printf.topscript.stamp))))
(alias ((name sexp) (deps (printf.topscript.sexp))))

(rule
 ((targets (printf.topscript.sexp))
  (deps    (printf.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (printf.topscript.stamp))
  (deps    (printf.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (printf.topscript.corrected as printf.topscript))
  ))))

(alias ((name code) (deps (letrec.topscript.stamp))))
(alias ((name sexp) (deps (letrec.topscript.sexp))))

(rule
 ((targets (letrec.topscript.sexp))
  (deps    (letrec.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (letrec.topscript.stamp))
  (deps    (letrec.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (letrec.topscript.corrected as letrec.topscript))
  ))))

(alias ((name code) (deps (order.topscript.stamp))))
(alias ((name sexp) (deps (order.topscript.sexp))))

(rule
 ((targets (order.topscript.sexp))
  (deps    (order.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (order.topscript.stamp))
  (deps    (order.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (order.topscript.corrected as order.topscript))
  ))))

(alias ((name code) (deps (for.topscript.stamp))))
(alias ((name sexp) (deps (for.topscript.sexp))))

(rule
 ((targets (for.topscript.sexp))
  (deps    (for.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (for.topscript.stamp))
  (deps    (for.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (for.topscript.corrected as for.topscript))
  ))))

(alias ((name code) (deps (fib.topscript.stamp))))
(alias ((name sexp) (deps (fib.topscript.sexp))))

(rule
 ((targets (fib.topscript.sexp))
  (deps    (fib.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (fib.topscript.stamp))
  (deps    (fib.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (fib.topscript.corrected as fib.topscript))
  ))))

(alias ((name code) (deps (memo.topscript.stamp))))
(alias ((name sexp) (deps (memo.topscript.sexp))))

(rule
 ((targets (memo.topscript.sexp))
  (deps    (memo.topscript))
  (action  (with-stdout-to ${@}
    (run ocaml-topexpect -dry-run -sexp -short-paths -verbose ${<})))))

(rule
 ((targets (memo.topscript.stamp))
  (deps    (memo.topscript))
  (action  (progn 
    (run ocaml-topexpect -short-paths -verbose ${<})
    (write-file ${@} "")
    (promote-if (memo.topscript.corrected as memo.topscript))
  ))))
