#silent true;;
#use "topfind";;
#thread;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;

[@@@part "1"];;
open Base;;
let digit_alist =
  [ 0, "zero"; 1, "one"; 2, "two"  ; 3, "three"; 4, "four"
  ; 5, "five"; 6, "six"; 7, "seven"; 8, "eight"; 9, "nine" ]
;;
[%%expect ocaml {|
val digit_alist : (int * string) list =
  [(0, "zero"); (1, "one"); (2, "two"); (3, "three"); (4, "four");
   (5, "five"); (6, "six"); (7, "seven"); (8, "eight"); (9, "nine")]
|}];;

[@@@part "2"];;
List.Assoc.find ~equal:Int.equal digit_alist 6;;
[%%expect ocaml {|- : string option = Some "six"|}];;
List.Assoc.find ~equal:Int.equal digit_alist 22;;
[%%expect ocaml {|- : string option = None|}];;
List.Assoc.add ~equal:Int.equal digit_alist 0 "zilch";;
[%%expect ocaml {|
- : (int, string) Base__List.Assoc.t =
[(0, "zilch"); (1, "one"); (2, "two"); (3, "three"); (4, "four");
 (5, "five"); (6, "six"); (7, "seven"); (8, "eight"); (9, "nine")]
|}];;

[@@@part "mc.1"];;
let digit_map = Map.of_alist_exn (module Int) digit_alist;;
[%%expect ocaml {|val digit_map : (int, string, Int.comparator_witness) Map.t = <abstr>|}];;
Map.find digit_map 3;;
[%%expect ocaml {|- : string option = Some "three"|}];;

[@@@part "mc.2"];;
Map.of_alist_exn;;
[%%expect ocaml {|
- : ('a, 'cmp) Map.comparator -> ('a * 'b) list -> ('a, 'b, 'cmp) Map.t =
<fun>
|}];;


[@@@part "mc.3"];;
let left = Map.of_alist_exn (module String) ["foo",1; "bar",3; "snoo",0];;
[%%expect ocaml {|val left : (string, int, String.comparator_witness) Map.t = <abstr>|}];;
let right = Map.of_alist_exn (module String) ["foo",0; "snoo",0];;
[%%expect ocaml {|val right : (string, int, String.comparator_witness) Map.t = <abstr>|}];;
Map.symmetric_diff ~data_equal:Int.equal left right |> Sequence.to_list;;
[%%expect ocaml {|
- : (string, int) Map.Symmetric_diff_element.t list =
[("bar", `Left 3); ("foo", `Unequal (1, 0))]
|}];;

[@@@part "mc.4"];;
Map.symmetric_diff;;
[%%expect ocaml {|
- : ('k, 'v, 'cmp) Map.t ->
    ('k, 'v, 'cmp) Map.t ->
    data_equal:('v -> 'v -> bool) ->
    ('k, 'v) Map.Symmetric_diff_element.t Sequence.t
= <fun>
|}];;

[@@@part "mc.5"];;
module Reverse = struct
  module T = struct
    type t = string
    let sexp_of_t = String.sexp_of_t
    let t_of_sexp = String.t_of_sexp
    let compare x y = String.compare y x
  end
  include T
  include Comparator.Make(T)
end;;
[%%expect ocaml {|
module Reverse :
  sig
    module T :
      sig
        type t = string
        val sexp_of_t : t -> Sexp.t
        val t_of_sexp : Sexp.t -> t
        val compare : t -> t -> int
      end
    type t = string
    val sexp_of_t : t -> Sexp.t
    val t_of_sexp : Sexp.t -> t
    val compare : t -> t -> int
    type comparator_witness = Base__Comparator.Make(T).comparator_witness
    val comparator : (t, comparator_witness) Comparator.t
  end
|}];;

[@@@part "mc.6"];;
let alist = ["foo", 0; "snoo", 3];;
[%%expect ocaml {|val alist : (string * int) list = [("foo", 0); ("snoo", 3)]|}];;
let ord_map = Map.of_alist_exn (module String) alist;;
[%%expect ocaml {|val ord_map : (string, int, String.comparator_witness) Map.t = <abstr>|}];;
let rev_map = Map.of_alist_exn (module Reverse) alist;;
[%%expect ocaml {|val rev_map : (string, int, Reverse.comparator_witness) Map.t = <abstr>|}];;

[@@@part "mc.7"];;
Map.min_elt ord_map;;
[%%expect ocaml {|- : (string * int) option = Some ("foo", 0)|}];;
Map.min_elt rev_map;;
[%%expect ocaml {|- : (string * int) option = Some ("snoo", 3)|}];;

[@@@part "mc.8"];;
Map.symmetric_diff ord_map rev_map;;
[%%expect{|
Characters 27-34:
Error: This expression has type
         (string, int, Reverse.comparator_witness) Map.t
       but an expression was expected of type
         (string, int, String.comparator_witness) Map.t
       Type Reverse.comparator_witness is not compatible with type
         String.comparator_witness 
|}];;

[@@@part "11"];;
let ord_tree = Map.Using_comparator.to_tree ord_map;;
[%%expect ocaml {|
val ord_tree :
  (string, int, String.comparator_witness) Map.Using_comparator.Tree.t =
  <abstr>
|}];;

[@@@part "12"];;
Map.Using_comparator.Tree.find ~comparator:String.comparator ord_tree "snoo";;
[%%expect ocaml {|- : int option = Some 3|}];;

[@@@part "13"];;
Map.Using_comparator.Tree.find ~comparator:Reverse.comparator ord_tree "snoo";;
[%%expect{|
Characters 62-70:
Error: This expression has type
         (string, int, String.comparator_witness) Map.Using_comparator.Tree.t
       but an expression was expected of type
         (string, int, Reverse.comparator_witness)
         Map.Using_comparator.Tree.t
       Type String.comparator_witness is not compatible with type
         Reverse.comparator_witness 
|}];;

[@@@part "14"];;
Map.Using_comparator.of_alist_exn ~comparator:Comparator.Poly.comparator digit_alist;;
[%%expect ocaml {|- : (int, string, Comparator.Poly.comparator_witness) Map.t = <abstr>|}];;

[@@@part "15"];;
Core_kernel.Map.Poly.of_alist_exn digit_alist;;
[%%expect ocaml {|- : (int, string) Core_kernel.Map.Poly.t = <abstr>|}];;

[@@@part "16"];;
Map.symmetric_diff
  (Core_kernel.Map.Poly.singleton 3 "three")
  (Map.singleton (module Int) 3 "four" )
;;
[%%expect{|
Characters 66-104:
Error: This expression has type (int, string, Int.comparator_witness) Map.t
       but an expression was expected of type
         (int, string, Comparator.Poly.comparator_witness) Map.t
       Type Int.comparator_witness is not compatible with type
         Comparator.Poly.comparator_witness 
|}];;

[@@@part "17"];;
let dedup ~comparator l =
  List.fold l ~init:(Set.empty ~comparator) ~f:Set.add
  |> Set.to_list
;;
[%%expect{|
Characters 58-68:
Error: The function applied to this argument has type
         ('a, 'b) Set.comparator -> ('a, 'b) Set.t
This argument cannot be applied with label ~comparator
|}];;
dedup ~comparator:Int.comparator [8;3;2;3;7;8;10];;
[%%expect{|
Characters 0-5:
Error: Unbound value dedup
|}];;

[@@@part "18"];;
let s1 = Set.of_list (module Int) [1;2];;
[%%expect ocaml {|val s1 : (int, Int.comparator_witness) Set.t = <abstr>|}];;
let s2 = Set.of_list (module Int) [2;1];;
[%%expect ocaml {|val s2 : (int, Int.comparator_witness) Set.t = <abstr>|}];;

[@@@part "19"];;
Set.equal s1 s2;;
[%%expect ocaml {|- : bool = true|}];;

[@@@part "20"];;
s1 = s2;;
[%%expect{|
Characters 0-2:
Error: This expression has type (int, Int.comparator_witness) Set.t
       but an expression was expected of type int
|}];;

[@@@part "21"];;
Poly.(=) (Set.Using_comparator.to_tree s1) (Set.Using_comparator.to_tree s2);;
[%%expect ocaml {|- : bool = false|}];;

[@@@part "22"];;
module Foo_and_bar : sig
  type t = { foo: Set.M(Int).t; bar: string }
  include Comparable.S with type t := t
end = struct
  module T = struct
    type t = { foo: Set.M(Int).t; bar: string } [@@deriving sexp]
    let compare t1 t2 =
      let c = Set.compare_direct t1.foo t2.foo in
      if c <> 0 then c else String.compare t1.bar t2.bar
  end
  include T
  include Comparable.Make(T)
end;;
[%%expect ocaml {|
module Foo_and_bar :
  sig
    type t = { foo : Base.Set.M(Base.Int).t; bar : string; }
    val ( >= ) : t -> t -> bool
    val ( <= ) : t -> t -> bool
    val ( = ) : t -> t -> bool
    val ( > ) : t -> t -> bool
    val ( < ) : t -> t -> bool
    val ( <> ) : t -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val min : t -> t -> t
    val max : t -> t -> t
    val ascending : t -> t -> int
    val descending : t -> t -> int
    val between : t -> low:t -> high:t -> bool
    val clamp_exn : t -> min:t -> max:t -> t
    val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
    type comparator_witness
    val comparator : (t, comparator_witness) Comparator.t
    val validate_lbound : min:t Core_kernel._maybe_bound -> t Validate.check
    val validate_ubound : max:t Core_kernel._maybe_bound -> t Validate.check
    val validate_bound :
      min:t Core_kernel._maybe_bound ->
      max:t Core_kernel._maybe_bound -> t Validate.check
  end
|}];;

[@@@part "23"];;
module Foo_and_bar : sig
  type t = { foo: Set.M(Int).t; bar: string }
  include Comparable.S with type t := t
end = struct
  module T = struct
    type t = { foo: Set.M(Int).t; bar: string } [@@deriving sexp, compare]
  end
  include T
  include Comparable.Make(T)
end;;
[%%expect ocaml {|
module Foo_and_bar :
  sig
    type t = { foo : Base.Set.M(Base.Int).t; bar : string; }
    val ( >= ) : t -> t -> bool
    val ( <= ) : t -> t -> bool
    val ( = ) : t -> t -> bool
    val ( > ) : t -> t -> bool
    val ( < ) : t -> t -> bool
    val ( <> ) : t -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
    val min : t -> t -> t
    val max : t -> t -> t
    val ascending : t -> t -> int
    val descending : t -> t -> int
    val between : t -> low:t -> high:t -> bool
    val clamp_exn : t -> min:t -> max:t -> t
    val clamp : t -> min:t -> max:t -> t Base__.Or_error.t
    type comparator_witness
    val comparator : (t, comparator_witness) Comparator.t
    val validate_lbound : min:t Core_kernel._maybe_bound -> t Validate.check
    val validate_ubound : max:t Core_kernel._maybe_bound -> t Validate.check
    val validate_bound :
      min:t Core_kernel._maybe_bound ->
      max:t Core_kernel._maybe_bound -> t Validate.check
  end
|}];;

[@@@part "24"];;
module Foo_and_bar : sig
  type t = { foo: int; bar: string }
  include Comparable.S with type t := t
end = struct
  module T = struct
    type t = { foo: int; bar: string } [@@deriving sexp]
  end
  include T
  include Comparable.Poly(T)
end;;
[%%expect ocaml {|
module Foo_and_bar :
  sig
    type t = { foo : int; bar : string; }
    val ( >= ) : t -> t -> bool
    val ( <= ) : t -> t -> bool
    val ( = ) : t -> t -> bool
    val ( > ) : t -> t -> bool
    val ( < ) : t -> t -> bool
    val ( <> ) : t -> t -> bool
    val equal : t -> t -> bool
    val compare : t -> t -> int
...
  end
|}];;

[@@@part "25"];;
let table = Hashtbl.create ~hashable:String.hashable ();;
[%%expect{|
Characters 37-52:
Error: The function applied to this argument has type
         ?growth_allowed:bool -> ?size:int -> unit -> ('a, 'b) Hashtbl.t
This argument cannot be applied with label ~hashable
|}];;
Hashtbl.set table ~key:"three" ~data:3;;
[%%expect{|
Characters 12-17:
Error: Unbound value table
|}];;
Hashtbl.find table "three";;
[%%expect{|
Characters 13-18:
Error: Unbound value table
|}];;

[@@@part "26"];;
let table = Hashtbl.create (module String) ();;
[%%expect ocaml {|val table : (string, '_weak1) Hashtbl.t = <abstr>|}];;

[@@@part "27"];;
let table = Hashtbl.Poly.create ();;
[%%expect ocaml {|val table : ('_weak2, '_weak3) Hashtbl.t = <abstr>|}];;

[@@@part "28"];;
let table = Hashtbl.Poly.create ();;
[%%expect ocaml {|val table : ('_weak4, '_weak5) Hashtbl.t = <abstr>|}];;

[@@@part "29"];;
Caml.Hashtbl.hash (List.range 0 9);;
[%%expect ocaml {|- : int = 209331808|}];;
Caml.Hashtbl.hash (List.range 0 10);;
[%%expect ocaml {|- : int = 182325193|}];;
Caml.Hashtbl.hash (List.range 0 11);;
[%%expect ocaml {|- : int = 182325193|}];;
Caml.Hashtbl.hash (List.range 0 100);;
[%%expect ocaml {|- : int = 182325193|}];;

[@@@part "30"];;
module Foo_and_bar : sig
  type t = { foo: int; bar: string }
  include Hashable.S with type t := t
end = struct
  module T = struct
    type t = { foo: int; bar: string } [@@deriving sexp, compare, hash]
  end
  include T
  include Hashable.Make(T)
end;;
[%%expect{|
Characters 233-246:
Error: Unbound module Hashable
Hint: Did you mean Hashtbl or Hashtbl?
|}];;
