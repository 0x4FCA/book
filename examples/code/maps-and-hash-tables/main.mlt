#silent true;;
#use "topfind";;
#thread;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;

[@@@part "1"];;
open Base;;
let digit_alist =
  [ 0, "zero"; 1, "one"; 2, "two"  ; 3, "three"; 4, "four"
  ; 5, "five"; 6, "six"; 7, "seven"; 8, "eight"; 9, "nine" ]
;;
[%%expect ocaml {|
val digit_alist : (int * string) list =
  [(0, "zero"); (1, "one"); (2, "two"); (3, "three"); (4, "four");
   (5, "five"); (6, "six"); (7, "seven"); (8, "eight"); (9, "nine")]
|}];;

[@@@part "2"];;
List.Assoc.find ~equal:Int.equal digit_alist 6;;
[%%expect ocaml {|- : string option = Some "six"|}];;
List.Assoc.find ~equal:Int.equal digit_alist 22;;
[%%expect ocaml {|- : string option = None|}];;
List.Assoc.add ~equal:Int.equal digit_alist 0 "zilch";;
[%%expect ocaml {|
- : (int, string) Base__List.Assoc.t =
[(0, "zilch"); (1, "one"); (2, "two"); (3, "three"); (4, "four");
 (5, "five"); (6, "six"); (7, "seven"); (8, "eight"); (9, "nine")]
|}];;

[@@@part "mc.1"];;
let digit_map = Map.of_alist_exn (module Int) digit_alist;;
[%%expect ocaml {|val digit_map : (int, string, Int.comparator_witness) Map.t = <abstr>|}];;
Map.find digit_map 3;;
[%%expect ocaml {|- : string option = Some "three"|}];;

[@@@part "mc.2"];;
Map.of_alist_exn;;
[%%expect ocaml {|
- : ('a, 'cmp) Map.comparator -> ('a * 'b) list -> ('a, 'b, 'cmp) Map.t =
<fun>
|}];;

[@@@part "mc.2.1"];;
#typeof "Comparator.S";;
[%%expect.nondeterministic ocaml {|
module type Base.Comparator.S =
  sig
    type t
    type comparator_witness
    val comparator : (t, comparator_witness) Base.Comparator.t
  end
|}];;

[@@@part "mc.2.2"];;
module Book = struct

  type t = { title: string; isbn: string }

  let compare t1 t2 =
    let cmp_title = String.compare t1.title t2.title in
    if cmp_title <> 0 then cmp_title
    else String.compare t1.isbn t2.isbn

  let sexp_of_t t : Sexp.t =
    List [ Atom t.title; Atom t.isbn ]
end;;
[%%expect ocaml {|
module Book :
  sig
    type t = { title : string; isbn : string; }
    val compare : t -> t -> int
    val sexp_of_t : t -> Sexp.t
  end
|}];;

[@@@part "mc.2.3"];;
Map.empty (module Book);;
[%%expect{|
Characters 18-22:
Error: Signature mismatch:
       ...
       The value `comparator' is required but not provided
       File "src/comparator.mli", line 21, characters 2-53:
         Expected declaration
       The type `comparator_witness' is required but not provided
       File "src/comparator.mli", line 20, characters 2-25:
         Expected declaration
|}];;

[@@@part "mc.2.4"];;
module Book = struct
  module T = struct

    type t = { title: string; isbn: string }

    let compare t1 t2 =
      let cmp_title = String.compare t1.title t2.title in
      if cmp_title <> 0 then cmp_title
      else String.compare t1.isbn t2.isbn

    let sexp_of_t t : Sexp.t =
      List [ Atom t.title; Atom t.isbn ]

  end
  include T
  include Comparator.Make(T)
end;;
[%%expect ocaml {|
module Book :
  sig
    module T :
      sig
        type t = { title : string; isbn : string; }
        val compare : t -> t -> int
        val sexp_of_t : t -> Sexp.t
      end
    type t = T.t = { title : string; isbn : string; }
    val compare : t -> t -> int
    val sexp_of_t : t -> Sexp.t
    type comparator_witness = Base__Comparator.Make(T).comparator_witness
    val comparator : (t, comparator_witness) Comparator.t
  end
|}];;

[@@@part "mc.2.5"];;
let some_programming_books =
  Set.of_list (module Book)
    [ { title = "Real World OCaml"
      ; isbn = "978-1449323912" }
    ; { title = "Structure and Interpretation of Computer Programs"
      ; isbn = "978-0262510875" }
    ; { title = "The C Programming Language"
      ; isbn = "978-0131101630" } ];;
[%%expect ocaml {|
val some_programming_books : (Book.t, Book.comparator_witness) Set.t =
  <abstr>
|}];;

[@@@part "mc.3"];;
let left = Map.of_alist_exn (module String) ["foo",1; "bar",3; "snoo",0];;
[%%expect ocaml {|val left : (string, int, String.comparator_witness) Map.t = <abstr>|}];;
let right = Map.of_alist_exn (module String) ["foo",0; "snoo",0];;
[%%expect ocaml {|val right : (string, int, String.comparator_witness) Map.t = <abstr>|}];;
Map.symmetric_diff ~data_equal:Int.equal left right |> Sequence.to_list;;
[%%expect ocaml {|
- : (string, int) Map.Symmetric_diff_element.t list =
[("bar", `Left 3); ("foo", `Unequal (1, 0))]
|}];;

[@@@part "mc.4"];;
Map.symmetric_diff;;
[%%expect ocaml {|
- : ('k, 'v, 'cmp) Map.t ->
    ('k, 'v, 'cmp) Map.t ->
    data_equal:('v -> 'v -> bool) ->
    ('k, 'v) Map.Symmetric_diff_element.t Sequence.t
= <fun>
|}];;

[@@@part "mc.5"];;
module Reverse = struct
  module T = struct
    type t = string
    let sexp_of_t = String.sexp_of_t
    let t_of_sexp = String.t_of_sexp
    let compare x y = String.compare y x
  end
  include T
  include Comparator.Make(T)
end;;
[%%expect ocaml {|
module Reverse :
  sig
    module T :
      sig
        type t = string
        val sexp_of_t : t -> Sexp.t
        val t_of_sexp : Sexp.t -> t
        val compare : t -> t -> int
      end
    type t = string
    val sexp_of_t : t -> Sexp.t
    val t_of_sexp : Sexp.t -> t
    val compare : t -> t -> int
    type comparator_witness = Base__Comparator.Make(T).comparator_witness
    val comparator : (t, comparator_witness) Comparator.t
  end
|}];;

[@@@part "mc.6"];;
let alist = ["foo", 0; "snoo", 3];;
[%%expect ocaml {|val alist : (string * int) list = [("foo", 0); ("snoo", 3)]|}];;
let ord_map = Map.of_alist_exn (module String) alist;;
[%%expect ocaml {|val ord_map : (string, int, String.comparator_witness) Map.t = <abstr>|}];;
let rev_map = Map.of_alist_exn (module Reverse) alist;;
[%%expect ocaml {|val rev_map : (string, int, Reverse.comparator_witness) Map.t = <abstr>|}];;

[@@@part "mc.7"];;
Map.min_elt ord_map;;
[%%expect ocaml {|- : (string * int) option = Some ("foo", 0)|}];;
Map.min_elt rev_map;;
[%%expect ocaml {|- : (string * int) option = Some ("snoo", 3)|}];;

[@@@part "mc.8"];;
Map.symmetric_diff ord_map rev_map;;
[%%expect{|
Characters 27-34:
Error: This expression has type
         (string, int, Reverse.comparator_witness) Map.t
       but an expression was expected of type
         (string, int, String.comparator_witness) Map.t
       Type Reverse.comparator_witness is not compatible with type
         String.comparator_witness 
|}];;

[@@@part "11"];;
let ord_tree = Map.Using_comparator.to_tree ord_map;;
[%%expect ocaml {|
val ord_tree :
  (string, int, String.comparator_witness) Map.Using_comparator.Tree.t =
  <abstr>
|}];;

[@@@part "12"];;
Map.Using_comparator.Tree.find ~comparator:String.comparator ord_tree "snoo";;
[%%expect ocaml {|- : int option = Some 3|}];;

[@@@part "13"];;
Map.Using_comparator.Tree.find ~comparator:Reverse.comparator ord_tree "snoo";;
[%%expect{|
Characters 62-70:
Error: This expression has type
         (string, int, String.comparator_witness) Map.Using_comparator.Tree.t
       but an expression was expected of type
         (string, int, Reverse.comparator_witness)
         Map.Using_comparator.Tree.t
       Type String.comparator_witness is not compatible with type
         Reverse.comparator_witness 
|}];;

[@@@part "pc.1"];;
Core_kernel.Map.Poly.of_alist_exn digit_alist;;
[%%expect ocaml {|- : (int, string) Core_kernel.Map.Poly.t = <abstr>|}];;

[@@@part "pc.2"];;
Map.symmetric_diff
  (Core_kernel.Map.Poly.singleton 3 "three")
  (Map.singleton (module Int) 3 "four" )
;;
[%%expect{|
Characters 66-104:
Error: This expression has type (int, string, Int.comparator_witness) Map.t
       but an expression was expected of type
         (int, string, Comparator.Poly.comparator_witness) Map.t
       Type Int.comparator_witness is not compatible with type
         Comparator.Poly.comparator_witness 
|}];;

[@@@part "17"];;
Set.of_list (module Int) [1;2;3] |> Set.to_list;;
[%%expect ocaml {|- : int list = [1; 2; 3]|}];;
Set.union
  (Set.of_list (module Int) [1;2;3;2])
  (Set.of_list (module Int) [3;5;1])
|> Set.to_list;;
[%%expect ocaml {|- : int list = [1; 2; 3; 5]|}];;


[@@@part "ppc.1"];;
let m1 = Map.of_alist_exn (module Int) [1, "one";2, "two"];;
[%%expect ocaml {|val m1 : (int, string, Int.comparator_witness) Map.t = <abstr>|}];;
let m2 = Map.of_alist_exn (module Int) [2, "two";1, "one"];;
[%%expect ocaml {|val m2 : (int, string, Int.comparator_witness) Map.t = <abstr>|}];;

[@@@part "ppc.2"];;
Map.equal String.equal m1 m2;;
[%%expect ocaml {|- : bool = true|}];;

[@@@part "ppc.3"];;
Poly.(m1 = m2);;
[%%expect{|Exception: (Invalid_argument "compare: functional value").|}];;

[@@@part "ppc.4"];;
Poly.((Map.Using_comparator.to_tree m1) =
      (Map.Using_comparator.to_tree m2));;
[%%expect ocaml {|- : bool = false|}];;

[@@@part "ud.1"];;
module Book = struct
  module T = struct
    type t = { title: string; isbn: string }
    [@@deriving compare, sexp_of]
  end
  include T
  include Comparator.Make(T)
end;;
[%%expect ocaml {|
module Book :
  sig
    module T :
      sig
        type t = { title : string; isbn : string; }
        val compare : t -> t -> int
        val sexp_of_t : t -> Sexp.t
      end
    type t = T.t = { title : string; isbn : string; }
    val compare : t -> t -> int
    val sexp_of_t : t -> Sexp.t
    type comparator_witness = Base__Comparator.Make(T).comparator_witness
    val comparator : (t, comparator_witness) Comparator.t
  end
|}];;


[@@@part "adm.1"];;
type string_int_map =
  (string,int,String.comparator_witness) Map.t
[@@deriving sexp];;

[%%expect{|
Characters 63-68:
Error: Unbound value Map.t_of_sexp
Hint: Did you mean m__t_of_sexp?
|}];;

[@@@part "adm.2"];;
type string_int_map =
  int Map.M(String).t
[@@deriving sexp];;
[%%expect ocaml {|
type string_int_map = int Base.Map.M(Base.String).t
val string_int_map_of_sexp : Sexp.t -> string_int_map = <fun>
val sexp_of_string_int_map : string_int_map -> Sexp.t = <fun>
|}];;

[@@@part "adm.3"];;
let m = Map.singleton (module String) "one" 1;;
[%%expect ocaml {|val m : (string, int, String.comparator_witness) Map.t = <abstr>|}];;
(m : int Map.M(String).t);;
[%%expect ocaml {|- : int Base.Map.M(Base.String).t = <abstr>|}];;

[@@@part "ht.1"];;
let table = Hashtbl.create (module String);;
[%%expect ocaml {|val table : (string, '_weak1) Hashtbl.t = <abstr>|}];;
Hashtbl.set table ~key:"three" ~data:3;;
[%%expect ocaml {|- : unit = ()|}];;
Hashtbl.find table "three";;
[%%expect ocaml {|- : int option = Some 3|}];;


[@@@part "ht.2"];;
#typeof "Hashtbl_intf.Key";;
[%%expect.nondeterministic ocaml {|
module type Base.Hashtbl_intf.Key =
  sig
    type t
    val compare : t -> t -> Base.int
    val sexp_of_t : t -> Base.Sexp.t
    val hash : t -> Base.int
  end
|}];;

[@@@part "ht.3"];;
module Book = struct
  type t = { title: string; isbn: string }
  [@@deriving compare, sexp_of, hash]
end;;
[%%expect ocaml {|
module Book :
  sig
    type t = { title : string; isbn : string; }
    val compare : t -> t -> int
    val sexp_of_t : t -> Sexp.t
    val hash_fold_t : Hash.state -> t -> Hash.state
    val hash : t -> int
  end
|}];;
let table = Hashtbl.create (module Book);;
[%%expect ocaml {|val table : (Book.t, '_weak2) Hashtbl.t = <abstr>|}];;

[@@@part "ht.4"];;
let table = Hashtbl.Poly.create ();;
[%%expect ocaml {|val table : ('_weak3, '_weak4) Hashtbl.t = <abstr>|}];;
Hashtbl.set table ~key:("foo",3,[1;2;3]) ~data:"random data!";;
[%%expect ocaml {|- : unit = ()|}];;
Hashtbl.find table ("foo",3,[1;2;3]);;
[%%expect ocaml {|- : string option = Some "random data!"|}];;


[@@@part "ph.1"];;
Hashtbl.Poly.hashable.hash (List.range 0 9);;
[%%expect ocaml {|- : int = 209331808|}];;
Hashtbl.Poly.hashable.hash (List.range 0 10);;
[%%expect ocaml {|- : int = 182325193|}];;
Hashtbl.Poly.hashable.hash (List.range 0 11);;
[%%expect ocaml {|- : int = 182325193|}];;
Hashtbl.Poly.hashable.hash (List.range 0 100);;
[%%expect ocaml {|- : int = 182325193|}];;

[@@@part "ph.2"];;
[%hash: int list] (List.range 0 9);;
[%%expect ocaml {|- : int = 999007935|}];;
[%hash: int list] (List.range 0 10);;
[%%expect ocaml {|- : int = 195154657|}];;
[%hash: int list] (List.range 0 11);;
[%%expect ocaml {|- : int = 527899773|}];;
[%hash: int list] (List.range 0 100);;
[%%expect ocaml {|- : int = 594983280|}];;
