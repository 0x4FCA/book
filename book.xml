<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN' 'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'>
<book>
  
  
  
  
  

<title>Real World OCaml</title>
<xi:include href="bookinfo.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
<xi:include href="ch00.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>


























<preface id="prologue">
  <title>Prologue</title>
  <sect1 id="why-ocaml">
    <title>Why OCaml?</title>
    <para>
      The programming languages that you use affect the software you
      create. They influence your software's reliability, security and
      efficiency, and how easy it is to read, refactor, and extend. The
      languages you know can also deeply affect how you think about
      programming and software design.
    </para>
    <para>
      But not all ideas about how to design a programming language are
      created equal. Over the last 40 years, a few key language features
      have emerged that together form a kind of sweet-spot in language
      design. These features include:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis>Garbage collection</emphasis> for automatic memory
          management, now a feature of almost every modern high-level
          language.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Higher-order functions</emphasis> that can be passed
          around as first-class values, as seen in Javascript or Scala.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Static type-checking</emphasis> to reduce run-time
          errors, such as Java or Scala interfaces or variable type
          declarations in C#, Ada and Pascal.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Generics</emphasis> to enable abstractions to be
          constructed across different datatypes, available as C++
          templates or in Java or C#.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Immutable data structures</emphasis> that cannot be
          destructively updated, famously enforced in Haskell but also a
          common feature of many distributed big data frameworks.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Algebraic datatypes</emphasis> and <emphasis>pattern
          matching</emphasis> to define and manipulate complex data
          structures, available in Miranda, F# and Standard ML.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Automatic type inference</emphasis> to avoid having
          to laboriously define the type of every single variable in a
          program, and instead have them inferred based on how a value
          is used. Available in Standard ML, F# and even modern C++11
          via its <literal>auto</literal> keyword.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Some of you will know and love these features, and others will be
      completely new to them. Most of you will have seen
      <emphasis>some</emphasis> of them in other languages that you've
      used. As we'll demonstrate over the course of this book, it turns
      out that there is something transformative about having them all
      together and able to interact in a single language. Despite their
      importance, these ideas have made only limited inroads into
      mainstream languages and when they do arrive there, like
      higher-order functions in C# or parametric polymorphism in Java,
      it's typically in a limited and awkward form. The only languages
      that completely embody these ideas are statically-typed functional
      programming languages like OCaml, F#, Haskell, Scala and Standard
      ML.
    </para>
    <para>
      Among this worthy set of languages, OCaml stands apart because it
      manages to provide a great deal of power while remaining highly
      pragmatic. The compiler has a straightforward compilation strategy
      without excessive optimization passes, and its strict evaluation
      model makes runtime behaviour easy to predict. The garbage
      collector is an incremental, precise implementation with no
      dynamic JIT compilation, and the runtime is simple and portable
      across platforms.
    </para>
    <para>
      It is all of this that makes OCaml a great choice for programmers
      who want to step up to a better programming language, and at the
      same time want to get practical work done.
    </para>
    <sect2 id="a-brief-history-from-the-1960s">
      <title>A brief history from the 1960s</title>
      <para>
        OCaml was written in 1996 by Xavier Leroy, Jérôme Vouillon,
        Damien Doligez and Didier Rémy at INRIA in France. It was
        inspired by a long line of research into ML starting in the
        1960s, and continues to have deep links to the academic
        community.
      </para>
      <para>
        ML was originally the <emphasis>meta language</emphasis> of the
        LCF proof assistant released by Robin Milner in 1972 (at
        Stanford, and later at Cambridge). ML was turned into a compiler
        in order to make it easier to use LCF on different machines, and
        gradually turned into a fully fledged system of its own by the
        1980s.
      </para>
      <para>
        In 1990, Xavier Leroy and Damien Doligez built a new
        implementation called Caml Light that was based on a bytecode
        interpreter with a fast sequential garbage collector. Over the
        next few years useful libraries appeared, such as Michel Mauny's
        parsing system. Efficiency further improved with a fast native
        code compiler that made OCaml's performance competitive with
        mainstream languages such as C++. A module system inspired by
        Standard ML also provided powerful facilities for abstraction
        and larger scale programs.
      </para>
      <para>
        The modern OCaml emerged in 1996, when a powerful and elegant
        object system was implemented by Didier Rémy and Jérôme
        Vouillon. This object system was notable for supporting many
        common OO idioms in a statically type-safe way, whereas the same
        idioms required runtime checks in languages such as C++ or Java.
        In 2000, Jacques Garrique extended OCaml with several new
        features such as polymorphic methods and variants and labelled
        and optional arguments.
      </para>
      <para>
        The last decade has seen OCaml attract a significant user base,
        and language improvements have been steadily added to support
        the growing codebases that use the language both commercially
        and for academic use. First-class modules, Generalized Algebraic
        Data Types (GADTs) and dynamic linking have improved the
        flexibility of the language, and there is fast native code
        support for x86_64, ARM, PowerPC and Sparc64, making OCaml a
        good choice for systems where resource usage, predictability and
        performance matters.
      </para>
    </sect2>
    <sect2 id="the-core-standard-library">
      <title>The Core Standard Library</title>
      <para>
        A language on its own isn't enough. You also need a rich set of
        libraries to base your applications on. A common source of
        frustration for those learning OCaml is that the standard
        library that ships with the compiler doesn't provide a lot of
        features. This standard library was actually developed for use
        within the compiler itself, and by design covers only a small
        subset of the functionality you expect for more general-purpose
        use.
      </para>
      <para>
        In the world of open-source software, nothing stops alternative
        libraries from being written to supplement the compiler standard
        library, and this exactly what the Core distribution is. Jane
        Street, a company that has been using OCaml for more than a
        decade, developed Core for its own internal use, but it was
        designed from the start with an eye towards being a
        general-purpose standard library, and has very broad
        applicability. Like the OCaml language itself, Core is also
        engineered with correctness, reliability and performance in
        mind.
      </para>
      <para>
        Core is distributed with syntax extensions which provide useful
        new functionality to OCaml, and there are additional libraries
        such as the Async network communications library that extend the
        reach of Core into building complex distributed systems. All of
        these libraries are distributed under a liberal Apache 2 license
        to permit free use in hobby, academic and commercial settings.
      </para>
      <para>
        If you've learnt some OCaml before, this book may surprise you
        with some differences from your past experience. Core redefines
        most of the standard modules to be much more consistent, and so
        you'll need to adapt older code. We believe the Core model is
        worth learning; it's been successfully used on large,
        million-line codebases and removes a big barrier to more
        widespread OCaml adoption. There will always exist code that
        uses only the compiler standard library of course, but there are
        other online resources available to learn that. Real World OCaml
        focuses on the techniques the authors have used in their
        personal experience to construct scalable, robust computer
        systems.
      </para>
    </sect2>
    <sect2 id="the-ocaml-platform">
      <title>The OCaml Platform</title>
      <para>
        Core is a comprehensive and effective standard library, but
        there's a lot more out software out there. A large community of
        programmers have been using OCaml since its first release in
        1996 and have generated a lot of useful libraries and tools. In
        Real World OCaml, we'll introduce some of these libraries for
        you to experiment with realistic examples. The installation and
        management of these third-party libraries is made much easier
        via a package management tool known as OPAM. We'll explain more
        about OPAM as the book unfolds, but it forms the basis of the
        Platform, which is a set of tools and libraries that, along with
        the OCaml compiler, let you build realistic applications quickly
        and effectively.
      </para>
      <para>
        Another big improvement in Core is the <literal>utop</literal>
        command-line interface. This is a modern interactive tool that
        supports command history, macro expansion, module completion,
        and other niceties that make it much more pleasant to work with
        the language. We'll be using <literal>utop</literal> throughout
        the book instead of the normal OCaml toplevel. It can, of
        course, be installed using OPAM, and
        <xref linkend="installation"/> guides you through that
        process.
      </para>
    </sect2>
  </sect1>
  <sect1 id="about-this-book">
    <title>About this book</title>
    <para>
      Real World OCaml is aimed at programmers who have some experience
      with conventional programming languages, but not specifically with
      <emphasis>statically-typed functional programming</emphasis>. The
      world of dynamic scripting languages such as Javascript, Ruby and
      Python have all adopted healthy elements of functional
      programming, but not all of it. Real World OCaml takes you through
      the full lifecycle of how to construct software with static
      typing, including the powerful module system that makes code
      re-use so much more robust.
    </para>
    <para>
      At the same time, OCaml is not Haskell. It takes a much more
      pragmatic approach by being strictly evaluated by default and
      permitting arbitrary side-effects. In fact, you can write OCaml
      code that looks very similar to imperative C but remains
      completely type-safe. One of the major strengths of OCaml for
      systems programming is that, with some experience, you can predict
      the runtime behaviour of a block of code very easily, with very
      little compiler magic involved. We'll explain some of these tricks
      to you as we go through the book and gradually introduce more
      complex concepts.
    </para>
    <sect2 id="what-to-expect">
      <title>What to expect</title>
      <para>
        Real World OCaml is split into three parts and appendices:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Part I covers the basic language concepts you'll need to
            know when building OCaml programs. You won't need to
            memorise all of this (objects, for example, are used rarely
            in practice), but understanding the concepts and examples is
            important. This part opens up with a guided tour to give you
            a quick overview of the language. It then moves onto
            modules, functors and objects, which may take some time to
            digest. Persevere though; even though these concepts may be
            difficult at first, they will put you in good stead even
            when switching to other languages, many of which have drawn
            inspiration from ML.
          </para>
        </listitem>
        <listitem>
          <para>
            Part II builds on the basics by working through useful tools
            and techniques. Here you'll pick up useful techniques for
            building networked systems, as well as functional design
            patterns that help combine different features of the
            language to good effect. The focus throughout this section
            is on networked systems, and among other examples we'll
            build a running example that will perform Internet queries
            using the DuckDuckGo search engine.
          </para>
        </listitem>
        <listitem>
          <para>
            Part III is all about understanding the runtime system in
            OCaml. It's a remarkably simple system in comparison to
            other language runtimes (such as Java or the .NET CLR), and
            you'll need to read this to build very high performance
            systems that have to minimise resource usage or interface to
            C libraries. This is also where we talk about profiling and
            debugging techniques using tools such as GNU
            <literal>gdb</literal>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Contributing your code back to the community is also important
        (if only to get bug fixes from other people!), and our
        appendices explain how to do this via OPAM and GitHub.
      </para>
      <note>
      <title>
      Note to reviewers
      </title>
      <para>
        Real World OCaml uses some tools that we've developed while
        writing this book. Some of these resulted in improvements to the
        OCaml compiler, which means that you will need to ensure that
        you have an up-to-date development environment (using the 4.01.0
        compiler). We've automated everything you need via the OPAM
        package manager, so please do follow the installation
        instructions in <xref linkend="installation"/>
        carefully.
      </para>
      <para>
        At this stage, the Windows operating system is also unsupported,
        and only Mac OS X, Linux, FreeBSD and OpenBSD can be expected to
        work reliably. We realize this is a concern; there are no
        fundamental barriers to Windows support, but we're focussed on
        getting the main content finished before getting stuck into the
        porting effort.
      </para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="about-the-authors">
    <title>About the Authors</title>
    <sect2 id="jason-hickey">
      <title>Jason Hickey</title>
      <para>
        Jason Hickey is a Software Engineer at Google Inc. in Mountain
        View, California. He is part of the team that designs and
        develops the global computing infrastructure used to support
        Google services, including the software systems for managing and
        scheduling massively distributed computing resources.
      </para>
      <para>
        Prior to joining Google, Jason was an Assistant Professor of
        Computer Science at Caltech, where his research was in reliable
        and fault-tolerant computing systems, including programming
        language design, formal methods, compilers, and new models of
        distributed computation. He obtained his PhD in Computer Science
        from Cornell University, where he studied programming languages.
        He is the author of the MetaPRL system, a logical framework for
        design and analysis of large software systems; and OMake, an
        advanced build system for large software projects. He is the
        author of the textbook, <emphasis>An Introduction to Objective
        Caml</emphasis> (unpublished).
      </para>
    </sect2>
    <sect2 id="anil-madhavapeddy">
      <title>Anil Madhavapeddy</title>
      <para>
        Anil Madhavapeddy is a Senior Research Fellow at the University
        of Cambridge, based in the Systems Research Group. He was on the
        original team that developed the Xen hypervisor, and helped
        develop an industry-leading cloud management toolstack written
        entirely in OCaml. This XenServer product has been deployed on
        millions of physical hosts, and drives critical infrastructure
        for many Fortune 500 companies.
      </para>
      <para>
        Prior to obtaining his PhD in 2006 from the University of
        Cambridge, Anil had a diverse background in industry at NetApp,
        NASA and Internet Vision. He is an active member of the
        open-source development community with the OpenBSD operating
        system, is on the steering committee of the Commercial Uses of
        Functional Programming ACM workshop, and serves on the boards of
        startup companies where OCaml is extensively used. He has also
        developed the Mirage unikernel system that is written entirely
        in OCaml from the device drivers up.
      </para>
    </sect2>
    <sect2 id="yaron-minsky">
      <title>Yaron Minsky</title>
      <para>
        Yaron Minsky heads the Technology group at Jane Street, a
        proprietary trading firm that is the largest industrial user of
        OCaml. He was responsible for introducing OCaml to the company
        and for managing the company's transition to using OCaml for all
        of its core infrastructure. Today, billions of dollars worth of
        securities transactions flow each day through those systems.
      </para>
      <para>
        Yaron obtained his PhD in Computer Science from Cornell
        University, where he studied distributed systems. Yaron has
        lectured, blogged and written about OCaml for years, with
        articles published in Communications of the ACM and the Journal
        of Functional Programming. He chairs the steering committee of
        the Commercial Users of Functional Programming, and is a member
        of the steering committee for the International Conference on
        Functional Programming.
      </para>
    </sect2>
  </sect1>
</preface><part label="I"><title>Language Concepts</title><partintro><para>Part I covers the basic language concepts you'll need to know when building OCaml programs.
      You won't need to memorise all of this (objects, for example, are used rarely in practice)
      but understanding the concepts and examples is important.</para><para>This part opens up with a guided tour to give you a quick overview of the language using
      an interactive command-line interface. It then moves onto covering language features such 
      as records, algebraic data types and the module system.</para><para>The final portion covers more advanced features such as functors, objects and first-class 
      modules, which may all take some time to digest. Persevere though; even though these concepts 
      may be difficult at first, they will put you in good stead even when switching to other 
      languages, many of which have drawn inspiration from ML.</para></partintro><chapter id="a-guided-tour">
  <title>A Guided Tour</title>
  <para>
    This chapter gives an overview of OCaml by walking through a series
    of small examples that cover most of the major features of the
    language. This should give a sense of what OCaml can do, without
    getting too deep in any one topic.
  </para>
  <para>
    We'll present this guided tour using the Core standard library and
    the <literal>utop</literal> OCaml toplevel, a shell that lets you
    type in expressions and evaluate them interactively.
    <literal>utop</literal> is an easier-to-use version of the standard
    toplevel (which you can start by typing <literal>ocaml</literal> at
    the command line). These instructions will assume you're using
    <literal>utop</literal> specifically.
  </para>
  <para>
    Before getting started, do make sure you have a working OCaml
    installation and toplevel as you read through this chapter so you
    can try out the examples.
  </para>
  <note>
  <title>
  Installing <literal>utop</literal>
  </title>
  <para>
    The easiest way to get the examples running is to set up the OPAM
    package manager, which is explained in
    <xref linkend="installation"/>. In a nutshell, you need to
    have a working C compilation environment and the PCRE library
    installed, and then:
  </para>
  <programlisting>
$ opam init
$ opam switch 4.01.0dev+trunk
$ opam install utop core_extended
$ eval `opam config -env`
</programlisting>
  <para>
    Note that the above commands will take some time to run. When
    they're done, create a file called <literal>~/.ocamlinit</literal>
    in your home directory:
  </para>
  <programlisting language="ocaml">
#use &quot;topfind&quot;
#camlp4o
#thread
#require &quot;core.top&quot;
</programlisting>
  <para>
    Then type in <literal>utop</literal>, and you'll be in an
    interactive toplevel environment. OCaml phrases are only evaluated
    when you enter a double semicolon (<literal>;;</literal>), so you
    can split your typing over multiple lines. You can exit
    <literal>utop</literal> by pressing <literal>control-D</literal> and
    return. For complete instructions, please refer to
    <xref linkend="installation"/>.
  </para>
  </note>
  <sect1 id="ocaml-as-a-calculator">
    <title>OCaml as a calculator</title>
    <para>
      Let's spin up <literal>utop</literal>. Throughout the book we're
      going to use Core, a more full-featured and capable replacement
      for OCaml's standard library. Accordingly, we'll start by opening
      the <literal>Core.Std</literal> module to get access to Core's
      libraries. If you don't open <literal>Core.Std</literal> many of
      the examples below will fail.
    </para>
    <programlisting language="ocaml">
$ utop
# open Core.Std;;
</programlisting>
    <para>
      Now that we have Core open, let's try a few simple numerical
      calculations.
    </para>
    <programlisting language="ocaml">
# 3 + 4;;
- : int = 7
# 8 / 3;;
- : int = 2
# 3.5 +. 6.;;
- : float = 9.5
# 30_000_000 / 300_000;;
- : int = 100
# sqrt 9.;;
- : float = 3.
</programlisting>
    <para>
      By and large, this is pretty similar to what you'd find in any
      programming language, but there are a few things that jump right
      out at you.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          We needed to type <literal>;;</literal> in order to tell the
          toplevel that it should evaluate an expression. This is a
          peculiarity of the toplevel that is not required in
          stand-alone programs (though it is sometimes helpful to
          include <literal>;;</literal> to improve OCaml's error
          reporting).
        </para>
      </listitem>
      <listitem>
        <para>
          After evaluating an expression, the toplevel prints both the
          type of the result and the result itself.
        </para>
      </listitem>
      <listitem>
        <para>
          Function arguments are separated by spaces, instead of by
          parenthesis and commas, which is more like the UNIX shell than
          C or Java.
        </para>
      </listitem>
      <listitem>
        <para>
          OCaml allows you to place underscores in the middle of your
          integer literals, as a way of improving readability. Note that
          underscores can be placed anywhere in within the number, not
          just every three digits.
        </para>
      </listitem>
      <listitem>
        <para>
          OCaml carefully distinguishes between
          <literal>float</literal>, the type for floating point numbers
          and <literal>int</literal> the type for integers. The types
          have different literals (<literal>6.</literal> instead of
          <literal>6</literal>) and different infix operators
          (<literal>+.</literal> instead of <literal>+</literal>), and
          OCaml doesn't automatically cast between types. This can be a
          bit of a nuisance, but it has its benefits, since it prevents
          some kinds of bugs that arise in other languages due to
          unexpected differences between the behavior of
          <literal>int</literal> and <literal>float</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      We can also create a variable to name the value of a given
      expression, using the <literal>let</literal> keyword (also known
      as a <emphasis>let binding</emphasis>).
    </para>
    <programlisting language="ocaml">
# let x = 3 + 4;;
val x : int = 7
# let y = x + x;;
val y : int = 14
</programlisting>
    <para>
      After a new variable is created, the toplevel tells us the name of
      the variable (<literal>x</literal> or <literal>y</literal>), in
      addition to its type (<literal>int</literal>) and value
      (<literal>7</literal> or <literal>14</literal>).
    </para>
  </sect1>
  <sect1 id="functions-and-type-inference">
    <title>Functions and type Inference</title>
    <para>
      The <literal>let</literal> syntax can also be used for creating
      functions.
    </para>
    <programlisting language="ocaml">
# let square x = x * x ;;
val square : int -&gt; int = &lt;fun&gt;
# square 2;;
- : int = 4
# square (square 2);;
- : int = 16
</programlisting>
    <para>
      Functions in OCaml are values like any other, which is why we bind
      one to a variable using the same <literal>let</literal> keyword
      used for binding a variable to a simple value such as an integer.
    </para>
    <para>
      When using <literal>let</literal> to define a function, the first
      identifier after the <literal>let</literal> is the function name,
      and each subsequent identifier is a different argument to the
      function. Thus, <literal>square</literal> is a function with a
      single argument. If no arguments are given, then we just have the
      ordinary definition of a variable that we saw earlier.
    </para>
    <para>
      Now that we're creating more interesting values like functions,
      the types have gotten more interesting too.
      <literal>int -&gt; int</literal> is a function type, in this case
      indicating a function that takes an <literal>int</literal> and
      returns an <literal>int</literal>. We can also write functions
      that take multiple arguments. (Note that the following example
      will not work if you haven't opened <literal>Core.Std</literal>.)
    </para>
    <programlisting language="ocaml">
# let ratio x y =
     Float.of_int x /. Float.of_int y
  ;;
val ratio : int -&gt; int -&gt; float = &lt;fun&gt;
# ratio 4 7;;
- : float = 0.571428571428571397
</programlisting>
    <para>
      As a side note, the above is our first use of OCaml modules. Here,
      <literal>Float.of_int</literal> refers to the
      <literal>of_int</literal> function contained in the
      <literal>Float</literal> module, and not, as you might expect from
      an object-oriented language, accessing a method of an object. The
      <literal>Float</literal> module in particular contains
      <literal>of_int</literal> as well as many other useful functions
      for dealing with floats.
    </para>
    <para>
      The notation for the type-signature of a multi-argument function
      may be a little surprising at first, but we'll explain where it
      comes from when we get to function currying in
      <xref linkend="multi-argument-functions"/>. For the
      moment, think of the arrows as separating different arguments of
      the function, with the type after the final arrow being the return
      value. Thus, <literal>int -&gt; int -&gt; float</literal>
      describes a function that takes two <literal>int</literal>
      arguments and returns a <literal>float</literal>.
    </para>
    <para>
      We can even write functions that take other functions as
      arguments. Here's an example of a function that takes three
      arguments: a test function and two integer arguments. The function
      returns the sum of the integers that pass the test.
    </para>
    <programlisting language="ocaml">
# let sum_if_true test first second =
    (if test first then first else 0)
    + (if test second then second else 0)
  ;;
val sum_if_true : (int -&gt; bool) -&gt; int -&gt; int -&gt; int = &lt;fun&gt;
</programlisting>
    <para>
      If we look at the inferred type signature in detail, we see that
      the first argument is a function that takes an integer and returns
      a boolean, and that the remaining two arguments are integers.
      Here's an example of this function in action.
    </para>
    <programlisting language="ocaml">
# let even x =
    x mod 2 = 0 ;;
val even : int -&gt; bool = &lt;fun&gt;
# sum_if_true even 3 4;;
- : int = 4
# sum_if_true even 2 4;;
- : int = 6
</programlisting>
    <para>
      Note that in the definition of <literal>even</literal> we used
      <literal>=</literal> in two different ways: once as the part of
      the let binding that separates the thing being defined from its
      definition; and once as an equality test, when comparing
      <literal>x mod 2</literal> to <literal>0</literal>. These are very
      different operations despite the fact that they share some syntax.
    </para>
    <sect2 id="type-inference">
      <title>Type inference</title>
      <para>
        As the types we encounter get more complicated, you might ask
        yourself how OCaml is able to figure them out, given that we
        didn't write down any explicit type information.
      </para>
      <para>
        OCaml determines the type of an expression using a technique
        called <emphasis>type inference</emphasis>, by which it infers
        the type of a given expression based on what it already knows
        about the types of other related variables, and on constraints
        on the types that arise from the structure of the code.
      </para>
      <para>
        As an example, let's walk through the process of inferring the
        type of <literal>sum_if_true</literal>.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            OCaml requires that both arms of an <literal>if</literal>
            statement return the same type, so the expression
            <literal>if test x then x else 0</literal> requires that
            <literal>x</literal> must be the same type as
            <literal>0</literal>, which is <literal>int</literal>. By
            the same logic we can conclude that <literal>y</literal> has
            type <literal>int</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>test</literal> is passed <literal>x</literal> as an
            argument. Since <literal>x</literal> has type
            <literal>int</literal>, the input type of
            <literal>test</literal> must be <literal>int</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>test x</literal> is used as the condition in an
            <literal>if</literal> statement, so the return type of
            <literal>test</literal> must be <literal>bool</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            The fact that <literal>+</literal> returns an int implies
            that the return value of <literal>sum_if_true</literal> must
            be int.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Together, that nails down the types of all the variables, which
        determines the overall type of <literal>sum_if_true</literal>.
      </para>
      <para>
        Over time, you'll build a rough intuition for how the OCaml
        inference engine works, which makes it easier to reason through
        your programs. One way of making it easier to understand the
        types is to add explicit type annotations. These annotations
        never change the behavior of an OCaml program, but they can
        serve as useful documentation, as well as catch unintended type
        changes. Here's an annotated version of
        <literal>sum_if_true</literal>:
      </para>
      <programlisting language="ocaml">
# let sum_if_true (test : int -&gt; bool) (x : int) (y : int) : int =
     (if test x then x else 0)
     + (if test y then y else 0)
  ;;
val sum_if_true : (int -&gt; bool) -&gt; int -&gt; int -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        In the above, we've marked every argument to the function with
        its type, with the final annotation indicating the type of the
        return value. Such type annotations can actually go around any
        value in an OCaml program, and can be useful for figuring out
        why a given program is failing to compile.
      </para>
    </sect2>
    <sect2 id="inferring-generic-types">
      <title>Inferring generic types</title>
      <para>
        Sometimes, there isn't enough information to fully determine the
        concrete type of a given value. Consider this function:
      </para>
      <programlisting language="ocaml">
# let first_if_true test x y =
    if test x then x else y
  ;;
</programlisting>
      <para>
        <literal>first_if_true</literal> takes as its arguments a
        function <literal>test</literal>, and two values,
        <literal>x</literal> and <literal>y</literal>, where
        <literal>x</literal> is to be returned if
        <literal>test x</literal> evaluates to <literal>true</literal>,
        and <literal>y</literal> otherwise. So what's the type of
        <literal>first_if_true</literal>? There are no obvious clues
        such as arithmetic operators or literals to tell you what the
        type of <literal>x</literal> and <literal>y</literal> are. That
        makes it seem like one could use this
        <literal>first_if_true</literal> on values of any type. Indeed,
        if we look at the type returned by the toplevel:
      </para>
      <programlisting language="ocaml">
val first_if_true : ('a -&gt; bool) -&gt; 'a -&gt; 'a -&gt; 'a = &lt;fun&gt;
</programlisting>
      <para>
        we see that rather than choose a single concrete type, OCaml has
        introduced a <emphasis>type variable</emphasis>
        <literal>'a</literal> to express that the type is generic. In
        particular, the type of the <literal>test</literal> argument is
        <literal>('a -&gt; bool)</literal>, which means that test is a
        one-argument function whose return value is
        <literal>bool</literal>, and whose argument could be of any type
        <literal>'a</literal>. But, whatever type <literal>'a</literal>
        is, it has to be the same as the type of the other two
        arguments, <literal>x</literal> and <literal>y</literal>, and of
        the return value of <literal>first_if_true</literal>. This kind
        of genericity is called <emphasis>parametric
        polymorphism</emphasis>, and is very similar to generics in C#
        and Java.
      </para>
      <para>
        The generic type of <literal>first_if_true</literal> allows us
        to write:
      </para>
      <programlisting language="ocaml">
# let long_string s = String.length s &gt; 6;;
val long_string : string -&gt; bool = &lt;fun&gt;
# first_if_true long_string &quot;short&quot; &quot;loooooong&quot;;;
- : string = &quot;loooooong&quot;
</programlisting>
      <para>
        as well as:
      </para>
      <programlisting language="ocaml">
# let big_number x = x &gt; 3;;
val big_number : int -&gt; bool = &lt;fun&gt;
# first_if_true big_number 4 3;;
- : int = 4
</programlisting>
      <para>
        Both <literal>long_string</literal> and
        <literal>big_number</literal> are functions, and each is passed
        to <literal>first_if_true</literal> with two other arguments of
        the appropriate type (strings in the first example, and integers
        in the second). But we can't mix and match two different
        concrete types for <literal>'a</literal> in the same use of
        <literal>first_if_true</literal>.
      </para>
      <programlisting language="ocaml">
# first_if_true big_number &quot;short&quot; &quot;loooooong&quot;;;
Characters 25-30:
  first_if_true big_number &quot;short&quot; &quot;loooooong&quot;;;
                           ^^^^^^^
Error: This expression has type string but
    an expression was expected of type int
</programlisting>
      <para>
        In this example, <literal>big_number</literal> requires that
        <literal>'a</literal> be instantiated as <literal>int</literal>,
        whereas <literal>&quot;short&quot;</literal> and
        <literal>&quot;loooooong&quot;</literal> require that
        <literal>'a</literal> be instantiated as
        <literal>string</literal>, and they can't both be right at the
        same time.
      </para>
      <note><title>
      Type errors vs exceptions
      </title>
      <para>
        There's a big difference in OCaml (and really in any compiled
        language) between errors that are caught at compile time and
        those that are caught at run-time. It's better to catch errors
        as early as possible in the development process, and compilation
        time is best of all.
      </para>
      <para>
        Working in the toplevel somewhat obscures the difference between
        run-time and compile time errors, but that difference is still
        there. Generally, type errors, like this one:
      </para>
      <programlisting language="ocaml">
# let add_potato x =
     x + &quot;potato&quot;;;
  Characters 28-36:
       x + &quot;potato&quot;;;
           ^^^^^^^^
Error: This expression has type string but an expression was expected of type
         int
</programlisting>
      <para>
        are compile-time errors (because <literal>+</literal> requires
        that both its arguments be of type <literal>int</literal>),
        whereas errors that can't be caught by the type system, like
        division by zero, lead to runtime exceptions.
      </para>
      <programlisting language="ocaml">
# let is_a_multiple x y =
     x mod y = 0 ;;
  val is_a_multiple : int -&gt; int -&gt; bool = &lt;fun&gt;
# is_a_multiple 8 2;;
- : bool = true
# is_a_multiple 8 0;;
Exception: Division_by_zero.
</programlisting>
      <para>
        The distinction here is that type errors will stop you whether
        or not the offending code is ever actually executed. Merely
        defining <literal>add_potato</literal> is an error, whereas
        <literal>is_a_multiple</literal> only fails when it's called,
        and then, only when it's called with an input that triggers the
        exception.
      </para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="tuples-lists-options-and-pattern-matching">
    <title>Tuples, Lists, Options and Pattern Matching</title>
    <sect2 id="tuples">
      <title>Tuples</title>
      <para>
        So far we've encountered a handful of basic types like
        <literal>int</literal>, <literal>float</literal> and
        <literal>string</literal> as well as function types like
        <literal>string -&gt; int</literal>. But we haven't yet talked
        about any data structures. We'll start by looking at a
        particularly simple data structure, the tuple. A tuple is an
        ordered collection of values that can each be of different type.
        You can create a tuple by joining values together with a comma:
      </para>
      <programlisting language="ocaml">
# let a_tuple = (3,&quot;three&quot;);;
val a_tuple : int * string = (3, &quot;three&quot;)
</programlisting>
      <para>
        (For the mathematically inclined, the <literal>*</literal>
        character is used because the set of all pairs of type
        <literal>t * s</literal> corresponds to the Cartesian product of
        the set of elements of type <literal>t</literal> and the set of
        elements of type <literal>s</literal>.)
      </para>
      <para>
        You can extract the components of a tuple using OCaml's pattern
        matching syntax. For example:
      </para>
      <programlisting language="ocaml">
# let (x,y) = a_tuple;;
val x : int = 3
val y : string = &quot;three&quot;
</programlisting>
      <para>
        Here, the <literal>(x,y)</literal> on the left-hand side of the
        <literal>let</literal> binding is the pattern. This pattern lets
        us mint the new variables <literal>x</literal> and
        <literal>y</literal>, each bound to different components of the
        value being matched, which can now be used in subsequent
        expressions.
      </para>
      <programlisting language="ocaml">
# x + String.length y;;
- : int = 8
</programlisting>
      <para>
        Note that the same syntax is used both for constructing and for
        pattern matching on tuples.
      </para>
      <para>
        Pattern matching can also show up in function arguments. Here's
        a function for computing the distance between two points on the
        plane, where each point is represented as a pair of
        <literal>float</literal>s. The pattern matching syntax lets us
        get at the values we need with a minimum of fuss.
      </para>
      <programlisting language="ocaml">
# let distance (x1,y1) (x2,y2) =
    sqrt ((x1 -. x2) ** 2. +. (y1 -. y2) ** 2.)
  ;;
val distance : float * float -&gt; float * float -&gt; float = &lt;fun&gt;
</programlisting>
      <para>
        The <literal>**</literal> operator used above is for raising a
        floating-point number to a power.
      </para>
      <para>
        This is just a first taste of pattern matching. Pattern matching
        is a pervasive tool in OCaml, and as you'll see, it has
        surprising power.
      </para>
    </sect2>
    <sect2 id="lists">
      <title>Lists</title>
      <para>
        Where tuples let you combine a fixed number of items,
        potentially of different types, lists let you hold any number of
        items of the same type. For example:
      </para>
      <programlisting language="ocaml">
# let languages = [&quot;OCaml&quot;;&quot;Perl&quot;;&quot;C&quot;];;
val languages : string list = [&quot;OCaml&quot;; &quot;Perl&quot;; &quot;C&quot;]
</programlisting>
      <para>
        Note that you can't mix elements of different types on the same
        list, as we did with tuples.
      </para>
      <programlisting language="ocaml">
# let numbers = [3;&quot;four&quot;;5];;
Characters 17-23:
  let numbers = [3;&quot;four&quot;;5];;
                   ^^^^^^
Error: This expression has type string but an expression was expected of type
         int
</programlisting>
      <sect3 id="the-list-module">
        <title>The <literal>List</literal> module</title>
        <para>
          Core comes with a <literal>List</literal> module that has a
          rich collection of functions for working with lists. We can
          access values from within a module by using dot-notation.
          Here, for example, is how we compute the length of a list.
        </para>
        <programlisting language="ocaml">
# List.length languages;;
- : int = 3
</programlisting>
        <para>
          Here's something a little more complicated. We can compute the
          list of the lengths of each language as follows.
        </para>
        <programlisting language="ocaml">
# List.map languages ~f:String.length;;
- : int list = [5; 4; 1]
</programlisting>
        <para>
          <literal>List.map</literal> takes two arguments: a list and a
          function for transforming the elements of that list. Note that
          <literal>List.map</literal> creates a new list and does not
          modify the original.
        </para>
        <para>
          In this example, the function <literal>String.length</literal>
          is passed under the <emphasis>labeled argument</emphasis>
          <literal>~f</literal>. Labels allow you to specify function
          arguments by name rather than by position. As you can see
          below, we can change the order of labeled arguments without
          changing the function's behavior.
        </para>
        <programlisting language="ocaml">
# List.map ~f:String.length languages;;
- : int list = [5; 4; 1]
</programlisting>
        <para>
          We'll learn more about labeled arguments and why they're
          important in
          <xref linkend="variables-and-functions"/>.
        </para>
      </sect3>
      <sect3 id="constructing-lists-with">
        <title>Constructing lists with <literal>::</literal></title>
        <para>
          In addition to constructing lists using brackets, we can use
          the operator <literal>::</literal> for adding elements to the
          front of a list.
        </para>
        <programlisting language="ocaml">
# &quot;French&quot; :: &quot;Spanish&quot; :: languages;;
- : string list = [&quot;French&quot;; &quot;Spanish&quot;; &quot;OCaml&quot;; &quot;Perl&quot;; &quot;C&quot;]
</programlisting>
        <para>
          Here, we're creating a new and extended list, not changing the
          list we started with, as you can see below.
        </para>
        <programlisting language="ocaml">
# languages;;
- : string list = [&quot;OCaml&quot;; &quot;Perl&quot;; &quot;C&quot;]
</programlisting>
        <para>
          The bracket notation for lists is really just syntactic sugar
          for <literal>::</literal>. Thus, the following declarations
          are all equivalent. Note that <literal>[]</literal> is used to
          represent the empty list.
        </para>
        <programlisting language="ocaml">
# [1; 2; 3];;
- : int list = [1; 2; 3]
# 1 :: (2 :: (3 :: []));;
- : int list = [1; 2; 3]
# 1 :: 2 :: 3 :: [];;
- : int list = [1; 2; 3]
</programlisting>
        <para>
          The <literal>::</literal> operator can only be used for adding
          one element to the front of the list, with the list
          terminating at <literal>[]</literal>, the empty list. There's
          also a list concatenation operator, <literal>@</literal>,
          which can concatenate two lists.
        </para>
        <programlisting language="ocaml">
# [1;2;3] @ [4;5;6];;
- : int list = [1; 2; 3; 4; 5; 6]
</programlisting>
        <para>
          It's important to remember that, unlike <literal>::</literal>,
          this is not a constant-time operation. Concatenating two lists
          takes time proportional to the length of the first list.
        </para>
      </sect3>
      <sect3 id="list-patterns-using-match">
        <title>List patterns using <literal>match</literal></title>
        <para>
          The elements of a list can be accessed through pattern
          matching. List patterns are based on the two list
          constructors, <literal>[]</literal> and <literal>::</literal>.
          Here's a simple example.
        </para>
        <programlisting language="ocaml">
# let my_favorite_language (my_favorite :: the_rest) =
     my_favorite
  ;;
</programlisting>
        <para>
          By pattern matching using <literal>::</literal>, we've
          isolated and named the first element of the list
          (<literal>my_favorite</literal>) and the remainder of the list
          (<literal>the_rest</literal>). If you know Lisp or Scheme,
          what we've done is the equivalent of using the functions
          <literal>car</literal> and <literal>cdr</literal> to isolate
          the first element of a list and the remainder of that list.
        </para>
        <para>
          If you try the above example in the toplevel, however, you'll
          see that it spits out a warning:
        </para>
        <programlisting language="ocaml">
    Characters 25-69:
  .........................(my_favorite :: the_rest) =
       my_favorite
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
val my_favorite_language : 'a list -&gt; 'a = &lt;fun&gt;
</programlisting>
        <para>
          The warning comes because the compiler can't be certain that
          the pattern match won't lead to a runtime error. Indeed, the
          warning gives an example of a list, (<literal>[]</literal>,
          the empty list) that doesn't match the provided pattern.
          Indeed, if we try to run
          <literal>my_favorite_language</literal>, we'll see that it
          works on non-empty list, and fails on empty ones.
        </para>
        <programlisting language="ocaml">
# my_favorite_language [&quot;English&quot;;&quot;Spanish&quot;;&quot;French&quot;];;
- : string = &quot;English&quot;
# my_favorite_language [];;
Exception: Match_failure (&quot;//toplevel//&quot;, 11, 10).
</programlisting>
        <para>
          You can avoid these warnings, and more importantly make sure
          that your code actually handles all of the possible cases, by
          using a <literal>match</literal> statement instead.
        </para>
        <para>
          A <literal>match</literal> statement is a kind of juiced-up
          version of the switch statement found in <literal>C</literal>
          and <literal>Java</literal>. It essentially lets you list a
          sequence of patterns (separated by <literal>|</literal>
          characters --- the one before the first case is optional), and
          the compiler then dispatches to the code following the first
          matched pattern. And, as we've already seen, we can name new
          variables in our patterns that correspond to sub-structures of
          the value being matched.
        </para>
        <para>
          Here's a new version of
          <literal>my_favorite_language</literal> that uses
          <literal>match</literal> and doesn't trigger a compiler
          warning.
        </para>
        <programlisting language="ocaml">
# let my_favorite_language languages =
    match languages with
    | first :: the_rest -&gt; first
    | [] -&gt; &quot;OCaml&quot; (* A good default! *)
 ;;
val my_favorite_language : string list -&gt; string = &lt;fun&gt;
# my_favorite_language [&quot;English&quot;;&quot;Spanish&quot;;&quot;French&quot;];;
- : string = &quot;English&quot;
# my_favorite_language [];;
- : string = &quot;OCaml&quot;
</programlisting>
        <para>
          Note that we included a comment in the above code. OCaml
          comments are bounded by <literal>(*</literal> and
          <literal>*)</literal>, and can be nested arbitrarily and cover
          multiple lines. There's no equivalent of C-style single line
          comments that are prefixed by <literal>//</literal>.
        </para>
        <para>
          The first pattern, <literal>first :: the_rest</literal>,
          covers the case where <literal>languages</literal> has at
          least one element, since every list except for the empty list
          can be written down with one or more <literal>::</literal>'s.
          The second pattern, <literal>[]</literal>, matches only the
          empty list. These cases are exhaustive (every list is either
          empty, or has at least one element), and the compiler can
          detect that exhaustiveness, which is why it doesn't spit out a
          warning.
        </para>
      </sect3>
      <sect3 id="recursive-list-functions">
        <title>Recursive list functions</title>
        <para>
          Recursive functions, or, functions that call themselves, are
          an important technique in OCaml and in any functional
          language. The typical approach to designing a recursive
          function is to separate the logic into a set of <emphasis>base
          cases</emphasis>, that can be solved directly, and a set of
          <emphasis>inductive cases</emphasis>, where the function
          breaks the problem down into smaller pieces and then calls
          itself to solve those smaller problems.
        </para>
        <para>
          When writing recursive list functions, this separation between
          the base cases and the inductive cases is often done using
          pattern matching. Here's a simple example of a function that
          sums the elements of a list.
        </para>
        <programlisting language="ocaml">
# let rec sum l =
    match l with
    | [] -&gt; 0                   (* base case *)
    | hd :: tl -&gt; hd + sum tl   (* inductive case *)
  ;;
val sum : int list -&gt; int
# sum [1;2;3];;
- : int = 6
</programlisting>
        <para>
          Following the common OCaml idiom, we use <literal>hd</literal>
          to refer to the head of the list and <literal>tl</literal> to
          refer to the tail. Note that we had to use the
          <literal>rec</literal> keyword to allow <literal>sum</literal>
          to refer to itself. As you might imagine, the base case and
          inductive case are different arms of the match.
        </para>
        <para>
          Logically, you can think of the evaluation of a simple
          recursive function like <literal>sum</literal> almost as if it
          were a mathematical equation whose meaning you were unfolding
          step by step.
        </para>
        <programlisting language="ocaml">
sum [1;2;3]
1 + sum [2;3]
1 + (2 + sum [3])
1 + (2 + (3 + sum []))
1 + (2 + (3 + 0))
1 + (2 + 3)
1 + 5
6
</programlisting>
        <para>
          This suggests a reasonable mental model for what OCaml is
          actually doing to evaluate a recursive function.
        </para>
        <para>
          We can introduce more complicated list patterns as well.
          Here's a function for destuttering a list,
          <emphasis>i.e.</emphasis>, for removing sequential duplicates.
        </para>
        <programlisting language="ocaml">
# let rec destutter list =
    match list with
    | [] -&gt; []
    | hd1 :: hd2 :: tl -&gt;
      if hd1 = hd2 then destutter (hd2 :: tl)
      else hd1 :: destutter (hd2 :: tl)
  ;;
</programlisting>
        <para>
          Again, the first arm of the match is the base case, and the
          second is the inductive. Unfortunately, this code has a
          problem. If you type it into the toplevel, you'll see this
          error:
        </para>
        <programlisting>
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
_::[]
</programlisting>
        <para>
          This indicates that we're missing a case, in particular we
          don't handle one-element lists. Note how the underscore is
          used to indicate the presence of a value without specifying
          what that value is.
        </para>
        <para>
          We can fix this warning by adding another case to the match:
        </para>
        <programlisting language="ocaml">
# let rec destutter list =
    match list with
    | [] -&gt; []
    | hd :: [] -&gt; hd :: []
    | hd1 :: hd2 :: tl -&gt;
      if hd1 = hd2 then destutter (hd2 :: tl)
      else hd1 :: destutter (hd2 :: tl)
  ;;
val destutter : 'a list -&gt; 'a list = &lt;fun&gt;
# destutter [&quot;hey&quot;;&quot;hey&quot;;&quot;hey&quot;;&quot;man!&quot;];;
- : string list = [&quot;hey&quot;; &quot;man!&quot;]
</programlisting>
        <para>
          Note that this code used another variant of the list pattern,
          <literal>[hd]</literal>, to match a list with a single
          element. We can do this to match a list with any fixed number
          of elements, <emphasis>e.g.</emphasis>,
          <literal>[x;y;z]</literal> will match any list with exactly
          three elements, and will bind those elements to the variables
          <literal>x</literal>, <literal>y</literal> and
          <literal>z</literal>.
        </para>
        <para>
          In the last few examples, our list processing code involved a
          lot of recursive functions. In practice, this isn't usually
          necessary. Most of the time, you'll find yourself happy to use
          the iteration functions found in the <literal>List</literal>
          module. But it's good to know how to use recursion when you
          need to do something new that's not already supported.
        </para>
      </sect3>
    </sect2>
    <sect2 id="options">
      <title>Options</title>
      <para>
        Another common data structure in OCaml is the option. An option
        is used to express that a value might or might not be present.
        For example,
      </para>
      <programlisting language="ocaml">
# let divide x y =
    if y = 0 then None else Some (x/y) ;;
val divide : int -&gt; int -&gt; int option = &lt;fun&gt;
</programlisting>
      <para>
        The function <literal>divide</literal> either returns
        <literal>None</literal>, if the divisor is zero, or
        <literal>Some</literal> of the result of the division,
        otherwise. <literal>Some</literal> and <literal>None</literal>
        are constructors, like <literal>::</literal> and
        <literal>[]</literal> for lists, which let you build optional
        values. You can think of an option as a specialized list that
        can only have zero or one element.
      </para>
      <para>
        To examine the contents of an option, we use pattern matching,
        as we did with tuples and lists. Consider the following simple
        function for printing a log entry given an optional time and a
        message. If no time is provided (<emphasis>i.e.</emphasis>, if
        the time is <literal>None</literal>), the current time is
        computed and used in its place.
      </para>
      <programlisting language="ocaml">
# let print_log_entry maybe_time message =
    let time =
      match maybe_time with
      | Some x -&gt; x
      | None -&gt; Time.now ()
    in
    printf &quot;%s: %s\n&quot; (Time.to_sec_string time) message ;;
val print_log_entry : Time.t option -&gt; string -&gt; unit
# print_log_entry (Some Time.epoch) &quot;A long long time ago&quot;;;
1969-12-31 19:00:00: A long long time ago
- : unit = ()
# print_log_entry None &quot;Up to the minute&quot;;;
2013-02-23 16:49:25: Up to the minute
- : unit = ()
</programlisting>
      <para>
        We use a <literal>match</literal> statement for handling the two
        possible states of an option.
      </para>
      <note> <title> 
      Nesting <literal>let</literal>s with <literal>let</literal> and
      <literal>in</literal>
      </title>
      <para>
        As a side note, this is our first use of <literal>let</literal>
        to define a new variable within the body of a function. A
        <literal>let</literal> bounded with an <literal>in</literal> can
        be used to introduce a new binding within any local scope,
        including a function body. The <literal>in</literal> marks the
        beginning of the scope within which the new variable can be
        used. Thus, we could write:
      </para>
      <programlisting language="ocaml">
# let x = 7 in
  x + x
  ;;
- : int = 14
</programlisting>
      <para>
        Note that the scope of the let binding is terminated by the
        double-semicolon.
      </para>
      <para>
        We can also have multiple let statements in a row, each one
        adding a new variable binding to what came before.
      </para>
      <programlisting language="ocaml">
# let x = 7 in
  let y = x * x in
  x + y
  ;;
- : int = 56
</programlisting>
      <para>
        This kind of nested let binding is a common way of building up a
        complex expression, with each <literal>let</literal> naming some
        component, before combining them in one final expression.
      </para>
      </note>
      <para>
        Options are important because they are the standard way in OCaml
        to encode a value that might not be there --- there's no such
        thing as a <literal>NullPointerException</literal> in OCaml.
        This is different from most other languages, including Java and
        C#, where most if not all datatypes are
        <emphasis>nullable</emphasis>, meaning that, whatever their type
        is, any given value also contains the possibility of being a
        null value. In such languages, null is lurking everywhere.
      </para>
      <para>
        In OCaml, however, nulls are explicit. A value of type
        <literal>string * string</literal> always actually contains two
        well-defined values of type <literal>string</literal>. If you
        want to allow, say, the first of those to be absent, then you
        need to change the type to
        <literal>string option * string</literal>. As we'll see in
        <xref linkend="error-handling"/>, this explicitness
        allows the compiler to provide a great deal of help in making
        sure you're correctly handing the possibility of missing data.
      </para>
    </sect2>
  </sect1>
  <sect1 id="records-and-variants">
    <title>Records and Variants</title>
    <para>
      So far, we've looked only at data structures that were predefined
      in the language, like lists and tuples. But OCaml also allows us
      to define new datatypes. Here's a toy example of a datatype
      representing a point in 2-dimensional space:
    </para>
    <programlisting language="ocaml">
# type point2d = { x : float; y : float };;
type point2d = { x : float; y : float; }
</programlisting>
    <para>
      <literal>point2d</literal> is a <emphasis>record</emphasis> type,
      which you can think of as a tuple where the individual fields are
      named, rather than being defined positionally. Record types are
      easy enough to construct:
    </para>
    <programlisting language="ocaml">
# let p = { x = 3.; y = -4. };;
val p : point2d = {x = 3.; y = -4.}
</programlisting>
    <para>
      And we can get access to the contents of these types using pattern
      matching:
    </para>
    <programlisting language="ocaml">
# let magnitude { x = x_pos; y = y_pos } =
    sqrt (x_pos ** 2. +. y_pos ** 2.);;
val magnitude : point2d -&gt; float = &lt;fun&gt;
</programlisting>
    <para>
      The pattern match here binds the variable <literal>x_pos</literal>
      to the value contained in the <literal>x</literal> field, and the
      variable <literal>y_pos</literal> to the value in the
      <literal>y</literal> field.
    </para>
    <para>
      We can write this more tersely using what's called <emphasis>field
      punning</emphasis>. When the name of the field and the name of the
      variable it is bound to in the match coincide, we don't have to
      write them both down. Using this, our magnitude function can be
      rewritten as follows.
    </para>
    <programlisting language="ocaml">
# let magnitude { x; y } = sqrt (x ** 2. +. y ** 2.);;
</programlisting>
    <para>
      We can also use dot-notation for accessing record fields:
    </para>
    <programlisting language="ocaml">
# let distance v1 v2 =
     magnitude { x = v1.x -. v2.x; y = v1.y -. v2.y };;
val distance : point2d -&gt; point2d -&gt; float = &lt;fun&gt;
</programlisting>
    <para>
      And we can of course include our newly defined types as components
      in larger types, as in the following types, each of which is a
      description of a different geometric object.
    </para>
    <programlisting language="ocaml">
# type circle_desc  = { center: point2d; radius: float }
  type rect_desc    = { lower_left: point2d; width: float; height: float }
  type segment_desc = { endpoint1: point2d; endpoint2: point2d } ;;
</programlisting>
    <para>
      Now, imagine that you want to combine multiple objects of these
      types together as a description of a multi-object scene. You need
      some unified way of representing these objects together in a
      single type. One way of doing this is using a
      <emphasis>variant</emphasis> type:
    </para>
    <programlisting language="ocaml">
# type scene_element =
    | Circle  of circle_desc
    | Rect    of rect_desc
    | Segment of segment_desc
  ;;
</programlisting>
    <para>
      The <literal>|</literal> character separates the different cases
      of the variant (the first <literal>|</literal> is optional), and
      each case has a tag, like <literal>Circle</literal>,
      <literal>Rect</literal> and <literal>Segment</literal>, to
      distinguish that case from the others. Here's how we might write a
      function for testing whether a point is in the interior of some
      element of a list of <literal>scene_element</literal>s.
    </para>
    <programlisting language="ocaml">
# let is_inside_scene_element point scene_element =
     match scene_element with
     | Circle { center; radius } -&gt;
       distance center point &lt; radius
     | Rect { lower_left; width; height } -&gt;
       point.x &gt; lower_left.x &amp;&amp; point.x &lt; lower_left.x +. width
       &amp;&amp; point.y &gt; lower_left.y &amp;&amp; point.y &lt; lower_left.y +. height
     | Segment { endpoint1; endpoint2 } -&gt; false
  ;;
val is_inside_scene_element : point2d -&gt; scene_element -&gt; bool = &lt;fun&gt;
# let is_inside_scene point scene =
     List.exists scene
       ~f:(fun el -&gt; is_inside_scene_element point el)
   ;;
val is_inside_scene : point2d -&gt; scene_element list -&gt; bool = &lt;fun&gt;
# is_inside_scene {x=3.;y=7.}
    [ Circle {center = {x=4.;y= 4.}; radius = 0.5 } ];;
- : bool = false
# is_inside_scene {x=3.;y=7.}
    [ Circle {center = {x=4.;y= 4.}; radius = 5.0 } ];;
- : bool = true
</programlisting>
    <para>
      You might at this point notice that the use of
      <literal>match</literal> here is reminiscent of how we used
      <literal>match</literal> with <literal>option</literal> and
      <literal>list</literal>. This is no accident:
      <literal>option</literal> and <literal>list</literal> are really
      just examples of variant types that happen to be important enough
      to be defined in the standard library (and in the case of lists,
      to have some special syntax).
    </para>
    <para>
      We also made our first use of an <emphasis>anonymous
      function</emphasis> in the call to <literal>List.exists</literal>.
      An anonymous function is a function that is defined but not named,
      in this case, using the <literal>fun</literal> keyword. Anonymous
      functions are common in OCaml, particularly when using iteration
      functions like <literal>List.exists</literal>.
    </para>
    <para>
      The purpose of <literal>List.exists</literal> is to check if there
      are any elements of the given list in question on which the
      provided function evaluates to <literal>true</literal>. In this
      case, we're using <literal>List.exists</literal> to check if there
      is a scene element within which our point resides.
    </para>
  </sect1>
  <sect1 id="imperative-programming">
    <title>Imperative programming</title>
    <para>
      So far, we've only written so-called <emphasis>pure</emphasis> or
      <emphasis>functional</emphasis> code, meaning that we didn't write
      any code that modified a variable or value after its creation.
      Indeed, almost all of the data structures we've encountered so far
      are <emphasis>immutable</emphasis>, meaning there's no way in the
      language to modify them at all. This is a quite different style
      from <emphasis>imperative</emphasis> programming, where
      computations are structured as sequences of instructions that
      operate by modifying state as they go.
    </para>
    <para>
      Functional code is the default in OCaml, with variable bindings
      and most data structures being immutable. But OCaml also has
      excellent support for imperative programming, including mutable
      data structures like arrays and hashtables, and control-flow
      constructs like for and while loops.
    </para>
    <sect2 id="arrays">
      <title>Arrays</title>
      <para>
        Perhaps the simplest mutable data structure in OCaml is the
        array. Arrays in OCaml are very similar to arrays in other
        languages like C: indexing starts at 0, and accessing or
        modifying an array element is a constant-time operation. Arrays
        are more compact in terms of memory utilization than most other
        data structures in OCaml, including lists. Here's an example:
      </para>
      <programlisting language="ocaml">
# let numbers = [| 1;2;3;4 |];;
val numbers : int array = [|1; 2; 3; 4|]
# numbers.(2) &lt;- 4;;
- : unit = ()
# numbers;;
- : int array = [|1; 2; 4; 4|]
</programlisting>
      <para>
        the <literal>.(i)</literal> syntax is used to refer to an
        element of an array, and the <literal>&lt;-</literal> syntax is
        for modification. Because the elements of the array are counted
        starting at zero, element <literal>.(2)</literal> is the third
        element.
      </para>
    </sect2>
    <sect2 id="mutable-record-fields">
      <title>Mutable record fields</title>
      <para>
        The array is an important mutable data structure, but it's not
        the only one. Records, which are immutable by default, can be
        declared with specific fields as being mutable. Here's a small
        example of a data structure for storing a running statistical
        summary of a collection of numbers. Here's the basic data
        structure:
      </para>
      <programlisting language="ocaml">
# type running_sum =
   { mutable sum: float;
     mutable sum_sq: float; (* sum of squares *)
     mutable samples: int;
   }
  ;;
</programlisting>
      <para>
        The fields in <literal>running_sum</literal> are designed to be
        easy to extend incrementally, and sufficient to compute means
        and standard deviations, as shown below. (Note that there are
        two let-bindings in a row without a double semicolon between
        them. That's because the double semicolon is required only to
        tell utop to process the input, not to separate two
        expressions.)
      </para>
      <programlisting language="ocaml">
# let mean rsum = rsum.sum /. float rsum.samples
  let stdev rsum =
     sqrt (rsum.sum_sq /. float rsum.samples
           -. (rsum.sum /. float rsum.samples) ** 2.) ;;
val mean : running_sum -&gt; float = &lt;fun&gt;
val stdev : running_sum -&gt; float = &lt;fun&gt;
</programlisting>
      <para>
        We also need functions to create and update
        <literal>running_sum</literal>s:
      </para>
      <programlisting language="ocaml">
# let create () = { sum = 0.; sum_sq = 0.; samples = 0 }
  let update rsum x =
     rsum.samples &lt;- rsum.samples + 1;
     rsum.sum     &lt;- rsum.sum     +. x;
     rsum.sum_sq  &lt;- rsum.sum_sq  +. x *. x
  ;;
val create : unit -&gt; running_sum = &lt;fun&gt;
val update : running_sum -&gt; float -&gt; unit = &lt;fun&gt;
</programlisting>
      <para>
        <literal>create</literal> returns a
        <literal>running_sum</literal> corresponding to the empty set,
        and <literal>update rsum x</literal> changes
        <literal>rsum</literal> to reflect the addition of
        <literal>x</literal> to its set of samples, by updating the
        number of samples, the sum, and the sum of squares.
      </para>
      <para>
        Note the use in the above code of single semi-colons to sequence
        operations. When we were working purely functionally, this
        wasn't necessary, but you start needing it when your code is
        acting by side-effect.
      </para>
      <para>
        A new and somewhat odd type has cropped up in this example:
        <literal>unit</literal>. What makes <literal>unit</literal>
        different is that there is only one value of type
        <literal>unit</literal>, which is written <literal>()</literal>.
        Because there is only one value of type <literal>unit</literal>
        that value doesn't really convey any information.
      </para>
      <para>
        If it doesn't convey any information, then what is
        <literal>unit</literal> good for? Most of the time,
        <literal>unit</literal> acts as a placeholder. Thus, we use
        <literal>unit</literal> for the return value of a function like
        <literal>update</literal> that operates by side effect rather
        than by returning a value, and for the argument to a function
        like <literal>create</literal> that doesn't require any
        information to be passed into it in order to run. This is
        similar to the role that <literal>void</literal> plays in
        languages like C and Java.
      </para>
      <para>
        Here's an example of <literal>create</literal> and
        <literal>update</literal> in action.
      </para>
      <programlisting language="ocaml">
# let rsum = create ();;
val rsum : running_sum = {sum = 0.; sum_sq = 0.; samples = 0}
# List.iter [1.;3.;2.;-7.;4.;5.] ~f:(fun x -&gt; update rsum x);;
- : unit = ()
# mean rsum;;
- : float = 1.33333333333333326
# stdev rsum;;
- : float = 3.94405318873307698
</programlisting>
    </sect2>
    <sect2 id="refs">
      <title>Refs</title>
      <para>
        We can declare a single mutable value by using a
        <literal>ref</literal>, which is a record type with a single
        mutable field that is defined in the standard library.
      </para>
      <programlisting language="ocaml">
# let x = { contents = 0 };;
val x : int ref = {contents = 0}
# x.contents &lt;- x.contents + 1;;
- : unit = ()
# x;;
- : int ref = {contents = 1}
</programlisting>
      <para>
        There are a handful of useful functions and operators defined
        for refs to make them more convenient to work with.
      </para>
      <programlisting language="ocaml">
# let x = ref 0 ;; (* create a ref, i.e., { contents = 0 } *)
val x : int ref = {contents = 0}
# !x ;;            (* get the contents of a ref, i.e., x.contents *)
- : int = 0
# x := !x + 1 ;;   (* assignment, i.e., x.contents &lt;- ... *)
- : unit = ()
# !x ;;
- : int = 1
</programlisting>
      <para>
        The definition of all this is quite straightforward. Here is the
        complete implementation of the <literal>ref</literal> type. The
        <literal>'a</literal> before the ref indicates that the
        <literal>ref</literal> type is polymorphic, in the same way that
        lists are polymorphic, meaning it can contain values of any
        type.
      </para>
      <programlisting language="ocaml">
type 'a ref = { mutable contents : 'a }

let ref x = { contents = x }
let (!) r = r.contents
let (:=) r x = r.contents &lt;- x
</programlisting>
      <para>
        Here, <literal>!</literal> and <literal>:=</literal> are infix
        operators that we're defining, where the parenthetical syntax
        marks them as such.
      </para>
      <para>
        Even though a <literal>ref</literal> is just another record
        type, it's notable because it is the standard way of simulating
        the traditional mutable variable you'll find in most imperative
        languages. For example, we can sum over the elements of a list
        imperatively by calling <literal>List.iter</literal> to call a
        simple function on every element of a list, using a ref to
        accumulate the results.
      </para>
      <programlisting language="ocaml">
# let sum list =
    let sum = ref 0 in
    List.iter list ~f:(fun x -&gt; sum := !sum + x);
    !sum
</programlisting>
      <para>
        This isn't the most idiomatic (or the fastest) way to sum up a
        list, but it shows how you can use a ref in place of a mutable
        variable.
      </para>
    </sect2>
    <sect2 id="for-and-while-loops">
      <title>For and while loops</title>
      <para>
        OCaml also supports traditional imperative control-flow
        constructs like for and while loops. Here, for example, is some
        code for permuting an array that uses a for loop. We use the
        <literal>Random</literal> module as our source of randomness.
        <literal>Random</literal> starts with a default seed, but you
        can call <literal>Random.self_init</literal> to choose a new
        seed at random.
      </para>
      <programlisting language="ocaml">
# let permute ar =
    for i = 0 to Array.length ar - 2 do
       (* pick a j that is after i and before the end of the list *)
       let j = i + 1 + Random.int (Array.length ar - i - 1) in
       (* Swap i and j *)
       let tmp = ar.(i) in
       ar.(i) &lt;- ar.(j);
       ar.(j) &lt;- tmp
    done
  ;;
val permute : 'a array -&gt; unit = &lt;fun&gt;
</programlisting>
      <para>
        From a syntactic perspective, you should note the keywords that
        distinguish a for loop: <literal>for</literal>,
        <literal>to</literal>, <literal>do</literal> and
        <literal>done</literal>.
      </para>
      <para>
        Here's an example run of this code.
      </para>
      <programlisting language="ocaml">
# let ar = Array.init 20 ~f:(fun i -&gt; i);;
val ar : int array =
  [|0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19|]
# permute ar;;
- : unit = ()
# ar;;
- : int array =
[|14; 13; 1; 3; 2; 19; 17; 18; 9; 16; 15; 7; 12; 11; 4; 10; 0; 5; 6; 8|]
</programlisting>
      <para>
        OCaml also supports while loops, as shown in the following
        function for finding the first non-negative position in an
        array. Note that <literal>while</literal> (like
        <literal>for</literal>) is also a keyword.
      </para>
      <programlisting language="ocaml">
# let find_first_negative_entry ar =
     let pos = ref 0 in
     while !pos &lt; Array.length ar &amp;&amp; ar.(!pos) &gt;= 0 do
       pos := !pos + 1
     done;
     if !pos = Array.length ar then None else Some !pos
  ;;
            val find_first_negative_entry : int Core.Std.Array.t -&gt; int option = &lt;fun&gt;
# find_first_negative_entry [|1;2;0;3|];;
- : int option = None
# find_first_negative_entry [|1;-2;0;3|];;
- : int option = Some 1
</programlisting>
    </sect2>
  </sect1>
  <sect1 id="a-complete-program">
    <title>A complete program</title>
    <para>
      So far, we've played with the basic features of the language using
      the toplevel. Now we'll create a simple, complete stand-along
      program that does something useful: sum up a list of numbers read
      in from the standard input.
    </para>
    <para>
      Here's the code, which you can save in a file called
      <literal>sum.ml</literal>.
    </para>
    <programlisting language="ocaml">
(* file: sum.ml *)

open Core.Std

let rec read_and_accumulate accum =
  let line = In_channel.input_line In_channel.stdin in
  match line with
  | None -&gt; accum
  | Some x -&gt; read_and_accumulate (accum +. Float.of_string x)

let () =
  printf &quot;Total: %F\n&quot; (read_and_accumulate 0.)
</programlisting>
    <para>
      This is our first use of OCaml's input and output routines. The
      function <literal>read_and_accumulate</literal> is a recursive
      function that uses <literal>In_channel.input_line</literal> to
      read in lines one by one from the standard input, invoking itself
      at each iteration with its updated accumulated sum. Note that
      <literal>input_line</literal> returns an optional value, with
      <literal>None</literal> indicating the end of the input.
    </para>
    <para>
      After <literal>read_and_accumulate</literal> returns, the total
      needs to be printed. This is done using the
      <literal>printf</literal> command, which provides support for
      type-safe format strings, similar to what you'll find in a variety
      of languages. The format string is parsed by the compiler and used
      to determine the number and type of the remaining arguments that
      are required. In this case, there is a single formatting
      directive, <literal>%F</literal>, so <literal>printf</literal>
      expects one additional argument of type <literal>float</literal>.
    </para>
    <sect2 id="compiling-and-running">
      <title>Compiling and running</title>
      <para>
        We can use <literal>ocamlbuild</literal> to compile the program.
        We'll need to create a file, in the same directory as
        <literal>sum.ml</literal>, called <literal>_tags</literal>. We
        can put the following in <literal>_tags</literal> to indicate
        that we're building against Core, and that threads should be
        enabled, which is required by Core.
      </para>
      <programlisting>
true:package(core),thread
</programlisting>
      <para>
        With our <literal>_tags</literal> file in place, we can build
        our executable by issuing this command.
      </para>
      <programlisting>
ocamlbuild -use-ocamlfind sum.native
</programlisting>
      <para>
        The <literal>.native</literal> suffix indicates that we're
        building a native-code executable, which we'll discuss more in
        <xref linkend="files-modules-and-programs"/>. Once the
        build completes, we can use the resulting program like any
        command-line utility. In this example, we can just type in a
        sequence of numbers, one per line, hitting control-d to exit
        when the input is complete.
      </para>
      <programlisting>
max $ ./sum.native
1
2
3
94.5
Total: 100.5
</programlisting>
      <para>
        More work is needed to make a really usable command-line
        program, including a proper command-line parsing interface and
        better error handling, all of which is covered in
        <xref linkend="command-line-parsing"/>.
      </para>
    </sect2>
  </sect1>
  <sect1 id="where-to-go-from-here">
    <title>Where to go from here</title>
    <para>
      That's it for our guided tour! There are plenty of features left
      to touch upon and lots of details to explain, but the hope is that
      this has given you enough of a feel for the language that you have
      a sense as to what to expect, and will be comfortable reading
      examples in the rest of the book.
    </para>
  </sect1>
</chapter><chapter id="variables-and-functions">
  <title>Variables and Functions</title>
  <para>
    Variables and functions are fundamental ideas that show up in
    virtually all programming languages. But OCaml has a different take
    on these basic concepts, and so we'll spend some time digging into
    the details so you can see how OCaml's variables and functions
    differ from what you may have encountered in other languages.
  </para>
  <sect1 id="variables">
    <title>Variables</title>
    <para>
      At its simplest, a variable is an identifier whose meaning is
      bound to a particular value. In OCaml these bindings are often
      introduced using the <literal>let</literal> keyword. We can type a
      so-called <emphasis>top-level</emphasis> <literal>let</literal>
      binding into <literal>utop</literal> with the following syntax to
      bind a new variable. Note that variable names must start with a
      lowercase letter.
    </para>
    <programlisting language="ocaml">
let &lt;identifier&gt; = &lt;expr&gt;
</programlisting>
    <para>
      As we'll see when we get to the module system in
      <xref linkend="files-modules-and-programs"/>, this same
      syntax is used for let bindings at the top-level of a module.
    </para>
    <para>
      Every variable binding has a <emphasis>scope</emphasis>, which is
      the portion of the code that can refer to that binding. The scope
      of a top-level let binding is everything that follows it in the
      session, when using <literal>utop</literal>, or, when using
      modules, for the remainder of the module.
    </para>
    <para>
      Here's a simple example.
    </para>
    <programlisting language="ocaml">
# let x = 3;;
val x : int = 3
# let y = 4;;
val y : int = 4
# let z = x + y;;
val z : int = 7
</programlisting>
    <para>
      <literal>let</literal> can also be used to create a variable
      binding whose scope is limited to a particular expression, using
      the following syntax.
    </para>
    <programlisting language="ocaml">
let &lt;identifier&gt; = &lt;expr1&gt; in &lt;expr2&gt;
</programlisting>
    <para>
      This first evaluates <emphasis><literal>expr1</literal></emphasis>
      and then evaluates <emphasis><literal>expr2</literal></emphasis>
      with <emphasis><literal>identifier</literal></emphasis> bound to
      whatever value was produced by the evaluation of
      <emphasis><literal>expr1</literal></emphasis>. Here's how it looks
      in practice.
    </para>
    <programlisting language="ocaml">
# let languages = &quot;OCaml,Perl,C++,C&quot;;;
val languages : string = &quot;OCaml,Perl,C++,C&quot;
# let dashed_languages =
    let language_list = String.split languages ~on:',' in
    String.concat ~sep:&quot;-&quot; language_list
  ;;
val dashed_languages : string = &quot;OCaml-Perl-C++-C&quot;
</programlisting>
    <para>
      Note that the scope of <literal>language_list</literal> is just
      the expression
      <literal>String.concat ~sep:&quot;-&quot; language_list</literal>,
      and is not available at the toplevel, as we can see if we try to
      access it now.
    </para>
    <programlisting language="ocaml">
# language_list;;
Characters 0-13:
  language_list;;
  ^^^^^^^^^^^^^
Error: Unbound value language_list
</programlisting>
    <para>
      A let binding in an inner scope can <emphasis>shadow</emphasis>,
      or hide, the definition from an outer scope. So, for example, we
      could have written the <literal>dashed_languages</literal> example
      as follows:
    </para>
    <programlisting language="ocaml">
# let languages = &quot;OCaml,Perl,C++,C&quot;;;
val languages : string = &quot;OCaml,Perl,C++,C&quot;
# let dashed_languages =
     let languages = String.split languages ~on:',' in
     String.concat ~sep:&quot;-&quot; languages
  ;;
val dashed_languages : string = &quot;OCaml-Perl-C++-C&quot;
</programlisting>
    <para>
      This time, in the inner scope we called the list of strings
      <literal>languages</literal> instead of
      <literal>language_list</literal>, thus hiding the original
      definition of <literal>languages</literal>. But once the
      definition of <literal>dashed_languages</literal> is complete, the
      inner scope has closed and the original definition of languages
      reappears.
    </para>
    <programlisting language="ocaml">
# languages;;
- : string = &quot;OCaml,Perl,C++,C&quot;
</programlisting>
    <para>
      One common idiom is to use a series of nested
      <literal>let</literal>/<literal>in</literal> expressions to build
      up the components of a larger computation. Thus, we might write:
    </para>
    <programlisting language="ocaml">
# let area_of_ring inner_radius outer_radius =
     let pi = acos (-1.) in
     let area_of_circle r = pi *. r *. r in
     area_of_circle outer_radius -. area_of_circle inner_radius
  ;;
# area_of_ring 1. 3.;;
- : float = 25.1327412287183449
</programlisting>
    <para>
      It's important not to confuse a sequence of let bindings with the
      modification of a mutable variable. For example, consider how
      <literal>area_of_ring</literal> would work if we had instead
      written this purposefully confusing bit of code.
    </para>
    <programlisting language="ocaml">
# let area_of_ring inner_radius outer_radius =
     let pi = acos (-1.) in
     let area_of_circle r = pi *. r *. r in
     let pi = 0. in
     area_of_circle outer_radius -. area_of_circle inner_radius
  ;;
</programlisting>
    <para>
      Here, we redefined <literal>pi</literal> to be zero after the
      definition of <literal>area_of_circle</literal>. You might think
      that this would mean that the result of the computation would now
      be zero, but you'd be wrong. In fact, the behavior of the function
      is unchanged. That's because the original definition of
      <literal>pi</literal> wasn't changed, it was just shadowed, so
      that any subsequent reference to <literal>pi</literal> would see
      the new definition of <literal>pi</literal> as zero. But there is
      no later use of <literal>pi</literal>, so the binding doesn't make
      a difference. Indeed, if you type the example above into the
      toplevel, OCaml will warn you that the definition is unused.
    </para>
    <programlisting language="ocaml">
Characters 126-128:
    let pi = 0. in
        ^^
Warning 26: unused variable pi.
</programlisting>
    <para>
      In OCaml, let bindings are immutable. As we'll see in
      <xref linkend="imperative-programming"/>, there are
      mutable values in OCaml, but no mutable variables.
    </para>
    <note> <title> 
    Why don't variables vary?
    </title>
    <para>
      One source of confusion for people new to functional languages is
      the fact that variables are typically immutable. This seems pretty
      surprising even on linguistic terms. Isn't the whole point of a
      variable that it can vary?
    </para>
    <para>
      The answer to this is that variables in a functional language are
      really more like variables in an equation. If you think about the
      mathematical equation <literal>x (y + z) = x y + x z</literal>,
      there's no notion of mutating the variables <literal>x</literal>,
      <literal>y</literal> and <literal>z</literal>. They vary in the
      sense that you can instantiate this equation with different
      numbers for those variables, and it still holds.
    </para>
    <para>
      The same is true in a functional language. A function can be
      applied to different inputs, and thus its variables will take on
      different values, even without mutation.
    </para>
    </note>

    <sect2 id="pattern-matching-and-let">
      <title>Pattern matching and <literal>let</literal></title>
      <para>
        Another useful feature of let bindings is that they support the
        use of <emphasis>patterns</emphasis> on the left-hand side.
        Consider the following code, which uses
        <literal>List.unzip</literal>, a function for converting a list
        of pairs into a pair of lists.
      </para>
      <programlisting language="ocaml">
# let (ints,strings) = List.unzip [(1,&quot;one&quot;); (2,&quot;two&quot;); (3,&quot;three&quot;)];;
val ints : int list = [1; 2; 3]
val strings : string list = [&quot;one&quot;; &quot;two&quot;; &quot;three&quot;]
</programlisting>
      <para>
        Here, <literal>(ints,strings)</literal> is a pattern, and the
        <literal>let</literal> binding assigns values to both of the
        identifiers that show up in that pattern. A pattern is
        essentially a description of the shape of a data-structure,
        where some components are identifiers to be bound. As we saw in
        <xref linkend="tuples-lists-options-and-pattern-matching"/>,
        OCaml has patterns for a variety of different data-types.
      </para>
      <para>
        Using a pattern in a let-binding makes the most sense for a
        pattern that is <emphasis>irrefutable</emphasis>,
        <emphasis>i.e.</emphasis>, where any value of the type in
        question is guaranteed to match the pattern. Tuple and record
        patterns are irrefutable, but list patterns are not. Consider
        the following code that implements a function for up-casing the
        first element of a comma-separated list.
      </para>
      <programlisting language="ocaml">
# let upcase_first_entry line =
     let (first :: rest) = String.split ~on:',' line in
     String.concat ~sep:&quot;,&quot; (String.uppercase first :: rest)
  ;;
val upcase_first_entry : string -&gt; string = &lt;fun&gt;
Characters 40-53:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
</programlisting>
      <para>
        This case can't really come up in practice, because
        <literal>String.split</literal> always returns a list with at
        least one element. But the compiler doesn't know this, and so it
        emits the warning. It's generally better to use a match
        statement to handle such cases explicitly:
      </para>
      <programlisting language="ocaml">
# let upcase_first_entry line =
     match String.split ~on:',' line with
     | [] -&gt; assert false (* String.split returns at least one element *)
     | first :: rest -&gt; String.concat ~sep:&quot;,&quot; (String.uppercase first :: rest)
  ;;
val upcase_first_entry : string -&gt; string = &lt;fun&gt;
</programlisting>
    </sect2>
  </sect1>
  <sect1 id="functions">
    <title>Functions</title>
    <para>
      OCaml being a functional language, it's no surprise that functions
      are an important and pervasive element of programming in OCaml.
      Indeed, we've seen functions pop up already in many of the
      examples we've looked at thus far. But while we've introduced the
      basics of functions, we're now going to cover them in more depth,
      starting from the foundations.
    </para>
    <sect2 id="anonymous-functions">
      <title>Anonymous Functions</title>
      <para>
        We'll start by looking at the most basic style of function
        declaration in OCaml: the <emphasis>anonymous</emphasis>
        function. An anonymous function is a function value that is
        declared without being named. They can be declared using the
        <literal>fun</literal> keyword, as shown here.
      </para>
      <programlisting language="ocaml">
# (fun x -&gt; x + 1);;
- : int -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        Anonymous functions aren't named, but they can be used for many
        different purposes nonetheless. You can, for example, apply an
        anonymous function to an argument.
      </para>
      <programlisting language="ocaml">
# (fun x -&gt; x + 1) 7;;
- : int = 8
</programlisting>
      <para>
        Or pass it to another function. Passing functions to iteration
        functions like <literal>List.map</literal> is probably the most
        common use-case for anonymous functions.
      </para>
      <programlisting language="ocaml">
# List.map ~f:(fun x -&gt; x + 1) [1;2;3];;
- : int list = [2; 3; 4]
</programlisting>
      <para>
        Or even stuff them into a data structure.
      </para>
      <programlisting language="ocaml">
# let increments = [ (fun x -&gt; x + 1); (fun x -&gt; x + 2) ] ;;
val increments : (int -&gt; int) list = [&lt;fun&gt;; &lt;fun&gt;]
# List.map ~f:(fun f -&gt; f 5) increments;;
- : int list = [6; 7]
</programlisting>
      <para>
        It's worth stopping for a moment to puzzle this example out,
        since this kind of higher-order use of functions can be a bit
        obscure at first. The first thing to understand is the function
        <literal>(fun f -&gt; f 5)</literal>, which takes a function as
        its argument and applies that function to the number
        <literal>5</literal>. The invocation of
        <literal>List.map</literal> applies
        <literal>(fun f -&gt; f 5)</literal> to the elements of the
        <literal>increments</literal> list (which are themselves
        functions) and returns the list containing the results of these
        function applications.
      </para>
      <para>
        The key thing to understand is that functions are ordinary
        values in OCaml, and you can do everything with them that you'd
        do with an ordinary value, including passing them to and
        returning them from other functions and storing them in data
        structures. We even name functions in the same way that we name
        other values, by using a let binding.
      </para>
      <programlisting language="ocaml">
# let plusone = (fun x -&gt; x + 1);;
val plusone : int -&gt; int = &lt;fun&gt;
# plusone 3;;
- : int = 4
</programlisting>
      <para>
        Defining named functions is so common that there is a built in
        syntax for it. Thus, the following definition of
        <literal>plusone</literal> is equivalent to the definition
        above.
      </para>
      <programlisting language="ocaml">
# let plusone x = x + 1;;
val plusone : int -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        This is the most common and convenient way to declare a
        function, but syntactic niceties aside, the two styles of
        function definition are entirely equivalent.
      </para>
      <note>
      <title>
      <literal>let</literal> and <literal>fun</literal>
      </title>
      <para>
        Functions and let bindings have a lot to do with each other. In
        some sense, you can think of the argument of a function as a
        variable being bound to the value passed by the caller. Indeed,
        the following two expressions are nearly equivalent:
      </para>
      <programlisting language="ocaml">
# (fun x -&gt; x + 1) 7;;
- : int = 8
# let x = 7 in x + 1;;
- : int = 8
</programlisting>
      <para>
        This connection is important, and will come up more when
        programming in a monadic style, as we'll see in
        <xref linkend="concurrent-programming-with-async"/>.
      </para>
      </note>
    </sect2>
    <sect2 id="multi-argument-functions">
      <title>Multi-argument functions</title>
      <para>
        OCaml of course also supports multi-argument functions, for
        example:
      </para>
      <programlisting language="ocaml">
# let abs_diff x y = abs (x - y);;
val abs_diff : int -&gt; int -&gt; int = &lt;fun&gt;
# abs_diff 3 4;;
- : int = 1
</programlisting>
      <para>
        You may find the type signature of <literal>abs_diff</literal>
        with all of its arrows a little hard to parse. To understand
        what's going on, let's rewrite <literal>abs_diff</literal> in an
        equivalent form, using the <literal>fun</literal> keyword:
      </para>
      <programlisting language="ocaml">
# let abs_diff =
    (fun x -&gt; (fun y -&gt; abs (x - y)));;
val abs_diff : int -&gt; int -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        This rewrite makes it explicit that <literal>abs_diff</literal>
        is actually a function of one argument that returns another
        function of one argument, which itself returns the final
        computation. Because the functions are nested, the inner
        expression <literal>abs (x - y)</literal> has access to both
        <literal>x</literal>, which was captured by the first function
        application, and <literal>y</literal>, which was captured by the
        second one.
      </para>
      <para>
        This style of function is called a <emphasis>curried</emphasis>
        function. (Currying is named after Haskell Curry, a famous
        logician who had a significant impact on the design and theory
        of programming languages.) The key to interpreting the type
        signature of a curried function is the observation that
        <literal>-&gt;</literal> is right-associative. The type
        signature of <literal>abs_diff</literal> can therefore be
        parenthesized as follows. This doesn't change the meaning of the
        signature, but it makes it easier to see how the currying fits
        in.
      </para>
      <programlisting language="ocaml">
val abs_diff : int -&gt; (int -&gt; int)
</programlisting>
      <para>
        Currying is more than just a theoretical curiosity. You can make
        use of currying to specialize a function by feeding in some of
        the arguments. Here's an example where we create a specialized
        version of <literal>abs_diff</literal> that measures the
        distance of a given number from <literal>3</literal>.
      </para>
      <programlisting language="ocaml">
# let dist_from_3 = abs_diff 3;;
val dist_from_3 : int -&gt; int = &lt;fun&gt;
# dist_from_3 8;;
- : int = 5
# dist_from_3 (-1);;
- : int = 4
</programlisting>
      <para>
        The practice of applying some of the arguments of a curried
        function to get a new function is called <emphasis>partial
        application</emphasis>.
      </para>
      <para>
        Note that the <literal>fun</literal> keyword supports its own
        syntax for currying, so the following definition of
        <literal>abs_diff</literal> is equivalent to the definition
        above.
      </para>
      <programlisting language="ocaml">
# let abs_diff = (fun x y -&gt; abs (x - y));;
</programlisting>
      <para>
        You might worry that curried functions are terribly expensive,
        but this is not the case. In OCaml, there is no penalty for
        calling a curried function with all of its arguments. (Partial
        application, unsurprisingly, does have a small extra cost.)
      </para>
      <para>
        Currying is not the only way of writing a multi-argument
        function in OCaml. It's also possible to use the different arms
        of a tuple as different arguments. So, we could write:
      </para>
      <programlisting language="ocaml">
# let abs_diff (x,y) = abs (x - y)
val abs_diff : int * int -&gt; int = &lt;fun&gt;
# abs_diff (3,4);;
- : int = 1
</programlisting>
      <para>
        OCaml handles this calling convention efficiently as well. In
        particular it does not generally have to allocate a tuple just
        for the purpose of sending arguments to a tuple-style function.
        (You can't, however, use partial application for this style of
        function.)
      </para>
      <para>
        There are small tradeoffs between these two approaches, but most
        of the time, one should stick to currying, since it's the
        default style in the OCaml world.
      </para>
    </sect2>
    <sect2 id="recursive-functions">
      <title>Recursive functions</title>
      <para>
        A function is <emphasis>recursive</emphasis> if it refers to
        itself in its definition. Recursion is important in any
        programming language, but is particularly important in
        functional languages, because it is the fundamental building
        block that is used for building looping constructs. (As we'll
        see in <xref linkend="imperative-programming"/>, OCaml
        also supports imperative looping constructs like
        <literal>for</literal> and <literal>while</literal>, but these
        are only useful when using OCaml's imperative features.)
      </para>
      <para>
        In order to define a recursive function, you need to mark the
        let binding as recursive with the <literal>rec</literal>
        keyword, as shown in this example:
      </para>
      <programlisting language="ocaml">
# let rec find_first_stutter list =
    match list with
    | [] | [_] -&gt;
      (* only zero or one elements, so no repeats *)
      None
    | x :: y :: tl -&gt;
      if x = y then Some x else find_first_stutter (y::tl)
   ;;
val find_first_stutter : 'a list -&gt; 'a option = &lt;fun&gt;
</programlisting>
      <para>
        Note that in the above, the pattern
        <literal>| [] | [_]</literal> is actually the combination of two
        patterns; <literal>[]</literal>, matching the empty list, and
        <literal>[_]</literal>, matching any single element list. The
        <literal>_</literal> is there so we don't have to put an
        explicit name on that single element.
      </para>
      <para>
        We can also define multiple mutually recursive values by using
        <literal>let rec</literal> combined with the
        <literal>and</literal> keyword. Here's a (gratuitously
        inefficient) example.
      </para>
      <programlisting language="ocaml">
# let rec is_even x =
    if x = 0 then true else is_odd (x - 1)
  and is_odd x =
    if x = 0 then false else is_even (x - 1)
 ;;
val is_even : int -&gt; bool = &lt;fun&gt;
val is_odd : int -&gt; bool = &lt;fun&gt;
# List.map ~f:is_even [0;1;2;3;4;5];;
- : bool list = [true; false; true; false; true; false]
# List.map ~f:is_odd [0;1;2;3;4;5];;
- : bool list = [false; true; false; true; false; true]
</programlisting>
      <para>
        OCaml distinguishes between non-recursive definitions (using
        <literal>let</literal>) and recursive definitions (using
        <literal>let rec</literal>) largely for technical reasons: the
        type-inference algorithm needs to know when a set of function
        definitions are mutually recursive, and for reasons that don't
        apply to a pure language like Haskell, these have to be marked
        explicitly by the programmer.
      </para>
      <para>
        But this decision has some good effects. For one thing,
        recursive (and especially mutually recursive) definitions are
        harder to reason about than non-recursive definitions that
        proceed in order, each building on top of what has already been
        defined. It's therefore useful that, in the absence of an
        explicit marker, new definitions can only build upon ones that
        were previously defined.
      </para>
      <para>
        In addition, having a non-recursive form makes it easier to
        create a new definition that extends and supersedes an existing
        one by shadowing it.
      </para>
    </sect2>
    <sect2 id="prefix-and-infix-operators">
      <title>Prefix and Infix operators</title>
      <para>
        So far, we've seen examples of functions used in both prefix and
        infix style:
      </para>
      <programlisting language="ocaml">
# Int.max 3 4;;  (* prefix *)
- : int = 4
# 3 + 4;;        (* infix  *)
- : int = 7
</programlisting>
      <para>
        You might not have thought of the second example as an ordinary
        function, but it very much is. Infix operators like
        <literal>+</literal> really only differ syntactically from other
        functions. In fact, if we put parenthesis around an infix
        operator, you can use it as an ordinary prefix function.
      </para>
      <programlisting language="ocaml">
# (+) 3 4;;
- : int = 7
# List.map ~f:((+) 3) [4;5;6];;
- : int list = [7; 8; 9]
</programlisting>
      <para>
        In the second expression above, we've partially applied
        <literal>(+)</literal> to gain a function that increments its
        single argument by <literal>3</literal>, and then applied that
        to all the elements of a list.
      </para>
      <para>
        A function is treated syntactically as an operator if the name
        of that function is chosen from one of a specialized set of
        identifiers. This set includes any identifier that is a sequence
        of characters from the following set
      </para>
      <programlisting>
! $ % &amp; * + - . / : &lt; = &gt; ? @ ^ | ~
</programlisting>
      <para>
        or is one of a handful of pre-determined strings, including
        <literal>mod</literal>, the modulus operator, and
        <literal>lsl</literal>, for &quot;logical shift left&quot;, a
        bit-shifting operation.
      </para>
      <para>
        We can define (or redefine) the meaning of an operator as
        follows. Here's an example of a simple vector-addition operator
        on int pairs.
      </para>
      <programlisting language="ocaml">
# let (+!) (x1,y1) (x2,y2) = (x1 + x2, y1 + y2);;
val ( +! ) : int * int -&gt; int * int -&gt; int * int = &lt;fun&gt;
# (3,2) +! (-2,4);;
- : int * int = (1,6)
</programlisting>
      <para>
        The syntactic role of an operator is typically determined by its
        first character or two, though there are a few exceptions. This
        table breaks the different operators and other syntactic forms
        into groups from highest to lowest precedence, explaining how
        each behaves syntactically. We write <literal>!</literal>... to
        indicate the class of operators beginning with
        <literal>!</literal>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="37*" align="left"/>
          <colspec colwidth="23*" align="left"/>
          <thead>
            <row>
              <entry>
                Prefix
              </entry>
              <entry>
                Usage
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>!</literal>..., <literal>?</literal>...,
                <literal>~</literal>...
              </entry>
              <entry>
                Unary prefix
              </entry>
            </row>
            <row>
              <entry>
                <literal>.</literal>, <literal>.(</literal>,
                <literal>.[</literal>
              </entry>
              <entry>
              </entry>
            </row>
            <row>
              <entry>
                function application, constructor,
                <literal>assert</literal>, <literal>lazy</literal>
              </entry>
              <entry>
                Left associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>-</literal>, <literal>-.</literal>
              </entry>
              <entry>
                Unary prefix
              </entry>
            </row>
            <row>
              <entry>
                <literal>**</literal>..., <literal>lsl</literal>,
                <literal>lsr</literal>, <literal>asr</literal>
              </entry>
              <entry>
                Right associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>*</literal>..., <literal>/</literal>...,
                <literal>%</literal>..., <literal>mod</literal>,
                <literal>land</literal>, <literal>lor</literal>,
                <literal>lxor</literal>
              </entry>
              <entry>
                Left associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>+</literal>, <literal>-</literal>
              </entry>
              <entry>
                Left associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>::</literal>
              </entry>
              <entry>
                Right associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>@</literal>..., <literal>^</literal>...
              </entry>
              <entry>
                Right associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>=</literal>..., <literal>&lt;</literal>...,
                <literal>&gt;</literal>..., <literal>|</literal>...,
                <literal>&amp;</literal>..., <literal>$</literal>...
              </entry>
              <entry>
                Left associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>&amp;</literal>, <literal>&amp;&amp;</literal>
              </entry>
              <entry>
                Right associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>or</literal>, <literal>||</literal>
              </entry>
              <entry>
                Right associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>,</literal>
              </entry>
              <entry>
              </entry>
            </row>
            <row>
              <entry>
                <literal>&lt;-</literal>, <literal>:=</literal>
              </entry>
              <entry>
                Right associative
              </entry>
            </row>
            <row>
              <entry>
                <literal>if</literal>
              </entry>
              <entry>
              </entry>
            </row>
            <row>
              <entry>
                <literal>;</literal>
              </entry>
              <entry>
                Right associative
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        There's one important special case: <literal>-</literal> and
        <literal>-.</literal>, which are the integer and floating point
        subtraction operators, can act as both prefix operators (for
        negation) and infix operators (for subtraction), So, both
        <literal>-x</literal> and <literal>x - y</literal> are
        meaningful expressions.
      </para>
      <para>
        Here's an example of a very useful operator that's defined in
        Core, following these rules. Here's the definition:
      </para>
      <programlisting language="ocaml">
# let (|&gt;) x f = f x ;;
val ( |&gt; ) : 'a -&gt; ('a -&gt; 'b) -&gt; 'b = &lt;fun&gt;
</programlisting>
      <para>
        It's not quite obvious at first what the purpose of this
        operator is: it just takes some value and a function, and
        applies the function to the value. But its utility is clearer
        when you see it in action. It works as a kind of sequencing
        operator, similar in spirit to using pipe in the UNIX shell.
        Consider, for example, the following code for printing out the
        unique elements of your <literal>PATH</literal>. Note that
        <literal>List.dedup</literal> below removes duplicates from a
        list by sorting the list using the provided comparison function.
      </para>
      <programlisting language="ocaml">
# Sys.getenv_exn &quot;PATH&quot;
  |&gt; String.split ~on:':'
  |&gt; List.dedup ~compare:String.compare
  |&gt; List.iter ~f:print_endline
  ;;
/bin
/opt/local/bin
/usr/bin
/usr/local/bin
- : unit = ()
</programlisting>
      <para>
        Note that we can do this without <literal>|&gt;</literal>, but
        the result is a bit more verbose.
      </para>
      <programlisting language="ocaml">
# let path = Sys.getenv_exn &quot;PATH&quot; in
  let split_path = String.split ~on:':' path in
  let deduped_path = List.dedup ~compare:String.compare split_path in
  List.iter ~f:print_endline deduped_path
  ;;
/bin
/opt/local/bin
/usr/bin
/usr/local/bin
- : unit = ()
</programlisting>
      <para>
        An important part of what's happening here is partial
        application. Normally, <literal>List.iter</literal> takes two
        arguments: a function to be called on each element of the list,
        and the list to iterate over. We can call
        <literal>List.iter</literal> with all its arguments:
      </para>
      <programlisting language="ocaml">
# List.iter ~f:print_endline [&quot;Two&quot;; &quot;lines&quot;];;
Two
lines
- : unit = ()
</programlisting>
      <para>
        Or, we can pass it just the function argument, leaving us with a
        function for printing out a list of strings.
      </para>
      <programlisting language="ocaml">
# List.iter ~f:print_endline;;
- : string list -&gt; unit = &lt;fun&gt;
</programlisting>
      <para>
        It is this later form that we're using in the
        <literal>|&gt;</literal> pipeline above.
      </para>
      <para>
        Note that <literal>|&gt;</literal> only works in the intended
        way because it is left-associative. Indeed, let's see what
        happens if we try using a right associative operator, like (^!).
      </para>
      <programlisting language="ocaml">
# let (^!) = (|&gt;);;
val ( ^! ) : 'a -&gt; ('a -&gt; 'b) -&gt; 'b = &lt;fun&gt;
# Sys.getenv_exn &quot;PATH&quot;
  ^! String.split ~on:':'
  ^! List.dedup ~compare:String.compare
  ^! List.iter ~f:print_endline
  ;;
        Characters 93-119:
    ^! List.iter ~f:print_endline
       ^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This expression has type string list -&gt; unit
       but an expression was expected of type
         (string list -&gt; string list) -&gt; 'a
</programlisting>
      <para>
        The above type error is a little bewildering at first glance.
        What's going on is that, because <literal>^!</literal> is right
        associative, the operator is trying to feed the value
        <literal>List.dedup ~compare:String.compare</literal> to the
        function <literal>List.iter ~f:print_endline</literal>. But
        <literal>List.iter ~f:print_endline</literal> expects a list of
        strings as its input, not a function.
      </para>
      <para>
        The type error aside, this example highlights the importance of
        choosing the operator you use with care, particularly with
        respect to associativity.
      </para>
    </sect2>
    <sect2 id="declaring-functions-with-function">
      <title>Declaring functions with
      <literal>function</literal></title>
      <para>
        Another way to define a function is using the
        <literal>function</literal> keyword. Instead of having syntactic
        support for declaring multi-argument (curried) functions,
        <literal>function</literal> has built-in pattern matching.
        Here's an example:
      </para>
      <programlisting language="ocaml">
# let some_or_zero = function
     | Some x -&gt; x
     | None -&gt; 0
  ;;
val some_or_zero : int option -&gt; int = &lt;fun&gt;
# List.map ~f:some_or_zero [Some 3; None; Some 4];;
- : int list = [3; 0; 4]
</programlisting>
      <para>
        This is equivalent to combining an ordinary function definition
        with a <literal>match</literal>.
      </para>
      <programlisting language="ocaml">
# let some_or_zero num_opt =
    match num_opt with
    | Some x -&gt; x
    | None -&gt; 0
  ;;
val some_or_zero : int option -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        We can also combine the different styles of function declaration
        together, as in the following example where we declare a two
        argument (curried) function with a pattern match on the second
        argument.
      </para>
      <programlisting language="ocaml">
# let some_or_default default = function
     | Some x -&gt; x
     | None -&gt; default
  ;;
# some_or_default 3 (Some 5);;
- : int = 5
# List.map ~f:(some_or_default 100) [Some 3; None; Some 4];;
- : int list = [3; 100; 4]
</programlisting>
      <para>
        Also, note the use of partial application to generate the
        function passed to <literal>List.map</literal>. In other words,
        <literal>some_or_default 100</literal> is a function that was
        created by feeding just the first argument to
        <literal>some_or_default</literal>.
      </para>
    </sect2>
    <sect2 id="labeled-arguments">
      <title>Labeled Arguments</title>
      <para>
        Up until now, we've written functions where the arguments are
        specified positionally, <emphasis>i.e.</emphasis>, by the order
        in which the arguments are passed to the function. OCaml also
        supports labeled arguments, which let you identify a function
        argument by name. Labels are marked by a leading tilde, and a
        label (followed by a colon) are put in front of the variable to
        be labeled.
      </para>
      <programlisting language="ocaml">
# let ratio ~num ~denom = float num /. float denom;;
val ratio : num:int -&gt; denom:int -&gt; float = &lt;fun&gt;
</programlisting>
      <para>
        We can then provide a labeled argument using a similar
        convention. As you can see, the arguments can be provided in any
        order.
      </para>
      <programlisting language="ocaml">
# ratio ~num:3 ~denom:10;;
- : float = 0.3
# ratio ~denom:10 ~num:3;;
- : float = 0.3
</programlisting>
      <para>
        OCaml also supports <emphasis>label punning</emphasis>, meaning
        that you get to drop the text after the <literal>:</literal> if
        the name of the label and the name of the variable being used
        are the same. We've seen above how label punning works when
        defining a function. The following shows how it can be used when
        invoking a function.
      </para>
      <programlisting language="ocaml">
# let num = 3;;
# let denom = 4;;
# ratio ~num ~denom;;
- : float = 0.75
</programlisting>
      <para>
        Labeled arguments are useful in a few different cases:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            When defining a function with lots of arguments. Beyond a
            certain number, arguments are easier to remember by name
            than by position.
          </para>
        </listitem>
        <listitem>
          <para>
            When defining functions that have multiple arguments that
            might get confused with each other. This is most at issue
            when the arguments are of the same type. For example,
            consider this signature for a function for extracting a
            substring of another string.
          </para>
          <programlisting language="ocaml">
val substring: string -&gt; int -&gt; int -&gt; string
</programlisting>
          <para>
            where the two ints are the starting position and length of
            the substring to extract. Labeled arguments can make this
            signature clearer:
          </para>
          <programlisting language="ocaml">
val substring: string -&gt; pos:int -&gt; len:int -&gt; string
</programlisting>
          <para>
            This improves the readability of both the signature and of
            client code that makes use of <literal>substring</literal>,
            and makes it harder to accidentally swap the position and
            the length.
          </para>
        </listitem>
        <listitem>
          <para>
            When the meaning of a particular argument is unclear from
            the type alone. For example, consider a function for
            creating a hashtable where the first argument is the initial
            size of the table, and the second argument is a flag which,
            when true, indicates that the hashtable will reduce its size
            when the hashtable contains few elements. The following
            signature doesn't give you much of a hint as to the meaning
            of the arguments.
          </para>
          <programlisting language="ocaml">
val create_hashtable : int -&gt; bool -&gt; ('a,'b) Hashtable.t
</programlisting>
          <para>
            but with labeled arguments, we can make the intent much
            clearer.
          </para>
          <programlisting language="ocaml">
val create_hashtable : init_size:int -&gt; allow_shrinking:bool -&gt; ('a,'b) Hashtable.t
</programlisting>
        </listitem>
        <listitem>
          <para>
            When you want flexibility on the order in which arguments
            are passed. Consider a function like
            <literal>List.iter</literal>, that takes two arguments: a
            function, and a list of elements to call that function on. A
            common pattern is to partially apply
            <literal>List.iter</literal> by giving it just the function,
            as in the following example from earlier in the chapter.
            This requires putting the function argument first.
          </para>
          <programlisting language="ocaml">
# Sys.getenv_exn &quot;PATH&quot;
  |&gt; String.split ~on:':'
  |&gt; List.dedup ~compare:String.compare
  |&gt; List.iter ~f:print_endline
  ;;
</programlisting>
          <para>
            In other cases, you want to put the function argument
            second. One common reason is readability. In particular, a
            multi-line function passed as an argument to another
            function is easiest to read when it is the final argument to
            that function.
          </para>
        </listitem>
      </itemizedlist>
      <sect3 id="higher-order-functions-and-labels">
        <title>Higher-order functions and labels</title>
        <para>
          One surprising gotcha with labeled arguments is that while
          order doesn't matter when calling a function with labeled
          arguments, it does matter in a higher-order context,
          <emphasis>e.g.</emphasis>, when passing a function with
          labeled arguments to another function. Here's an example.
        </para>
        <programlisting language="ocaml">
# let apply_to_tuple f (first,second) = f ~first ~second;;
val apply_to_tuple : (first:'a -&gt; second:'b -&gt; 'c) -&gt; 'a * 'b -&gt; 'c = &lt;fun&gt;
</programlisting>
        <para>
          Here, the definition of <literal>apply_to_tuple</literal> sets
          up the expectation that its first argument is a function with
          two labeled arguments, <literal>first</literal> and
          <literal>second</literal>, listed in that order. We could have
          defined <literal>apply_to_tuple</literal> differently to
          change the order in which the labeled arguments were listed.
        </para>
        <programlisting language="ocaml">
# let apply_to_tuple_2 f (first,second) = f ~second ~first;;
val apply_to_tuple_2 : (second:'a -&gt; first:'b -&gt; 'c) -&gt; 'b * 'a -&gt; 'c = &lt;fun&gt;
</programlisting>
        <para>
          It turns out this order of listing matters. In particular, if
          we define a function that has a different order
        </para>
        <programlisting language="ocaml">
# let divide ~first ~second = first / second;;
val divide : first:int -&gt; second:int -&gt; int = &lt;fun&gt;
</programlisting>
        <para>
          we'll find that it can't be passed in to
          <literal>apply_to_tuple_2</literal>.
        </para>
        <programlisting language="ocaml">
# apply_to_tuple_2 divide (3,4);;
Characters 15-21:
  apply_to_tuple_2 divide (3,4);;
                   ^^^^^^
Error: This expression has type first:int -&gt; second:int -&gt; int
       but an expression was expected of type second:'a -&gt; first:'b -&gt; 'c
</programlisting>
        <para>
          But, it works smoothly with the original
          <literal>apply_to_tuple</literal>.
        </para>
        <programlisting language="ocaml">
# let apply_to_tuple f (first,second) = f ~first ~second;;
val apply_to_tuple : (first:'a -&gt; second:'b -&gt; 'c) -&gt; 'a * 'b -&gt; 'c = &lt;fun&gt;
# apply_to_tuple divide (3,4);;
- : int = 0
</programlisting>
        <para>
          So, even though the order of labeled arguments usually doesn't
          matter, it will sometimes bite you in higher-ordered contexts,
          where you're passing functions as arguments to other functions
          as we were in the above examples.
        </para>
      </sect3>
    </sect2>
    <sect2 id="optional-arguments">
      <title>Optional arguments</title>
      <para>
        An optional argument is like a labeled argument that the caller
        can choose whether or not to provide. Optional arguments are
        passed in using the same syntax as labeled arguments, and, like
        labeled arguments, optional arguments can be provided in any
        order.
      </para>
      <para>
        Here's an example of a string concatenation function with an
        optional separator. This function uses the <literal>^</literal>
        operator for simple pairwise string concatenation.
      </para>
      <programlisting language="ocaml">
# let concat ?sep x y =
     let sep = match sep with None -&gt; &quot;&quot; | Some x -&gt; x in
     x ^ sep ^ y
  ;;
val concat : ?sep:string -&gt; string -&gt; string -&gt; string = &lt;fun&gt;
# concat &quot;foo&quot; &quot;bar&quot;;;             (* without the optional argument *)
- : string = &quot;foobar&quot;
# concat ~sep:&quot;:&quot; &quot;foo&quot; &quot;bar&quot;;;    (* with the optional argument    *)
- : string = &quot;foo:bar&quot;
</programlisting>
      <para>
        Here, <literal>?</literal> is used in the definition of the
        function to mark <literal>sep</literal> as optional. And while
        the caller can pass a value of type <literal>string</literal>
        for <literal>sep</literal>, internally to the function,
        <literal>sep</literal> is seen as a
        <literal>string option</literal>, with <literal>None</literal>
        appearing when <literal>sep</literal> is not provided by the
        caller.
      </para>
      <para>
        In the above example, we had a bit of code to substitute in the
        empty string when no argument was provided. This is a common
        enough pattern that there's an explicit syntax for providing a
        default value, which allows us to write
        <literal>concat</literal> even more concisely.
      </para>
      <programlisting language="ocaml">
# let concat ?(sep=&quot;&quot;) x y = x ^ sep ^ y ;;
val concat : ?sep:string -&gt; string -&gt; string -&gt; string = &lt;fun&gt;
</programlisting>
      <para>
        Optional arguments are very useful, but they're also easy to
        abuse. The key advantage of optional arguments is that they let
        you write functions with multiple arguments that users can
        ignore most of the time, only worrying about them when they
        specifically want to invoke those options.
      </para>
      <para>
        The downside is that the caller may be unaware that there is a
        choice to be made, and so may unknowingly (and wrongly) pick
        that default behavior. Optional arguments really only make sense
        when the extra concision of omitting the argument overwhelms the
        corresponding loss of explicitness.
      </para>
      <para>
        This means that rarely used functions should not have optional
        arguments. A good rule of thumb is to avoid optional arguments
        for functions internal to a module, <emphasis>i.e.</emphasis>,
        functions that are not included in the module's interface, or
        <literal>mli</literal> file. We'll learn more about
        <literal>mli</literal>s in
        <xref linkend="files-modules-and-programs"/>.
      </para>
      <sect3 id="explicit-passing-of-an-optional-argument">
        <title>Explicit passing of an optional argument</title>
        <para>
          Under the covers, a function with an optional argument
          receives <literal>None</literal> when the caller doesn't
          provide the argument, and <literal>Some</literal> when it
          does. But the <literal>Some</literal> and
          <literal>None</literal> are normally not explicitly passed in
          by the caller.
        </para>
        <para>
          But sometimes, passing in <literal>Some</literal> or
          <literal>None</literal> explicitly is exactly what you want.
          OCaml lets you do this by using <literal>?</literal> instead
          of <literal>~</literal> to mark the argument. Thus, the
          following two lines are equivalent ways of specifying the
          <literal>sep</literal> argument to concat.
        </para>
        <programlisting language="ocaml">
# concat ~sep:&quot;:&quot; &quot;foo&quot; &quot;bar&quot;;; (* provide the optional argument *)
- : string = &quot;foo:bar&quot;
# concat ?sep:(Some &quot;:&quot;) &quot;foo&quot; &quot;bar&quot;;; (* pass an explicit [Some] *)
- : string = &quot;foo:bar&quot;
</programlisting>
        <para>
          And the following two lines are equivalent ways of calling
          <literal>concat</literal> without specifying
          <literal>sep</literal>.
        </para>
        <programlisting language="ocaml">
# concat &quot;foo&quot; &quot;bar&quot;;; (* don't provide the optional argument *)
- : string = &quot;foobar&quot;
# concat ?sep:None &quot;foo&quot; &quot;bar&quot;;; (* explicitly pass `None` *)
- : string = &quot;foobar&quot;
</programlisting>
        <para>
          One use-case for this is when you want to define a wrapper
          function that mimics the optional arguments of the function
          it's wrapping. For example, imagine we wanted to create a
          function called <literal>uppercase_concat</literal>, which is
          the same as <literal>concat</literal> except that it converts
          the first string that it's passed to uppercase. We could write
          the function as follows.
        </para>
        <programlisting language="ocaml">
# let uppercase_concat ?(sep=&quot;&quot;) a b = concat ~sep (String.uppercase a) b ;;
val uppercase_concat : ?sep:string -&gt; string -&gt; string -&gt; string = &lt;fun&gt;
# uppercase_concat &quot;foo&quot; &quot;bar&quot;;;
- : string = &quot;FOObar&quot;
# uppercase_concat &quot;foo&quot; &quot;bar&quot; ~sep:&quot;:&quot;;;
- : string = &quot;FOO:bar&quot;
</programlisting>
        <para>
          In the way we've written it, we've been forced to separately
          make the decision as to what the default separator is. Thus,
          if we later change <literal>concat</literal>'s default
          behavior, we'll need to remember to change
          <literal>uppercase_concat</literal> to match it.
        </para>
        <para>
          Instead, we can have <literal>uppercase_concat</literal>
          simply pass through the optional argument to
          <literal>concat</literal> using the <literal>?</literal>
          syntax.
        </para>
        <programlisting language="ocaml">
# let uppercase_concat ?sep a b = concat ?sep (String.uppercase a) b ;;
val uppercase_concat : ?sep:string -&gt; string -&gt; string -&gt; string = &lt;fun&gt;
</programlisting>
        <para>
          Now, if someone calls <literal>uppercase_concat</literal>
          without an argument, an explicit <literal>None</literal> will
          be passed to <literal>concat</literal>, leaving
          <literal>concat</literal> to decide what the default behavior
          should be.
        </para>
      </sect3>
      <sect3 id="inference-of-labeled-and-optional-arguments">
        <title>Inference of labeled and optional arguments</title>
        <para>
          One subtle aspect of labeled and optional arguments is how
          they are inferred by the type system. Consider the following
          example for computing numerical derivatives of a function of
          two dimensions. The function takes an argument
          <literal>delta</literal> which determines the scale at which
          to compute the derivative, values <literal>x</literal> and
          <literal>y</literal> which determine which point to compute
          the derivative at, and the function <literal>f</literal> whose
          derivative is being computed. The function
          <literal>f</literal> itself takes two labeled arguments
          <literal>x</literal> and <literal>y</literal>. Note that you
          can use an apostrophe as part of a variable name, so
          <literal>x'</literal> and <literal>y'</literal> are just
          ordinary variables.
        </para>
        <programlisting language="ocaml">
# let numeric_deriv ~delta ~x ~y ~f =
    let x' = x +. delta in
    let y' = y +. delta in
    let base = f ~x ~y in
    let dx = (f ~x:x' ~y -. base) /. delta in
    let dy = (f ~x ~y:y' -. base) /. delta in
    (dx,dy)
  ;;
val numeric_deriv :
  delta:float -&gt;
  x:float -&gt; y:float -&gt; f:(x:float -&gt; y:float -&gt; float) -&gt; float * float =
  &lt;fun&gt;
</programlisting>
        <para>
          In principle, it's not obvious how the order of the arguments
          to <literal>f</literal> should be chosen. Since labeled
          arguments can be passed in arbitrary order, it seems like it
          could as well be
          <literal>y:float -&gt; x:float -&gt; float</literal> as it is
          <literal>x:float -&gt; y:float -&gt; float</literal>.
        </para>
        <para>
          Even worse, it would be perfectly consistent for
          <literal>f</literal> to take an optional argument instead of a
          labeled one, which could lead to this type signature for
          <literal>numeric_deriv</literal>:
        </para>
        <programlisting language="ocaml">
val numeric_deriv :
  delta:float -&gt;
  x:float -&gt; y:float -&gt; f:(?x:float -&gt; y:float -&gt; float) -&gt; float * float =
  &lt;fun&gt;
</programlisting>
        <para>
          Since there are multiple plausible types to choose from, OCaml
          needs some heuristic for choosing between them. The heuristic
          the compiler uses is to prefer labels to options, and to
          choose the order of arguments that shows up in the source
          code.
        </para>
        <para>
          Note that these heuristics might at different points in the
          source suggest different types. Here's a version of
          <literal>numeric_deriv</literal> where different invocations
          of <literal>f</literal> list the arguments in different
          orders.
        </para>
        <programlisting language="ocaml">
# let numeric_deriv ~delta ~x ~y ~f =
    let x' = x +. delta in
    let y' = y +. delta in
    let base = f ~x ~y in
    let dx = (f ~y ~x:x' -. base) /. delta in
    let dy = (f ~x ~y:y' -. base) /. delta in
    (dx,dy)
  ;;
Characters 131-132:
      let dx = (f ~y ~x:x' -. base) /. delta in
                ^
Error: This function is applied to arguments
in an order different from other calls.
This is only allowed when the real type is known.
</programlisting>
        <para>
          As suggested by the error message, we can get OCaml to accept
          the fact that <literal>f</literal> is used with different
          argument orders if we provide explicit type information. Thus,
          the following code compiles without error, due to the type
          annotation on <literal>f</literal>.
        </para>
        <programlisting language="ocaml">
# let numeric_deriv ~delta ~x ~y ~(f: x:float -&gt; y:float -&gt; float) =
    let x' = x +. delta in
    let y' = y +. delta in
    let base = f ~x ~y in
    let dx = (f ~y ~x:x' -. base) /. delta in
    let dy = (f ~x ~y:y' -. base) /. delta in
    (dx,dy)
  ;;
val numeric_deriv :
  delta:float -&gt;
  x:float -&gt; y:float -&gt; f:(x:float -&gt; y:float -&gt; float) -&gt; float * float =
  &lt;fun&gt;
</programlisting>
      </sect3>
      <sect3 id="optional-arguments-and-partial-application">
        <title>Optional arguments and partial application</title>
        <para>
          Optional arguments can be tricky to think about in the
          presence of partial application. We can of course partially
          apply the optional argument itself:
        </para>
        <programlisting language="ocaml">
# let colon_concat = concat ~sep:&quot;:&quot;;;
val colon_concat : string -&gt; string -&gt; string = &lt;fun&gt;
# colon_concat &quot;a&quot; &quot;b&quot;;;
- : string = &quot;a:b&quot;
</programlisting>
        <para>
          But what happens if we partially apply just the first
          argument?
        </para>
        <programlisting language="ocaml">
# let prepend_pound = concat &quot;# &quot;;;
val prepend_pound : string -&gt; string = &lt;fun&gt;
# prepend_pound &quot;a BASH comment&quot;;;
- : string = &quot;# a BASH comment&quot;
</programlisting>
        <para>
          The optional argument <literal>?sep</literal> has now
          disappeared, or been <emphasis>erased</emphasis>. Indeed, if
          we try to pass in that optional argument now, it will be
          rejected.
        </para>
        <programlisting language="ocaml">
# prepend_pound &quot;a BASH comment&quot; ~sep:&quot;:&quot;;;
Characters 0-13:
  prepend_pound &quot;a BASH comment&quot; ~sep:&quot;:&quot;;;
  ^^^^^^^^^^^^^
Error: This function has type string -&gt; string
       It is applied to too many arguments; maybe you forgot a `;'.
</programlisting>
        <para>
          So when does OCaml decide to erase an optional argument?
        </para>
        <para>
          The rule is: an optional argument is erased as soon as the
          first positional (<emphasis>i.e.</emphasis>, neither labeled
          nor optional) argument defined <emphasis>after</emphasis> the
          optional argument is passed in. That explains the behavior of
          <literal>prepend_pound</literal> above. But if we had instead
          defined <literal>concat</literal> with the optional argument
          in the second position:
        </para>
        <programlisting language="ocaml">
# let concat x ?(sep=&quot;&quot;) y = x ^ sep ^ y ;;
val concat : string -&gt; ?sep:string -&gt; string -&gt; string = &lt;fun&gt;
</programlisting>
        <para>
          then application of the first argument would not cause the
          optional argument to be erased.
        </para>
        <programlisting language="ocaml">
# let prepend_pound = concat &quot;# &quot;;;
val prepend_pound : ?sep:string -&gt; string -&gt; string = &lt;fun&gt;
# prepend_pound &quot;a BASH comment&quot;;;
- : string = &quot;# a BASH comment&quot;
# prepend_pound &quot;a BASH comment&quot; ~sep:&quot;--- &quot;;;
- : string = &quot;# --- a BASH comment&quot;
</programlisting>
        <para>
          However, if all arguments to a function are presented at once,
          then erasure of optional arguments isn't applied until all of
          the arguments are passed in. This preserves our ability to
          pass in optional arguments anywhere on the argument list.
          Thus, we can write:
        </para>
        <programlisting language="ocaml">
# concat &quot;a&quot; &quot;b&quot; ~sep:&quot;=&quot;;;
- : string = &quot;a=b&quot;
</programlisting>
        <para>
          An optional argument that doesn't have any following
          positional arguments can't be erased at all, which leads to a
          compiler warning.
        </para>
        <programlisting language="ocaml">
# let concat x y ?(sep=&quot;&quot;) = x ^ sep ^ y ;;
Characters 15-38:
  let concat x y ?(sep=&quot;&quot;) = x ^ sep ^ y ;;
                 ^^^^^^^^^^^^^^^^^^^^^^^
Warning 16: this optional argument cannot be erased.
val concat : string -&gt; string -&gt; ?sep:string -&gt; string = &lt;fun&gt;
</programlisting>
        <para>
          And indeed, when we provide the two positional arguments, the
          <literal>sep</literal> argument is not erased, instead
          returning a function that expects the <literal>sep</literal>
          argument to be provided.
        </para>
        <programlisting language="ocaml">
# concat &quot;a&quot; &quot;b&quot;;;
- : ?sep:string -&gt; string = &lt;fun&gt;
</programlisting>
      </sect3>
    </sect2>
  </sect1>
</chapter><chapter id="lists-and-patterns">
  <title>Lists and Patterns</title>
  <para>
    This chapter will focus on two common elements of programming in
    OCaml: lists and pattern matching. Both of these were discussed in
    <xref linkend="a-guided-tour"/>, but we'll go into more
    depth here, presenting the two topics together and using one to help
    illustrate the other.
  </para>
  <sect1 id="list-basics">
    <title>List Basics</title>
    <para>
      An OCaml list is an immutable, finite sequence of elements of the
      same type. As we've seen, OCaml lists can be generated using a
      bracket-and-semicolon notation:
    </para>
    <programlisting language="ocaml">
# [1;2;3];;
- : int list = [1; 2; 3]
</programlisting>
    <para>
      And they can also be generated using the equivalent
      <literal>::</literal> notation.
    </para>
    <programlisting language="ocaml">
# 1 :: (2 :: (3 :: [])) ;;
- : int list = [1; 2; 3]
# 1 :: 2 :: 3 :: [] ;;
- : int list = [1; 2; 3]
</programlisting>
    <para>
      As you can see, the <literal>::</literal> operator is
      right-associative, which means that we can built up lists without
      parenthesis. The empty list <literal>[]</literal> is used to
      terminate a list.
    </para>
    <para>
      The <literal>::</literal> operator conveys something important
      about the nature of lists, which is that they are implemented as
      singly-linked lists. The following is a rough graphical
      representation of how the list
      <literal>1 :: 2 :: 3 :: []</literal> is laid out as a
      data-structure. The final arrow (from the box containing
      <literal>3</literal>) points to the empty list.
    </para>
    <programlisting>
+---+---+   +---+---+   +---+---+
| 1 | *----&gt;| 2 | *----&gt;| 3 | *----&gt;||
+---+---+   +---+---+   +---+---+
</programlisting>
    <para>
      The <literal>::</literal> operator essentially adds a new block to
      the picture above. Such a block contains two things: a reference
      to the data in that list element, and a reference to the remainder
      of the list. This is why <literal>::</literal> can extend a list
      without modifying it; extension allocates a new list element but
      doesn't need to change any of the existing ones, as you can see:
    </para>
    <programlisting language="ocaml">
# let l = 1 :: 2 :: 3 :: [];;
val l : int list = [1; 2; 3]
# let m = 0 :: l;;
val m : int list = [0; 1; 2; 3]
# l;;
- : int list = [1; 2; 3]
</programlisting>
  </sect1>
  <sect1 id="using-patterns-to-extract-data-from-a-list">
    <title>Using patterns to extract data from a list</title>
    <para>
      We can read data out of a list using a match statement. Here's a
      simple example of a recursive function that computes the sum of
      all elements of a list.
    </para>
    <programlisting language="ocaml">
# let rec sum l =
    match l with
    | [] -&gt; 0
    | hd :: tl -&gt; hd + sum tl
  ;;
val sum : int list -&gt; int = &lt;fun&gt;
# sum [1;2;3];;
- : int = 6
# sum [];;
- : int = 0
</programlisting>
    <para>
      This code follows the convention of using <literal>hd</literal> to
      represent the first element (or head) of the list, and
      <literal>tl</literal> to represent the remainder (or tail).
    </para>
    <para>
      The match statement in <literal>sum</literal> is really doing two
      things: first, it's acting as a case-analysis tool, breaking down
      the possibilities into a pattern-indexed list of cases. Second, it
      lets you name sub-structures within the data-structure being
      matched. In this case, the variables <literal>hd</literal> and
      <literal>tl</literal> are bound by the pattern that defines the
      first case of the match statement. Variables that are bound in
      this way can be used in the expression to the right of the arrow
      for the pattern in question.
    </para>
    <para>
      The fact that match statements can be used to bind new variables
      can be a source of confusion. To see how, imagine we wanted to
      write a function that filtered out from a list all elements equal
      to a particular value. You might be tempted to write that code as
      follows.
    </para>
    <programlisting language="ocaml">
# let rec drop_value l to_drop =
    match l with
    | [] -&gt; []
    | to_drop :: tl -&gt; drop_value tl to_drop
    | hd :: tl -&gt; hd :: drop_value tl to_drop
  ;;
</programlisting>
    <para>
      But when we type this in, the compiler will immediately warn us
      that something is wrong. Moreover, the function clearly does the
      wrong thing, filtering out all elements of the list rather than
      just those equal to the provided value.
    </para>
    <programlisting>
Characters 114-122:
      | hd :: tl -&gt; hd :: drop_value tl to_drop
        ^^^^^^^^
Warning 11: this match case is unused.
val drop_value : 'a list -&gt; 'a -&gt; 'a list = &lt;fun&gt;
# drop_value [1;2;3] 2;;
- : int list = []
</programlisting>
    <para>
      So, what's going on?
    </para>
    <para>
      The key observation is that the appearance of
      <literal>to_drop</literal> in the second case doesn't imply a
      check that the first element is equal to the value
      <literal>to_drop</literal> passed in as an argument to
      <literal>drop_value</literal>. Instead, it just causes a new
      variable <literal>to_drop</literal> to be bound to whatever
      happens to be in the first element of the list, shadowing the
      earlier definition of <literal>to_drop</literal>. The third case
      is unused because it is essentially the same pattern as we had in
      the second case.
    </para>
    <para>
      A better way to write this code is not to use pattern matching for
      determining whether the first element is equal to
      <literal>to_drop</literal>, but to instead use an ordinary
      if-statement.
    </para>
    <programlisting language="ocaml">
# let rec drop_value l to_drop =
    match l with
    | [] -&gt; []
    | hd :: tl -&gt;
      let new_tl = drop_value tl to_drop in
      if hd = to_drop then new_tl else hd :: new_tl
  ;;
val drop_value : 'a list -&gt; 'a -&gt; 'a list = &lt;fun&gt;
# drop_value [1;2;3] 2;;
- : int list = [1; 3]
</programlisting>
    <para>
      Note that if we wanted to drop a particular literal value (rather
      than a value that was passed in), we could do this using something
      like our original implementation of <literal>drop_value</literal>.
    </para>
    <programlisting language="ocaml">
# let rec drop_zero l =
    match l with
    | [] -&gt; []
    | 0  :: tl -&gt; drop_zero tl
    | hd :: tl -&gt; hd :: drop_zero tl
  ;;
val drop_zero : int list -&gt; int list = &lt;fun&gt;
# drop_zero [1;2;0;3];;
- : int list = [1; 2; 3]
</programlisting>
  </sect1>
  <sect1 id="limitations-and-blessings-of-pattern-matching">
    <title>Limitations (and blessings) of pattern matching</title>
    <para>
      The above example highlights an important fact about patterns,
      which is that they can't be used to express arbitrary conditions.
      Patterns can characterize the layout of a data-structure, and can
      even include literals as in the <literal>drop_zero</literal>
      example, but that's where they stop. A pattern can check if a list
      has two elements, but it can't check if the first two elements are
      equal to each other.
    </para>
    <para>
      You can think of patterns as a specialized sub-language that can
      express a limited (though still quite rich) set of conditions. The
      fact that the pattern language is limited turns out to be a very
      good thing, making it possible to build better support for
      patterns in the compiler. In particular, both the efficiency of
      match statements and the ability of the compiler to detect errors
      in matches depend on the constrained nature of patterns.
    </para>
    <sect2 id="performance">
      <title>Performance</title>
      <para>
        Naively, you might think that it would be necessary to check
        each case in a <literal>match</literal> in sequence to figure
        out which one fires. If the cases of a match were guarded by
        arbitrary code, that would be the case. But OCaml is often able
        to generate machine code that jumps directly to the matched case
        based on an efficiently chosen set of run-time checks.
      </para>
      <para>
        As an example, consider the following rather silly functions for
        incrementing an integer by one. The first is implemented with a
        match statement, and the second with a sequence of if
        statements.
      </para>
      <programlisting language="ocaml">
let plus_one x =
  match x with
  | 0 -&gt; 1
  | 1 -&gt; 2
  | 2 -&gt; 3
  | _ -&gt; x + 1

let plus_one_slow x =
  if      x = 0 then 1
  else if x = 1 then 2
  else if x = 2 then 3
  else x + 1
</programlisting>
      <para>
        If you benchmark these, you'll see that
        <literal>plus_one_slow</literal> is about 35% slower than
        <literal>plus_one</literal>, and the advantage gets larger as
        the number of cases increases.
      </para>
      <para>
        Here's another less artificial example. We can rewrite the
        <literal>sum</literal> function we described earlier in the
        chapter using an <literal>if</literal> statement rather than a
        match. We can then use the functions
        <literal>is_empty</literal>, <literal>hd_exn</literal> and
        <literal>tl_exn</literal> from the <literal>List</literal>
        module to deconstruct the list, allowing us to implement the
        entire function without pattern matching.
      </para>
      <programlisting>
let rec sum_slow l =
  if List.is_empty l then 0
  else List.hd_exn l + sum_slow (List.tl_exn l)
;;
</programlisting>
      <para>
        In this case, the match-based implementation is 70% faster than
        the one using if. The difference comes because we need to
        effectively do the same work multiple times, since each function
        we call has to re-examine the first element of the list to
        determine whether or not it's the empty cell. With a match
        statement, this work happens exactly once per list element.
      </para>
      <para>
        Generally, pattern matching is typically more efficient than the
        alternatives you might code by hand. One notable exception is
        matches over strings, which are in fact tested sequentially. But
        most of the time, using pattern matching is a clear performance
        win.
      </para>
    </sect2>
    <sect2 id="detecting-errors">
      <title>Detecting errors</title>
      <para>
        The error-detecting capabilities of match statements are if
        anything more important than their performance. We've already
        seen one example of OCaml's ability to find problems in a
        pattern match: in our broken implementation of
        <literal>drop_value</literal>, OCaml warned us that the final
        case was redundant. There are no algorithms for determining if a
        predicate written in a general-purpose language is redundant,
        but it can be solved reliably in the context of patterns.
      </para>
      <para>
        OCaml also checks match statements for exhaustiveness. Consider
        what happens if we modify <literal>drop_zero</literal> by
        deleting the handler for one of the cases.
      </para>
      <programlisting language="ocaml">
# let rec drop_zero l =
    match l with
    | [] -&gt; []
    | 0  :: tl -&gt; drop_zero tl
  ;;
</programlisting>
      <para>
        The compiler will produce a warning that we've missed a case,
        along with an example of an unmatched pattern.
      </para>
      <programlisting>
val drop_zero : int list -&gt; 'a list = &lt;fun&gt;
Characters 26-84:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
1::_
</programlisting>
      <para>
        For simple examples like this, exhaustiveness checks are useful
        enough. But as we'll see in
        <xref linkend="variants"/>, as you get to more
        complicated examples, especially those involving user-defined
        types, exhaustiveness checks become a lot more valuable. In
        addition to catching outright errors, they act as a sort of
        refactoring tool, guiding you to the locations where you need to
        adapt your code to deal with changing types.
      </para>
    </sect2>
  </sect1>
  <sect1 id="using-the-list-module-effectively">
    <title>Using the <literal>List</literal> module effectively</title>
    <para>
      We've so far written a fair amount of list-munging code using
      pattern matching and recursive functions. But in real life, you're
      usually better off using the <literal>List</literal> module, which
      is full of reusable functions that abstract out common patterns
      for computing with lists.
    </para>
    <para>
      Let's work through a concrete example to see this in action. We'll
      write a function <literal>render_table</literal> that, given a
      list of column headers and a list of rows, prints them out in a
      well formatted text table. So, if you were to write:
    </para>
    <programlisting language="ocaml">
# printf &quot;%s\n&quot;
   (render_table
     [&quot;language&quot;;&quot;architect&quot;;&quot;first release&quot;]
     [ [&quot;Lisp&quot; ;&quot;John McCarthy&quot; ;&quot;1958&quot;] ;
       [&quot;C&quot;    ;&quot;Dennis Ritchie&quot;;&quot;1969&quot;] ;
       [&quot;ML&quot;   ;&quot;Robin Milner&quot;  ;&quot;1973&quot;] ;
       [&quot;OCaml&quot;;&quot;Xavier Leroy&quot;  ;&quot;1996&quot;] ;
     ]);;
</programlisting>
    <para>
      it would generate the following output.
    </para>
    <programlisting>
| language | architect      | first release |
|----------+----------------+---------------|
| Lisp     | John McCarthy  | 1958          |
| C        | Dennis Ritchie | 1969          |
| ML       | Robin Milner   | 1973          |
| OCaml    | Xavier Leroy   | 1996          |
</programlisting>
    <para>
      The first step is to write a function to compute the maximum width
      of each column of data. We can do this by converting the header
      and each row into a list of integer lengths, and then taking the
      element-wise max of those lists of lengths. Writing the code for
      all of this directly would be a bit of a chore, but we can do it
      quite concisely by making use of three functions from the
      <literal>List</literal> module: <literal>map</literal>,
      <literal>map2_exn</literal>, and <literal>fold</literal>.
    </para>
    <para>
      <literal>List.map</literal> is the simplest to explain. It takes a
      list and a function for transforming elements of that list, and
      returns a new list with the transformed elements. Thus, we can
      write:
    </para>
    <programlisting language="ocaml">
# List.map ~f:String.length [&quot;Hello&quot;; &quot;World!&quot;];;
- : int list = [5; 6]
</programlisting>
    <para>
      <literal>List.map2_exn</literal> is similar to
      <literal>List.map</literal>, except that it takes two lists and a
      function for combining them. Thus, we might write:
    </para>
    <programlisting language="ocaml">
# List.map2_exn ~f:Int.max [1;2;3] [3;2;1];;
- : int list = [3; 2; 3]
</programlisting>
    <para>
      The <literal>_exn</literal> is there because the function throws
      an exception if the lists are of mismatched length.
    </para>
    <programlisting language="ocaml">
# List.map2_exn ~f:Int.max [1;2;3] [3;2;1;0];;
Exception: (Invalid_argument &quot;length mismatch in rev_map2_exn: 3 &lt;&gt; 4 &quot;).
</programlisting>
    <para>
      <literal>List.fold</literal> is the most complicated of the three,
      taking three arguments: a list to process, an initial accumulator
      value, and a function for updating the accumulator with the
      information from a list element. <literal>List.fold</literal>
      walks over the list from left to right, updating the accumulator
      at each step and returning the final value of the accumulator when
      it's done. You can see some of this by looking at the
      type-signature for <literal>fold</literal>.
    </para>
    <programlisting language="ocaml">
# List.fold;;
- : 'a list -&gt; init:'accum -&gt; f:('accum -&gt; 'a -&gt; 'accum) -&gt; 'accum = &lt;fun&gt;
</programlisting>
    <para>
      We can use <literal>List.fold</literal> for something as simple as
      summing up a list:
    </para>
    <programlisting language="ocaml">
# List.fold ~init:0 ~f:(+) [1;2;3;4];;
- : int = 10
</programlisting>
    <para>
      This example is particularly simple because the accumulator and
      the list elements are of the same type. But
      <literal>fold</literal> is not limited to such cases. We can for
      example use <literal>fold</literal> to reverse a list, in which
      case the accumulator is itself a list.
    </para>
    <programlisting language="ocaml">
# List.fold ~init:[] ~f:(fun list x -&gt; x :: list) [1;2;3;4];;
- : int list = [4; 3; 2; 1]
</programlisting>
    <para>
      Let's bring our three functions together to compute the maximum
      column widths.
    </para>
    <programlisting language="ocaml">
# let max_widths header rows =
    let lengths l = List.map ~f:String.length l in
    List.fold rows
      ~init:(lengths header)
      ~f:(fun acc row -&gt;
        List.map2_exn ~f:Int.max acc (lengths row))
  ;;
val max_widths : string list -&gt; string list list -&gt; int list = &lt;fun&gt;
</programlisting>
    <para>
      Using <literal>List.map</literal> we define the function
      <literal>lengths</literal> which converts a list of strings to a
      list of integer lengths. <literal>List.fold</literal> is then used
      to iterate over the rows, using <literal>map2_exn</literal> to
      take the max of the accumulator with the lengths of the strings in
      each row of the table, with the accumulator initialized to the
      lengths of the header row.
    </para>
    <para>
      Now that we know how to compute column widths, we can write the
      code to generate the line that separates the header from the rest
      of the text table. We'll do this in part by mapping
      <literal>String.make</literal> over the lengths of the columns to
      generate a string of dashes of the appropriate length. We'll then
      join these sequences of dashes together using
      <literal>String.concat</literal>, which concatenates a list of
      strings with an optional separator string, and
      <literal>^</literal>, which is a pairwise string concatenation
      function, to add the delimiters on the outside.
    </para>
    <programlisting language="ocaml">
# let render_separator widths =
    let pieces = List.map widths
      ~f:(fun w -&gt; String.make (w + 2) '-')
    in
    &quot;|&quot; ^ String.concat ~sep:&quot;+&quot; pieces ^ &quot;|&quot;
  ;;
val render_separator : int list -&gt; string = &lt;fun&gt;
# render_separator [3;6;2];;
- : string = &quot;|-----+--------+----|&quot;
</programlisting>
    <para>
      Note that we make the line of dashes two larger than the provided
      width to provide some whitespace around each entry in the table.
    </para>
    <note>
    <title>
    Performance of <literal>String.concat</literal> and
    <literal>^</literal>
    </title>
    <para>
      In the above, we're using two different ways of concatenating
      strings, <literal>String.concat</literal>, which operates on lists
      of strings, and <literal>^</literal>, which is a pairwise
      operator. You should avoid <literal>^</literal> for joining long
      numbers of strings, since, it allocates a new string every time it
      runs. Thus, the following code:
    </para>
    <programlisting language="ocaml">
let s = &quot;.&quot; ^ &quot;.&quot;  ^ &quot;.&quot;  ^ &quot;.&quot;  ^ &quot;.&quot;  ^ &quot;.&quot;  ^ &quot;.&quot;
</programlisting>
    <para>
      will allocate a string of length 2, 3, 4, 5, 6 and 7, whereas this
      code:
    </para>
    <programlisting language="ocaml">
let s = String.concat [&quot;.&quot;;&quot;.&quot;;&quot;.&quot;;&quot;.&quot;;&quot;.&quot;;&quot;.&quot;;&quot;.&quot;]
</programlisting>
    <para>
      allocates one string of size 7, as well as a list of length 7. At
      these small sizes, the differences don't amount to much, but for
      assembling of large strings, it can be a serious performance
      issue.
    </para>
    </note>
    <para>
      Now we need code for rendering a row with data in it. We'll first
      write a function <literal>pad</literal> for padding out a string
      to a specified length plus one blank space on either side.
    </para>
    <programlisting language="ocaml">
# let pad s length =
    &quot; &quot; ^ s ^ String.make (length - String.length s + 1) ' '
  ;;
val pad : string -&gt; int -&gt; string = &lt;fun&gt;
# pad &quot;hello&quot; 10;;
- : string = &quot; hello      &quot;
</programlisting>
    <para>
      We can render a row of data by merging together the padded
      strings. Again, we'll use <literal>List.map2_exn</literal> for
      combining the list of data in the row with the list of widths.
    </para>
    <programlisting language="ocaml">
# let render_row row widths =
    let padded = List.map2_exn row widths ~f:pad in
    &quot;|&quot; ^ String.concat ~sep:&quot;|&quot; padded ^ &quot;|&quot;
  ;;
val render_row : string list -&gt; int list -&gt; string = &lt;fun&gt;
# render_row [&quot;Hello&quot;;&quot;World&quot;] [10;15];;
- : string = &quot;| Hello      | World           |&quot;
</programlisting>
    <para>
      Now we can bring this all together in a single function that
      renders the table.
    </para>
    <programlisting language="ocaml">
# let render_table header rows =
    let widths = max_widths header rows in
    String.concat ~sep:&quot;\n&quot;
      (render_row header widths
       :: render_separator widths
       :: List.map rows ~f:(fun row -&gt; render_row row widths)
      )
  ;;
val render_table : string list -&gt; string list list -&gt; string = &lt;fun&gt;
</programlisting>
    <sect2 id="more-useful-list-functions">
      <title>More useful list functions</title>
      <para>
        The example we worked through above only touched on three of the
        function in <literal>List</literal>. We won't cover the entire
        interface, but there are a few more functions that are useful
        enough to mention here.
      </para>
      <para>
        Very often when processing lists, one wants to restrict
        attention to just a subset of values. The
        <literal>List.filter</literal> function does just that.
      </para>
      <programlisting language="ocaml">
# List.filter ~f:(fun x -&gt; x mod 2 = 0) [1;2;3;4;5];;
- : int list = [2; 4]
</programlisting>
      <para>
        Sometimes, you want to both transform and filter as part of the
        same computation. <literal>List.filter_map</literal> allows you
        to do just that. The following expression uses
        <literal>List.filter_map</literal> to produce the list of file
        extensions in the current directory, piping the results through
        <literal>List.dedup</literal> to remove duplicates. Note that
        this example also uses some functions from other modules,
        including <literal>Sys.ls_dir</literal> to get a directory
        listing, and <literal>String.rsplit2</literal> to split a string
        on the rightmost appearance of a given character.
      </para>
      <programlisting language="ocaml">
# List.filter_map (Sys.ls_dir &quot;.&quot;) ~f:(fun fname -&gt;
    match String.rsplit2 ~on:'.' fname with
    | None  | Some (&quot;&quot;,_) -&gt; None
    | Some (_,ext) -&gt;
      Some ext)
  |&gt; List.dedup
  ;;
- : string list = [&quot;byte&quot;; &quot;ml&quot;; &quot;mli&quot;; &quot;native&quot;; &quot;txt&quot;]
</programlisting>
      <para>
        In the match statement above, you may notice that we for the
        first time used an underscore in a pattern match. You use an
        underscore when you want to indicate that the pattern doesn't
        depend on some sub-component of the data structure, but that you
        don't want to name it is an explicit variable.
      </para>
      <para>
        Another feature of OCaml's pattern language that we encounter
        here is <emphasis>or-patterns</emphasis>, which allow you to
        have multiple sub-patterns within a larger pattern. In this
        case, <literal>None | Some (&quot;&quot;,_)</literal> is an
        or-pattern. As we'll see later, or-patterns can be nested
        anywhere within larger patterns.
      </para>
      <para>
        Another function that is similar to <literal>filter</literal> is
        <literal>partition_tf</literal>, which takes a list and
        partitions it into a pair of lists based on a boolean condition.
        <literal>tf</literal> is a mnemonic to remind the reader that
        <literal>true</literal> elements go to the first bucket and
        <literal>false</literal> ones go to the second. Thus, one could
        write:
      </para>
      <programlisting language="ocaml">
# let is_ocaml_source s =
    match String.rsplit2 s ~on:'.' with
    | Some (_,(&quot;ml&quot;|&quot;mli&quot;)) -&gt; true
    | _ -&gt; false
  ;;
val is_ocaml_source : string -&gt; bool = &lt;fun&gt;
# let (ml_files,other_files) =
    List.partition_tf (Sys.ls_dir &quot;.&quot;)  ~f:is_ocaml_source;;
val ml_files : string list = [&quot;example.ml&quot;]
val other_files : string list = [&quot;_build&quot;; &quot;_tags&quot;]
</programlisting>
      <para>
        Note the use of a nested or-pattern in
        <literal>is_ocaml_source</literal>.
      </para>
      <para>
        Another very common operation on lists is concatenation. The
        list module actually comes with a few different ways of doing
        this. First, there's<literal>List.append</literal>, for
        concatenating a pair of lists.
      </para>
      <programlisting language="ocaml">
# List.append [1;2;3] [4;5;6];;
- : int list = [1; 2; 3; 4; 5; 6]
# [1;2;3] @ [4;5;6];;
- : int list = [1; 2; 3; 4; 5; 6]
</programlisting>
      <para>
        <literal>@</literal> is just a synonym for
        <literal>List.append</literal>. In addition, there is
        <literal>List.concat</literal>, for concatenating a list of
        lists.
      </para>
      <para>
        <literal>ocaml # List.concat [[1;2];[3;4;5];[6];[]];; - : int list = [1; 2; 3; 4; 5; 6]</literal>
        Here's an example of using <literal>List.concat</literal> along
        with <literal>List.map</literal> to compute a recursive listing
        of a directory tree.
      </para>
      <programlisting language="ocaml">
# let rec ls_rec s =
    if Sys.is_file_exn ~follow_symlinks:true s
    then [s]
    else
      Sys.ls_dir s
      |&gt; List.map ~f:(fun sub -&gt; ls_rec (s ^ &quot;/&quot; ^ sub))
      |&gt; List.concat
  ;;
# all_files &quot;.&quot;;;
- : string list =
[&quot;./_build/_digests&quot;; &quot;./_build/_log&quot;; &quot;./_build/example.ml&quot;;
 &quot;./_build/example.ml.depends&quot;; &quot;./_build/ocamlc.where&quot;; &quot;./_tags&quot;;
 &quot;./example.ml&quot;]
</programlisting>
      <para>
        The above combination of <literal>List.map</literal> and
        <literal>List.concat</literal> is common enough that there is a
        function <literal>List.concat_map</literal> that combines these
        into one, more efficient operation.
      </para>
      <programlisting language="ocaml">
# let rec ls_rec s =
    if Sys.is_file_exn ~follow_symlinks:true s
    then [s]
    else
      Sys.ls_dir s
      |&gt; List.concat_map ~f:(fun sub -&gt; ls_rec (s ^/ sub))
  ;;
val ls_rec : string -&gt; string list = &lt;fun&gt;
</programlisting>
    </sect2>
  </sect1>
  <sect1 id="tail-recursion">
    <title>Tail recursion</title>
    <para>
      The only way to compute the length of an OCaml list is to walk the
      list from beginning to end. As a result, computing the length of a
      list takes time linear in the size of the list. Here's a simple
      function for doing so.
    </para>
    <programlisting language="ocaml">
# let rec length = function
    | [] -&gt; 0
    | _ :: tl -&gt; 1 + length tl
  ;;
# length [1;2;3];;
- : int = 3
</programlisting>
    <para>
      This looks simple enough, but you'll discover that this
      implementation runs into problems on very large lists. Here are
      some examples, using another useful function from the
      <literal>List</literal> module, <literal>List.init</literal>, to
      create the lists. <literal>List.init</literal> takes an integer
      <literal>n</literal> and a function <literal>f</literal> and
      creates a list of length <literal>n</literal> where the data for
      each element is created by calling <literal>f</literal> on the
      index of that element.
    </para>
    <programlisting language="ocaml">
# let make_list n = List.init n ~f:(fun x -&gt; x);;
val make_list : int -&gt; int list = &lt;fun&gt;
# make_list 10;
- : int list = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
# length (make_list 10_000_000);;
Stack overflow during evaluation (looping recursion?).
</programlisting>
    <para>
      To understand what went wrong, you need to learn a bit more about
      how function calls work. Typically, a function call needs some
      space to keep track of information associated with the call, such
      as the arguments passed to the function, or the location of the
      code that needs to start executing when the function call is
      complete. To allow for nested function calls, this information is
      typically organized in a stack, where a new <emphasis>stack
      frame</emphasis> is allocated for each nested function call, and
      then deallocated when the function call is complete.
    </para>
    <para>
      And that's the problem with our call to <literal>length</literal>:
      it tried to allocate ten million stack frames, which exhausted the
      available stack space. Happily, there's a way around this problem.
      Consider the following alternative implementation.
    </para>
    <programlisting language="ocaml">
# let rec length_plus_n l n =
    match l with
    | [] -&gt; n
    | _ :: tl -&gt; length_plus_n tl (n + 1)
  ;;
val length_plus_n : 'a list -&gt; int -&gt; int = &lt;fun&gt;
# let length l = length_plus_n l 0 ;;
val length : 'a list -&gt; int = &lt;fun&gt;
utop[41]&gt; length [1;2;3;4];;
- : int = 4
</programlisting>
    <para>
      This implementation depends on a helper function,
      <literal>length_plus_n</literal>, that computes the length of a
      given list plus a given <literal>n</literal>. In practice,
      <literal>n</literal> acts as an accumulator in which the answer is
      built up, step by step. As a result, we can do the additions along
      the way rather than doing them as we unwind the nested sequence of
      function calls, as we did in our first implementation of
      <literal>length</literal>.
    </para>
    <para>
      The advantage of this approach is that the recursive call in
      <literal>length_plus_n</literal> is a <emphasis>tail
      call</emphasis>. We'll explain more precisely what it means to be
      a tail call shortly, but the reason it's important is that tail
      calls don't require the allocation of a new stack frame, due to
      what is called the <emphasis>tail-call optimization</emphasis>. A
      recursive function is said to be <emphasis>tail
      recursive</emphasis> if all of its recursive calls are tail calls.
      <literal>length_plus_n</literal> is indeed tail recursive, and as
      a result, <literal>length</literal> can take a long list as input
      without blowing the stack.
    </para>
    <programlisting language="ocaml">
# length (make_list 10_000_000);;
- : int = 10000000
</programlisting>
    <para>
      So when is a call a tail call? Let's think about the situation of
      one function (the <emphasis>caller</emphasis>) invokes another
      (the <emphasis>callee</emphasis>). The invocation is considered a
      tail call when the caller doesn't do anything with the value
      returned by the callee except to return it. The tail-call
      optimization makes sense because, when a caller makes a tail call,
      the caller's stack frame need never be used again, and so you
      don't need to keep it around. Thus, instead of allocating a new
      stack frame for the callee, the compiler is free to reuse the
      caller's stack frame.
    </para>
    <para>
      Tail recursion are important for more than just lists. Ordinary
      (non-tail) recursive calls are reasonable when the dealing with
      data-structures like binary trees where the depth of the tree is
      logarithmic in the size of your data. But when dealing with
      situations where the depth of the sequence of nested calls is on
      the order of the size of your data, tail recursion is usually the
      right approach.
    </para>
  </sect1>
  <sect1 id="more-concise-and-faster-patterns">
    <title>More concise and faster patterns</title>
    <para>
      Now that we know more about how lists and patterns work, let's
      consider how we can improve on an example from
      (xref)(#recursive-list-functions): the function
      <literal>destutter</literal>, which removes sequential duplicates
      from a list. Here's the implementation that was described earlier.
    </para>
    <programlisting language="ocaml">
# let rec destutter list =
    match list with
    | [] -&gt; []
    | hd :: [] -&gt; hd :: []
    | hd :: hd' :: tl -&gt;
      if hd = hd' then destutter (hd' :: tl)
      else hd :: destutter (hd' :: tl)
  ;;
val destutter : 'a list -&gt; 'a list = &lt;fun&gt;
</programlisting>
    <para>
      We'll consider some ways of making this code more concise and more
      efficient.
    </para>
    <para>
      First, let's consider efficiency. One problem with the
      <literal>destutter</literal> code above is that it in some cases
      recreates on the right-hand side of the arrow a value that already
      existed on the left hand side. Thus, the pattern
      <literal>hd :: [] -&gt; hd :: []</literal> actually allocates a
      new list element, which really, it should be able to just return
      the list being matched. We can reduce allocation here by using an
      <literal>as</literal> pattern, which allows us to declare a name
      for the thing matched by a pattern or sub-pattern. While we're at
      it, we'll use the <literal>function</literal> keyword to eliminate
      the need for an explicit match.
    </para>
    <programlisting language="ocaml">
# let rec destutter = function
    | [] as l -&gt; l
    | _ :: [] as l -&gt; l
    | hd :: (hd' :: _ as tl) -&gt;
      if hd = hd' then destutter tl
      else hd :: destutter tl
  ;;
val destutter : 'a list -&gt; 'a list = &lt;fun&gt;
</programlisting>
    <para>
      We can further collapse this by combining the first two cases into
      one, using an or-pattern. At the same time, we'll use the more
      concise <literal>[_]</literal> pattern to match a list with a
      single element, rather than <literal>_ :: []</literal>.
    </para>
    <programlisting language="ocaml">
# let rec destutter = function
    | [] | [_] as l -&gt; l
    | hd :: (hd' :: _ as tl) -&gt;
      if hd = hd' then destutter tl
      else hd :: destutter tl
  ;;
val destutter : 'a list -&gt; 'a list = &lt;fun&gt;
</programlisting>
    <para>
      We can make the code slightly terser now by using a
      <literal>when</literal> clause. A <literal>when</literal> clause
      allows one to add an extra precondition on a pattern in the form
      of an arbitrary OCaml expression. In this case, we can use it to
      include the check on whether the first two elements are equal.
    </para>
    <programlisting language="ocaml">
# let rec destutter = function
    | [] | [_] as l -&gt; l
    | hd :: (hd' :: _ as tl) when hd = hd' -&gt; destutter tl
    | hd :: tl -&gt; hd :: destutter tl
  ;;
val destutter : 'a list -&gt; 'a list = &lt;fun&gt;
</programlisting>
    <note> <title> 
    Polymorphic compare
    </title>
    <para>
      In the <literal>destutter</literal> example above, we made use of
      the fact that OCaml lets us test equality between values of any
      type, using the <literal>=</literal> operator. Thus, we can write:
    </para>
    <programlisting language="ocaml">
# 3 = 4;;
- : bool = false
# [3;4;5] = [3;4;5];;
- : bool = true
# [Some 3; None] = [None; Some 3];;
- : bool = false
</programlisting>
    <para>
      Indeed, if we look at the type of the equality operator, we'll see
      that it is polymorphic:
    </para>
    <programlisting language="ocaml">
# (=);;
- : 'a -&gt; 'a -&gt; bool = &lt;fun&gt;
</programlisting>
    <para>
      OCaml actually comes with a whole family of polymorphic comparison
      operators, including the standard infix comparators,
      <literal>&lt;</literal>, <literal>&gt;=</literal>,
      <emphasis>etc.</emphasis>, as well as the function
      <literal>compare</literal> that returns <literal>-1</literal>,
      <literal>0</literal> or <literal>1</literal> to flag whether the
      first operator is smaller than, equal to, or greater than the
      second, respectively.
    </para>
    <para>
      You might wonder how you could build function like these yourself
      if OCaml didn't come with them built-in. It turns out that you
      <emphasis>can't</emphasis> build these functions on your own.
      OCaml's polymorphic comparison functions are actually built-in to
      the runtime to a low level. These comparisons are polymorphic on
      the basis of ignoring almost everything about the types of the
      values that are being compared, paying attention only to the
      structure of the values as they're laid out in memory.
    </para>
    <para>
      Polymorphic compare does have some limitations. For example, they
      will fail at runtime if they encounter functions:
    </para>
    <programlisting language="ocaml">
# (fun x -&gt; x + 1) = (fun x -&gt; x + 1);;
Exception: (Invalid_argument &quot;equal: functional value&quot;).
</programlisting>
    <para>
      Similarly, it will fail on values that come from outside the OCaml
      heap, like values from C-bindings. But they will work in a
      reasonable way for other kinds of values.
    </para>
    <para>
      For simple atomic types, polymorphic compare has the semantics you
      would expect: for floating point numbers and integer, polymorphic
      compare corresponds to the expected numerical comparison
      functions. For strings, it's a lexicographic comparison.
    </para>
    <para>
      Sometimes, however, the type-ignoring nature of polymorphic
      compare is a problem, particularly when you have your own notion
      of equality and ordering that you want to impose. We'll discuss
      this issue more, as well as some of the other downsides of
      polymorphic compare, in
      <xref linkend="maps-and-hashtables"/>.
    </para>
    </note>

    <para>
      Note that <literal>when</literal> clauses have some downsides. As
      we noted earlier, the static checks associated with pattern
      matches rely on the fact that patterns are restricted in what they
      can express. Once we add the ability to add an arbitrary condition
      to a pattern, something will be lost. In particular, the ability
      for the compiler to determine if a match is exhaustive, or if some
      case is redundant, is compromised.
    </para>
    <para>
      Consider the following function which takes a list of optional
      values, and returns the number of those values that are
      <literal>Some</literal>. Because this implementation uses
      <literal>when</literal> clauses, the compiler can't tell that the
      code is exhaustive.
    </para>
    <programlisting language="ocaml">
# let rec count_some list =
    match list with
    | [] -&gt; 0
    | x :: tl when Option.is_none x -&gt; count_some tl
    | x :: tl when Option.is_some x -&gt; 1 + count_some tl
  ;;
val count_some : 'a option list -&gt; int = &lt;fun&gt;
Characters 30-169:
val count_some : 'a option list -&gt; int = &lt;fun&gt;
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
_::_
(However, some guarded clause may match this value.)
</programlisting>
    <para>
      Despite the warning, the function does work fine.
    </para>
    <programlisting language="ocaml">
# count_some [Some 3; None; Some 4];;
- : int = 2
</programlisting>
    <para>
      If we add another redundant case without a <literal>when</literal>
      clause, the compiler will stop complaining about exhaustiveness,
      and won't produce a warning about the redundancy.
    </para>
    <programlisting language="ocaml">
# let rec count_some list =
    match list with
    | [] -&gt; 0
    | x :: tl when Option.is_none x -&gt; count_some tl
    | x :: tl when Option.is_some x -&gt; 1 + count_some tl
    | x :: tl -&gt; -1 (* unreachable *)
  ;;
val count_some : 'a option list -&gt; int = &lt;fun&gt;
</programlisting>
    <para>
      Probably a better approach is to simply drop the second
      <literal>when</literal> clause.
    </para>
    <programlisting language="ocaml">
# let rec count_some list =
    match list with
    | [] -&gt; 0
    | x :: tl when Option.is_none x -&gt; count_some tl
    | _ :: tl -&gt; 1 + count_some tl
  ;;
</programlisting>
    <para>
      This is a little less clear, however, than the direct pattern
      matching solution, where the meaning of each pattern is clearer on
      its own.
    </para>
    <programlisting language="ocaml">
# let rec count_some list =
    match list with
    | [] -&gt; 0
    | None   :: tl -&gt; count_some tl
    | Some _ :: tl -&gt; 1 + count_some tl
  ;;
</programlisting>
    <para>
      The takeaway from all of this is that, while
      <literal>when</literal> clauses can be useful, one should prefer
      patterns wherever they are sufficient.
    </para>
    <para>
      As a side note, the above implementation of
      <literal>count_some</literal> is longer than necessary, and to
      boot is not tail recursive. For real work, you should probably
      just use the<literal>List.count</literal> function from
      <literal>Core</literal> as follows:
    </para>
    <programlisting language="ocaml">
# let count_some l = List.count ~f:Option.is_some l;;
val count_some : 'a option list -&gt; int = &lt;fun&gt;
</programlisting>
  </sect1>
</chapter><chapter id="files-modules-and-programs">
  <title>Files, Modules and Programs</title>
  <para>
    We've so far experienced OCaml largely through the toplevel. As you
    move from exercises to real-world programs, you'll need to leave the
    toplevel behind and start building programs from files. Files are
    more than just a convenient way to store and manage your code; in
    OCaml, they also act as boundaries that divide your program into
    conceptual units.
  </para>
  <para>
    In this chapter, we'll show you how to build an OCaml program from a
    collection of files, as well as the basics of working with modules
    and module signatures.
  </para>
  <sect1 id="single-file-programs">
    <title>Single File Programs</title>
    <para>
      We'll start with an example: a utility that reads lines from
      <literal>stdin</literal> and computes a frequency count of the
      lines that have been read in. At the end, the 10 lines with the
      highest frequency counts are written out. We'll start with a
      simple implementation, which we'll save as the file
      <literal>freq.ml</literal>.
    </para>
    <para>
      This implementation will use two functions from the
      <literal>List.Assoc</literal> module, which provides utility
      functions for interacting with association lists,
      <emphasis>i.e.</emphasis>, lists of key/value pairs. In
      particular, we use the function
      <literal>List.Assoc.find</literal>, which looks up a key in an
      association list, and <literal>List.add</literal>, which adds a
      new binding to an association list, as shown below.
    </para>
    <programlisting language="ocaml">
# let assoc = [(&quot;one&quot;, 1); (&quot;two&quot;,2); (&quot;three&quot;,3)];;
val assoc : (string * int) list = [(&quot;one&quot;, 1); (&quot;two&quot;, 2); (&quot;three&quot;, 3)]
# List.Assoc.find assoc &quot;two&quot;;;
- : int option = Some 2
# List.Assoc.add assoc &quot;four&quot; 4;; (* add a new key *)
[(&quot;four&quot;, 4); (&quot;one&quot;, 1); (&quot;two&quot;, 2); (&quot;three&quot;, 3)]
# List.Assoc.add assoc &quot;two&quot; 4;; (* overwrite an existing key *)
- : (string, int) List.Assoc.t = [(&quot;two&quot;, 4); (&quot;one&quot;, 1); (&quot;three&quot;, 3)]
</programlisting>
    <para>
      Note that <literal>List.Assoc.add</literal> doesn't modify the
      original list, but instead allocates a new list with the requisite
      key/value added.
    </para>
    <para>
      Now we can write down <literal>freq.ml</literal>.
    </para>
    <programlisting language="ocaml">
(* freq.ml: basic implementation *)

open Core.Std

let build_counts () =
  In_channel.fold_lines stdin ~init:[] ~f:(fun counts line -&gt;
    let count =
      match List.Assoc.find counts line with
      | None -&gt; 0
      | Some x -&gt; x
    in
    List.Assoc.add counts line (count + 1)
  )

let () =
  build_counts ()
  |&gt; List.sort ~cmp:(fun (_,x) (_,y) -&gt; compare y x)
  |&gt; (fun l -&gt; List.take l 10)
  |&gt; List.iter ~f:(fun (line,count) -&gt; printf &quot;%3d: %s\n&quot; count line)
</programlisting>
    <para>
      The function <literal>build_counts</literal> reads in lines from
      <literal>stdin</literal>, constructing from those lines an
      association list with the frequencies of each line. It does this
      by invoking <literal>In_channel.fold_lines</literal> (similar to
      the function <literal>List.fold</literal> described in
      <xref linkend="lists-and-patterns"/>), which reads
      through the lines one by one, calling the provided fold function
      for each line to update the accumulator. That accumulator is
      initialized to the empty list.
    </para>
    <para>
      With <literal>build_counts</literal> defined, we then call the
      function to build the association list, sort that list by
      frequency in descending order, grab the first 10 elements off the
      list, and then iterate over those ten elements and print them to
      the screen. These operations are tied together using the
      <literal>|&gt;</literal> operator, as described in
      <xref linkend="variables-and-functions"/>.
    </para>
    <note><title>
    Where is the main function?
    </title>
    <para>
      Unlike C, programs in OCaml do not have a unique
      <literal>main</literal> function. When an OCaml program is
      evaluated, all the statements in the implementation files are
      evaluated in order. These implementation files can contain
      arbitrary expressions, not just function definitions. In this
      example, the declaration starting with <literal>let () =</literal>
      plays the role of the <literal>main</literal> declaration, kicking
      off the processing. But really the entire file is evaluated at
      startup, and so in some sense the full codebase is one big
      <literal>main</literal> function.
    </para>
    </note>
    <para>
      If we weren't using Core or any other external libraries, we could
      build the executable like this:
    </para>
    <programlisting>
ocamlc freq.ml -o freq
</programlisting>
    <para>
      But in this case, this command will fail with the error
      <literal>Unbound module Core</literal>. We need a somewhat more
      complex invocation to get Core linked in:
    </para>
    <programlisting>
ocamlfind ocamlc -linkpkg -thread -package core freq.ml -o freq
</programlisting>
    <para>
      Here we're using <literal>ocamlfind</literal>, a tool which itself
      invokes other parts of the ocaml toolchain (in this case,
      <literal>ocamlc</literal>) with the appropriate flags to link in
      particular libraries and packages. Here,
      <literal>-package core</literal> is asking
      <literal>ocamlfind</literal> to link in the Core library,
      <literal>-linkpkg</literal> is required to do the final linking in
      of packages for building a runnable executable, and
      <literal>-thread</literal> turns on threading support, which is
      required for Core.
    </para>
    <para>
      While this works well enough for a one-file project, more
      complicated builds will require a tool to orchestrate the build.
      One great tool for this task is <literal>ocamlbuild</literal>,
      which is shipped with the OCaml compiler. We'll talk more about
      <literal>ocamlbuild</literal> in
      <xref linkend="packaging"/>, but for now, we'll just
      walk through the steps required for this simple application.
      First, create a <literal>_tags</literal> file containing the
      following lines:
    </para>
    <programlisting>
true:package(core),thread,annot,debugging
</programlisting>
    <para>
      The purpose of the <literal>_tags</literal> file is to specify
      which compilation options are required for which files. In this
      case, we're telling <literal>ocamlbuild</literal> to link in the
      <literal>core</literal> package and to turn on threading,
      generation of annotation files, and debugging support for all
      files (since the condition <literal>true</literal> evaluates to
      <literal>true</literal> on all files).
    </para>
    <para>
      We can then invoke <literal>ocamlbuild</literal> to build the
      executable.
    </para>
    <programlisting>
$ ocamlbuild -use-ocamlfind freq.byte
</programlisting>
    <para>
      If we'd invoked <literal>ocamlbuild</literal> with a target of
      <literal>freq.native</literal> instead of
      <literal>freq.byte</literal>, we would have gotten native-code
      instead.
    </para>
    <para>
      We can now run the our program from the command-line. The
      following line extracts strings from the
      <literal>ocamlopt</literal> binary, reporting the most frequently
      occurring ones. Note that the specific results will very from
      platform to platform, since the binary itself will differ between
      platforms.
    </para>
    <programlisting>
$ strings `which ocamlopt` | ./freq.byte
 13: movq
 10: cmpq
  8: &quot;, &amp;
  7: .globl
  6: addq
  6: leaq
  5: &quot;, $
  5: .long
  5: .quad
  4: &quot;, '
</programlisting>
    <note><title>
    Bytecode vs native code
    </title>
    <para>
      OCaml ships with two compilers: the <literal>ocamlc</literal>
      bytecode compiler and the <literal>ocamlopt</literal> native-code
      compiler. Programs compiled with <literal>ocamlc</literal> are
      interpreted by a virtual machine, while programs compiled with
      <literal>ocamlopt</literal> are compiled to native machine code to
      be run on a specific operating system and processor architecture.
    </para>
    <para>
      Aside from performance, executables generated by the two compilers
      have nearly identical behavior. There are a few things to be aware
      of. First, the bytecode compiler can be used on more
      architectures, and has some tools that are not available for
      native code. For example, the OCaml debugger only works with
      bytecode (although the <literal>gdb</literal>, the Gnu Debugger,
      works with OCaml native-code applications). The bytecode compiler
      is also quicker than the native-code compiler. In addition, in
      order to run a bytecode executable you typically need to have
      OCaml installed on the system in question. That's not strictly
      required, though, since you can build a bytecode executable with
      an embedded runtime, using the <literal>-custom</literal> compiler
      flag.
    </para>
    <para>
      As a general matter, production executables should usually be
      built using the native-code compiler, but it sometimes makes sense
      to use bytecode for development builds. And, of course, bytecode
      makes sense when targeting a platform not supported by the
      native-code compiler.
    </para>
    </note>

  </sect1>
  <sect1 id="multi-file-programs-and-modules">
    <title>Multi-file programs and modules</title>
    <para>
      Source files in OCaml are tied into the module system, with each
      file compiling down into a module whose name is derived from the
      name of the file. We've encountered modules before, for example,
      when we used functions like <literal>find</literal> and
      <literal>add</literal> from the <literal>List.Assoc</literal>
      module. At it's simplest, you can think of a module as a
      collection of definitions that are stored within a namespace.
    </para>
    <para>
      Let's consider how we can use modules to refactor the
      implementation of <literal>freq.ml</literal>. Remember that the
      variable <literal>counts</literal> contains an association list
      representing the counts of the lines seen so far. But updating an
      association list takes time linear in the length of the list,
      meaning that the time complexity of processing a file is quadratic
      in the number of distinct lines in the file.
    </para>
    <para>
      We can fix this problem by replacing association lists with a more
      efficient data structure. To do that, we'll first factor out the
      key functionality into a separate module with an explicit
      interface. We can consider alternative (and more efficient)
      implementations once we have a clear interface to program against.
    </para>
    <para>
      We'll start by creating a file, <literal>counter.ml</literal> that
      contains the logic for maintaining the association list used to
      describe the counts. The key function, called
      <literal>touch</literal>, updates the association list with the
      information that a given line should be added to the frequency
      counts.
    </para>
    <programlisting language="ocaml">
(* counter.ml: first version *)

open Core.Std

let touch t s =
  let count =
    match List.Assoc.find t s with
    | None -&gt; 0
    | Some x -&gt; x
  in
  List.Assoc.add t s (count + 1)
</programlisting>
    <para>
      The file <literal>counter.ml</literal> will be compiled into a
      module named <literal>Counter</literal>. The name of the module is
      derived automatically from the filename. Note that the module name
      is capitalized even if the file is not.
    </para>
    <para>
      We can now rewrite <literal>freq.ml</literal> to use
      <literal>Counter</literal>. Note that the resulting code can still
      be built with <literal>ocamlbuild</literal>, which will discover
      dependencies and realize that <literal>counter.ml</literal> needs
      to be compiled.
    </para>
    <programlisting language="ocaml">
(* freq.ml: using Counter *)
open Core.Std

let build_counts () =
  In_channel.fold_lines stdin ~init:[] ~f:Counter.touch

let () =
  build_counts ()
  |&gt; List.sort ~cmp:(fun (_,x) (_,y) -&gt; compare y x)
  |&gt; (fun l -&gt; List.take l 10)
  |&gt; List.iter ~f:(fun (line,count) -&gt; printf &quot;%3d: %s\n&quot; count line)
</programlisting>
  </sect1>
  <sect1 id="signatures-and-abstract-types">
    <title>Signatures and Abstract Types</title>
    <para>
      While we've pushed some of the logic to the
      <literal>Counter</literal> module, the code in
      <literal>freq.ml</literal> can still depend on the details of the
      implementation of <literal>Counter</literal>. Indeed, if you look
      at the definition of <literal>build_counts</literal>:
    </para>
    <programlisting language="ocaml">
let build_counts () =
  In_channel.fold_lines stdin ~init:[] ~f:Counter.touch
</programlisting>
    <para>
      you'll see that it depends on the fact that the empty set of
      frequency counts is represented as an empty list. We'd like to
      prevent this kind of dependency so we can change the
      implementation of <literal>Counter</literal> without needing to
      change client code like that in <literal>freq.ml</literal>.
    </para>
    <para>
      The implementation details of a module can be hidden by attaching
      an <emphasis>interface</emphasis>. (Note that the terms
      <emphasis>interface</emphasis>, <emphasis>signature</emphasis> and
      <emphasis>module type</emphasis> are all used interchangeably.) A
      module defined by a file <literal>filename.ml</literal> can be
      constrained by a signature placed in a file called
      <literal>filename.mli</literal>.
    </para>
    <para>
      For <literal>counter.mli</literal>, we'll start by writing down an
      interface that describes what's currently available in
      <literal>counter.ml</literal>, without hiding anything.
      <literal>val</literal> declarations are used to specify values in
      a signature. The syntax of a <literal>val</literal> declaration is
      as follows:
    </para>
    <programlisting>
val &lt;identifier&gt; : &lt;type&gt;
</programlisting>
    <para>
      Using this syntax, we can write the signature of
      <literal>counter.ml</literal> as follows.
    </para>
    <programlisting language="ocaml">
(* filename: counter.mli *)
open Core.Std

val touch : (string * int) list -&gt; string -&gt; (string * int) list
</programlisting>
    <para>
      Note that <literal>ocamlbuild</literal> will detect the presence
      of the <literal>mli</literal> file automatically and include it in
      the build.
    </para>
    <note><title>
    Auto-generating <literal>mli</literal> files
    </title>
    <para>
      If you don't want to construct an mli entirely by hand, you can
      ask OCaml to autogenerate one for you from the source, which you
      can then adjust to fit your needs. In this case, we can write:
    </para>
    <programlisting>
$ ocamlbuild -use-ocamlfind counter.inferred.mli
</programlisting>
    <para>
      Which will generate the file
      <literal>_build/counter.inferred.mli</literal>, with the following
      contents.
    </para>
    <programlisting>
$ cat _build/counter.inferred.mli
val touch :
  ('a, int) Core.Std.List.Assoc.t -&gt; 'a -&gt; ('a, int) Core.Std.List.Assoc.t
</programlisting>
    <para>
      This is equivalent to the <literal>mli</literal> that we
      generated, but is a little more verbose. In general, you want to
      use autogenerated <literal>mli</literal>'s as a starting point
      only. There's no replacement for a careful consideration of what
      should be included in the interface of your module and of how that
      should be organized, documented and formatted.
    </para>
    </note>

    <para>
      To hide the fact that frequency counts are represented as
      association lists, we'll need to make the type of frequency counts
      <emphasis>abstract</emphasis>. A type is abstract if its name is
      exposed in the interface, but its definition is not. Here's an
      abstract interface for <literal>Counter</literal>:
    </para>
    <programlisting language="ocaml">
(* counter.mli: abstract interface *)

open Core.Std

type t

val empty : t
val to_list : t -&gt; (string * int) list
val touch : t -&gt; string -&gt; t
</programlisting>
    <para>
      Note that we needed to add <literal>empty</literal> and
      <literal>to_list</literal> to <literal>Counter</literal>, since
      otherwise, there would be no way to create a
      <literal>Counter.t</literal> or get data out of one.
    </para>
    <para>
      Here's a rewrite of <literal>counter.ml</literal> to match this
      interface.
    </para>
    <programlisting language="ocaml">
(* counter.ml: implementation matching abstract interface *)

open Core.Std

type t = (string * int) list

let empty = []

let to_list x = x

let touch t s =
  let count =
    match List.Assoc.find t s with
    | None -&gt; 0
    | Some x -&gt; x
  in
  List.Assoc.add t s (count + 1)
</programlisting>
    <para>
      If we now try to compile <literal>freq.ml</literal>, we'll get the
      following error:
    </para>
    <programlisting>
File &quot;freq.ml&quot;, line 11, characters 20-22:
Error: This expression has type 'a list
       but an expression was expected of type Counter.t
</programlisting>
    <para>
      This is because <literal>freq.ml</literal> depends on the fact
      that frequency counts are represented as association lists, a fact
      that we've just hidden. We just need to fix
      <literal>build_counts</literal> to use
      <literal>Counter.empty</literal> instead of <literal>[]</literal>
      and <literal>Counter.to_list</literal> to get the association list
      out at the end for processing and printing. The resulting
      implementation is shown below.
    </para>
    <programlisting language="ocaml">
(* filename: freq.ml *)
open Core.Std

let build_counts () =
  In_channel.fold_lines stdin ~init:Counter.empty ~f:Counter.touch

let () =
  build_counts ()
  |&gt; Counter.to_list
  |&gt; List.sort ~cmp:(fun (_,x) (_,y) -&gt; Int.descending x y)
  |&gt; (fun counts -&gt; List.take counts 10)
  |&gt; List.iter ~f:(fun (line,count) -&gt; printf &quot;%3d: %s\n&quot; count line)
</programlisting>
    <para>
      Now we can turn to optimizing the implementation of
      <literal>Counter</literal>. Here's an alternate and far more
      efficient implementation, based on the <literal>Map</literal>
      datastructure in Core.
    </para>
    <programlisting language="ocaml">
(* counter.ml: efficient version *)

open Core.Std

type t = int String.Map.t

let empty = String.Map.empty

let to_list t = Map.to_alist t

let touch t s =
  let count =
    match Map.find t s with
    | None -&gt; 0
    | Some x -&gt; x
  in
  Map.add t ~key:s ~data:(count + 1)
</programlisting>
    <para>
      Note that in the above we use <literal>String.Map</literal> in
      some places and simply <literal>Map</literal> in others. This has
      to do with the fact that for some operations, like creating a
      <literal>Map.t</literal>, you need access to type-specialized
      information, and for others, like looking something up in
      <literal>Map.t</literal>, you don't. This is covered in more
      detail in <xref linkend="maps-and-hashtables"/>.
    </para>
  </sect1>
  <sect1 id="concrete-types-in-signatures">
    <title>Concrete types in signatures</title>
    <para>
      In our frequency-count example, the module
      <literal>Counter</literal> had an abstract type
      <literal>Counter.t</literal> for representing a collection of
      frequency counts. Sometimes, you'll want to make a type in your
      interface <emphasis>concrete</emphasis>, by including the type
      definition in the interface.
    </para>
    <para>
      For example, imagine we wanted to add a function to
      <literal>Counter</literal> for returning the line with the median
      frequency count. If the number of lines is even, then there is no
      precise median and the function would return the lines before and
      after the median instead. We'll use a custom type to represent the
      fact that there are two possible return values. Here's a possible
      implementation.
    </para>
    <programlisting language="ocaml">
type median = | Median of string
              | Before_and_after of string * string

let median t =
  let sorted_strings = List.sort (Map.to_alist t)
      ~cmp:(fun (_,x) (_,y) -&gt; Int.descending x y)
  in
  let len = List.length sorted_strings in
  if len = 0 then failwith &quot;median: empty frequency count&quot;;
  let nth n = fst (List.nth_exn sorted_strings n) in
  if len mod 2 = 1
  then Median (nth (len/2))
  else Before_and_after (nth (len/2 - 1), nth (len/2));;
</programlisting>
    <para>
      Now, to expose this usefully in the interface, we need to expose
      both the function and the type <literal>median</literal> with its
      definition. Note that values (of which functions are an example)
      and types have distinct namespaces, so there's no name clash here.
      The following two lines added to <literal>freq.mli</literal> does
      the trick.
    </para>
    <programlisting language="ocaml">
type median = | Median of string
              | Before_and_after of string * string

val median : t -&gt; median
</programlisting>
    <para>
      The decision of whether a given type should be abstract or
      concrete is an important one. Abstract types give you more control
      over how values are created and accessed, and make it easier to
      enforce invariants beyond what is enforced by the type itself;
      concrete types let you expose more detail and structure to client
      code in a lightweight way. The right choice depends very much on
      the context.
    </para>
  </sect1>
  <sect1 id="nested-modules">
    <title>Nested modules</title>
    <para>
      Up until now, we've only considered modules that correspond to
      files, like <literal>counter.ml</literal>. But modules (and module
      signatures) can be nested inside other modules. As a simple
      example, consider a program that needs to deal with multiple
      identifier like usernames and hostnames. If you just represent
      these as strings, then it becomes easy to confuse one with the
      other.
    </para>
    <para>
      A better approach is to mint new abstract types for each
      identifier, where those types are under the covers just
      implemented as strings. That way, the type system will prevent you
      from confusing a username with a hostname, and if you do need to
      convert, you can do so using explicit conversions to and from the
      string type.
    </para>
    <para>
      Here's how you might create such an abstract type, within a
      sub-module:
    </para>
    <programlisting language="ocaml">
open Core.Std

module Username : sig
  type t
  val of_string : string -&gt; t
  val to_string : t -&gt; string
end = struct
  type t = string
  let of_string x = x
  let to_string x = x
end
</programlisting>
    <para>
      Note that the <literal>to_string</literal> and
      <literal>of_string</literal> functions above are implemented
      simply as the identity function, which means they have no runtime
      effect. They are there purely as part of the discipline that they
      enforce on the code through the type system.
    </para>
    <para>
      The basic structure of a module declaration like this is:
    </para>
    <programlisting language="ocaml">
module &lt;name&gt; : &lt;signature&gt; = &lt;implementation&gt;
</programlisting>
    <para>
      We could have written this slightly differently, by giving the
      signature its own toplevel <literal>module type</literal>
      declaration, making it possible to create multiple distinct types
      with the same underlying implementation in a lightweight way.
    </para>
    <programlisting language="ocaml">
open Core.Std

module type ID = sig
  type t
  val of_string : string -&gt; t
  val to_string : t -&gt; string
end

module String_id = struct
  type t = string
  let of_string x = x
  let to_string x = x
end

module Username : ID = String_id
module Hostname : ID = String_id

type session_info = { user: Username.t;
                      host: Hostname.t;
                      when_started: Time.t;
                    }

let sessions_have_same_user s1 s2 =
  s1.user = s2.host
</programlisting>
    <para>
      The above code has a fairly obvious bug, and indeed, the compiler
      will refuse to compile it, spitting out the following error.
    </para>
    <programlisting>
File &quot;buggy.ml&quot;, line 25, characters 12-19:
Error: This expression has type Hostname.t
       but an expression was expected of type Username.t
Command exited with code 2.
</programlisting>
    <para>
      We can also combine this with the use of the include statement to
      add some extra functionality to such a module. Thus, we could have
      rewritten the definition of <literal>Hostname</literal> above as
      follows to add a function <literal>Hostname.mine</literal> that
      returns the hostname of the present machine.
    </para>
    <programlisting language="ocaml">
module Hostname : sig
  include ID
  val mine : unit -&gt; t
end = struct
  include String_id
  let mine = Unix.gethostname
end
</programlisting>
  </sect1>
  <sect1 id="opening-modules">
    <title>Opening modules</title>
    <para>
      One useful primitive in OCaml's module language is the
      <literal>open</literal> statement. We've seen that already in the
      <literal>open Core.Std</literal> that has been at the top of our
      source files.
    </para>
    <para>
      We've used OCaml's <literal>open</literal> statement many times
      already in the `open
    </para>
    <para>
      So far, we've been referring to values and types within a module
      by using the module name as an explicit qualifier.
      <emphasis>e.g.</emphasis>, we write <literal>List.map</literal> to
      refer to the <literal>map</literal> function in the
      <literal>List</literal> module Sometimes, though, you want to be
      able to refer to the contents of a module without that kind of
      explicit qualification. This is what the <literal>open</literal>
      statement is for.
    </para>
    <para>
      We've already seen the <literal>open</literal> statement in use in
      the <literal>open Core.Std</literal> statements at the top of each
      source file. Opening a module adds its contents to the environment
      that the compiler looks in for finding identifiers. Here's a
      trivial example that gives you a sense of how this works.
    </para>
    <programlisting language="ocaml">
# module M = struct let foo = 3 end;;
module M : sig val foo : int end
# foo;;
Error: Unbound value foo
# open M;;
# foo;;
- : int = 3
</programlisting>
    <para>
      <literal>open</literal> is essential when you want to modify your
      environment for a standard library like Core, but it's generally
      good style to keep opening of modules to a minimum. Opening a
      module is basically a tradeoff between terseness and explicitness
      --- the more modules you open, the harder it is to look at an
      identifier and figure out where it's defined.
    </para>
    <para>
      Here's some general advice on how to deal with opens.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Opening modules at the toplevel of a module should be done
          quite sparingly, and generally only with modules that have
          been specifically designed to be opened, like
          <literal>Core.Std</literal> or
          <literal>Option.Monad_infix</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          If you do need to do an open, it's better to do a
          <emphasis>local open</emphasis>. There are two syntaxes for
          local opens. For example, you can write:
        </para>
        <programlisting language="ocaml">
let average x y =
  let open Int64 in
  x + y / of_int 2
</programlisting>
        <para>
          In the above, <literal>of_int</literal> and the infix
          operators are the ones from <literal>Int64</literal> module.
        </para>
        <para>
          There's another even more lightweight syntax for local opens,
          which is particularly useful for small expressions:
        </para>
        <programlisting language="ocaml">
let average x y =
  Int64.(x + y / of_int 2)
</programlisting>
      </listitem>
      <listitem>
        <para>
          An alternative to local opens that makes your code terser
          without giving up on explicitness is to locally rebind the
          name of a module. So, instead of writing:
        </para>
        <programlisting language="ocaml">
let print_median m =
   match m with
   | Counter.Median string -&gt; printf &quot;True median:\n   %s\n&quot;
   | Counter.Before_and_after of before * after -&gt;
     printf &quot;Before and after median:\n   %s\n   %s\n&quot; before after
</programlisting>
        <para>
          you could write:
        </para>
        <programlisting language="ocaml">
let print_median m =
   let module C = Counter in
   match m with
   | C.Median string -&gt; printf &quot;True median:\n   %s\n&quot;
   | C.Before_and_after of before * after -&gt;
     printf &quot;Before and after median:\n   %s\n   %s\n&quot; before after
</programlisting>
        <para>
          Because the module name <literal>C</literal> only exists for a
          short scope, it's easy to read and remember what
          <literal>C</literal> stands for. Rebinding modules to very
          short names at the toplevel of your module is usually a
          mistake.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1 id="including-modules">
    <title>Including modules</title>
    <para>
      While opening a module affects the environment used to search for
      identifiers, <emphasis>including</emphasis> a module is a way of
      actually adding new identifiers to a module proper. Consider the
      following simple module for representing a range of intervals.
    </para>
    <programlisting language="ocaml">
# module Interval = struct
    type t = | Interval of int * int
             | Empty

    let create low high =
      if high &lt; low then Empty else Interval (low,high)
  end;;
module Interval :
  sig type t = Interval of int * int | Empty val create : int -&gt; int -&gt; t end
</programlisting>
    <para>
      We can use the <literal>include</literal> directive to create a
      new, extended version of the <literal>Interval</literal> module.
    </para>
    <programlisting language="ocaml">
# module Extended_interval = struct
    include Interval

    let contains t x =
      match t with
      | Empty -&gt; false
      | Interval (low,high) -&gt; x &gt;= low &amp;&amp; x &lt;= high
  end;;
module Extended_interval :
  sig
    type t = Interval.t = Interval of int * int | Empty
    val create : int -&gt; int -&gt; t
    val contains : t -&gt; int -&gt; bool
  end
# Extended_interval.contains (Extended_interval.create 3 10) 4;;
- : bool = true
</programlisting>
    <para>
      The difference between <literal>include</literal> and
      <literal>open</literal> is that we've done more than change how
      identifiers are searched for: we've changed what's in the module.
      If we'd used <literal>open</literal>, we'd have gotten a quite
      different result.
    </para>
    <programlisting language="ocaml">
# module Extended_interval = struct
    open Interval

    let contains t x =
      match t with
      | Empty -&gt; false
      | Interval (low,high) -&gt; x &gt;= low &amp;&amp; x &lt;= high
  end;;
module Extended_interval :
  sig val contains : Extended_interval.t -&gt; int -&gt; bool end
# Extended_interval.contains (Extended_interval.create 3 10) 4;;
Error: Unbound value Extended_interval.create
</programlisting>
    <para>
      To consider a more realistic example, imagine you wanted to build
      an extended version of the <literal>List</literal> module, where
      you've added some functionality not present in the module as
      distributed in Core. <literal>include</literal> allows us to do
      just that.
    </para>
    <programlisting language="ocaml">
(* ext_list.ml: an extended list module *)

open Core.Std

(* The new function we're going to add *)
let rec intersperse list el =
  match list with
  | [] | [ _ ]   -&gt; list
  | x :: y :: tl -&gt; x :: el :: intersperse (y::tl) el

(* The remainder of the list module *)
include List
</programlisting>
    <para>
      Now, what about the interface of this new module? It turns out
      that include works on the signature language as well, so we can
      pull essentially the same trick to write an <literal>mli</literal>
      for this new module. The only trick is that we need to get our
      hands on the signature for the list module, which can be done
      using <literal>module type of</literal>.
    </para>
    <programlisting language="ocaml">
(* ext_list.mli: an extended list module *)

open Core.Std

(* Include the interface of the list module from Core *)
include (module type of List)

(* Signature of function we're adding *)
val intersperse : 'a list -&gt; 'a -&gt; 'a list
</programlisting>
    <para>
      Note that the order of declarations in the <literal>mli</literal>
      does not need to match the order of declarations in the
      <literal>ml</literal>. Also, the order of declarations in the
      <literal>ml</literal> is quite important in that it determines
      what values are shadowed. If we wanted to replace a function in
      <literal>List</literal> with a new function of the same name, the
      declaration of that function in the <literal>ml</literal> would
      have to come after the <literal>include List</literal>
      declaration.
    </para>
    <para>
      And we can now use <literal>Ext_list</literal> as a replacement
      for <literal>List</literal>. If we want to use
      <literal>Ext_list</literal> in preference to
      <literal>List</literal> in our project, we can create a file of
      common definitions:
    </para>
    <programlisting language="ocaml">
(* common.ml *)

module List = Ext_list
</programlisting>
    <para>
      And if we then put <literal>open Common</literal> after
      <literal>open Core.Std</literal> at the top of each file in our
      project, then references to <literal>List</literal> will
      automatically go to <literal>Ext_list</literal> instead.
    </para>
  </sect1>
  <sect1 id="common-errors-with-modules">
    <title>Common errors with modules</title>
    <para>
      When OCaml compiles a program with an <literal>ml</literal> and an
      <literal>mli</literal>, it will complain if it detects a mismatch
      between the two. Here are some of the common errors you'll run
      into.
    </para>
    <sect2 id="type-mismatches">
      <title>Type mismatches</title>
      <para>
        The simplest kind of error is where the type specified in the
        signature does not match up with the type in the implementation
        of the module. As an example, if we replace the
        <literal>val</literal> declaration in
        <literal>counter.mli</literal> by swapping the types of the
        first two arguments:
      </para>
      <programlisting language="ocaml">
val touch : string -&gt; t -&gt; t
</programlisting>
      <para>
        and then try to compile <literal>Counter</literal> (by writing
        <literal>ocamlbuild -use-ocamlfind counter.cmo</literal>. The
        <literal>cmo</literal> file is a compiled object file,
        containing the bytecode-compiled version of a module), we'll get
        the following error:
      </para>
      <programlisting>
File &quot;counter.ml&quot;, line 1, characters 0-1:
Error: The implementation counter.ml
       does not match the interface counter.cmi:
       Values do not match:
         val touch :
           ('a, int) Core.Std.Map.t -&gt; 'a -&gt; ('a, int) Core.Std.Map.t
       is not included in
         val touch : string -&gt; t -&gt; t
</programlisting>
      <para>
        This error message is a bit intimidating at first, and it takes
        a bit of thought to see why the first type for touch (which
        comes from the implementation) doesn't match the second one
        (which comes from the interface). The key thing to remember is
        that <literal>t</literal> is a
        <literal>Core.Std.Map.t</literal>, at which point you can see
        that the error is a mismatch in the order of arguments to
        <literal>touch</literal>.
      </para>
      <para>
        There's no denying that learning to decode such error messages
        is difficult at first, and takes some getting used to. But in
        time, decoding these errors becomes second nature.
      </para>
    </sect2>
    <sect2 id="missing-definitions">
      <title>Missing definitions</title>
      <para>
        We might decide that we want a new function in
        <literal>Counter</literal> for pulling out the frequency count
        of a given string. We can update the <literal>mli</literal> by
        adding the following line.
      </para>
      <programlisting language="ocaml">
val count : t -&gt; string -&gt; int
</programlisting>
      <para>
        Now, if we try to compile without actually adding the
        implementation, we'll get this error:
      </para>
      <programlisting>
File &quot;counter.ml&quot;, line 1, characters 0-1:
Error: The implementation counter.ml
       does not match the interface counter.cmi:
       The field `count' is required but not provided
</programlisting>
      <para>
        A missing type definition will lead to a similar error.
      </para>
    </sect2>
    <sect2 id="type-definition-mismatches">
      <title>Type definition mismatches</title>
      <para>
        Type definitions that show up in an <literal>mli</literal> need
        to match up with corresponding definitions in the
        <literal>ml</literal>. Consider again the example of the type
        <literal>median</literal>. The order of the declaration of
        variants matters to the OCaml compiler, so the definition of
        <literal>median</literal> in the implementation listing those
        options in a different order:
      </para>
      <programlisting language="ocaml">
type median = | Before_and_after of line * line
              | Median of line
</programlisting>
      <para>
        will lead to a compilation error:
      </para>
      <programlisting>
File &quot;counter.ml&quot;, line 1, characters 0-1:
Error: The implementation counter.ml
       does not match the interface counter.cmi:
       Type declarations do not match:
         type median = Before_and_after of string * string | Median of string
       is not included in
         type median = Median of string | Before_and_after of string * string
       Their first fields have different names, Before_and_after and Median.
</programlisting>
      <para>
        Order is similarly important in other parts of the signature,
        including the order in which record fields are declared and the
        order of arguments (including labeled and optional arguments) to
        a function.
      </para>
    </sect2>
    <sect2 id="cyclic-dependencies">
      <title>Cyclic dependencies</title>
      <para>
        In most cases, OCaml doesn't allow circular dependencies,
        <emphasis>i.e.</emphasis>, a collection of definitions that all
        refer to each other. If you want to create such definitions, you
        typically have to mark them specially. For example, when
        defining a set of mutually recursive values (like the definition
        of <literal>is_even</literal> and <literal>is_odd</literal> in
        <xref linkend="recursive-functions"/>), you need to
        define them using <literal>let rec</literal> rather than
        ordinary <literal>let</literal>.
      </para>
      <para>
        The same is true at the module level. By default, circular
        dependencies between modules are not allowed, and indeed,
        circular dependencies among files are never allowed. Recursive
        modules are possible, but are a rare case and we won't discuss
        them further here.
      </para>
      <para>
        The simplest case of this is that a module can not directly
        refer to itself (although definitions within a module can refer
        to each other in the ordinary way). So, if we tried to add a
        reference to <literal>Counter</literal> from within
        <literal>counter.ml</literal>:
      </para>
      <programlisting language="ocaml">
let singleton l = Counter.touch Counter.empty
</programlisting>
      <para>
        then when we try to build, we'll get this error:
      </para>
      <programlisting>
File &quot;counter.ml&quot;, line 17, characters 18-31:
Error: Unbound module Counter
Command exited with code 2.
</programlisting>
      <para>
        The problem manifests in a different way if we create circular
        references between files. We could create such a situation by
        adding a reference to Freq from <literal>counter.ml</literal>,
        <emphasis>e.g.</emphasis>, by adding the following line:
      </para>
      <programlisting language="ocaml">
let build_counts = Freq.build_counts
</programlisting>
      <para>
        In this case, <literal>ocamlbuild</literal> will notice the
        error and complain:
      </para>
      <programlisting>
Circular dependencies: &quot;freq.cmo&quot; already seen in
  [ &quot;counter.cmo&quot;; &quot;freq.cmo&quot; ]
</programlisting>
    </sect2>
  </sect1>
</chapter><chapter id="records">
  <title>Records</title>
  <note><title>
  A note to reviewers
  </title>
  <para>
    <emphasis role="strong">IMPORTANT</emphasis>: This section is going
    to describe how records and variants will behave in OCaml 4.01. If
    you want to follow along fully with the examples here, you'll need
    to make sure you install a bleeding-edge release, which you can do
    as follows:
  </para>
  <programlisting>
opam switch 4.01.0dev+trunk
</programlisting>
  <para>
    Once you make the switch, you'll need to install the packages you
    need. Note that switching back and forth between different compilers
    and their packages is a fast operation after the initial build.
  </para>
  </note>
  <para>
    One of OCaml's best features is its concise and expressive system
    for declaring new datatypes. Two key elements of that system are
    <emphasis>records</emphasis> and <emphasis>variants</emphasis>, both
    of which we discussed briefly in
    <xref linkend="a-guided-tour"/>. In this chapter we'll
    cover records in more depth, covering more of the details of how
    they work, as well as advice on how to use them effectively in your
    software designs. Variants will be covered in more depth in
    <xref linkend="variants"/>.
  </para>
  <para>
    A record represents a collection of values stored together as one,
    where each component is identified by a different field name. The
    basic syntax for a record type declaration is as follows.
  </para>
  <programlisting language="ocaml">
type &lt;record-name&gt; =
  { &lt;field-name&gt; : &lt;type-name&gt; ;
    &lt;field-name&gt; : &lt;type-name&gt; ;
    ...
  }
</programlisting>
  <para>
    Note that record field names must start with a lower-case letter.
  </para>
  <para>
    Here's a simple example, a <literal>host_info</literal> record that
    summarizes information about a given computer.
  </para>
  <programlisting language="ocaml">
# type host_info =
    { hostname   : string;
      os_name    : string;
      os_release : string;
      cpu_arch   : string;
      timestamp  : Time.t;
    };;
</programlisting>
  <para>
    We can construct a <literal>host_info</literal> just as easily. The
    following code uses the <literal>Shell</literal> module from
    <literal>Core_extended</literal> to dispatch commands to the shell
    to extract the information we need about the computer we're running
    on, and the <literal>Time.now</literal> call from Core's
    <literal>Time</literal> module.
  </para>
  <programlisting language="ocaml">
# #require &quot;core_extended&quot;;;
# open Core_extended.Std;;
# let my_host =
    let sh = Shell.sh_one_exn in
    { hostname   = sh &quot;hostname&quot;;
      os_name    = sh &quot;uname -s&quot;;
      os_release = sh &quot;uname -r&quot;;
      cpu_arch   = sh &quot;uname -p&quot;;
      timestamp  = Time.now ();
    };;
val my_host : host_info =
  {hostname = &quot;yevaud.local&quot;; os_name = &quot;Darwin&quot;; os_release = &quot;12.3.0&quot;;
   cpu_arch = &quot;i386&quot;; timestamp = 2013-04-13 06:39:17.806527}
</programlisting>
  <para>
    You might wonder how the compiler inferred that
    <literal>my_host</literal> is of type <literal>host_info</literal>.
    The hook that the compiler uses in this case to figure out the type
    is the record field name. Later in the chapter, we'll talk about
    what happens when there is more than one record type in scope with
    the same field name.
  </para>
  <para>
    Once we have a record value in hand, we can extract elements from
    the record field using dot-notation.
  </para>
  <programlisting language="ocaml">
# my_host.cpu_arch;;
- : string = &quot;i386&quot;
</programlisting>
  <para>
    When declaring an OCaml type, you always have the option of
    parameterizing it by a polymorphic type. Records are no different in
    this regard. So, for example, here's a type one might to timestamp
    arbitrary items.
  </para>
  <programlisting language="ocaml">
# type 'a timestamped = { item: 'a; time: Time.t };;
type 'a timestamped = { item : 'a; time : Time.t; }
</programlisting>
  <para>
    We can then write polymorphic functions that operate over this
    parameterized type.
  </para>
  <programlisting language="ocaml">
# let first_timestamped list =
    List.reduce list ~f:(fun a b -&gt; if a.time &lt; b.time then a else b)
  ;;
val first_timestamped : 'a timestamped list -&gt; 'a timestamped option = &lt;fun&gt;
</programlisting>
  <sect1 id="patterns-and-exhaustiveness">
    <title>Patterns and exhaustiveness</title>
    <para>
      Another way of getting information out of a record is by using a
      pattern match, as in the definition of
      <literal>host_info_to_string</literal> below.
    </para>
    <programlisting language="ocaml">
# let host_info_to_string { hostname = h; os_name = os;
                            os_release = r; cpu_arch = c;
                            timestamp = ts;
                          } =
       sprintf &quot;%s (%s %s / %s, on %s)&quot; h os r c (Time.to_sec_string ts);;
    val host_info_to_string : host_info -&gt; string = &lt;fun&gt;
# host_info_to_string my_host;;
- : string = &quot;yevaud.local (Darwin 12.3.0 / i386, on 2013-04-13 06:39:17)&quot;
</programlisting>
    <para>
      Note that the pattern that we used had only a single case, rather
      than using several cases separated by <literal>|</literal>s. We
      needed only one pattern because record patterns are
      <emphasis>irrefutable</emphasis>, meaning that a record pattern
      match will never fail at runtime. This makes sense, because the
      set of fields available in a record is always the same. In
      general, patterns for types with a fixed structure, like records
      and tuples, are irrefutable, unlike types with variable structure
      like lists and variants.
    </para>
    <para>
      Another important characteristic of record patterns is that they
      don't need to be complete; a pattern can mention only a subset of
      the fields in the record. This can be convenient, but it can also
      be error prone. In particular, this means that when new fields are
      added to the record, code that should be updated to react to the
      presence of those new fields will not be flagged by the compiler.
    </para>
    <para>
      As an example, imagine that we wanted to add a new field to our
      <literal>host_info</literal> record called
      <literal>os_version</literal>, as shown below.
    </para>
    <programlisting language="ocaml">
# type host_info =
    { hostname   : string;
      os_name    : string;
      os_release : string;
      cpu_arch   : string;
      os_version : string;
      timestamp  : Time.t;
    } ;;
</programlisting>
    <para>
      The code for <literal>host_info_to_string</literal> would continue
      to compile without change. In this particular case, it's pretty
      clear that you might want to update
      <literal>host_info_to_string</literal> in order to include
      <literal>os_version</literal>, and it would be nice if the type
      system would give you a warning about the change.
    </para>
    <para>
      Happily, OCaml does offer an optional warning for missing fields
      in a record pattern. With that warning turned on (which you can do
      in the toplevel by typing
      <literal>#warnings &quot;+9&quot;</literal>), the compiler will
      warn about the missing field.
    </para>
    <programlisting language="ocaml">
# #warnings &quot;+9&quot;;;
# let host_info_to_string { hostname = h; os_name = os;
                            os_release = r; cpu_arch = c;
                            timestamp = ts;
                          } =
    sprintf &quot;%s (%s %s / %s, on %s)&quot; h os r c (Time.to_sec_string ts);;
Characters 24-183:
val host_info_to_string : host_info -&gt; string = &lt;fun&gt;
Warning 9: the following labels are not bound in this record pattern:
os_version
Either bind these labels explicitly or add '; _' to the pattern.
</programlisting>
    <para>
      We can disable the warning for a given pattern by explicitly
      acknowledging that we are ignoring extra fields. This is done by
      adding an underscore to the pattern, as shown below.
    </para>
    <programlisting language="ocaml">
# let host_info_to_string { hostname = h; os_name = os;
                            os_release = r; cpu_arch = c;
                            timestamp = ts; _
                          } =
    sprintf &quot;%s (%s %s / %s, on %s)&quot; h os r c (Time.to_sec_string ts);;
val host_info_to_string : host_info -&gt; string = &lt;fun&gt;
</programlisting>
    <para>
      It's a good idea to enable the warning for incomplete record
      matches, and to explicitly disable it with an <literal>_</literal>
      where necessary.
    </para>
  </sect1>
  <sect1 id="field-punning">
    <title>Field punning</title>
    <para>
      When the name of a variable coincides with the name of a record
      field, OCaml provides some handy syntactic shortcuts. For example,
      the pattern in the following function binds all of the fields in
      question to variables of the same name. This is called
      <emphasis>field punning</emphasis>.
    </para>
    <programlisting language="ocaml">
# let host_info_to_string { hostname; os_name; os_release; cpu_arch } =
     sprintf &quot;%s (%s %s / %s)&quot; hostname os_name os_release cpu_arch;;
  val host_info_to_string : host_info -&gt; string = &lt;fun&gt;
</programlisting>
    <para>
      Field punning can also be used to construct a record. Consider the
      following code for generating a <literal>host_info</literal>
      record.
    </para>
    <programlisting language="ocaml">
# let my_host =
    let sh cmd = Shell.sh_one_exn cmd in
    let hostname   = sh &quot;hostname&quot; in
    let os_name    = sh &quot;uname -s&quot; in
    let os_release = sh &quot;uname -r&quot; in
    let cpu_arch   = sh &quot;uname -p&quot; in
    let os_version = sh &quot;Uname -v&quot; in
    let timestamp  = Time.now () in
    { hostname; os_name; os_release; cpu_arch; os_version; timestamp };;
val my_host : host_info =
  {hostname = &quot;yevaud.local&quot;; os_name = &quot;Darwin&quot;; os_release = &quot;12.3.0&quot;;
   cpu_arch = &quot;i386&quot;;
   os_version =
    &quot;Darwin Kernel Version 12.3.0: Sun Jan  6 22:37:10 PST 2013; root:xnu-2050.22.13~1/RELEASE_X86_64&quot;;
   timestamp = 2013-04-13 06:49:57.771755}
</programlisting>
    <para>
      In the above code, we defined variables corresponding to the
      record fields first, and then the record declaration itself simply
      listed the fields that needed to be included.
    </para>
    <para>
      You can take advantage of both field punning and label punning
      when writing a function for constructing a record from labeled
      arguments, as shown below.
    </para>
    <programlisting language="ocaml">
# let create_host_info ~hostname ~os_name ~os_release ~cpu_arch ~os_version =
    { os_name; os_release; cpu_arch; os_version;
      hostname = String.lowercase hostname;
      timestamp = Time.now () };;
val create_host_info :
  hostname:string -&gt;
  os_name:string -&gt;
  os_release:string -&gt;
  cpu_arch:string -&gt; os_version:string -&gt; timestamp:Time.t -&gt; host_info =
  &lt;fun&gt;
</programlisting>
    <para>
      This is considerably more concise than what you would get without
      punning at all.
    </para>
    <programlisting language="ocaml">
# let create_host_info
    ~hostname:hostname ~os_name:os_name ~os_release:os_release
    ~cpu_arch:cpu_arch ~os_version:os_version =
    { os_name = os_name; os_release = os_release;
     cpu_arch = cpu_arch; os_version = os_version;
      hostname = String.lowercase hostname;
      timestamp = Time.now () };;
val create_host_info :
  hostname:string -&gt;
  os_name:string -&gt;
  os_release:string -&gt;
  cpu_arch:string -&gt; os_version:string -&gt; timestamp:Time.t -&gt; host_info =
  &lt;fun&gt;
</programlisting>
    <para>
      Together, labeled arguments, field names, and field and label
      punning, encourage a style where you propagate the same names
      throughout your code-base. This is generally good practice, since
      it encourages consistent naming, which makes it easier to navigate
      the source.
    </para>
  </sect1>
  <sect1 id="reusing-field-names">
    <title>Reusing field names</title>
    <para>
      Defining records with the same field names can be problematic.
      Let's consider a simple example: building types to represent the
      protocol used for a logging server.
    </para>
    <para>
      We'll describe three message types: <literal>log_entry</literal>,
      <literal>heartbeat</literal> and <literal>logon</literal>. The
      <literal>log_entry</literal> message is used to deliver a log
      entry to the server; the <literal>logon</literal> message is sent
      to initiate a connection, and includes the identity of the user
      connecting and credentials used for authentication; and the
      <literal>heartbeat</literal> message is periodically sent by the
      client to demonstrate to the server that the client is alive and
      connected. All of these messages include a session id and the time
      the message was generated.
    </para>
    <programlisting language="ocaml">
# type log_entry =
    { session_id: string;
      time: Time.t;
      important: bool;
      message: string;
    }
  type heartbeat =
    { session_id: string;
      time: Time.t;
      status_message: string;
    }
  type logon =
    { session_id: string;
      time: Time.t;
      user: string;
      credentials: string;
    }
;;
</programlisting>
    <para>
      Reusing field names can lead to some ambiguity. For example, if we
      want to write a function to grab the session_id from a record,
      what type will it have?
    </para>
    <programlisting language="ocaml">
# let get_session_id t = t.session_id;;
val get_session_id : logon -&gt; string = &lt;fun&gt;
</programlisting>
    <para>
      In this case, OCaml just picks the most recent definition of that
      record field. We can force OCaml to assume we're dealing with a
      different type (say, a <literal>heartbeat</literal>) using a type
      annotation.
    </para>
    <programlisting language="ocaml">
# let get_heatbeat_session_id (t:heartbeat) = t.session_id;;
val get_heatbeat_session_id : heartbeat -&gt; string = &lt;funambulate&gt;
</programlisting>
    <para>
      While it's possible to resolve ambiguous field names using type
      annotations, the ambiguity can be a bit confusing. Consider the
      following functions for grabbing the session id and status from a
      heartbeat.
    </para>
    <programlisting language="ocaml">
# let status_and_session t = (t.status_message, t.session_id);;
val status_and_session : heartbeat -&gt; string * string = &lt;fun&gt;
# let session_and_status t = (t.session_id, t.status_message);;
Error: The record type logon has no field status_message
# let session_and_status (t:heartbeat) = (t.session_id, t.status_message);;
val session_and_status : heartbeat -&gt; string * string = &lt;fun&gt;
</programlisting>
    <para>
      Why did the first definition succeed without a type annotation and
      the second one fail? The difference is that in the first case, the
      type-checker considered the <literal>status_message</literal>
      field first and thus concluded that the record was a
      <literal>heartbeat</literal>. When the order was switched, the
      <literal>session_id</literal> field was considered first, and so
      that drove the type to be considered to be a
      <literal>logon</literal>, at which point
      <literal>t.status_message</literal> no longer made sense.
    </para>
    <para>
      We can avoid this ambiguity altogether, either by using
      non-overlapping field names or, more generally, by minting a
      module for each type. Packing types into modules is a broadly
      useful idiom (and one used quite extensively by Core), providing
      for each type a name-space within which to put related values.
      When using this style, it is standard practice to name the type
      associated with the module <literal>t</literal>. Using this style
      we would write:
    </para>
    <programlisting language="ocaml">
# module Log_entry = struct
    type t =
      { session_id: string;
        time: Time.t;
        important: bool;
        message: string;
      }
  end
  module Heartbeat = struct
    type t =
      { session_id: string;
        time: Time.t;
        status_message: string;
      }
  end
  module Logon = struct
    type t =
      { session_id: string;
        time: Time.t;
        user: string;
        credentials: string;
      }
  end;;
</programlisting>
    <para>
      Now, our heartbeat-creation function can be rendered as follows.
    </para>
    <programlisting language="ocaml">
# let create_log_entry ~session_id ~important message =
     { Log_entry.time = Time.now (); Log_entry.session_id;
       Log_entry.important; Log_entry.message }
  ;;
val create_log_entry :
  session_id:string -&gt; important:bool -&gt; string -&gt; Log_entry.t = &lt;fun&gt;
</programlisting>
    <para>
      The module name <literal>Log_entry</literal> is required to
      qualify the fields, because this function is outside of the
      <literal>Log_entry</literal> module where the record was defined.
      OCaml only requires the module qualification for one record field,
      however, so we can write this more concisely. Note that we are
      allowed to insert whitespace between the module-path and the field
      name.
    </para>
    <programlisting language="ocaml">
# let create_log_entry ~session_id ~important message =
     { Log_entry.
       time = Time.now (); session_id; important; message }
  ;;
val create_log_entry :
  session_id:string -&gt; important:bool -&gt; string -&gt; Log_entry.t = &lt;fun&gt;
</programlisting>
    <para>
      This is not restricted to constructing a record; we can use the
      same trick when pattern matching.
    </para>
    <programlisting language="ocaml">
# let message_to_string { Log_entry.important; message; _ } =
    if important then String.uppercase message else message
  ;;
val message_to_string : Log_entry.t -&gt; string = &lt;fun&gt;
</programlisting>
    <para>
      When using dot-notation for accessing record fields, we can
      qualify the field by the module directly.
    </para>
    <programlisting language="ocaml">
# let is_important t = t.Log_entry.important;;
val is_important : Log_entry.t -&gt; bool = &lt;fun&gt;
</programlisting>
    <para>
      The syntax here is a little surprising when you first encounter
      it. The thing to keep in mind is that the dot is being used in two
      ways: the first dot is a record field access, with everything to
      the right of the dot being interpreted as a field name; the second
      dot is accessing the contents of a module, referring to the record
      field <literal>important</literal> from within the module
      <literal>Log_entry</literal>. The fact that
      <literal>Log_entry</literal> is capitalized and so can't be a
      field name is what disambiguates the two uses.
    </para>
    <para>
      For functions defined within the module where a given record is
      defined, the module qualification goes away entirely.
    </para>
  </sect1>
  <sect1 id="functional-updates">
    <title>Functional updates</title>
    <para>
      Fairly often, you will find yourself wanting to create a new
      record that differs from an existing record in only a subset of
      the fields. For example, imagine our logging server had a record
      type for representing the state of a given client, including when
      the last heartbeat was received from that client. The following
      defines a type for representing this information, as well as a
      function for updating the client information when a new heartbeat
      arrives.
    </para>
    <programlisting language="ocaml">
# type client_info =
   { addr: Unix.Inet_addr.t;
     port: int;
     user: string;
     credentials: string;
     last_heartbeat_time: Time.t;
   };;
# let register_heartbeat t hb =
      { addr = t.addr;
        port = t.port;
        user = t.user;
        credentials = t.credentials;
        last_heartbeat_time = hb.Heartbeat.time;
      };;
val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; client_info = &lt;fun&gt;
</programlisting>
    <para>
      This is fairly verbose, given that there's only one field that we
      actually want to change, and all the others are just being copied
      over from <literal>t</literal>. We can use OCaml's
      <emphasis>functional update</emphasis> syntax to do this more
      tersely. The syntax of a functional update is as follows.
    </para>
    <programlisting language="ocaml">
{ &lt;record&gt; with &lt;field&gt; = &lt;value&gt;;
                &lt;field&gt; = &lt;value&gt;;
                ...
}
</programlisting>
    <para>
      The purpose of the functional update is to create a new record
      based on an existing one, with a set of field changes layered on
      top.
    </para>
    <para>
      Given this, we can rewrite <literal>register_heartbeat</literal>
      more concisely.
    </para>
    <programlisting language="ocaml">
# let register_heartbeat t hb =
    { t with last_heartbeat_time = hb.Heartbeat.time };;
val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; client_info = &lt;fun&gt;
</programlisting>
    <para>
      Functional updates make your code independent of the identity of
      the fields in the record that are not changing. This is often what
      you want, but it has downsides as well. In particular, if you
      change the definition of your record to have more fields, the type
      system will not prompt you to reconsider whether your update code
      should affect those fields. Consider what happens if we decided to
      add a field for the status message received on the last heartbeat.
    </para>
    <programlisting language="ocaml">
# type client_info =
   { addr: Unix.Inet_addr.t;
     port: int;
     user: string;
     credentials: string;
     last_heartbeat_time: Time.t;
     last_heartbeat_status: string;
   };;
</programlisting>
    <para>
      The original implementation of
      <literal>register_heartbeat</literal> would now be invalid, and
      thus the compiler would warn us to think about how to handle this
      new field. But the version using a functional update continues to
      compile as is, even though it incorrectly ignores the new field.
      The correct thing to do would be to update the code as follows.
    </para>
    <programlisting language="ocaml">
# let register_heartbeat t hb =
    { t with last_heartbeat_time   = hb.Heartbeat.time;
             last_heartbeat_status = hb.Heartbeat.status_message;
    };;
val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; client_info = &lt;fun&gt;
</programlisting>
  </sect1>
  <sect1 id="mutable-fields">
    <title>Mutable fields</title>
    <para>
      Like most OCaml values, records are immutable by default. You can,
      however, declare individual record fields as mutable. For example,
      we could take the <literal>client_info</literal> type and make the
      fields that may need to change over time mutable, as follows.
    </para>
    <programlisting language="ocaml">
# type client_info =
   { addr: Unix.Inet_addr.t;
     port: int;
     user: string;
     credentials: string;
     mutable last_heartbeat_time: Time.t;
     mutable last_heartbeat_status: string;
   };;
</programlisting>
    <para>
      We then use the <literal>&lt;-</literal> operator for actually
      changing the state. The side-effecting version of
      <literal>register_heartbeat</literal> would be written as follows.
    </para>
    <programlisting language="ocaml">
# let register_heartbeat t hb =
    t.last_heartbeat_time   &lt;- hb.Heartbeat.time;
    t.last_heartbeat_status &lt;- hb.Heartbeat.status_message
  ;;
val register_heartbeat : client_info -&gt; Heartbeat.t -&gt; unit = &lt;fun&gt;
</programlisting>
    <para>
      Note that mutable assignment, and thus the
      <literal>&lt;-</literal> operator, is not needed for
      initialization, because all fields of a record, including mutable
      ones, are specified when the record is created.
    </para>
    <para>
      OCaml's policy of immutable-by-default is a good one, but
      imperative programming does have its place. We'll discuss more
      about how (and when) to use OCaml's imperative features in
      <xref linkend="imperative-programming"/>.
    </para>
  </sect1>
  <sect1 id="first-class-fields">
    <title>First-class fields</title>
    <para>
      Consider the following function for extracting the usernames from
      a list of <literal>Logon</literal> messages.
    </para>
    <programlisting language="ocaml">
# let get_users logons =
     List.dedup (List.map logons ~f:(fun x -&gt; x.Logon.user));;
val get_users : Logon.t list -&gt; string list = &lt;fun&gt;
</programlisting>
    <para>
      Here, we wrote a small function
      <literal>(fun x -&gt; x.Logon.user)</literal> to access the
      <literal>user</literal> field. This kind of accessor function is a
      common enough pattern that that it would be convenient to generate
      them automatically. The <literal>fieldslib</literal> syntax
      extension that ships with <literal>Core</literal> does just that.
    </para>
    <para>
      You can enable the syntax extension by typing
      <literal>#require &quot;fieldslib.syntax&quot;</literal> into the
      top-level, at which point the <literal>with fields</literal>
      annotation at the end of the declaration of a record type will
      cause the extension to be applied to a given type declaration. So,
      for example, we could have defined <literal>Logon</literal> as
      follows.
    </para>
    <programlisting language="ocaml">
# #require &quot;fieldslib.syntax&quot;;;
# module Logon = struct
    type t =
      { session_id: string;
        time: Time.t;
        user: string;
        credentials: string;
      }
    with fields
  end;;
</programlisting>
    <para>
      Note that this will generate a <emphasis>lot</emphasis> of output,
      because <literal>fieldslib</literal> generates a large collection
      of helper functions for working with record fields. We'll only
      discuss a few of these; you can learn about the remainder from the
      documentation that comes with <literal>fieldslib</literal>.
    </para>
    <para>
      One of the functions we obtain is <literal>Logon.user</literal>,
      which we can use to extract the user field from a logon message.
    </para>
    <programlisting language="ocaml">
# let get_users logons = List.dedup (List.map logons ~f:Logon.user);;
val get_users : Logon.t list -&gt; string list = &lt;fun&gt;
</programlisting>
    <para>
      In addition to generating field accessor functions,
      <literal>fieldslib</literal> also creates a sub-module called
      <literal>Fields</literal> that contains a first class
      representative of each field, in the form of a value of type
      <literal>Field.t</literal>. The <literal>Field</literal> module
      provides the following functions:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>Field.name</literal>, which returns the name of a
          field
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Field.get</literal>, which returns the content of a
          field
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Field.fset</literal>, which does a functional update
          of a field
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Field.setter</literal>, which returns
          <literal>None</literal> if the field is not mutable or
          <literal>Some f</literal> if it is, where <literal>f</literal>
          is a function for mutating that field.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      A <literal>Field.t</literal> has two type parameters: the first
      for the type of the record, and the second for the type of the
      field in question. Thus, the type of
      <literal>Logon.Fields.session_id</literal> is
      <literal>(Logon.t, string) Field.t</literal>, whereas the type of
      <literal>Logon.Fields.time</literal> is
      <literal>(Logon.t, Time.t) Field.t</literal>. Thus, if you call
      <literal>Field.get</literal> on
      <literal>Logon.Fields.user</literal>, you'll get a function for
      extracting the <literal>user</literal> field from a
      <literal>Logon.t</literal>.
    </para>
    <programlisting language="ocaml">
# Field.get Logon.Fields.user;;
- : Logon.t -&gt; string = &lt;fun&gt;
</programlisting>
    <para>
      Thus, first parameter of the <literal>Field.t</literal>
      corresponds to the record you pass to <literal>get</literal>, and
      the second argument corresponds to the value contained in the
      field, which is also the return type of <literal>get</literal>.
    </para>
    <para>
      The type of <literal>Field.get</literal> is a little more
      complicated than you might naively expect from the above, as you
      can see below.
    </para>
    <programlisting language="ocaml">
# Field.get;;
- : ('b, 'r, 'a) Field.t_with_perm -&gt; 'r -&gt; 'a = &lt;fun&gt;
</programlisting>
    <para>
      The type is <literal>Field.t_with_perm</literal> rather than a
      simple <literal>Field.t</literal> because fields have a notion of
      access control associated with them because there are some special
      cases where we may expose a field but not expose the ability to
      read a field but not the ability to do a functional update.
    </para>
    <para>
      We can use first class fields to do things like write a generic
      function for displaying a record field.
    </para>
    <programlisting language="ocaml">
# let show_field field to_string record =
    let name = Field.name field in
    let field_string = to_string (Field.get field record) in
    name ^ &quot;: &quot; ^ field_string
  ;;
val show_field : ('a, 'b) Field.t -&gt; ('b -&gt; string) -&gt; 'a -&gt; string = &lt;fun&gt;
</programlisting>
    <para>
      This takes three arguments: the <literal>Field.t</literal>, a
      function for converting the contents of the field in question to a
      string, and a record from which the field can be grabbed.
    </para>
    <para>
      Here's an example of <literal>show_field</literal> in action.
    </para>
    <programlisting language="ocaml">
# let logon = { Logon.
                session_id = &quot;26685&quot;;
                time = Time.now ();
                user = &quot;yminsky&quot;;
                credentials = &quot;Xy2d9W&quot;; }
  ;;
# show_field Logon.Fields.user Fn.id logon;;
- : string = &quot;user: yminsky&quot;
# show_field Logon.Fields.time Time.to_string logon;;
- : string = &quot;time: 2012-06-26 18:44:13.807826&quot;
</programlisting>
    <para>
      As a side note, the above is our first use of the
      <literal>Fn</literal> module (short for &quot;function&quot;)
      which provides a collection of useful primitives for dealing with
      functions. <literal>Fn.id</literal> is the identity function.
    </para>
    <para>
      <literal>fieldslib</literal> also provides higher-level operators,
      like <literal>Fields.fold</literal> and
      <literal>Fields.iter</literal>, which let you iterate over all the
      fields of a record. So, for example, in the case of
      <literal>Logon.t</literal>, the field iterator has the following
      type.
    </para>
    <programlisting language="ocaml">
# Logon.Fields.iter;;
- : session_id:(([&lt; `Read | `Set_and_create ], Logon.t, string)
                Field.t_with_perm -&gt; unit) -&gt;
    time:(([&lt; `Read | `Set_and_create ], Logon.t, Time.t) Field.t_with_perm -&gt;
          unit) -&gt;
    user:(([&lt; `Read | `Set_and_create ], Logon.t, string) Field.t_with_perm -&gt;
          unit) -&gt;
    credentials:(([&lt; `Read | `Set_and_create ], Logon.t, string)
                 Field.t_with_perm -&gt; unit) -&gt;
    unit
= &lt;fun&gt;
</programlisting>
    <para>
      This is a bit daunting to look at, largely because of the access
      control markers, but the structure is actually pretty simple. Each
      labeled argument is a function that takes a first-class field of
      the necessary type as an argument. Note that
      <literal>iter</literal> passes each of these callbacks the
      <literal>Field.t</literal>, not the contents of the specific
      record field. The contents of the field, though, can be looked up
      using the combination of the record and the
      <literal>Field.t</literal>.
    </para>
    <para>
      Now, let's use <literal>Logon.Fields.iter</literal> and
      <literal>show_field</literal> to print out all the fields of a
      <literal>Logon</literal> record.
    </para>
    <programlisting language="ocaml">
# let print_logon logon =
    let print to_string field =
      printf &quot;%s\n&quot; (show_field field to_string logon)
    in
    Logon.Fields.iter
      ~session_id:(print Fn.id)
      ~time:(print Time.to_string)
      ~user:(print Fn.id)
      ~credentials:(print Fn.id)
  ;;
val print_logon : Logon.t -&gt; unit = &lt;fun&gt;
# print_logon logon;;
session_id: 26685
time: 2012-06-26 18:44:13.807826
user: yminsky
credentials: Xy2d9W
- : unit = ()
</programlisting>
    <para>
      One nice side effect of this approach is that it helps you adapt
      your code when the fields of a record change. If you were to add a
      field to <literal>Logon.t</literal>, the type of
      <literal>Logon.Fields.iter</literal> would change along with it,
      acquiring a new argument. Any code using
      <literal>Logon.Fields.iter</literal> won't compile until it's
      fixed to take this new argument into account.
    </para>
    <para>
      This exhaustion guarantee is a valuable one. Field iterators are
      useful for a variety of record-related tasks, from building record
      validation functions to scaffolding the definition of a web-form
      from a record type, and such applications can benefit from the
      guarantee that all fields of the record type in question have been
      considered.
    </para>
  </sect1>
</chapter><chapter id="variants">
  <title>Variants</title>
  <para>
    Variant types are one of the most useful features of OCaml, and also
    one of the most unusual. They let you represent data that may take
    on multiple different forms, where each form is marked by an
    explicit tag. As we'll see, when combined with pattern matching,
    variants give you a powerful way of representing complex data and of
    organizing the case-analysis on that information.
  </para>
  <para>
    Let's consider a concrete example of how variants can be useful.
    Almost all terminals support a set of 8 basic colors, and we can
    represent those colors using a variant. Each color is declared as a
    simple tag, with pipes used to separate the different cases. Note
    that variant tags must be capitalized.
  </para>
  <programlisting language="ocaml">
# type basic_color =
    Black | Red | Green | Yellow | Blue | Magenta | Cyan | White ;;
# Cyan ;;
- : basic_color = Cyan
# [Blue; Magenta; Red] ;;
- : basic_color list = [Blue; Magenta; Red]
</programlisting>
  <para>
    The following function uses pattern matching to convert a
    <literal>basic_color</literal> to a corresponding integer. The
    exhaustiveness checking on pattern matches means that the compiler
    will warn us if we miss a color.
  </para>
  <programlisting language="ocaml">
# let basic_color_to_int = function
  | Black -&gt; 0 | Red     -&gt; 1 | Green -&gt; 2 | Yellow -&gt; 3
  | Blue  -&gt; 4 | Magenta -&gt; 5 | Cyan  -&gt; 6 | White  -&gt; 7 ;;
val basic_color_to_int : basic_color -&gt; int = &lt;fun&gt;
# List.map ~f:basic_color_to_int [Blue;Red];;
- : int list = [4; 1]
</programlisting>
  <para>
    Using the above, we can generate escape codes to change the color of
    a given string displayed in a terminal.
  </para>
  <programlisting language="ocaml">
# let color_by_number number text =
    sprintf &quot;\027[38;5;%dm%s\027[0m&quot; number text;;
  val color_by_number : int -&gt; string -&gt; string = &lt;fun&gt;
# let blue = color_by_number (basic_color_to_int Blue) &quot;Blue&quot;;;
val blue : string = &quot;\027[38;5;4mBlue\027[0m&quot;
# printf &quot;Hello %s World!\n&quot; blue;;
Hello Blue World!
- : unit = ()
</programlisting>
  <para>
    On most terminals, that word &quot;Blue&quot; will be rendered in
    blue.
  </para>
  <para>
    In this example, the cases of the variant are simple tag with no
    associated data. This is substantively the same as the enumerations
    found in languages like C and Java. But as we'll see, variants can
    do considerably more than represent a simple enumeration. Indeed, an
    enumeration isn't enough to effectively describe the full set of
    colors that a modern terminal can display. Many terminals, including
    the venerable <literal>xterm</literal>, support 256 different
    colors, broken up into the following groups.
  </para>
  <itemizedlist>
    <listitem>
      <para>
        The 8 basic colors, in regular and bold versions.
      </para>
    </listitem>
    <listitem>
      <para>
        A 6 × 6 × 6 RGB color cube
      </para>
    </listitem>
    <listitem>
      <para>
        A 24-level grayscale ramp
      </para>
    </listitem>
  </itemizedlist>
  <para>
    We'll also represent this more complicated color-space as a variant,
    but this time, the different tags will have arguments which describe
    the data available in each case. Note that variants can have
    multiple arguments, which are separated by <literal>*</literal>'s.
  </para>
  <programlisting language="ocaml">
# type weight = Regular | Bold
  type color =
  | Basic of basic_color * weight (* basic colors, regular and bold *)
  | RGB   of int * int * int       (* 6x6x6 color cube *)
  | Gray  of int                   (* 24 grayscale levels *)
;;
# [RGB (250,70,70); Basic (Green, Regular)];;
- : color list = [RGB (250, 70, 70); Basic (Green, Regular)]
</programlisting>
  <para>
    Once again, we'll use pattern matching to convert a color to a
    corresponding integer. But in this case, the pattern matching does
    more than separate out the different cases; it also allows us to
    extract the data associated with each tag.
  </para>
  <programlisting language="ocaml">
# let color_to_int = function
    | Basic (basic_color,weight) -&gt;
      let base = match weight with Bold -&gt; 8 | Regular -&gt; 0 in
      base + basic_color_to_int basic_color
    | RGB (r,g,b) -&gt; 16 + b + g * 6 + r * 36
    | Gray i -&gt; 232 + i ;;
val color_to_int : color -&gt; int = &lt;fun&gt;
</programlisting>
  <para>
    Now, we can print text using the full set of available colors.
  </para>
  <programlisting language="ocaml">
# let color_print color s =
     printf &quot;%s\n&quot; (color_by_number (color_to_int color) s);;
val color_print : color -&gt; string -&gt; unit = &lt;fun&gt;
# color_print (Basic (Red,Bold)) &quot;A bold red!&quot;;;
A bold red!
- : unit = ()
# color_print (Gray 4) &quot;A muted gray...&quot;;;
A muted gray...
- : unit = ()
</programlisting>
  <note><title>
  Catch-all cases and refactoring
  </title>
  <para>
    OCaml's type system can act as a refactoring tool, by warning you of
    places where your code needs to be updated to match an interface
    change. This is particularly valuable in the context of variants.
  </para>
  <para>
    Consider what would happen if we were to change the definition of
    <literal>color</literal> to the following.
  </para>
  <programlisting language="ocaml">
# type color =
  | Basic of basic_color     (* basic colors *)
  | Bold  of basic_color     (* bold basic colors *)
  | RGB   of int * int * int (* 6x6x6 color cube *)
  | Gray  of int             (* 24 grayscale levels *)
;;
</programlisting>
  <para>
    We've essentially broken out the <literal>Basic</literal> case into
    two cases, <literal>Basic</literal> and <literal>Bold</literal>, and
    <literal>Basic</literal> has changed from having two arguments to
    one. <literal>color_to_int</literal> as we wrote it still expects
    the old structure of the variant, and if we try to compile that same
    code again, the compiler will notice the discrepancy.
  </para>
  <programlisting language="ocaml">
# let color_to_int = function
    | Basic (basic_color,weight) -&gt;
      let base = match weight with Bold -&gt; 8 | Regular -&gt; 0 in
      base + basic_color_to_int basic_color
    | RGB (r,g,b) -&gt; 16 + b + g * 6 + r * 36
    | Gray i -&gt; 232 + i ;;
Characters 40-60:
Error: This pattern matches values of type 'a * 'b
       but a pattern was expected which matches values of type basic_color
</programlisting>
  <para>
    Here, the compiler is complaining that the <literal>Basic</literal>
    tag is used with the wrong number of arguments. If we fix that,
    however, the compiler flag will flag a second problem, which is that
    we haven't handled the new <literal>Bold</literal> tag.
  </para>
  <programlisting language="ocaml">
# let color_to_int = function
    | Basic basic_color -&gt; basic_color_to_int basic_color
    | RGB (r,g,b) -&gt; 16 + b + g * 6 + r * 36
    | Gray i -&gt; 232 + i ;;
Characters 19-154:
Warning 8: this pattern matching is not exhaustive.
Here is an example of a value that is not matched:
Bold _
val color_to_int : color -&gt; int = &lt;fun&gt;
</programlisting>
  <para>
    Fixing this now leads us to the correct implementation.
  </para>
  <programlisting language="ocaml">
# let color_to_int = function
    | Basic basic_color -&gt; basic_color_to_int basic_color
    | Bold  basic_color -&gt; 8 + basic_color_to_int basic_color
    | RGB (r,g,b) -&gt; 16 + b + g * 6 + r * 36
    | Gray i -&gt; 232 + i ;;
val color_to_int : color -&gt; int = &lt;fun&gt;
</programlisting>
  <para>
    As we've seen, the type errors identified the things that needed to
    be fixed to complete the refactoring of the code. This is
    fantastically useful, but for it to work well and reliably, you need
    to write your code in a way that maximizes the compiler's chances of
    helping you find the bugs. To this end, a useful rule of thumb is to
    avoid catch-all cases in pattern matches.
  </para>
  <para>
    Here's an example that illustrates how catch-all cases interact with
    exhaustion checks. Imagine we wanted a version of
    <literal>color_to_int</literal> that works on older terminals by
    rendering the first 16 colors (the 8 <literal>basic_color</literal>s
    in regular and bold) in the normal way, but rendering everything
    else as white. We might have written the function as follows.
  </para>
  <programlisting language="ocaml">
# let oldschool_color_to_int = function
    | Basic (basic_color,weight) -&gt;
      let base = match weight with Bold -&gt; 8 | Regular -&gt; 0 in
      base + basic_color_to_int basic_color
    | _ -&gt; basic_color_to_int White;;
val oldschool_color_to_int : color -&gt; int = &lt;fun&gt;
</programlisting>
  <para>
    But because the catch-all case encompasses all possibilities, the
    type system will no longer warn us that we have missed the new
    <literal>Bold</literal> case when we change the type to include it.
    We can get this check back by being avoiding the catch-all case, and
    instead being explicit about the tags that are ignored.
  </para>
  </note>
  <sect1 id="combining-records-and-variants">
    <title>Combining records and variants</title>
    <para>
      Records and variants are most effective when used in concert.
      Consider again the type <literal>Log_entry.t</literal> from
      <xref linkend="records"/>:
    </para>
    <programlisting language="ocaml">
# module Log_entry = struct
    type t =
      { session_id: string;
        time: Time.t;
        important: bool;
        message: string;
      }
  end
  ;;
</programlisting>
    <para>
      This record type combines multiple pieces of data into one value.
      In particular, a single <literal>Log_entry.t</literal> has a
      <literal>session_id</literal> <emphasis>and</emphasis> a
      <literal>time</literal> <emphasis>and</emphasis> an
      <literal>important</literal> flag <emphasis>and</emphasis> a
      <literal>message</literal>. More generally, you can think of
      record types as acting as conjunctions. Variants, on the other
      hand, are disjunctions, letting you represent multiple
      possibilities, as in the following example.
    </para>
    <programlisting language="ocaml">
# type client_message = | Logon of Logon.t
                        | Heartbeat of Heartbeat.t
                        | Log_entry of Log_entry.t
  ;;
</programlisting>
    <para>
      A <literal>client_message</literal> is a <literal>Logon</literal>
      <emphasis>or</emphasis> a <literal>Heartbeat</literal>
      <emphasis>or</emphasis> a <literal>Log_entry</literal>. If we want
      to write code that processes messages generically, rather than
      code specialized to a fixed message type, we need something like
      <literal>client_message</literal> to act as one overarching type
      for the different possible messages. We can then match on the
      <literal>client_message</literal> to determine the type of the
      particular message being dealt with.
    </para>
    <para>
      You can increase the precision of your types by using variants to
      represent differences between types, and records to represent
      shared structure. Consider the following function that takes a
      list of <literal>client_message</literal>s and returns all
      messages generated by a given user. The code in question is
      implemented by folding over the list of messages, where the
      accumulator is a pair of:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          the set of session identifiers for the user that have been
          seen thus far.
        </para>
      </listitem>
      <listitem>
        <para>
          the set of messages so far that are associated with the user.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Here's the concrete code.
    </para>
    <programlisting language="ocaml">
# let messages_for_user user messages =
    let (user_messages,_) =
      List.fold messages ~init:([],String.Set.empty)
        ~f:(fun ((messages,user_sessions) as acc) message -&gt;
          match message with
          | Logon m -&gt;
            if m.Logon.user = user then
              (message::messages, Set.add user_sessions m.Logon.session_id)
            else acc
          | Heartbeat _ | Log_entry _ -&gt;
            let session_id = match message with
              | Logon     m -&gt; m.Logon.session_id
              | Heartbeat m -&gt; m.Heartbeat.session_id
              | Log_entry m -&gt; m.Log_entry.session_id
            in
            if Set.mem user_sessions session_id then
              (message::messages,user_sessions)
            else acc
        )
    in
    List.rev user_messages
  ;;
val messages_for_user : string -&gt; client_message list -&gt; client_message list =
  &lt;fun&gt;
</programlisting>
    <para>
      There's one awkward bit about the code above, which is the
      calculation of the session ids. In particular, we have the
      following repetitive snippet of code:
    </para>
    <programlisting language="ocaml">
  let session_id = match message with
    | Logon     m -&gt; m.Logon.session_id
    | Heartbeat m -&gt; m.Heartbeat.session_id
    | Log_entry m -&gt; m.Log_entry.session_id
  in
</programlisting>
    <para>
      This code effectively computes the session id for each underlying
      message type. The repetition in this case isn't that bad, but
      would become problematic in larger and more complicated examples.
      Also, we had to include code for the <literal>Logon</literal>
      case, even though it can't actually come up.
    </para>
    <para>
      We can improve the code by refactoring our types to explicitly
      separate the parts that are shared from those that are common. The
      first step is to cut down the definitions of the per-message
      records to just contain the unique components of each message.
    </para>
    <programlisting language="ocaml">
# module Log_entry = struct
    type t = { important: bool;
               message: string;
             }
  end

  module Heartbeat = struct
    type t = { status_message: string; }
  end

  module Logon = struct
    type t = { user: string;
               credentials: string;
             }
  end
  ;;
</programlisting>
    <para>
      We can then define a variant type that covers the different
      possible unique components.
    </para>
    <programlisting language="ocaml">
# type details =
  | Logon of Logon.t
  | Heartbeat of Heartbeat.t
  | Log_entry of Log_entry.t
 ;;
</programlisting>
    <para>
      Separately, we need a record that contains the fields that are
      common across all messages.
    </para>
    <programlisting language="ocaml">
# module Common = struct
    type t = { session_id: string;
               time: Time.t;
             }
  end
  ;;
</programlisting>
    <para>
      A full message can then be represented as a pair of a
      <literal>Common.t</literal> and a <literal>details</literal>.
      Using this, we can rewrite our example above as follows:
    </para>
    <programlisting language="ocaml">
# let messages_for_user user messages =
    let (user_messages,_) =
      List.fold messages ~init:([],String.Set.empty)
        ~f:(fun ((messages,user_sessions) as acc) ((common,details) as message) -&gt;
          let session_id = common.Common.session_id in
          match details with
          | Logon m -&gt;
            if m.Logon.user = user then
              (message::messages, Set.add user_sessions session_id)
            else acc
          | Heartbeat _ | Log_entry _ -&gt;
            if Set.mem user_sessions session_id then
              (message::messages,user_sessions)
            else acc
        )
    in
    List.rev user_messages
  ;;
val messages_for_user :
  string -&gt; (Common.t * details) list -&gt; (Common.t * details) list = &lt;fun&gt;
</programlisting>
    <para>
      Note that the more complex match statement for computing the
      session id has been replaced with the simple expression
      <literal>common.Common.session_id</literal>.
    </para>
    <para>
      In addition, this design allows us to essentially downcast to the
      specific message type once we know what it is, and then dispatch
      code to handle just that message type. In particular, while we use
      the type <literal>Common.t * details</literal> to represent an
      arbitrary message, we can use
      <literal>Common.t * Logon.t</literal> to represent a logon
      message. Thus, if we had functions for handling individual message
      types, we could write a dispatch function as follows.
    </para>
    <programlisting language="ocaml">
# let handle_message server_state (common,details) =
    match details with
    | Log_entry m -&gt; handle_log_entry server_state (common,m)
    | Logon     m -&gt; handle_logon     server_state (common,m)
    | Heartbeat m -&gt; handle_heartbeat server_state (common,m)
  ;;
</programlisting>
    <para>
      And it's explicit at the type level that
      <literal>handle_log_entry</literal> sees only
      <literal>Log_entry</literal> messages,
      <literal>handle_logon</literal> sees only <literal>Logon</literal>
      messages, etc.
    </para>
  </sect1>
  <sect1 id="variants-and-recursive-data-structures">
    <title>Variants and recursive data structures</title>
    <para>
      Another common application of variants is to represent tree-like
      recursive data structures. We'll show how this can be done by
      walking through the design of a simple Boolean expression
      language. Such a language can be useful anywhere you need to
      specify filters, which are used in everything from packet
      analyzers to mail clients.
    </para>
    <para>
      An expression in this language will be defined by the variant
      <literal>blang</literal> (short for &quot;Boolean language&quot;)
      with one tag for each kind of expression we want to support.
    </para>
    <programlisting language="ocaml">
# type 'a blang =
  | Base  of 'a
  | Const of bool
  | And   of 'a blang list
  | Or    of 'a blang list
  | Not   of 'a blang
  ;;
</programlisting>
    <para>
      Note that the definition of the type <literal>blang</literal> is
      recursive, meaning that a <literal>blang</literal> may contain
      other <literal>blang</literal>s. Also, <literal>blang</literal> is
      parameterized by a polymorphic type <literal>'a</literal> which is
      used for specifying the type of the value that goes under the
      <literal>Base</literal> tag.
    </para>
    <para>
      The purpose of each tag is pretty straightforward.
      <literal>And</literal>, <literal>Or</literal> and
      <literal>Not</literal> are the basic operators for building up
      Boolean expressions, and <literal>Const</literal> lets you enter
      the constants <literal>true</literal> and
      <literal>false</literal>.
    </para>
    <para>
      The <literal>Base</literal> tag is what allows you to tie the
      <literal>blang</literal> to your application, by letting you
      specify an element of some base predicate type, whose truth or
      falsehood is determined by your application. If you were writing a
      filter language for an email processor, your base predicates might
      specify the tests you would run against an email, as in the
      following example.
    </para>
    <programlisting language="ocaml">
# type mail_field = To | From | CC | Date | Subject
  type mail_predicate = { field: mail_field;
                          contains: string }
  ;;
</programlisting>
    <para>
      Using the above, we can construct a simple expression with
      <literal>mail_predicate</literal> as its base predicate.
    </para>
    <programlisting language="ocaml">
# let test field contains = Base { field; contains };;
val test : mail_field -&gt; string -&gt; mail_predicate blang = &lt;fun&gt;
# And [ Or [ test To &quot;doligez&quot;; test CC &quot;doligez&quot; ];
        test Subject &quot;runtime&quot;;
      ]
  ;;
- : mail_predicate blang =
And
 [Or
   [Base {field = To; contains = &quot;doligez&quot;};
    Base {field = CC; contains = &quot;doligez&quot;}];
  Base {field = Subject; contains = &quot;runtime&quot;}]
</programlisting>
    <para>
      Being able to construct such expressions isn't enough; we also
      need to be able to evaluate such an expression. The following code
      shows how you could write a general-purpose evaluator for
      <literal>blang</literal>s.
    </para>
    <programlisting language="ocaml">
# let rec eval blang base_eval =
    (* a shortcut, so we don't need to repeatedly pass [base_eval]
       explicitly to [eval] *)
    let eval' blang = eval blang base_eval in
    match blang with
    | Base  base   -&gt; base_eval base
    | Const bool   -&gt; bool
    | And   blangs -&gt; List.for_all blangs ~f:eval'
    | Or    blangs -&gt; List.exists  blangs ~f:eval'
    | Not   blang  -&gt; not (eval' blang)
  ;;
val eval : 'a blang  -&gt; ('a -&gt; bool) -&gt; bool = &lt;fun&gt;
</programlisting>
    <para>
      The structure of the code is pretty straightforward --- we're just
      pattern matching over the structure of the data, doing the
      appropriate calculation based on which tag we see. To use this
      evaluator on a concrete example, we just need to write the
      <literal>base_eval</literal> function which is capable of
      evaluating a base predicate.
    </para>
    <para>
      Another useful operation on expressions is simplification. The
      following function applies some basic simplification rules, most
      of which are driven by the presence of constants.
    </para>
    <programlisting language="ocaml">
# let rec simplify = function
    | Base _ | Const _ as x -&gt; x
    | And blangs -&gt;
      let blangs =
        List.map ~f:simplify blangs
        |&gt; List.filter ~f:(fun x -&gt; x &lt;&gt; Const true)
      in
      if List.is_empty blangs then Const true
      else if List.exists blangs ~f:(fun x -&gt; x = Const false)
      then Const false
      else And blangs
    | Or blangs -&gt;
      let blangs =
        List.map ~f:simplify blangs
        |&gt; List.filter ~f:(fun x -&gt; x &lt;&gt; Const false)
      in
      if List.is_empty blangs then Const false
      else if List.exists blangs ~f:(fun x -&gt; x = Const true)
      then Const true
      else Or blangs
    | Not blang -&gt;
      match simplify blang with
      | Const bool -&gt; Const (not bool)
      | blang -&gt; Not blang
  ;;
val simplify : 'a blang -&gt; 'a blang = &lt;fun&gt;
</programlisting>
    <para>
      One thing to notice about the above code is that it uses a
      catch-all case in the very last line within the
      <literal>Not</literal> case. It's generally better to be explicit
      about the cases you're ignoring. Indeed, if we change this snippet
      of code to be more explicit:
    </para>
    <programlisting language="ocaml">
    | Not blang -&gt;
      match simplify blang with
      | Const bool -&gt; Const (not bool)
      | (And _ | Or _ | Base _ | Not _) -&gt; Not blang
</programlisting>
    <para>
      it's easy to see that we've missed an important case:
      double-negation.
    </para>
    <programlisting language="ocaml">
    | Not blang -&gt;
      match simplify blang with
      | Const b -&gt; Const (not b)
      | Not blang -&gt; blang
      | (And _ | Or _ | Base _ ) -&gt; Not blang
</programlisting>
    <para>
      This example is more than a toy. There's a module very much in
      this spirit in Core called <literal>Blang</literal>, and it gets a
      lot of practical use in a variety of applications.
    </para>
    <para>
      More generally, using variants to build recursive data structures
      is a common technique, and shows up everywhere from designing
      little languages to building efficient data structures.
    </para>
  </sect1>
  <sect1 id="polymorphic-variants">
    <title>Polymorphic variants</title>
    <para>
      In addition to the ordinary variants we've seen so far, OCaml also
      supports so-called <emphasis>polymorphic variants</emphasis>. As
      we'll see, polymorphic variants are more flexible and
      syntactically more lightweight than ordinary variants, but that
      extra power comes at a cost.
    </para>
    <para>
      Syntactically, polymorphic variants are distinguished from
      ordinary variants by the leading backtick. And unlike ordinary
      variants, polymorphic variants can be used without an explicit
      type declaration.
    </para>
    <programlisting language="ocaml">
# let three = `Int 3;;
val three : [&gt; `Int of int ] = `Int 3
# let four = `Float 4.;;
val four : [&gt; `Float of float ] = `Float 4.
# let nan = `Not_a_number;;
val nan : [&gt; `Not_a_number ] = `Not_a_number
# [three; four; nan];;
- : [&gt; `Float of float | `Int of int | `Not_a_number ] list =
[`Int 3; `Float 4.; `Not_a_number]
</programlisting>
    <para>
      As you can see, polymorphic variant types are inferred
      automatically, and when we combine variants with different tags,
      the compiler infers a new type that knows about all of those tags.
      Note that in the above example, the tag name
      (<emphasis>e.g.</emphasis>, <literal>`Int</literal>) matches the
      type name (<literal>int</literal>). This is a common convention in
      OCaml.
    </para>
    <para>
      The type system will complain, if it sees incompatible uses of the
      same tag:
    </para>
    <programlisting language="ocaml">
# let five = `Int &quot;five&quot;;;
val five : [&gt; `Int of string ] = `Int &quot;five&quot;
# [three; four; five];;
Characters 14-18:
  [three; four; five];;
                ^^^^
Error: This expression has type [&gt; `Int of string ]
       but an expression was expected of type
         [&gt; `Float of float | `Int of int ]
       Types for tag `Int are incompatible
</programlisting>
    <para>
      The <literal>&gt;</literal> at the beginning of the variant types
      above is critical, because it marks the types as being open to
      combination with other variant types. We can read the type
      <literal>[&gt; `Int of string | `Float of float]</literal> as
      describing a variant whose tags include
      <literal>`Int of string</literal> and
      <literal>`Float of float</literal>, but may include more tags as
      well. In other words, you can roughly translate
      <literal>&gt;</literal> to mean: &quot;these tags or more&quot;.
    </para>
    <para>
      OCaml will in some cases infer a variant type with
      <literal>&lt;</literal>, to indicate &quot;these tags or
      less&quot;, as in the following example.
    </para>
    <programlisting language="ocaml">
# let is_positive = function
     | `Int   x -&gt; x &gt; 0
     | `Float x -&gt; x &gt; 0.
  ;;
val is_positive : [&lt; `Float of float | `Int of int ] -&gt; bool = &lt;fun&gt;
</programlisting>
    <para>
      The <literal>&lt;</literal> is there because
      <literal>is_positive</literal> has no way of dealing with values
      that have tags other than <literal>`Float of float</literal> or
      <literal>`Int of int</literal>.
    </para>
    <para>
      We can think of these <literal>&lt;</literal> and
      <literal>&gt;</literal> markers as indications of upper and lower
      bounds on the tags involved. If the same set of tags are both an
      upper and a lower bound, we end up with an
      <emphasis>exact</emphasis> polymorphic variant type, which has
      neither marker. For example:
    </para>
    <programlisting language="ocaml">
# let exact = List.filter ~f:is_positive [three;four];;
val exact : [ `Float of float | `Int of int ] list
   = [`Int 3; `Float 4.]
</programlisting>
    <para>
      Perhaps surprisingly, we can also create polymorphic variant types
      that have different upper and lower bounds. Note that
      <literal>Ok</literal> and <literal>Error</literal> in the
      following example come from the <literal>Result.t</literal> type
      from Core.
    </para>
    <programlisting language="ocaml">
# let is_positive = function
     | `Int   x -&gt; Ok (x &gt; 0)
     | `Float x -&gt; Ok (x &gt; 0.)
     | `Not_a_number -&gt; Error &quot;not a number&quot;;;
val is_positive :
  [&lt; `Float of float | `Int of int | `Not_a_number ] -&gt;
  (bool, string) Result.t = &lt;fun&gt;
# List.filter [three; four] ~f:(fun x -&gt;
     match is_positive x with Error _ -&gt; false | Ok b -&gt; b);;
- : [&lt; `Float of float | `Int of int | `Not_a_number &gt; `Float `Int ] list =
[`Int 3; `Float 4.]
</programlisting>
    <para>
      Here, the inferred type states that the tags can be no more than
      <literal>`Float</literal>, <literal>`Int</literal> and
      <literal>`Not_a_number</literal>, and must contain at least
      <literal>`Float</literal> and <literal>`Int</literal>. As you can
      already start to see, polymorphic variants can lead to fairly
      complex inferred types.
    </para>
    <sect2 id="example-terminal-colors-redux">
      <title>Example: Terminal colors redux</title>
      <para>
        To see how to use polymorphic variants in practice, we'll return
        to terminal colors. Imagine that we have a new terminal type
        that adds yet more colors, say, by adding an alpha channel so
        you can specify translucent colors. We could model this extended
        set of colors as follows, using an ordinary variant.
      </para>
      <programlisting language="ocaml">
# type extended_color =
  | Basic of basic_color * weight  (* basic colors, regular and bold *)
  | RGB   of int * int * int       (* 6x6x6 color space *)
  | Gray  of int                   (* 24 grayscale levels *)
  | RGBA  of int * int * int * int (* 6x6x6x6 color space *)
  ;;
</programlisting>
      <para>
        We want to write a function
        <literal>extended_color_to_int</literal>, that works like
        <literal>color_to_int</literal> for all of the old kinds of
        colors, with new logic only for handling colors that include an
        alpha channel. One might try to write such a function as
        follows.
      </para>
      <programlisting language="ocaml">
# let extended_color_to_int = function
    | RGBA (r,g,b,a) -&gt; 256 + a + b * 6 + g * 36 + r * 216
    | (Basic _ | RGB _ | Gray _) as color -&gt; color_to_int color
  ;;
</programlisting>
      <para>
        This looks reasonable enough, but it leads to the following type
        error.
      </para>
      <programlisting language="ocaml">
Characters 93-98:
    | (Basic _ | RGB _ | Gray _) as color -&gt; color_to_int color
                                                          ^^^^^
Error: This expression has type extended_color
       but an expression was expected of type color
</programlisting>
      <para>
        The problem is that <literal>extended_color</literal> and
        <literal>color</literal> are in the compiler's view distinct and
        unrelated types. The compiler doesn't, for example, recognize
        any equality between the <literal>Basic</literal> tag in the two
        types.
      </para>
      <para>
        What we want to do is to share tags between two different
        variant types, and polymorphic variants let us do this in a
        natural way. First, let's rewrite
        <literal>basic_color_to_int</literal> and
        <literal>color_to_int</literal> using polymorphic variants. The
        translation here is pretty straightforward.
      </para>
      <programlisting language="ocaml">
# let basic_color_to_int = function
    | `Black -&gt; 0 | `Red     -&gt; 1 | `Green -&gt; 2 | `Yellow -&gt; 3
    | `Blue  -&gt; 4 | `Magenta -&gt; 5 | `Cyan  -&gt; 6 | `White  -&gt; 7

  let color_to_int = function
    | `Basic (basic_color,weight) -&gt;
      let base = match weight with `Bold -&gt; 8 | `Regular -&gt; 0 in
      base + basic_color_to_int basic_color
    | `RGB (r,g,b) -&gt; 16 + b + g * 6 + r * 36
    | `Gray i -&gt; 232 + i
 ;;
val basic_color_to_int :
  [&lt; `Black | `Blue | `Cyan | `Green | `Magenta | `Red | `White | `Yellow ] -&gt;
  int = &lt;fun&gt;
val color_to_int :
  [&lt; `Basic of
       [&lt; `Black | `Blue | `Cyan | `Green | `Magenta | `Red
        | `White | `Yellow ] *
       [&lt; `Bold | `Regular ]
   | `Gray of int
   | `RGB of int * int * int ] -&gt;
  int = &lt;fun&gt;
</programlisting>
      <para>
        Now we can try writing <literal>extended_color_to_int</literal>.
        The key issue with this code is that
        <literal>extended_color_to_int</literal> needs to invoke
        <literal>color_to_int</literal> with a narrower type,
        <emphasis>i.e.</emphasis>, one that includes fewer tags. Written
        properly, this narrowing can be done via a pattern match. In
        particular, in the following code, the type of the variable
        <literal>color</literal> includes only the tags
        <literal>`Basic</literal>, <literal>`RGB</literal> and
        <literal>`Gray</literal>, and not <literal>`RGBA</literal>.
      </para>
      <programlisting language="ocaml">
# let extended_color_to_int = function
    | `RGBA (r,g,b,a) -&gt; 256 + a + b * 6 + g * 36 + r * 216
    | (`Basic _ | `RGB _ | `Gray _) as color -&gt; color_to_int color
  ;;
val extended_color_to_int :
  [&lt; `Basic of
       [&lt; `Black | `Blue | `Cyan | `Green | `Magenta | `Red
        | `White | `Yellow ] *
       [&lt; `Bold | `Regular ]
   | `Gray of int
   | `RGB of int * int * int
   | `RGBA of int * int * int * int ] -&gt;
  int = &lt;fun&gt;
</programlisting>
      <para>
        The above code is more delicately balanced than one might
        imagine. In particular, if we use a catch-all case instead of an
        explicit enumeration of the cases, the type is no longer
        narrowed, and so compilation fails.
      </para>
      <programlisting language="ocaml">
# let extended_color_to_int = function
    | `RGBA (r,g,b,a) -&gt; 256 + a + b * 6 + g * 36 + r * 216
    | color -&gt; color_to_int color
  ;;
      Characters 125-130:
      | color -&gt; color_to_int color
                              ^^^^^
Error: This expression has type [&gt; `RGBA of int * int * int * int ]
       but an expression was expected of type
         [&lt; `Basic of
              [&lt; `Black | `Blue | `Cyan | `Green | `Magenta | `Red
               | `White | `Yellow ] *
              [&lt; `Bold | `Regular ]
          | `Gray of int
          | `RGB of int * int * int ]
       The second variant type does not allow tag(s) `RGBA
</programlisting>
      <note>
      <title>
      Polymorphic variants and catch-all cases
      </title>
      <para>
        As we saw with the definition of <literal>is_positive</literal>,
        a match statement can lead to the inference of an upper bound on
        a variant type, limiting the possible tags to those that can be
        handled by the match. If we add a catch-all case to our match
        statement, we end up with a function with a lower bound.
      </para>
      <programlisting language="ocaml">
# let is_positive_permissive = function
     | `Int   x -&gt; Ok (x &gt; 0)
     | `Float x -&gt; Ok (x &gt; 0.)
     | _ -&gt; Error &quot;Unknown number type&quot;
  ;;
val is_positive_permissive :
  [&gt; `Float of float | `Int of int ] -&gt; (bool, string) Core.Std._result =
  &lt;fun&gt;
# is_positive_permissive (`Int 0);;
- : (bool, string) Result.t = Ok false
# is_positive_permissive (`Ratio (3,4));;
- : (bool, string) Result.t = Error &quot;Unknown number type&quot;
</programlisting>
      <para>
        Catch-all cases are error-prone even with ordinary variants, but
        they are especially so with polymorphic variants. That's because
        you have no way of bounding what tags your function might have
        to deal with. Such code is particularly vulnerable to typos. For
        instance, if code that uses
        <literal>is_positive_permissive</literal> passes in
        <literal>Float</literal> misspelled as <literal>Floot</literal>,
        the erroneous code will compile without complaint.
      </para>
      <programlisting language="ocaml">
# is_positive_permissive (`Floot 3.5);;
- : (bool, string) Result.t = Error &quot;Unknown number type&quot;
</programlisting>
      <para>
        With ordinary variants, such a typo would have been caught as an
        unknown tag. As a general matter, one should be wary about
        mixing catch-all cases and polymorphic variants.
      </para>
      </note>
      <para>
        Let's consider how we might turn our code into a proper library
        with an implementation in an <literal>ml</literal> file and an
        implementation in a separate <literal>mli</literal>, as we saw
        in <xref linkend="files-modules-and-programs"/>. Let's
        start with the <literal>mli</literal>.
      </para>
      <programlisting language="ocaml">
(* file: terminal_color.mli *)

open Core.Std

type basic_color =
  [ `Black   | `Blue | `Cyan  | `Green
  | `Magenta | `Red  | `White | `Yellow ]

type color =
  [ `Basic of basic_color * [ `Bold | `Regular ]
  | `Gray of int
  | `RGB  of int * int * int ]

type extended_color =
  [ color
  | `RGBA of int * int * int * int ]

val color_to_int          : color -&gt; int
val extended_color_to_int : extended_color -&gt; int
</programlisting>
      <para>
        Here, <literal>extended_color</literal> is defined as an
        explicit extension of <literal>color</literal>. Also, notice
        that we defined all of these types as exact variants. We can
        implement this library as follows.
      </para>
      <programlisting language="ocaml">
(* file: terminal_color.ml *)

open Core.Std

type basic_color =
  [ `Black   | `Blue | `Cyan  | `Green
  | `Magenta | `Red  | `White | `Yellow ]

type color =
  [ `Basic of basic_color * [ `Bold | `Regular ]
  | `Gray of int
  | `RGB  of int * int * int ]

type extended_color =
  [ color
  | `RGBA of int * int * int * int ]

let basic_color_to_int = function
  | `Black -&gt; 0 | `Red     -&gt; 1 | `Green -&gt; 2 | `Yellow -&gt; 3
  | `Blue  -&gt; 4 | `Magenta -&gt; 5 | `Cyan  -&gt; 6 | `White  -&gt; 7

let color_to_int = function
  | `Basic (basic_color,weight) -&gt;
    let base = match weight with `Bold -&gt; 8 | `Regular -&gt; 0 in
    base + basic_color_to_int basic_color
  | `RGB (r,g,b) -&gt; 16 + b + g * 6 + r * 36
  | `Gray i -&gt; 232 + i

let extended_color_to_int = function
  | `RGBA (r,g,b,a) -&gt; 256 + a + b * 6 + g * 36 + r * 216
  | `Grey x -&gt; 2000 + x
  | (`Basic _ | `RGB _ | `Gray _) as color -&gt; color_to_int color
</programlisting>
      <para>
        In the above code, we did something funny to the definition of
        <literal>extended_color_to_int</literal>, that underlines some
        of the downsides of polymorphic variants. In particular, we
        added some special-case handling for the color gray, rather than
        using <literal>color_to_int</literal>. Unfortunately, we
        misspelled <literal>Gray</literal> as <literal>Grey</literal>.
        This is exactly the kind of error that the compiler would catch
        with ordinary variants, but with polymorphic variants, this
        compiles without issue. All that happened was that the compiler
        inferred a wider type for
        <literal>extended_color_to_int</literal>, which happens to be
        compatible with the narrower type that was listed in the
        <literal>mli</literal>.
      </para>
      <para>
        If we add an explicit type annotation to the code itself (rather
        than just in the <literal>mli</literal>), then the compiler has
        enough information to warn us.
      </para>
      <programlisting language="ocaml">
let extended_color_to_int : extended_color -&gt; int = function
  | `RGBA (r,g,b,a) -&gt; 256 + a + b * 6 + g * 36 + r * 216
  | `Grey x -&gt; 2000 + x
  | (`Basic _ | `RGB _ | `Gray _) as color -&gt; color_to_int color
</programlisting>
      <para>
        In particular, the compiler will complain that the
        <literal>`Grey</literal> case is unused.
      </para>
      <programlisting language="ocaml">
File &quot;color.ml&quot;, line 29, characters 4-11:
Error: This pattern matches values of type [? `Grey of 'a ]
       but a pattern was expected which matches values of type extended_color
       The second variant type does not allow tag(s) `Grey
</programlisting>
      <para>
        Once we have type definitions at our disposal, we can revisit
        the question of how we write the pattern match that narrows the
        type. In particular, we can explicitly use the type name as part
        of the pattern match, by prefixing it with a
        <literal>#</literal>.
      </para>
      <programlisting language="ocaml">
let extended_color_to_int : extended_color -&gt; int = function
  | `RGBA (r,g,b,a) -&gt; 256 + a + b * 6 + g * 36 + r * 216
  | #color as color -&gt; color_to_int color
</programlisting>
      <para>
        This is useful when you want to narrow down to a type whose
        definition is long, and you don't want the verbosity of writing
        the tags down explicitly in the match.
      </para>
    </sect2>
    <sect2 id="when-to-use-polymorphic-variants">
      <title>When to use polymorphic variants</title>
      <para>
        At first glance, polymorphic variants look like a strict
        improvement over ordinary variants. You can do everything that
        ordinary variants can do, plus it's more flexible and more
        concise. What's not to like?
      </para>
      <para>
        In reality, regular variants are the more pragmatic choice most
        of the time. That's because the flexibility of polymorphic
        variants comes at a price. Here are some of the downsides.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>Complexity:</emphasis> As we've seen, the typing
            rules for polymorphic variants are a lot more complicated
            than they are for regular variants. This means that heavy
            use of polymorphic variants can leave you scratching your
            head trying to figure out why a given piece of code did or
            didn't compile. It can also lead to absurdly long and hard
            to decode error messages. Indeed, concision at the value
            level is often balanced out by more verbosity at the type
            level.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Error-finding:</emphasis> Polymorphic variants are
            type-safe, but the typing discipline that they impose is, by
            dint of its flexibility, less likely to catch bugs in your
            program.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Efficiency:</emphasis> This isn't a huge effect,
            but polymorphic variants are somewhat heavier than regular
            variants, and OCaml can't generate code for matching on
            polymorphic variants that is quite as efficient as what it
            generated for regular variants.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        All that said, polymorphic variants are still a useful and
        powerful feature, but it's worth understanding their
        limitations, and how to use them sensibly and modestly.
      </para>
      <para>
        Probably the safest and most common use-case for polymorphic
        variants is where ordinary variants would be sufficient, but are
        syntactically too heavyweight. For example, you often want to
        create a variant type for encoding the inputs or outputs to a
        function, where it's not worth declaring a separate type for it.
        Polymorphic variants are very useful here, and as long as there
        are type annotations that constrain these to have explicit,
        exact types, this tends to work well.
      </para>
      <para>
        Variants are most problematic exactly where you take full
        advantage of their power; in particular, when you take advantage
        of the ability of polymorphic variant types to overlap in the
        tags they support. This ties into OCaml's support for subtyping.
        As we'll discuss further when we cover objects in
        <xref linkend="object-oriented-programming"/>,
        subtyping brings in a lot of complexity, and most of the time,
        that's complexity you want to avoid.
      </para>
    </sect2>
  </sect1>
</chapter><chapter id="error-handling">
  <title>Error Handling</title>
  <para>
    Nobody likes dealing with errors. It's tedious, it's easy to get
    wrong, and it's usually just not as fun as planning out how your
    program is going to succeed. But error handling is important, and
    however much you don't like thinking about it, having your software
    fail due to poor error handling code is worse.
  </para>
  <para>
    Thankfully, OCaml has powerful tools for handling errors reliably
    and with a minimum of pain. In this chapter we'll discuss some of
    the different approaches in OCaml to handling errors, and give some
    advice on how to design interfaces that make error handling easier.
  </para>
  <para>
    We'll start by describing the two basic approaches for reporting
    errors in OCaml: error-aware return types and exceptions.
  </para>
  <sect1 id="error-aware-return-types">
    <title>Error-aware return types</title>
    <para>
      The best way in OCaml to signal an error is to include that error
      in your return value. Consider the type of the
      <literal>find</literal> function in the <literal>List</literal>
      module.
    </para>
    <programlisting language="ocaml">
# List.find;;
- : 'a list -&gt; f:('a -&gt; bool) -&gt; 'a option
</programlisting>
    <para>
      The option in the return type indicates that the function may not
      succeed in finding a suitable element, as you can see below.
    </para>
    <programlisting language="ocaml">
# List.find [1;2;3] ~f:(fun x -&gt; x &gt;= 2) ;;
- : int option = Some 2
# List.find [1;2;3] ~f:(fun x -&gt; x &gt;= 10) ;;
- : int option = None
</programlisting>
    <para>
      Having errors be explicit in the return values of your functions
      tells the caller that there is an error that needs to be handled.
      The caller can then handle the error explicitly, either recovering
      from the error or propagating it onward.
    </para>
    <para>
      Consider the <literal>compute_bounds</literal> function defined
      below. The function takes a list and a comparison function, and
      returns upper and lower bounds for the list by finding the
      smallest and largest element on the list.
      <literal>List.hd</literal> and <literal>List.last</literal>, which
      return <literal>None</literal> when they encounter an empty list,
      are used to extract the largest and smallest element of the list.
    </para>
    <programlisting language="ocaml">
# let compute_bounds ~cmp list =
    let sorted = List.sort ~cmp list in
    match List.hd sorted, List.last sorted with
    | None,_ | _, None -&gt; None
    | Some x, Some y -&gt; Some (x,y)
  ;;
val compute_bounds :
  cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; ('a * 'a) option = &lt;fun&gt;
</programlisting>
    <para>
      The match statement is used to handle the error cases, propagating
      a None in <literal>hd</literal> or <literal>last</literal> into
      the return value of <literal>compute_bounds</literal>.
    </para>
    <para>
      On the other hand, in <literal>find_mismatches</literal> below,
      errors encountered during the computation do not propagate to the
      return value of the function. <literal>find_mismatches</literal>
      takes two hash tables as arguments, and searches for keys that
      have different data in one table than in the other. As such, the
      failure to find a key in one table isn't a failure of any sort.
    </para>
    <programlisting language="ocaml">
# let find_mismatches table1 table2 =
     Hashtbl.fold table1 ~init:[] ~f:(fun ~key ~data mismatches -&gt;
        match Hashtbl.find table2 key with
        | Some data' when data' &lt;&gt; data -&gt; key :: mismatches
        | _ -&gt; mismatches
     )
 ;;
val find_mismatches :
  ('a, 'b) Hashtbl.t -&gt; ('a, 'b) Hashtbl.t -&gt; 'a list = &lt;fun&gt;
</programlisting>
    <para>
      The use of options to encode errors underlines the fact that it's
      not clear whether a particular outcome, like not finding something
      on a list, is an error or is just another valid outcome. This
      depends on the larger context of your program, and thus is not
      something that a general purpose library can know in advance. One
      of the advantages of error-aware return types is that they work
      well in both situations.
    </para>
    <sect2 id="encoding-errors-with-result">
      <title>Encoding errors with <literal>Result</literal></title>
      <para>
        Options aren't always a sufficiently expressive way to report
        errors. Specifically, when you encode an error as
        <literal>None</literal>, there's nowhere to say anything about
        the nature of the error.
      </para>
      <para>
        <literal>Result.t</literal> is meant to address this deficiency.
        The type is defined as follows.
      </para>
      <programlisting language="ocaml">
module Result : sig
   type ('a,'b) t = | Ok of 'a
                    | Error of 'b
end
</programlisting>
      <para>
        A <literal>Result.t</literal> is essentially an option augmented
        with the ability to store other information in the error case.
        Like <literal>Some</literal> and <literal>None</literal> for
        options, the constructors <literal>Ok</literal> and
        <literal>Error</literal> are promoted to the toplevel by
        <literal>Core.Std</literal>. As such, we can write:
      </para>
      <programlisting language="ocaml">
# [ Ok 3; Error &quot;abject failure&quot;; Ok 4 ];;
- : (int, string) Core.Result.t list = [Ok 3; Error &quot;abject failure&quot;; Ok 4]
</programlisting>
      <para>
        without first opening the <literal>Result</literal> module.
      </para>
    </sect2>
    <sect2 id="error-and-or_error">
      <title><literal>Error</literal> and
      <literal>Or_error</literal></title>
      <para>
        <literal>Result.t</literal> gives you complete freedom to choose
        the type of value you use to represent errors, but it's often
        useful to standardize on an error type. Among other things, this
        makes it easier to write utility functions to automate common
        error handling patterns.
      </para>
      <para>
        But which type to choose? Is it better to represent errors as
        strings? Some more structured representation like XML? Or
        something else entirely?
      </para>
      <para>
        Core's answer to this question is the <literal>Error.t</literal>
        type, which tries to forge a good compromise between efficiency,
        convenience, and control over the presentation of errors.
      </para>
      <para>
        It might not be obvious at first why efficiency is an issue at
        all. But generating error messages is an expensive business. An
        ASCII representation of a value can be quite time-consuming to
        construct, particularly if it includes expensive-to-convert
        numerical data.
      </para>
      <para>
        <literal>Error</literal> gets around this issue through
        laziness. In particular, an <literal>Error.t</literal> allows
        you to put off generation of the error string until and unless
        you need it, which means a lot of the time you never have to
        construct it at all. You can of course construct an error
        directly from a string:
      </para>
      <programlisting language="ocaml">
# Error.of_string &quot;something went wrong&quot;;;
- : Core.Std.Error.t = &quot;something went wrong&quot;
</programlisting>
      <para>
        But you can also construct an <literal>Error.t</literal> from a
        <emphasis>thunk</emphasis>, <emphasis>i.e.</emphasis>, a
        function that takes a single argument of type
        <literal>unit</literal>.
      </para>
      <programlisting language="ocaml">
# Error.of_thunk (fun () -&gt;
    sprintf &quot;something went wrong: %f&quot; 32.3343);;
  - : Core.Std.Error.t = &quot;something went wrong: 32.334300&quot;
</programlisting>
      <para>
        In this case, we can benefit from the laziness of
        <literal>Error</literal>, since the thunk won't be called unless
        the <literal>Error.t</literal> is converted to a string.
      </para>
      <para>
        The most common way to create <literal>Error.t</literal>s is
        using <emphasis>s-expressions</emphasis>. An s-expression is a
        balanced parenthetical expression where the leaves of the
        expressions are strings. Thus, the following is a simple
        s-expression:
      </para>
      <programlisting>
(This (is an) (s expression))
</programlisting>
      <para>
        S-expressions are supported by the Sexplib library that is
        distributed with Core, and is the most common serialization
        format used in Core. Indeed, most types in Core come with
        built-in s-expression converters. Here's an example of creating
        an error using the sexp converter for times,
        <literal>Time.sexp_of_t</literal>.
      </para>
      <programlisting language="ocaml">
# Error.create &quot;Something failed a long time ago&quot; Time.epoch Time.sexp_of_t;;
- : Core.Std.Error.t =
&quot;Something failed a long time ago: (1969-12-31 19:00:00.000000)&quot;
</programlisting>
      <para>
        Note that the time isn't actually serialized into an
        s-expression until the error is printed out. We're not
        restricted to doing this kind of error reporting with built-in
        types. This will be discussed in more detail in
        <xref linkend="data-serialization-with-s-expressions"/>,
        but Sexplib comes with a language extension that can
        auto-generate sexp-converters for newly generated types, as
        shown below.
      </para>
      <programlisting language="ocaml">
# let custom_to_sexp = &lt;:sexp_of&lt;float * string list * int&gt;&gt;;;
val custom_to_sexp : float * string list * int -&gt; Sexp.t = &lt;fun&gt;
# custom_to_sexp (3.5, [&quot;a&quot;;&quot;b&quot;;&quot;c&quot;], 6034);;
- : Sexp.t = (3.5 (a b c) 6034)
</programlisting>
      <para>
        We can use this same idiom for generating an error.
      </para>
      <programlisting language="ocaml">
# Error.create &quot;Something went terribly wrong&quot;
    (3.5, [&quot;a&quot;;&quot;b&quot;;&quot;c&quot;], 6034)
    &lt;:sexp_of&lt;float * string list * int&gt;&gt; ;;
- : Error.t = Something went terribly wrong: (3.5(a b c)6034)
</programlisting>
      <para>
        <literal>Error</literal> also supports operations for
        transforming errors. For example, it's often useful to augment
        an error with some extra information about the context of the
        error or to combine multiple errors together.
        <literal>Error.tag</literal> and
        <literal>Error.of_list</literal> fulfill these roles, as you can
        see below.
      </para>
      <para>
        The type <literal>'a Or_error.t</literal> is just a shorthand
        for <literal>('a,Error.t) Result.t</literal>, and it is, after
        <literal>option</literal>, the most common way of returning
        errors in Core.
      </para>
    </sect2>
    <sect2 id="bind-and-other-error-handling-idioms">
      <title><literal>bind</literal> and other error-handling
      idioms</title>
      <para>
        As you write more error handling code in OCaml, you'll discover
        that certain patterns start to emerge. A number of these common
        patterns have been codified by functions in modules like
        <literal>Option</literal> and <literal>Result</literal>. One
        particularly useful pattern is built around the function
        <literal>bind</literal>, which is both an ordinary function and
        an infix operator <literal>&gt;&gt;=</literal>. Here's the
        definition of <literal>bind</literal> for options.
      </para>
      <programlisting language="ocaml">
# let bind option f =
    match option with
    | None -&gt; None
    | Some x -&gt; f x
  ;;
val bind : 'a option -&gt; ('a -&gt; 'b option) -&gt; 'b option = &lt;fun&gt;
</programlisting>
      <para>
        As you can see, <literal>bind None f</literal> returns
        <literal>None</literal> without calling <literal>f</literal>,
        and <literal>bind (Some x) f</literal> returns
        <literal>f x</literal>. Perhaps surprisingly,
        <literal>bind</literal> can be used as a way of sequencing
        together error-producing functions so that the first one to
        produce an error terminates the computation. Here's a rewrite of
        <literal>compute_bounds</literal> to use a nested series of
        <literal>bind</literal>s.
      </para>
      <programlisting language="ocaml">
# let compute_bounds ~cmp list =
    let sorted = List.sort ~cmp list in
    Option.bind (List.hd sorted) (fun first -&gt;
      Option.bind (List.last sorted) (fun last -&gt;
        Some (first,last)))
  ;;
val compute_bounds : cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; ('a * 'a) option =
  &lt;fun&gt;
</programlisting>
      <para>
        The above code is a little bit hard to swallow, however, on a
        syntactic level. We can make it easier to read, and drop some of
        the parenthesis, by using the infix operator form of bind, which
        we get access to by locally opening
        <literal>Option.Monad_infix</literal>. The module is called
        <literal>Monad_infix</literal> because the bind operator is part
        of a sub-interface called <literal>Monad</literal>, which we'll
        talk about more in
        <xref linkend="concurrent-programming-with-async"/>.
      </para>
      <programlisting language="ocaml">
# let compute_bounds ~cmp list =
    let open Option.Monad_infix in
    let sorted = List.sort ~cmp list in
    List.hd sorted   &gt;&gt;= fun first -&gt;
    List.last sorted &gt;&gt;= fun last  -&gt;
    Some (first,last)
  ;;
val compute_bounds : cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; ('a * 'a) option =
  &lt;fun&gt;
</programlisting>
      <para>
        This use of <literal>bind</literal> isn't really materially
        better than the one we started with, and indeed, for small
        examples like this, direct matching of options is generally
        better than using <literal>bind</literal>. But for large complex
        examples with many stages of error-handling, the bind idiom
        becomes clearer and easier to manage.
      </para>
      <para>
        There are other useful idioms encoded in the functions in
        <literal>Option</literal>. One example is
        <literal>Option.both</literal>, which takes two optional values
        and produces a new optional pair that is <literal>None</literal>
        if either of its arguments are <literal>None</literal>. Using
        <literal>Option.both</literal>, we can make
        <literal>compute_bounds</literal> even shorter.
      </para>
      <programlisting language="ocaml">
# let compute_bounds ~cmp list =
    let sorted = List.sort ~cmp list in
    Option.both (List.hd sorted) (List.last sorted)
  ;;
val compute_bounds : cmp:('a -&gt; 'a -&gt; int) -&gt; 'a list -&gt; ('a * 'a) option =
  &lt;fun&gt;
</programlisting>
      <para>
        These error-handling functions are valuable because they let you
        express your error handling both explicitly and concisely. We've
        only discussed these functions in the context of the
        <literal>Option</literal> module, but similar functionality is
        available in both <literal>Result</literal> and
        <literal>Or_error</literal>.
      </para>
    </sect2>
  </sect1>
  <sect1 id="exceptions">
    <title>Exceptions</title>
    <para>
      Exceptions in OCaml are not that different from exceptions in many
      other languages, like Java, C# and Python. Exceptions are a way to
      terminate a computation and report an error, while providing a
      mechanism to catch and handle (and possibly recover from)
      exceptions that are triggered by sub-computations.
    </para>
    <para>
      You can trigger an exception by, for example, dividing an integer
      by zero:
    </para>
    <programlisting language="ocaml">
# 3 / 0;;
Exception: Division_by_zero.
</programlisting>
    <para>
      And an exception can terminate a computation even if it happens
      nested somewhere deep within it.
    </para>
    <programlisting language="ocaml">
# List.map ~f:(fun x -&gt; 100 / x) [1;3;0;4];;
Exception: Division_by_zero.
</programlisting>
    <para>
      If we put a <literal>printf</literal> in the middle of the
      computation, we can see that <literal>List.map</literal> is
      interrupted part way through it's execution, never getting to the
      end of the list.
    </para>
    <programlisting language="ocaml">
# List.map ~f:(fun x -&gt; printf &quot;%d\n%!&quot; x; 100 / x) [1;3;0;4];;
1
3
0
Exception: Division_by_zero.
</programlisting>
    <para>
      In addition to built-in exceptions like
      <literal>Divide_by_zero</literal>, OCaml lets you define your own.
    </para>
    <programlisting language="ocaml">
# exception Key_not_found of string;;
exception Key_not_found of string
# raise (Key_not_found &quot;a&quot;);;
Exception: Key_not_found(&quot;a&quot;).
</programlisting>
    <para>
      Here's an example of a function for looking up a key in an
      <emphasis>association list</emphasis>, <emphasis>i.e.</emphasis> a
      list of key/value pairs which uses this newly-defined exception:
    </para>
    <programlisting language="ocaml">
# let rec find_exn alist key = match alist with
    | [] -&gt; raise (Key_not_found key)
    | (key',data) :: tl -&gt; if key = key' then data else find_exn tl key
  ;;
val find_exn : (string * 'a) list -&gt; string -&gt; 'a = &lt;fun&gt;
# let alist = [(&quot;a&quot;,1); (&quot;b&quot;,2)];;
val alist : (string * int) list = [(&quot;a&quot;, 1); (&quot;b&quot;, 2)]
# find_exn alist &quot;a&quot;;;
- : int = 1
# find_exn alist &quot;c&quot;;;
Exception: Key_not_found(&quot;c&quot;).
</programlisting>
    <para>
      Note that we named the function <literal>find_exn</literal> to
      warn the user that the function routinely throws exceptions, a
      convention that is used heavily in Core.
    </para>
    <para>
      In the above example, <literal>raise</literal> throws the
      exception, thus terminating the computation. The type of raise is
      a bit surprising when you first see it:
    </para>
    <programlisting language="ocaml">
# raise;;
- : exn -&gt; 'a = &lt;fun&gt;
</programlisting>
    <para>
      The return type of <literal>'a</literal> suggests that
      <literal>raise</literal> could return a value of any type. That
      seems impossible, and it is. Really, <literal>raise</literal> has
      this type because it never returns at all. This behavior isn't
      restricted to functions like <literal>raise</literal> that
      terminate by throwing exceptions. Here's another example of a
      function that doesn't return a value.
    </para>
    <programlisting language="ocaml">
# let rec forever () = forever ();;
val forever : unit -&gt; 'a = &lt;fun&gt;
</programlisting>
    <para>
      <literal>forever</literal> doesn't return a value for a different
      reason: it is an infinite loop.
    </para>
    <para>
      This all matters because it means that the return type of
      <literal>raise</literal> can be whatever it needs to be to fit in
      to the context it is called in. Thus, the type system will let us
      throw an exception anywhere in a program.
    </para>
    <note>
    <title>
    Declaring exceptions with <literal>with sexp</literal>
    </title>
    <para>
      OCaml can't always generate a useful textual representation of an
      exception. For example:
    </para>
    <programlisting language="ocaml">
# exception Wrong_date of Date.t;;
exception Wrong_date of Date.t
# Wrong_date (Date.of_string &quot;2011-02-23&quot;);;
- : exn = Wrong_date(_)
</programlisting>
    <para>
      But if we declare the exception using <literal>with sexp</literal>
      (and the constituent types have sexp converters), we'll get
      something with more information.
    </para>
    <programlisting language="ocaml">
# exception Wrong_date of Date.t with sexp;;
exception Wrong_date of Core.Std.Date.t
# Wrong_date (Date.of_string &quot;2011-02-23&quot;);;
- : exn = (.Wrong_date 2011-02-23)
</programlisting>
    <para>
      The period in front of <literal>Wrong_date</literal> is there
      because the representation generated by
      <literal>with sexp</literal> includes the full module path of the
      module where the exception in question is defined. In this case,
      since we've declared the exception at the toplevel, that module
      path is trivial.
    </para>
    <para>
      This is all part of the support for s-expressions provided by the
      Sexplib library and syntax-extension, which is described in more
      detail in
      <xref linkend="data-serialization-with-s-expressions"/>.
    </para>
    </note>
    <sect2 id="helper-functions-for-throwing-exceptions">
      <title>Helper functions for throwing exceptions</title>
      <para>
        OCaml and Core provide a number of helper functions to simplify
        the task of throwing exceptions. The simplest one is
        <literal>failwith</literal>, which could be defined as follows:
      </para>
      <programlisting language="ocaml">
# let failwith msg = raise (Failure msg);;
val failwith : string -&gt; 'a = &lt;fun&gt;
</programlisting>
      <para>
        There are several other useful functions for raising exceptions,
        which can be found in the API documentation for the
        <literal>Common</literal> and <literal>Exn</literal> modules in
        Core.
      </para>
      <para>
        Another important way of throwing an exception is the
        <literal>assert</literal> directive. <literal>assert</literal>
        is used for situations where a violation of the condition in
        question indicates a bug. Consider the following piece of code
        for zipping together two lists.
      </para>
      <programlisting language="ocaml">
# let merge_lists xs ys ~f =
    if List.length xs &lt;&gt; List.length ys then None
    else
      let rec loop xs ys =
        match xs,ys with
        | [],[] -&gt; []
        | x::xs, y::ys -&gt; f x y :: loop xs ys
        | _ -&gt; assert false
      in
      Some (loop xs ys)
   ;;
 val merge_lists : 'a list -&gt; 'b list -&gt; f:('a -&gt; 'b -&gt; 'c) -&gt; 'c list option =
  &lt;fun&gt;
# merge_lists [1;2;3] [-1;1;2] ~f:(+);;
- : int list option = Some [0; 3; 5]
# merge_lists [1;2;3] [-1;1] ~f:(+);;
- : int list option = None
</programlisting>
      <para>
        Here we use <literal>assert false</literal>, which means that
        the assert is guaranteed to trigger. In general, one can put an
        arbitrary condition in the assertion.
      </para>
      <para>
        In this case, the assert can never be triggered because we have
        a check that makes sure that the lists are of the same length
        before we call <literal>loop</literal>. If we change the code so
        that we drop this test, then we can trigger the assert.
      </para>
      <programlisting language="ocaml">
# let merge_lists xs ys ~f =
      let rec loop xs ys =
        match xs,ys with
        | [],[] -&gt; []
        | x::xs, y::ys -&gt; f x y :: loop xs ys
        | _ -&gt; assert false
      in
      loop xs ys
   ;;
val merge_lists : 'a list -&gt; 'b list -&gt; f:('a -&gt; 'b -&gt; 'c) -&gt; 'c list = &lt;fun&gt;
# merge_lists [1;2;3] [-1] ~f:(+);;
Exception: (Assert_failure //toplevel// 6 15).
</programlisting>
      <para>
        This shows what's special about <literal>assert</literal>, which
        is that it captures the line number and character offset of the
        source location from which the assertion was made.
      </para>
    </sect2>
    <sect2 id="exception-handlers">
      <title>Exception handlers</title>
      <para>
        So far, we've only seen exceptions fully terminate the execution
        of a computation. But often, we want a program to be able to
        respond to and recover from an exception. This is achieved
        through the use of <emphasis>exception handlers</emphasis>.
      </para>
      <para>
        In OCaml, an exception handler is declared using a
        <literal>try</literal>/<literal>with</literal> statement. Here's
        the basic syntax.
      </para>
      <programlisting language="ocaml">
try &lt;expr&gt; with
| &lt;pat1&gt; -&gt; &lt;expr1&gt;
| &lt;pat2&gt; -&gt; &lt;expr2&gt;
...
</programlisting>
      <para>
        A <literal>try/with</literal> clause first evaluates its body,
        <literal>&lt;expr&gt;</literal>. If no exception is thrown, then
        the result of evaluating the body is what the entire
        <literal>try/with</literal> clause evaluates to.
      </para>
      <para>
        But if the evaluation of the body throws an exception, then the
        exception will be fed to the pattern match statements following
        the <literal>with</literal>. If the exception matches a pattern,
        then we consider the exception caught, and the
        <literal>try/with</literal> clause evaluates to the expression
        on the right-hand side of the matching pattern.
      </para>
      <para>
        Otherwise, the original exception continues up the stack of
        function calls, to be handled by the next outer exception
        handler. If the exception is never caught, it terminates the
        program.
      </para>
    </sect2>
    <sect2 id="cleaning-up-in-the-presence-of-exceptions">
      <title>Cleaning up in the presence of exceptions</title>
      <para>
        One headache with exceptions is that they can terminate your
        execution at unexpected places, leaving your program in an
        awkward state. Consider the following code snippet:
      </para>
      <programlisting language="ocaml">
let load_config filename =
  let inc = In_channel.create filename in
  let config = Config.t_of_sexp (Sexp.input_sexp inc) in
  In_channel.close inc;
  config
</programlisting>
      <para>
        The problem with this code is that the function that loads the
        s-expression and parses it into a <literal>Config.t</literal>
        might throw an exception if the config file in question is
        malformed. Unfortunately, that means that the
        <literal>In_channel.t</literal> that was opened will never be
        closed, leading to a file-descriptor leak.
      </para>
      <para>
        We can fix this using Core's <literal>protect</literal>
        function. The purpose of <literal>protect</literal> is to ensure
        that the <literal>finally</literal> thunk will be called when
        <literal>f</literal> exits, whether it exits normally or with an
        exception. This is similar to the <literal>try/finally</literal>
        construct available in many programming languages, but it is
        implemented in a library, rather than being a built-in
        primitive. Here's how it could be used to fix
        <literal>load_config</literal>.
      </para>
      <programlisting language="ocaml">
let load_config filename =
  let inc = In_channel.create filename in
  protect ~f:(fun () -&gt; Config.t_of_sexp (Sexp.input_sexp inc))
    ~finally:(fun () -&gt; In_channel.close inc)
</programlisting>
      <para>
        This is a common enough problem that
        <literal>In_channel</literal> has a function called
        <literal>with_file</literal> that automates this pattern.
      </para>
      <programlisting language="ocaml">
let load_config filename =
  In_channel.with_file filename ~f:(fun inc -&gt;
    Config.t_of_sexp (Sexp.input_sexp inc))
</programlisting>
      <para>
        <literal>In_channel.with_file</literal> is actually built on top
        of <literal>protect</literal> so that it can clean up after
        itself in the presence of exceptions.
      </para>
    </sect2>
    <sect2 id="catching-specific-exceptions">
      <title>Catching specific exceptions</title>
      <para>
        OCaml's exception-handling system allows you to tune your
        error-recovery logic to the particular error that was thrown.
        For example, <literal>List.find_exn</literal> throws
        <literal>Not_found</literal> when the element in question can't
        be found. You can take advantage of this in your code, for
        example, let's define a function called
        <literal>lookup_weight</literal>, with the following signature.
      </para>
      <programlisting language="ocaml">
val lookup_weight :
  compute_weight:('data -&gt; float) -&gt; ('key * 'data) list -&gt; 'key -&gt; float
</programlisting>
      <para>
        <literal>lookup_weight ~compute_weight alist key</literal>
        should return a floating-point weight by applying
        <literal>compute_weight</literal> to the data associated with
        <literal>key</literal> by <literal>alist</literal>. If
        <literal>key</literal> is not found, then it should return 0.
      </para>
      <para>
        We can implement <literal>lookup_weight</literal> as follows.
      </para>
      <programlisting language="ocaml">
# let lookup_weight ~compute_weight alist key =
    try
      let data = List.Assoc.find_exn alist key in
      compute_weight data
    with
      Not_found -&gt; 0. ;;
val lookup_weight :
  compute_weight:('a -&gt; float) -&gt; ('b * 'a) list -&gt; 'b -&gt; float =
  &lt;fun&gt;
</programlisting>
      <para>
        Let's think about the behavior of this code in the presence of
        exceptions. In particular, what happens if
        <literal>compute_weight</literal> throws an exception? Ideally,
        <literal>lookup_weight</literal> should propagate that exception
        on, but if the exception happens to be
        <literal>Not_found</literal>, then that's not what will happen:
      </para>
      <programlisting language="ocaml">
# lookup_weight ~compute_weight:(fun _ -&gt; raise Not_found)
    [&quot;a&quot;,3; &quot;b&quot;,4] &quot;a&quot; ;;
- : float = 0.
</programlisting>
      <para>
        This kind of problem is hard to detect in advance, because the
        type system doesn't tell you what exceptions a given function
        might throw. For this reason, it's generally better to avoid
        relying on the identity of the exception to determine the nature
        of a failure. A better approach is to narrow the scope of the
        exception handler, so that when it fires it's very clear what
        part of the code failed.
      </para>
      <programlisting language="ocaml">
# let lookup_weight ~compute_weight alist key =
    match
      try Some (List.Assoc.find_exn alist key)
      with _ -&gt; None
    with
    | None -&gt; 0.
    | Some data -&gt; compute_weight data ;;
val lookup_weight :
  compute_weight:('a -&gt; float) -&gt;
  ('b, 'a) Core.Std.List.Assoc.t -&gt; 'b -&gt; float = &lt;fun&gt;
</programlisting>
      <para>
        At which point, it makes sense to simply use the non-exception
        throwing function, <literal>List.Assoc.find</literal>, instead.
      </para>
      <programlisting language="ocaml">
# let lookup_weight ~compute_weight alist key =
    match List.Assoc.find alist key with
    | None -&gt; 0.
    | Some data -&gt; compute_weight data ;;
val lookup_weight :
  compute_weight:('a -&gt; float) -&gt;
  ('b, 'a) Core.Std.List.Assoc.t -&gt; 'b -&gt; float = &lt;fun&gt;
</programlisting>
    </sect2>
    <sect2 id="backtraces">
      <title>Backtraces</title>
      <para>
        A big part of the point of exceptions is to give useful
        debugging information. But at first glance, OCaml's exceptions
        can be less than informative. Consider the following simple
        program.
      </para>
      <programlisting language="ocaml">
(* exn.ml *)

open Core.Std
exception Empty_list

let list_max = function
  | [] -&gt; raise Empty_list
  | hd :: tl -&gt; List.fold tl ~init:hd ~f:(Int.max)

let () =
  printf &quot;%d\n&quot; (list_max [1;2;3]);
  printf &quot;%d\n&quot; (list_max [])
</programlisting>
      <para>
        If we build and run this program, we'll get a pretty
        uninformative error:
      </para>
      <programlisting language="bash">
$ ./exn
3
Fatal error: exception Exn.Empty_list
</programlisting>
      <para>
        The example in question is short enough that it's quite easy to
        see where the error came from. But in a complex program, simply
        knowing which exception was thrown is usually not enough
        information to figure out what went wrong.
      </para>
      <para>
        We can get more information from OCaml if we turn on stack
        backtraces. A backtrace is essentially a summary of the stack of
        calls that were executed to get to the point where the exception
        was thrown. Backtraces can be enabled by setting the
        <literal>OCAMLRUNPARAM</literal> environment variable as shown.
      </para>
      <programlisting language="bash">
exn $ export OCAMLRUNPARAM=b=1
exn $ ./exn
3
Fatal error: exception Exn.Empty_list
Raised at file &quot;exn.ml&quot;, line 7, characters 16-26
Called from file &quot;exn.ml&quot;, line 12, characters 17-28
</programlisting>
      <para>
        You can also capture a backtrace within your program by calling
        <literal>Exn.backtrace</literal>, which returns the backtrace of
        the most recently thrown exception. This is useful for reporting
        detailed information on errors that did not cause your program
        to fail.
      </para>
    </sect2>
    <sect2 id="from-exceptions-to-error-aware-types-and-back-again">
      <title>From exceptions to error-aware types and back again</title>
      <para>
        Both exceptions and error-aware types are necessary parts of
        programming in OCaml. As such, you often need to move between
        these two worlds. Happily, Core comes with some useful helper
        functions to help you do just that. For example, given a piece
        of code that can throw an exception, you can capture that
        exception into an option as follows:
      </para>
      <programlisting language="ocaml">
# let find alist key =
    Option.try_with (fun () -&gt; find_exn alist key) ;;
val find : (string * 'a) list -&gt; string -&gt; 'a option = &lt;fun&gt;
# find [&quot;a&quot;,1; &quot;b&quot;,2] &quot;c&quot;;;
- : int Core.Std.Option.t = None
# find [&quot;a&quot;,1; &quot;b&quot;,2] &quot;b&quot;;;
- : int Core.Std.Option.t = Some 2
</programlisting>
      <para>
        And <literal>Result</literal> and <literal>Or_error</literal>
        have similar <literal>try_with</literal> functions. So, we could
        write:
      </para>
      <programlisting language="ocaml">
# let find alist key =
    Result.try_with (fun () -&gt; find_exn alist key) ;;
val find : (string * 'a) list -&gt; string -&gt; ('a, exn) Result.t = &lt;fun&gt;
# find [&quot;a&quot;,1; &quot;b&quot;,2] &quot;c&quot;;;
- : (int, exn) Result.t = Result.Error Key_not_found(&quot;c&quot;)
</programlisting>
      <para>
        And then we can re-raise that exception:
      </para>
      <programlisting language="ocaml">
# Result.ok_exn (find [&quot;a&quot;,1; &quot;b&quot;,2] &quot;b&quot;);;
- : int = 2
# Result.ok_exn (find [&quot;a&quot;,1; &quot;b&quot;,2] &quot;c&quot;);;
Exception: Key_not_found(&quot;c&quot;).
</programlisting>
    </sect2>
  </sect1>
</chapter><chapter id="imperative-programming-1">
  <title>Imperative Programming</title>
  <para>
    Most of the code shown so far in this book, and indeed, most OCaml
    code in general, is <emphasis>pure</emphasis>. Pure code works
    without mutating the program's internal state, performing I/O,
    reading the clock, or in any other way interacting with changeable
    parts of the world. Thus, a pure function behaves like a
    mathematical function, always returning the same results when given
    the same inputs, and never affecting the world except insofar as it
    returns the value of its computation.
    <emphasis>Imperative</emphasis> code, on the other hand, operates by
    side-effects that modify a program's internal state or interact with
    the outside world. An imperative function has a new effect, and
    potentially returns different results, every time it's called.
  </para>
  <para>
    Pure code is the default in OCaml, and for good reason --- it's
    generally easier to reason about, less error prone and more
    composable. But imperative code is of fundamental importance to any
    practical programming language because real-world tasks require that
    you interact with the outside world, which is by its nature
    imperative. Imperative programming can also be important for
    performance. While pure code is quite efficient in OCaml, there are
    many algorithms that can only be implemented efficiently using
    imperative techniques.
  </para>
  <para>
    OCaml offers a happy compromise here, making it easy and natural to
    program in a pure style, but also providing great support for
    imperative programming where you need it. This chapter will walk you
    through OCaml's imperative features, and help you use them to their
    fullest.
  </para>
  <sect1 id="example-imperative-dictionaries">
    <title>Example: Imperative dictionaries</title>
    <para>
      We'll start with the implementation of a simple imperative
      dictionary, <emphasis>i.e.</emphasis>, a mutable mapping from keys
      to values. This is really for illustration purposes; both Core and
      the standard library provide imperative dictionaries, and for most
      real world tasks, you should use one of those implementations.
    </para>
    <para>
      Our dictionary, like those in Core and the standard library, will
      be implemented as a hash table. In particular, we'll use an
      <emphasis>open hashing</emphasis> scheme, which is to say the hash
      table will be an array of buckets, each bucket containing a list
      of key/value pairs that have been hashed into that bucket.
    </para>
    <para>
      Here's the interface we'll match, provided as an
      <literal>mli</literal>. Here, the type
      <literal>('a, 'b) t</literal> is used for a dictionary with keys
      of type <literal>'a</literal> and data of type
      <literal>'b</literal>.
    </para>
    <programlisting language="ocaml">
(* file: dictionary.mli *)
open Core.Std

type ('a, 'b) t

val create : unit -&gt; ('a, 'b) t
val length : ('a, 'b) t -&gt; int
val add    : ('a, 'b) t -&gt; key:'a -&gt; data:'b -&gt; unit
val find   : ('a, 'b) t -&gt; 'a -&gt; 'b option
val iter   : ('a, 'b) t -&gt; f:(key:'a -&gt; data:'b -&gt; unit) -&gt; unit
val remove : ('a, 'b) t -&gt; 'a -&gt; unit
</programlisting>
    <para>
      The <literal>mli</literal> also includes a collection of helper
      functions whose purpose and behavior should be largely inferrable
      from their names and type signatures. Notice that a number of the
      functions, in particular, ones like <literal>add</literal> that
      modify the dictionary, return unit. This is typical of functions
      that act by side-effect.
    </para>
    <para>
      We'll now walk through the implementation (contained in the
      corresponding <literal>ml</literal> file) piece by piece,
      explaining different imperative constructs as they come up.
    </para>
    <para>
      Our first step is to define the type of a dictionary as a record
      with two fields.
    </para>
    <programlisting language="ocaml">
(* file: dictionary.ml *)
open Core.Std

type ('a, 'b) t = { mutable length: int;
                    buckets: ('a * 'b) list array;
                  }
</programlisting>
    <para>
      The first field, <literal>length</literal> is declared as mutable.
      In OCaml, records are immutable by default, but individual fields
      are mutable when marked as such. The second field,
      <literal>buckets</literal>, is immutable, but contains an array,
      which is itself a mutable data structure, as we'll see.
    </para>
    <para>
      Now we'll start putting together the basic functions for
      manipulating a dictionary.
    </para>
    <programlisting language="ocaml">
let num_buckets = 17

let hash_bucket key = (Hashtbl.hash key) mod num_buckets

let create () =
  { length = 0;
    buckets = Array.create ~len:num_buckets [];
  }

let length t = t.length

let find t key =
  List.find_map t.buckets.(hash_bucket key)
    ~f:(fun (key',data) -&gt; if key' = key then Some data else None)
</programlisting>
    <para>
      Note that <literal>num_buckets</literal> is a constant. That's
      because, for simplicity's sake, we're using a fixed-length bucket
      array. For a practical implementation, the length of the array
      would have to be able to grow as the number of elements in the
      dictionary increases.
    </para>
    <para>
      The function <literal>hash_bucket</literal> is used throughout the
      rest of the module to choose the position in the array that a
      given key should be stored at. It is implemented on top of
      <literal>Hashtbl.hash</literal>, which is a hash function provided
      by the OCaml runtime that can be applied to values of any type.
      Thus, its own type is polymorphic:
      <literal>'a -&gt; int</literal>.
    </para>
    <para>
      While <literal>Hashtbl.hash</literal> can be used with any type,
      it won't necessarily succeed for all values.
      <literal>Hashtbl.hash</literal> will throw an exception if it
      encounters a value it can't handle, like a function or a value
      from a C libraries that lives outside the OCaml heap.
    </para>
    <para>
      The other functions defined above are fairly straightforward:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>create</literal> creates an empty dictionary.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>length</literal> grabs the length from the
          corresponding record field, thus returning the number of
          entries stored in the dictionary.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>find</literal> looks for a matching key in the table
          and returns the corresponding value if found as an option.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Another bit of syntax has popped up in <literal>find</literal>: we
      write <literal>array.(index)</literal> to grab a value from an
      array. Also, <literal>find</literal> uses
      <literal>List.find_map</literal>, which you can see the type of by
      typing it into the toplevel:
    </para>
    <programlisting language="ocaml">
# List.find_map;;
- : 'a list -&gt; f:('a -&gt; 'b option) -&gt; 'b option = &lt;fun&gt;
</programlisting>
    <para>
      <literal>List.find_map</literal> iterates over the elements of the
      list, calling <literal>f</literal> on each one until a
      <literal>Some</literal> is returned by <literal>f</literal>, at
      which point the value returned by <literal>f</literal> is returned
      by <literal>find_map</literal>. If <literal>f</literal> returns
      <literal>None</literal> on all values, then
      <literal>None</literal> is returned by
      <literal>find_map</literal>.
    </para>
    <para>
      Now let's look at the implementation of <literal>iter</literal>:
    </para>
    <programlisting language="ocaml">
let iter t ~f =
  for i = 0 to Array.length t.buckets - 1 do
    List.iter t.buckets.(i) ~f:(fun (key, data) -&gt; f ~key ~data)
  done
</programlisting>
    <para>
      <literal>iter</literal> is designed to walk over all the entries
      in the dictionary. In particular, <literal>iter t ~f</literal>
      will call <literal>f</literal> for each key/value pair in
      dictionary <literal>t</literal>. Note that <literal>f</literal>
      must return <literal>unit</literal>, since it is expected to work
      by side effect rather than by returning a value, and the overall
      <literal>iter</literal> function returns <literal>unit</literal>
      as well.
    </para>
    <para>
      The code for <literal>iter</literal> uses two forms of iteration:
      a <literal>for</literal> loop to walk over the array of buckets;
      and within that loop, and a call to <literal>List.iter</literal>
      to walk over the list of values in a given bucket. We could have
      done the outer loop with a recursive function instead of a
      <literal>for</literal> loop, but <literal>for</literal> loops are
      syntactically convenient, and are more familiar and idiomatic in
      the context of imperative code.
    </para>
    <para>
      The following code is for adding and removing mappings from the
      dictionary.
    </para>
    <programlisting language="ocaml">
let bucket_has_key t i key =
  List.exists t.buckets.(i) ~f:(fun (key',_) -&gt; key' = key)

let add t ~key ~data =
  let i = hash_bucket key in
  let replace = bucket_has_key t i key in
  let filtered_bucket =
    if replace then
      List.filter t.buckets.(i) ~f:(fun (key',_) -&gt; key' &lt;&gt; key)
    else
      t.buckets.(i)
  in
  t.buckets.(i) &lt;- (key, data) :: filtered_bucket;
  if not replace then t.length &lt;- t.length + 1

let remove t key =
  let i = hash_bucket key in
  if bucket_has_key t i key then (
    let filtered_bucket =
      List.filter t.buckets.(i) ~f:(fun (key',_) -&gt; key' &lt;&gt; key)
    in
    t.buckets.(i) &lt;- filtered_bucket;
    t.length &lt;- t.length - 1
  )
</programlisting>
    <para>
      This above code is made more complicated by the fact that we need
      to detect whether we are overwriting or removing an existing
      binding, so we can decide whether <literal>t.length</literal>
      needs to be changed. The helper function
      <literal>bucket_has_key</literal> is used for this purpose.
    </para>
    <para>
      Another piece of syntax shows up in both <literal>add</literal>
      and <literal>remove</literal>: the use of the
      <literal>&lt;-</literal> operator to update elements of an array
      (<literal>array.(i) &lt;- expr</literal>) and for updating a
      record field (<literal>record.field &lt;- expression</literal>).
    </para>
    <para>
      We also use a single semicolon, <literal>;</literal>, as a
      sequencing operator, to allow us to do a sequence of
      side-effecting operations in a row: first, update the bucket, then
      update the count. We could have done this using let bindings:
    </para>
    <programlisting language="ocaml">
    let () = t.buckets.(i) &lt;- filtered_bucket in
    t.length &lt;- t.length - 1
</programlisting>
    <para>
      but <literal>;</literal> is more concise and idiomatic. More
      generally,
    </para>
    <programlisting language="ocaml">
&lt;expr1&gt;;
&lt;expr2&gt;;
...
&lt;exprN&gt;
</programlisting>
    <para>
      is equivalent to
    </para>
    <programlisting language="ocaml">
let () = &lt;expr1&gt; in
let () = &lt;expr2&gt; in
...
&lt;exprN&gt;
</programlisting>
    <para>
      When a sequence expression <literal>expr1; expr2</literal> is
      evaluated, <literal>expr1</literal> is evaluated first, and then
      <literal>expr2</literal>. The expression <literal>expr1</literal>
      should have type <literal>unit</literal> (though this is a warning
      rather than a hard restriction), and the value of
      <literal>expr2</literal> is returned as the value of the entire
      sequence. For example, the sequence
      <literal>print_string &quot;hello world&quot;; 1 + 2</literal>
      first prints the string
      <literal>&quot;hello world&quot;</literal>, then returns the
      integer <literal>3</literal>.
    </para>
    <para>
      Note also that we do all of the side-effecting operations at the
      very end of each function. This is good practice because it
      minimizes the chance that such operations will be interrupted with
      an exception, leaving the data structure in an inconsistent state.
    </para>
  </sect1>
  <sect1 id="primitive-mutable-data">
    <title>Primitive mutable data</title>
    <para>
      Now that we've looked at a complete example, let's take a more
      systematic look at imperative programming in OCaml. We encountered
      two different forms of mutable data above: records with mutable
      fields and arrays. We'll now discuss these in more detail, along
      with the other primitive forms of mutable data that are available
      in OCaml.
    </para>
    <sect2 id="array-like-data">
      <title>Array-like data</title>
      <para>
        OCaml supports a number of array-like data structures;
        <emphasis>i.e.</emphasis>, mutable integer-indexed containers
        that provide constant-time access to their elements. We'll
        discuss several of them below.
      </para>
      <sect3 id="ordinary-arrays">
        <title>Ordinary arrays</title>
        <para>
          The <literal>array</literal> type is used for general purpose
          polymorphic arrays. The <literal>Array</literal> module has a
          variety of utility functions for interacting with arrays,
          including a number of mutating operations. These include
          <literal>Array.set</literal>, for setting an individual
          element, and <literal>Array.blit</literal>, for efficiently
          copying values from one range of indices to another.
        </para>
        <para>
          Arrays also come with special syntax for retrieving an element
          from an array:
        </para>
        <programlisting language="ocaml">
array.(index)
</programlisting>
        <para>
          and for setting an element in an array:
        </para>
        <programlisting language="ocaml">
array.(index) &lt;- expr
</programlisting>
        <para>
          Array literals are written using <literal>[|</literal> and
          <literal>|]</literal> as delimiters. Thus,
          <literal>[| 1; 2; 3 |]</literal> is a literal integer array.
        </para>
      </sect3>
      <sect3 id="strings">
        <title>Strings</title>
        <para>
          Strings are essentially byte-arrays which are often used for
          textual data. The main advantage of using a
          <literal>string</literal> in place of a
          <literal>Char.t array</literal> (a <literal>Char.t</literal>
          is an 8-bit character) is that the former is considerably more
          space efficient; an array uses one word --- 8 bytes on a
          64-bit machine --- to store a single entry, whereas strings
          use one byte per character.
        </para>
        <para>
          Strings also come with their own syntax for getting and
          setting values: <literal>string.[index]</literal> and
          <literal>string.[index] &lt;- expr</literal> respectively, and
          string literals are bounded by quotes. There's also a module
          <literal>String</literal> where you'll find useful functions
          for working with strings.
        </para>
      </sect3>
      <sect3 id="bigarrays">
        <title>Bigarrays</title>
        <para>
          A <literal>Bigarray.t</literal> is a handle to a block of
          memory stored outside of the OCaml heap. These are mostly
          useful for interacting with C or Fortran libraries, and are
          discussed in
          <xref linkend="memory-representation-of-values"/>.
          Bigarrays too have their own getting and setting syntax:
          <literal>bigarray.{index}</literal> and
          <literal>bigarray.{index} &lt;- expr</literal>. There is no
          literal syntax for bigarrays.
        </para>
      </sect3>
    </sect2>
    <sect2 id="mutable-record-and-object-fields-and-ref-cells">
      <title>Mutable record and object fields and ref cells</title>
      <para>
        As we've seen, records are immutable by default, but individual
        record fields can be declared as mutable. These mutable fields
        can be set using the <literal>&lt;-</literal> operator,
        <emphasis>i.e.</emphasis>,
        <literal>record.field &lt;- expr</literal>.
      </para>
      <para>
        As we'll see in
        <xref linkend="object-oriented-programming"/>, fields
        of an object can similarly be declared as mutable, and can then
        be modified in much the same way as record fields.
      </para>
      <sect3 id="ref-cells">
        <title>Ref Cells</title>
        <para>
          Variables in OCaml are never mutable --- they can refer to
          mutable data, but what the variable points to can't be
          changed. Sometimes, though, you want to do exactly what you
          would do with a mutable variable in another language: define a
          single, mutable value. In OCaml this is typically achieved
          using a <literal>ref</literal>, which is essentially a
          container with a single mutable polymorphic field.
        </para>
        <para>
          The definition for the ref type is as follows:
        </para>
        <programlisting language="ocaml">
type 'a ref = { mutable contents : 'a }
</programlisting>
        <para>
          The standard library defines the following operators for
          working with refs.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <literal>ref expr</literal> constructs a reference cell
              containing the value defined by the expression
              <literal>expr</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>!refcell</literal> returns the contents of the
              reference cell.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>refcell := expr</literal> replaces the contents
              of the reference cell.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          You can see these in action below.
        </para>
        <programlisting language="ocaml">
# let x = ref 1;;
val x : int ref = {contents = 1}
# !x;;
- : int = 1
# x := !x + 1;;
- : unit = ()
# !x;;
- : int = 2
</programlisting>
        <para>
          The above are just ordinary OCaml functions which could be
          defined as follows.
        </para>
        <programlisting language="ocaml">
let ref x = { contents = x }
let (!) r = r.contents
let (:=) r x = r.contents &lt;- x
</programlisting>
      </sect3>
    </sect2>
    <sect2 id="foreign-functions">
      <title>Foreign functions</title>
      <para>
        Another source of imperative operations in OCaml is resources
        that come from interfacing with external libraries through
        OCaml's foreign function interface (FFI). The FFI opens OCaml up
        to imperative constructs that are exported by system calls or
        other external libraries. Many of these come built in, like
        access to the <literal>write</literal> system call, or to the
        <literal>clock</literal>; while others come from user libraries,
        like LAPACK bindings.
      </para>
    </sect2>
  </sect1>
  <sect1 id="for-and-while-loops-1">
    <title><literal>for</literal> and <literal>while</literal>
    loops</title>
    <para>
      OCaml provides support for traditional imperative looping
      constructs, in particular, <literal>for</literal> and
      <literal>while</literal> loops, even though neither of them is
      strictly necessary. Anything you can do with such a loop you can
      also do with a recursive function, and you can also write
      higher-order functions like <literal>Array.iter</literal> that
      cover much of the same ground.
    </para>
    <para>
      Nonetheless, explicit <literal>for</literal> and
      <literal>while</literal> loops are both more idiomatic for
      imperative programming and often more concise.
    </para>
    <para>
      The <literal>for</literal> loop is the simpler of the two. Indeed,
      we've already seen the <literal>for</literal> loop in action ---
      the <literal>iter</literal> function in
      <literal>Dictionary</literal> is built using it. Here's a simple
      example of <literal>for</literal>.
    </para>
    <programlisting language="ocaml">
# for i = 0 to 3 do Printf.printf &quot;i = %d\n&quot; i done;;
i = 0
i = 1
i = 2
i = 3
- : unit = ()
</programlisting>
    <para>
      As you can see, the upper and lower bounds are inclusive. We can
      also use <literal>downto</literal> to iterate in the other
      direction.
    </para>
    <programlisting language="ocaml">
# for i = 3 downto 0 do Printf.printf &quot;i = %d\n&quot; i done;;
i = 3
i = 2
i = 1
i = 0
- : unit = ()
</programlisting>
    <para>
      OCaml also supports <literal>while</literal> loops, which include
      a condition and a body. The loop first evaluates the condition,
      and then, if it evaluates to true, evaluates the body and starts
      the loop again. Here's a simple example of a function for
      reversing an array in-place.
    </para>
    <programlisting language="ocaml">
# let rev_inplace ar =
    let i = ref 0 in
    let j = ref (Array.length ar - 1) in
    (* terminate when the upper and lower indices meet *)
    while !i &lt; !j do
      (* swap the two elements *)
      let tmp = ar.(!i) in
      ar.(!i) &lt;- ar.(!j);
      ar.(!j) &lt;- tmp;
      (* bump the indices *)
      incr i;
      decr j
    done
  ;;
val rev_inplace : 'a array -&gt; unit = &lt;fun&gt;
# let nums = [|1;2;3;4;5|];;
val nums : int array = [|1; 2; 3; 4; 5|]
# rev_inplace nums;;
- : unit = ()
# nums;;
- : int array = [|5; 4; 3; 2; 1|]
</programlisting>
    <para>
      In the above, we used <literal>incr</literal> and
      <literal>decr</literal>, which are build-in functions for
      incrementing and decrementing an <literal>int ref</literal> by
      one, respectively.
    </para>
  </sect1>
  <sect1 id="example-doubly-linked-lists">
    <title>Example: Doubly-linked lists</title>
    <para>
      Another common imperative data structure is the doubly-linked
      list. Doubly-linked lists can be traversed in both directions and
      elements can be added and removed from the list in constant time.
      Core defines a doubly-linked list (the module is called
      <literal>Doubly_linked</literal>), but we'll define our own linked
      list library as an illustration.
    </para>
    <para>
      Here's the <literal>mli</literal> of the module we'll build.
    </para>
    <programlisting language="ocaml">
(* file: dlist.mli *)
open Core.Std

type 'a t
type 'a element

(** Basic list operations  *)
val create   : unit -&gt; 'a t
val is_empty : 'a t -&gt; bool

(** Navigation using [element]s *)
val first : 'a t -&gt; 'a element option
val next  : 'a element -&gt; 'a element option
val prev  : 'a element -&gt; 'a element option
val value : 'a element -&gt; 'a

(** Whole-data-structure iteration *)
val iter    : 'a t -&gt; f:('a -&gt; unit) -&gt; unit
val find_el : 'a t -&gt; f:('a -&gt; bool) -&gt; 'a element option

(** Mutation *)
val insert_first : 'a t -&gt; 'a -&gt; 'a element
val insert_after : 'a element -&gt; 'a -&gt; 'a element
val remove : 'a t -&gt; 'a element -&gt; unit
</programlisting>
    <para>
      Note that there are two types defined here:
      <literal>'a t</literal>, the type of a list, and
      <literal>'a element</literal>, the type of an element. Elements
      act as pointers to the interior of a list, and allow us to
      navigate the list and give us a point at which to apply mutating
      operations.
    </para>
    <para>
      Now let's look at the implementation. We'll start by defining
      <literal>'a element</literal> and <literal>'a t</literal>.
    </para>
    <programlisting language="ocaml">
(* file: dlist.ml *)
open Core.Std

type 'a element =
  { value : 'a;
    mutable next : 'a element option;
    mutable prev : 'a element option
  }

type 'a t = 'a element option ref
</programlisting>
    <para>
      An <literal>'a element</literal> is a record containing the value
      to be stored in that node as well as optional (and mutable) fields
      pointing to the previous and next elements. At the beginning of
      the list, the <literal>prev</literal> field is
      <literal>None</literal>, and at the end of the list, the
      <literal>next</literal> field is <literal>None</literal>.
    </para>
    <para>
      The type of the list itself, <literal>'a t</literal>, is an
      mutable reference to an optional <literal>element</literal>. This
      reference is <literal>None</literal> if the list is empty, and
      <literal>Some</literal> otherwise.
    </para>
    <para>
      Now we can define a few basic functions that operate on lists and
      elements.
    </para>
    <programlisting language="ocaml">
let create () = ref None
let is_empty t = !t = None

let value elt = elt.value

let first t = !t
let next elt = elt.next
let prev elt = elt.prev
</programlisting>
    <para>
      These all follow relatively straight-forwardly from our type
      definitions.
    </para>
    <note><title> 
    Cyclic data structures
    </title>
    <para>
      Doubly-linked lists are a cyclic data structure, meaning that it
      is possible to follow a nontrivial sequence of pointers that
      closes in on itself. In general, building cyclic data structures
      requires the use of side-effects. This is done by constructing the
      data elements first, and then adding cycles using assignment
      afterwards.
    </para>
    <para>
      There is an exception to this, though: you can construct
      fixed-size cyclic data-structures using
      <literal>let rec</literal>.
    </para>
    <programlisting language="ocaml">
# let rec endless_loop = 1 :: 2 :: 3 :: endless_loop;;
val endless_loop : int list =
  [1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1;
   2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2; 3; 1; 2;
   ...]
</programlisting>
    <para>
      This approach is quite limited, however. General purpose cyclic
      data structures require mutation.
    </para>
    </note>
    <sect2 id="modifying-the-list">
      <title>Modifying the list</title>
      <para>
        Now, we'll start considering operations that mutate the list,
        starting with <literal>insert_first</literal>, which inserts an
        element at the front of the list.
      </para>
      <programlisting language="ocaml">
let insert_first t value =
  let new_elt = { prev = None; next = !t; value } in
  begin match !t with
  | Some old_first -&gt; old_first.prev &lt;- Some new_elt
  | None -&gt; ()
  end;
  t := Some new_elt;
  new_elt
</programlisting>
      <para>
        <literal>insert_first</literal> first defines a new element
        <literal>new_elt</literal>, and then links it into the list,
        finally setting the list itself to point to
        <literal>new_elt</literal>. Note that the precedence of a
        <literal>match</literal> expression is very low, so to separate
        it from the following assignment
        (<literal>t := Some new_elt</literal>) we surround the match
        with <literal>begin ... end</literal>. We could have used
        parenthesis for the same purpose. Without some kind of
        bracketing, the final assignment would incorrectly become part
        of the <literal>None -&gt; ...</literal> case.
      </para>
      <para>
        We can use <literal>insert_after</literal> to insert elements
        later in the list. <literal>insert_after</literal> takes as
        arguments both an <literal>element</literal> after which to
        insert the new node, and a value to insert.
      </para>
      <programlisting language="ocaml">
let insert_after elt value =
  let new_elt = { value; prev = Some elt; next = elt.next } in
  begin match elt.next with
  | Some old_next -&gt; old_next.prev &lt;- Some new_elt
  | None -&gt; ()
  end;
  elt.next &lt;- Some new_elt;
  new_elt
</programlisting>
      <para>
        Finally, we need a <literal>remove</literal> function.
      </para>
      <programlisting language="ocaml">
let remove t elt =
  let { prev; next; _ } = elt in
  begin match prev with
  | Some prev -&gt; prev.next &lt;- next
  | None -&gt; t := next
  end;
  begin match next with
  | Some next -&gt; next.prev &lt;- prev;
  | None -&gt; ()
  end;
  elt.prev &lt;- None;
  elt.next &lt;- None
</programlisting>
      <para>
        Note that the above code is careful to change the
        <literal>prev</literal> pointer of the following element, and
        the <literal>next</literal> pointer of the previous element, if
        they exist. If there's no previous element, then the list
        pointer itself is updated. In any case, the next and previous
        pointers of the element itself are set to
        <literal>None</literal>.
      </para>
      <para>
        These functions are more fragile than they may seem. In
        particular, misuse of the interface may lead to corrupted data.
        For example, double-removing an element will cause the main list
        reference to be set to <literal>None</literal>, thus emptying
        the list. Similar problems arise from removing an element from a
        list it doesn't belong to.
      </para>
      <para>
        This shouldn't be a big surprise. Complex imperative data
        structures can be quite tricky; considerably trickier than their
        pure equivalents. The issues described above can be dealt with
        by more careful error detection, and such error correction is
        taken care of in modules like Core's
        <literal>Doubly_linked</literal>. You should use imperative data
        structures from a well-designed library when you can. And when
        you can't, you should make sure that the code you write is
        careful about error detection.
      </para>
    </sect2>
    <sect2 id="iteration-functions">
      <title>Iteration functions</title>
      <para>
        When defining containers like lists, dictionaries and trees,
        you'll typically want to define a set of iteration functions,
        like <literal>iter</literal>, <literal>map</literal>, and
        <literal>fold</literal>, which let you concisely express common
        iteration patterns.
      </para>
      <para>
        <literal>Dlist</literal> has two such iterators:
        <literal>iter</literal>, the goal of which is to call a
        <literal>unit</literal> producing function on every element of
        the list, in order; and <literal>find_el</literal>, which runs a
        provided test function on each values stored in the list,
        returning the first <literal>element</literal> that passes the
        test. Both <literal>iter</literal> and
        <literal>find_el</literal> are implemented using simple
        recursive loops that use <literal>next</literal> to walk from
        element to element, and <literal>value</literal> to extract the
        element from a given node.
      </para>
      <programlisting language="ocaml">
let iter t ~f =
  let rec loop = function
    | None -&gt; ()
    | Some el -&gt; f (value el); loop (next el)
  in
  loop !t

let find_el t ~f =
  let rec loop = function
    | None -&gt; None
    | Some elt -&gt;
      if f (value elt) then Some elt
      else loop (next elt)
  in
  loop !t
</programlisting>
    </sect2>
  </sect1>
  <sect1 id="laziness-and-other-benign-effects">
    <title>Laziness and other benign effects</title>
    <para>
      There are many instances where you basically want to program in a
      pure style, but you want to make limited use of side-effects to
      improve the performance of your code, without really changing
      anything else. Such side effects are sometimes called
      <emphasis>benign effects</emphasis>, and they are a useful way of
      leveraging OCaml's imperative features while still maintaining
      most of the benefits of pure programming.
    </para>
    <para>
      One of the simplest benign effect is
      <emphasis>laziness</emphasis>. A lazy value is one that is not
      computed until it is actually needed. In OCaml, lazy values are
      created using the <literal>lazy</literal> keyword, which can be
      used to prefix any expression, returning a value of type
      <literal>'a Lazy.t</literal>. The evaluation of that expression is
      delayed until forced with the <literal>Lazy.force</literal>
      function.
    </para>
    <programlisting language="ocaml">
# let v = lazy (print_string &quot;performing lazy computation\n&quot;; sqrt 16.);;
val v : float lazy_t = &lt;lazy&gt;
# Lazy.force v;;
performing lazy computation
- : float = 4.
# Lazy.force v;;
- : float = 4.
</programlisting>
    <para>
      You can see from the print statement that the actual computation
      was performed only once, and only after <literal>force</literal>
      had been called.
    </para>
    <para>
      To better understand how laziness works, let's walk through the
      implementation of our own lazy type. We'll start by declaring
      types to represent a lazy value.
    </para>
    <programlisting language="ocaml">
# type 'a lazy_state =
  | Delayed of (unit -&gt; 'a)
  | Value of 'a
  | Exn of exn
type 'a lazy_state = Delayed of (unit -&gt; 'a) | Value of 'a | Exn of exn
</programlisting>
    <para>
      A <literal>lazy_state</literal> represents the possible states of
      a lazy value. A lazy value is <literal>Delayed</literal> before it
      has been run, where <literal>Delayed</literal> holds a function
      for computing the value in question. A lazy value is in the
      <literal>Value</literal> state when it has been forced and the
      computation ended normally. The <literal>Exn</literal> case is for
      when the lazy value has been forced, but the computation ended
      with an exception. A lazy value is simply a <literal>ref</literal>
      containing a <literal>lazy_state</literal>, where the
      <literal>ref</literal> makes it possible to change from being in
      the <literal>Delayed</literal> state to being in the
      <literal>Value</literal> or <literal>Exn</literal> states.
    </para>
    <para>
      We can create a lazy value based on a thunk,
      <emphasis>i.e.</emphasis>, a function that takes a unit argument.
      Wrapping an expression in a thunk is another way to suspend the
      computation of an expression.
    </para>
    <programlisting language="ocaml">
# let create_lazy f = ref (Delayed f);;
val create_lazy : (unit -&gt; 'a) -&gt; 'a lazy_state ref = &lt;fun&gt;
# let v = create_lazy
    (fun () -&gt; print_string &quot;performing lazy computation\n&quot;; sqrt 16.);;
  val v : float lazy_state ref = {contents = Delayed &lt;fun&gt;}
</programlisting>
    <para>
      Now we just need a way to force a lazy value. The following
      function does just that.
    </para>
    <programlisting language="ocaml">
# let force v =
    match !v with
    | Value x -&gt; x
    | Exn e -&gt; raise e
    | Delayed f -&gt;
      try
        let x = f () in
        v := Value x;
        x
      with exn -&gt;
        v := Exn exn;
        raise exn
   ;;
val force : 'a lazy_state ref -&gt; 'a = &lt;fun&gt;
</programlisting>
    <para>
      Which we can use in the same way we used
      <literal>Lazy.force</literal>:
    </para>
    <programlisting language="ocaml">
# force v;;
performing lazy computation
- : float = 4.
# force v;;
- : float = 4.
</programlisting>
    <para>
      The main user-visible difference between our implementation of
      laziness and the built-in version is syntax. Rather than writing
      <literal>create_lazy (fun () -&gt; sqrt 16.)</literal>, we can
      with the built-in <literal>lazy</literal> just write
      <literal>lazy (sqrt 16.)</literal>.
    </para>
    <sect2 id="memoization-and-dynamic-programming">
      <title>Memoization and dynamic programming</title>
      <para>
        Another benign effect is <emphasis>memoization</emphasis>. A
        memoized function remembers the result of previous invocations
        of the function so that they can be returned without further
        computation when the same arguments are presented again.
      </para>
      <para>
        Here's a function that takes as an argument an arbitrary
        single-argument function and returns a memoized version of that
        function. Here we'll use Core's <literal>Hashtbl</literal>
        module, rather than our toy <literal>Dictionary</literal>.
      </para>
      <programlisting language="ocaml">
# let memoize f =
    let table = Hashtbl.Poly.create () in
    (fun x -&gt;
      match Hashtbl.find table x with
      | Some y -&gt; y
      | None -&gt;
        let y = f x in
        Hashtbl.add_exn table ~key:x ~data:y;
        y
    );;
val memoize : ('a -&gt; 'b) -&gt; 'a -&gt; 'b = &lt;fun&gt;
</programlisting>
      <para>
        The code above is a bit tricky. <literal>memoize</literal> takes
        as its argument a function <literal>f</literal>, and then
        allocates a hashtable (called <literal>table</literal>) and
        returns a new function as the memoized version of
        <literal>f</literal>. When called, this new function looks in
        <literal>table</literal> first, and if it fails to find a value,
        calls <literal>f</literal> and stashes the result in
        <literal>table</literal>. Note that <literal>table</literal>
        doesn't go out of scope as long as the function returned by
        <literal>memoize</literal> is in scope.
      </para>
      <para>
        Memoization can be useful whenever you have a function that is
        expensive to recompute, and you don't mind caching old values
        indefinitely. One important caution: every time you create a
        memoized function, there's something of a built-in memory leak.
        As long as you hold on to the memoized function, you're holding
        every result it has returned thus far.
      </para>
      <para>
        Memoization is also useful for efficiently implementing some
        recursive algorithms. One good example is the algorithm for
        computing the <emphasis>edit distance</emphasis> (also called
        the Levenshtein distance) between two strings. The edit distance
        is the number of single-character changes (including letter
        switches, insertions and deletions) required to convert one
        string to the other. This kind of distance metric can be useful
        for a variety of approximate string matching problems, like
        spell checkers.
      </para>
      <para>
        Consider the following code for computing the edit distance.
        Understanding the algorithm isn't important here, but you should
        pay attention to the structure of the recursive calls.
      </para>
      <programlisting language="ocaml">
# let rec edit_distance s t =
    match String.length s, String.length t with
    | (0,x) | (x,0) -&gt; x
    | (len_s,len_t) -&gt;
      let s' = String.drop_suffix s 1 in
      let t' = String.drop_suffix t 1 in
      let cost_to_drop_both =
        if s.[len_s - 1] = t.[len_t - 1] then 0 else 1
      in
      List.reduce_exn ~f:Int.min
        [ edit_distance s' t  + 1
        ; edit_distance s  t' + 1
        ; edit_distance s' t' + cost_to_drop_both
        ]
  ;;
val edit_distance : string -&gt; string -&gt; int = &lt;fun&gt;
# edit_distance &quot;OCaml&quot; &quot;ocaml&quot;;;
- : int = 2
</programlisting>
      <para>
        The thing to note is that if you call
        <literal>edit_distance &quot;OCaml&quot; &quot;ocaml&quot;</literal>,
        then that will in turn dispatch the following calls:
      </para>
      <programlisting language="ocaml">
edit_distance &quot;OCam&quot; &quot;ocaml&quot;
edit_distance &quot;OCaml&quot; &quot;ocam&quot;
edit_distance &quot;OCam&quot; &quot;ocam&quot;
</programlisting>
      <para>
        And these calls will in turn dispatch other calls:
      </para>
      <programlisting language="ocaml">
edit_distance &quot;OCam&quot; &quot;ocaml&quot;
   edit_distance &quot;OCa&quot; &quot;ocaml&quot;
   edit_distance &quot;OCam&quot; &quot;ocam&quot;
   edit_distance &quot;OCa&quot; &quot;ocam&quot;
edit_distance &quot;OCaml&quot; &quot;ocam&quot;
   edit_distance &quot;OCam&quot; &quot;ocam&quot;
   edit_distance &quot;OCaml&quot; &quot;oca&quot;
   edit_distance &quot;OCam&quot; &quot;oca&quot;
edit_distance &quot;OCam&quot; &quot;ocam&quot;
   edit_distance &quot;OCa&quot; &quot;ocam&quot;
   edit_distance &quot;OCam&quot; &quot;oca&quot;
   edit_distance &quot;OCa&quot; &quot;oca&quot;
</programlisting>
      <para>
        As you can see, some of these calls are repeats. For example,
        there are two different calls to
        <literal>edit_distance &quot;OCam&quot; &quot;oca&quot;</literal>.
        The number of redundant calls grows exponentially with the size
        of the strings, meaning that our implementation of
        <literal>edit_distance</literal> is brutally slow for large
        strings. We can see this by writing a small timing function.
      </para>
      <programlisting language="ocaml">
# let time f =
    let start = Time.now () in
    let x = f () in
    let stop = Time.now () in
    printf &quot;Time: %s\n&quot; (Time.Span.to_string (Time.diff stop start));
    x ;;
val time : (unit -&gt; 'a) -&gt; 'a = &lt;fun&gt;
</programlisting>
      <para>
        And now we can use this to try out some examples.
      </para>
      <programlisting language="ocaml">
# time (fun () -&gt; edit_distance &quot;OCaml&quot; &quot;ocaml&quot;);;
Time: 5.11003ms
- : int = 2
# time (fun () -&gt; edit_distance &quot;OCaml 4.01&quot; &quot;ocaml 4.01&quot;);;
Time: 19.3322s
- : int = 2
</programlisting>
      <para>
        Just those few extra characters made it almost four thousand
        times slower!
      </para>
      <para>
        Memoization would be a huge help here, but to fix the problem,
        we need to memoize the calls that
        <literal>edit_distance</literal> makes to itself. This technique
        is sometimes referred to as <emphasis>dynamic
        programming</emphasis>. To see how to do this, let's step away
        from <literal>edit_distance</literal>, and instead consider a
        much simpler example: computing the nth element of the Fibonacci
        sequence. The Fibonacci sequence by definition starts out with
        two <literal>1</literal>'s, with every subsequent element being
        the sum of the previous two. The classic recursive definition of
        Fibonacci is as follows:
      </para>
      <programlisting language="ocaml">
# let rec fib i =
    if i &lt;= 1 then 1 else fib (i - 1) + fib (i - 2);;
</programlisting>
      <para>
        This is, however, exponentially slow, for the same reason that
        <literal>edit_distance</literal> was slow: we end up making many
        redundant calls to <literal>fib</literal>. It shows up quite
        dramatically in the performance.
      </para>
      <programlisting language="ocaml">
# time (fun () -&gt; fib 20);;
Time: 5.17392ms
- : int = 10946
# time (fun () -&gt; fib 40);;
Time: 51.4205s
- : int = 165580141
</programlisting>
      <para>
        Here, <literal>fib 40</literal> takes almost a minute to
        compute, as opposed to five <emphasis>milliseconds</emphasis>
        for <literal>fib 20</literal>.
      </para>
      <para>
        So, how can we use memoization to make this faster? The tricky
        bit is that we need to insert the memoization before the
        recursive calls within <literal>fib</literal>. We can't just
        define <literal>fib</literal> in the ordinary way and memoize it
        after the fact and expect the first call to
        <literal>fib</literal> to be improved (though of course repeated
        calls will be improved).
      </para>
      <programlisting language="ocaml">
# let fib = memoize fib;;
val fib : int -&gt; int = &lt;fun&gt;
# time (fun () -&gt; fib 40);;
Time: 52.6s
- : int = 165580141
# time (fun () -&gt; fib 40);;
Time: 0.00596046ms
- : int = 165580141
</programlisting>
      <para>
        In order to make <literal>fib</literal> fast, our first step
        will be to rewrite <literal>fib</literal> in a way that unwinds
        the recursion. The following version expects as its first
        argument a function (called <literal>fib</literal>) that will be
        called in lieu of the usual recursive call.
      </para>
      <programlisting language="ocaml">
# let fib_norec fib i =
    if i &lt;= 1 then i
    else fib (i - 1) + fib (i - 2) ;;
val fib_norec : (int -&gt; int) -&gt; int -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        We can now turn this back into an ordinary Fibonacci function by
        tying the recursive knot, as shown below.
      </para>
      <programlisting language="ocaml">
# let rec fib i = fib_norec fib i
val fib : int -&gt; int = &lt;fun&gt;
# fib 5;;
- : int = 8
</programlisting>
      <para>
        We can even write a polymorphic function that we'll call
        <literal>make_rec</literal> that can tie the recursive not for
        any function of this form.
      </para>
      <programlisting language="ocaml">
# let make_rec f_norec =
    let rec f x = f_norec f x in
    f
  ;;
val make_rec : (('a -&gt; 'b) -&gt; 'a -&gt; 'b) -&gt; 'a -&gt; 'b = &lt;fun&gt;
# let fib = make_rec fib_norec;;
val fib : int -&gt; int = &lt;fun&gt;
# fib 5;;
- : int = 8
</programlisting>
      <para>
        This is a pretty strange piece of code, and it may take a few
        minutes of thought to figure out what's going on. Like
        <literal>fib_norec</literal>, the function
        <literal>f_norec</literal> passed into
        <literal>make_rec</literal> is a function that isn't recursive,
        but takes as an argument a function that it will call. What
        <literal>make_rec</literal> does is to essentially feed
        <literal>f_norec</literal> to itself, thus making it a true
        recursive function.
      </para>
      <para>
        This is clever enough, but all we've really done is find a new
        way to implement the same old slow Fibonacci function. To make
        it faster, we need variant on <literal>make_rec</literal> that
        inserts memoization when it ties the recursive knot. We'll call
        that function <literal>memo_rec</literal>.
      </para>
      <programlisting language="ocaml">
# let memo_rec f_norec x =
     let fref = ref (fun _ -&gt; assert false) in
     let f = memoize (fun x -&gt; f_norec !fref x) in
     fref := f;
     f x
  ;;
val memo_rec : (('a -&gt; 'b) -&gt; 'a -&gt; 'b) -&gt; 'a -&gt; 'b = &lt;fun&gt;
</programlisting>
      <para>
        Note that <literal>memo_rec</literal> has the same signature as
        <literal>make_rec</literal>.
      </para>
      <para>
        We're using the reference here as a way of tying the recursive
        knot without using a <literal>let rec</literal>, which for
        reasons we'll describe later wouldn't work here.
      </para>
      <para>
        Using <literal>memo_rec</literal>, we can now build an efficient
        version of <literal>fib</literal>.
      </para>
      <programlisting language="ocaml">
# let fib = memo_rec fib_norec;;
val fib : int -&gt; int = &lt;fun&gt;
# time (fun () -&gt; fib 40);;
Time: 0.236034ms
</programlisting>
      <para>
        And as you can see, the exponential time complexity is now gone.
      </para>
      <para>
        The memory behavior here is important. If you look back at the
        definition of <literal>memo_rec</literal>, you'll see that the
        call to memo_rec does not trigger a call to
        <literal>memoize</literal>. Only when the final argument to
        <literal>fib</literal> is presented does
        <literal>memoize</literal> get called, and the result of that
        call falls out of scope when the <literal>fib</literal> call
        returns. That means that, unlike ordinary memoization, calling
        <literal>memo_rec</literal> on a function does not create a
        memory leak --- the memoization table is collected after the
        computation completes.
      </para>
      <para>
        We can use <literal>memo_rec</literal> as part of a single
        declaration that makes this look like it's little more than a
        special form of <literal>let rec</literal>.
      </para>
      <programlisting language="ocaml">
# let fib = memo_rec (fun fib i -&gt;
    if i &lt;= 1 then 1 else fib (i - 1) + fib (i - 2));;
val fib : int -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        Memoization is overkill for implementing Fibonacci, and indeed,
        the <literal>fib</literal> defined above is not especially
        efficient, allocating space linear in the number passed in to
        <literal>fib</literal>. It's easy enough to write a Fibonacci
        function that takes a constant amount of space.
      </para>
      <para>
        But memoization is a good approach for optimizing
        <literal>edit_distance</literal>, and we can apply the same
        approach we used on <literal>fib</literal> here. We will need to
        change <literal>edit_distance</literal> to take a pair of
        strings as a single argument, since <literal>memo_rec</literal>
        only works on single-argument functions. (We can always recover
        the original interface with a wrapper function.) With just that
        change and the addition of the <literal>memo_rec</literal> call,
        we can get a memoized version of
        <literal>edit_distance</literal>:
      </para>
      <programlisting language="ocaml">
# let edit_distance = memo_rec (fun edit_distance (s,t) -&gt;
    match String.length s, String.length t with
    | (0,x) | (x,0) -&gt; x
    | (len_s,len_t) -&gt;
      let s' = String.drop_suffix s 1 in
      let t' = String.drop_suffix t 1 in
      let cost_to_drop_both =
        if s.[len_s - 1] = t.[len_t - 1] then 0 else 1
      in
      List.reduce_exn ~f:Int.min
        [ edit_distance (s',t ) + 1
        ; edit_distance (s ,t') + 1
        ; edit_distance (s',t') + cost_to_drop_both
        ]) ;;
val edit_distance : string * string -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        This new version of <literal>edit_distance</literal> is much
        more efficient than the one we started with; the following call
        is about ten thousand times faster than it was without
        memoization.
      </para>
      <programlisting language="ocaml">
# time (fun () -&gt; edit_distance (&quot;OCaml 4.01&quot;,&quot;ocaml 4.01&quot;));;
Time: 2.14601ms
- : int = 2
</programlisting>
      <note> <title> 
      Limitations of <literal>let rec</literal>
      </title>
      <para>
        You might wonder why we didn't tie the recursive knot in
        <literal>memo_rec</literal> using <literal>let rec</literal>, as
        we did for <literal>make_rec</literal> earlier. Here's code that
        tries to do just that:
      </para>
      <programlisting language="ocaml">
# let memo_rec f_norec =
     let rec f = memoize (fun x -&gt; f_norec f x) in
     f
  ;;
      Characters 41-72:
       let rec f = memoize (fun x -&gt; f_norec f x) in
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: This kind of expression is not allowed as right-hand side of `let rec'
</programlisting>
      <para>
        OCaml rejects the definition because OCaml, as a strict
        language, has limits on what it can put on the right hand side
        of a <literal>let rec</literal>. In particular, imagine how the
        following code snippet would be compiled.
      </para>
      <programlisting language="ocaml">
let rec x = x + 1
</programlisting>
      <para>
        Note that <literal>x</literal> is an ordinary value, not a
        function. As such, it's not clear how to execute this code. In
        some sense, you could imagine it compiling down to an infinite
        loop, but there's no looping control structure to make that
        happen.
      </para>
      <para>
        To avoid such cases, the compiler only allows three possible
        constructs to show up on the right-hand side of a
        <literal>let rec</literal>: a function definition, a
        constructor, or the lazy keyword. This excludes some reasonable
        things, like our definition of <literal>memo_rec</literal>, but
        it also blocks things that don't make sense, like our definition
        of <literal>x</literal>.
      </para>
      <para>
        It's worth noting that these restrictions don't show up in a
        lazy language like Haskell. Indeed, we can make something like
        our definition of <literal>x</literal> work if we use OCaml's
        laziness:
      </para>
      <programlisting language="ocaml">
# let rec x = lazy (Lazy.force x + 1);;
val x : int lazy_t = &lt;lazy&gt;
</programlisting>
      <para>
        Of course, actually trying to compute this will fail. OCaml's
        <literal>lazy</literal> throws an exception when a lazy value
        tries to force itself as part of its own evaluation.
      </para>
      <programlisting language="ocaml">
# Lazy.force x;;
Exception: Lazy.Undefined.
</programlisting>
      <para>
        But we can also create useful recursive definitions with
        <literal>lazy</literal>. In particular, we can use laziness to
        make our definition of <literal>memo_rec</literal> work without
        explicit mutation.
      </para>
      <programlisting language="ocaml">
# let lazy_memo_rec f_norec x =
     let rec f = lazy (memoize (fun x -&gt; f_norec (Lazy.force f) x)) in
     (Lazy.force f) x
  ;;
val lazy_memo_rec : (('a -&gt; 'b) -&gt; 'a -&gt; 'b) -&gt; 'a -&gt; 'b = &lt;fun&gt;
# time (fun () -&gt; lazy_memo_rec fib_norec 40);;
Time: 0.298977ms
- : int = 102334155
</programlisting>
      <para>
        Laziness is more constrained than explicit mutation, and so in
        some cases can lead to code whose behavior is easier to think
        about.
      </para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="input-and-output">
    <title>Input and Output</title>
    <para>
      Imperative programming is about more than modifying in-memory
      data-structures. Any function that doesn't boil down to a
      deterministic transformation from its arguments to its return
      value is imperative in nature. That includes not only things that
      mutate your program's data, but also operations that interact with
      the world outside of your program. An important example of this
      kind of interaction is I/O, <emphasis>i.e.</emphasis>, operations
      for reading or writing data to things like files, terminal input
      and output, and network sockets.
    </para>
    <para>
      There are multiple I/O libraries in OCaml. In this section we'll
      discuss OCaml's buffered I/O library that can be used through the
      <literal>In_channel</literal> and <literal>Out_channel</literal>
      modules in Core. Other I/O primitives are also available through
      the <literal>Unix</literal> module in Core as well as
      <literal>Async</literal>, the asynchronous I/O library that is
      covered in
      <xref linkend="concurrent-programming-with-async"/>.
      Most of the functionality in Core's <literal>In_channel</literal>,
      <literal>Out_channel</literal> (and in Core's
      <literal>Unix</literal> module) derives from the standard library,
      but we'll use Core's interfaces here.
    </para>
    <sect2 id="terminal-io">
      <title>Terminal I/O</title>
      <para>
        OCaml's buffered I/O library is organized around two types:
        <literal>in_channel</literal>, for channels you read from, and
        <literal>out_channel</literal>, for channels you write to.
        <literal>In_channel</literal> and <literal>Out_channel</literal>
        modules only have direct support for channels corresponding to
        files and terminals; other kinds of channels can be created
        through the <literal>Unix</literal> module.
      </para>
      <para>
        We'll start our discussion of I/O by focusing on the terminal.
        Following the UNIX model, communication with the terminal is
        organized around three channels, which correspond to the three
        standard file descriptors in Unix:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>In_channel.stdin</literal>. The &quot;standard
            input&quot; channel. By default, input comes from the
            terminal, which handles keyboard input.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Out_channel.stdout</literal>. The &quot;standard
            output&quot; channel. By default, output written to
            <literal>stdout</literal> appears on the user terminal.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Out_channel.stderr</literal>. The &quot;standard
            error&quot; channel. This is similar to
            <literal>stdout</literal>, but is intended for error
            messages.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The values <literal>stdin</literal>, <literal>stdout</literal>
        and <literal>stderr</literal> are useful enough that they are
        also available in the global name-space directly, without having
        to go through the <literal>In_channel</literal> and
        <literal>Out_channel</literal> modules.
      </para>
      <para>
        Let's see this in action in a simple interactive application.
        The following program, <literal>time_converter</literal>,
        prompts the user for a timezone, and then prints out the current
        time in that timezone. Here, we use Core's
        <literal>Zone</literal> module for looking up a timezone, and
        the <literal>Time</literal> module for computing the current
        time and printing it out in the timezone in question.
      </para>
      <programlisting language="ocaml">
(* file: time_converter.ml *)
open Core.Std

let () =
  Out_channel.output_string stdout &quot;Pick a timezone: &quot;;
  Out_channel.flush stdout;
  match In_channel.input_line stdin with
  | None -&gt; failwith &quot;No timezone provided&quot;
  | Some zone_string -&gt;
    let zone = Zone.find_exn zone_string in
    let time_string = Time.to_localized_string (Time.now ()) zone in
    Out_channel.output_string stdout
      (String.concat
         [&quot;The time in &quot;;Zone.to_string zone;&quot; is &quot;; time_string;&quot;\n&quot;]);
    Out_channel.flush stdout
</programlisting>
      <para>
        We can build this program (using <literal>ocamlbuild</literal>
        with the <literal>_tags</literal> file described in
        <xref linkend="single-file-programs"/>) and run it,
        you'll see that it prompts you for input, as follows:
      </para>
      <programlisting>
$ ./time_converter.byte
Pick a timezone:
</programlisting>
      <para>
        You can then type in the name of a timezone and hit return, and
        it will print out the current time in the timezone in question.
      </para>
      <programlisting>
Pick a timezone: Europe/London
The time in Europe/London is 2013-03-06 02:15:13.602033
</programlisting>
      <para>
        We called <literal>Out_channel.flush</literal> on
        <literal>stdout</literal> because
        <literal>out_channel</literal>s are buffered, which is to say
        that OCaml doesn't immediately do a write every time you call
        <literal>output_string</literal>. Instead, writes are buffered
        until either enough has been written to trigger the flushing of
        the buffers, or until a flush is explicitly requested. This
        greatly increases the efficiency of the writing process, by
        reducing the number of system calls.
      </para>
      <para>
        Note that <literal>In_channel.input_line</literal> returns a
        <literal>string option</literal>, with <literal>None</literal>
        indicating that the input stream has ended
        (<emphasis>i.e.</emphasis>, an end-of-file condition).
        <literal>Out_channel.output_string</literal> is used to print
        the final output, and <literal>Out_channel.flush</literal> is
        called to flush that output to the screen. The final flush is
        not technically required, since the program ends after that
        instruction, at which point all remaining output will be flushed
        anyway, but the flush is nonetheless good practice.
      </para>
    </sect2>
    <sect2 id="formatted-output-with-printf">
      <title>Formatted output with <literal>printf</literal></title>
      <para>
        Generating output with functions like
        <literal>Out_channel.output_string</literal> is simple and easy
        to understand, but can be a bit verbose. OCaml also supports
        formatted output using the <literal>printf</literal> function,
        which is modeled after <literal>printf</literal> in the C
        standard library. <literal>printf</literal> takes a
        <emphasis>format string</emphasis> that describe what to print
        and how to format it, as well as arguments to be printed, as
        determined by the formatting directives embedded in the format
        string. So, for example, we can write:
      </para>
      <programlisting language="ocaml">
# printf &quot;%i is an integer, %F is a float, \&quot;%s\&quot; is a string\n&quot;
    3 4.5 &quot;five&quot;;;
3 is an integer, 4.5 is a float, &quot;five&quot; is a string
- : unit = ()
</programlisting>
      <para>
        Importantly, and unlike C's <literal>printf</literal>, the
        <literal>printf</literal> in OCaml is type-safe. In particular,
        if we provide an argument whose type doesn't match what's
        presented in the format string, we'll get a type error.
      </para>
      <programlisting language="ocaml">
# printf &quot;An integer: %i\n&quot; 4.5;;
Characters 26-29:
  printf &quot;An integer: %i\n&quot; 4.5;;
                            ^^^
Error: This expression has type float but an expression was expected of type
         int
</programlisting>
      <note> <title> 
      Understanding format strings
      </title>
      <para>
        The format strings used by <literal>printf</literal> turn out to
        be quite different from ordinary strings. This difference ties
        to the fact that OCaml format strings, unlike their equivalent
        in C, are type-safe. In particular, the compiler checks that the
        types referred to by the format string match the types of the
        rest of the arguments passed to <literal>printf</literal>.
      </para>
      <para>
        To check this, OCaml needs to analyze the contents of the format
        string at compile time, which means the format string needs to
        be available as a string literal at compile time. Indeed, if you
        try to pass an ordinary string to <literal>printf</literal>, the
        compiler will complain.
      </para>
      <programlisting language="ocaml">
# let fmt = &quot;%i is an integer, %F is a float, \&quot;%s\&quot; is a string\n&quot;;;
val fmt : string = &quot;%i is an integer, %F is a float, \&quot;%s\&quot; is a string\n&quot;
# printf fmt 3 4.5 &quot;five&quot;;;
Characters 7-10:
  printf fmt 3 4.5 &quot;five&quot;;;
         ^^^
Error: This expression has type string but an expression was expected of type
         ('a -&gt; 'b -&gt; 'c -&gt; 'd, out_channel, unit) format =
           ('a -&gt; 'b -&gt; 'c -&gt; 'd, out_channel, unit, unit, unit, unit)
           format6
</programlisting>
      <para>
        If OCaml infers that a given string literal is a format string,
        then it parses it at compile time as such, choosing its type in
        accordance with the formatting directives it finds. Thus, if we
        add a type-annotation indicating that the string we're defining
        is actually a format string, it will be interpreted as such:
      </para>
      <programlisting language="ocaml">
# let fmt : ('a, 'b, 'c) format =
    &quot;%i is an integer, %F is a float, \&quot;%s\&quot; is a string\n&quot;;;
  val fmt : (int -&gt; float -&gt; string -&gt; 'c, 'b, 'c) format = &lt;abstr&gt;
</programlisting>
      <para>
        And accordingly, we can pass it to <literal>printf</literal>.
      </para>
      <programlisting language="ocaml">
# printf fmt 3 4.5 &quot;five&quot;;;
3 is an integer, 4.5 is a float, &quot;five&quot; is a string
- : unit = ()
</programlisting>
      <para>
        If this looks different from everything else you've seen so far,
        that's because it is. This is really a special case in the
        type-system. Most of the time, you don't need to worry about
        this special handling of format strings --- you can just use
        <literal>printf</literal> and not worry about the details. But
        it's useful to keep the broad outlines of the story in the back
        of your head.
      </para>
      </note>
      <para>
        Now let's see how we can rewrite our time conversion program to
        be a little more concise using <literal>printf</literal>.
      </para>
      <programlisting language="ocaml">
(* file: time_converter.ml *)
open Core.Std

let () =
  printf &quot;Pick a timezone: %!&quot;;
  match In_channel.input_line stdin with
  | None -&gt; failwith &quot;No timezone provided&quot;
  | Some zone_string -&gt;
    let zone = Zone.find_exn zone_string in
    let time_string = Time.to_localized_string (Time.now ()) zone in
    printf &quot;The time in %s is %s.\n%!&quot; (Zone.to_string zone) time_string
</programlisting>
      <para>
        In the above example, we've used only two formatting directives:
        <literal>%s</literal>, for including a string, and
        <literal>%!</literal> which causes <literal>printf</literal> to
        flush the channel.
      </para>
      <para>
        <literal>printf</literal>'s formatting directives offer a
        significant amount of control, allowing you to specify things
        like:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            alignment and padding
          </para>
        </listitem>
        <listitem>
          <para>
            escaping rules for strings
          </para>
        </listitem>
        <listitem>
          <para>
            whether numbers should be formatted in decimal, hex or
            binary
          </para>
        </listitem>
        <listitem>
          <para>
            precision of float conversions
          </para>
        </listitem>
      </itemizedlist>
      <para>
        There are also <literal>printf</literal>-style functions that
        target outputs other than <literal>stdout</literal>, including:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>eprintf</literal>, which prints to
            <literal>stderr</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>fprintf</literal>, which prints to an arbitrary
            <literal>out_channel</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>sprintf</literal>, which returns a formatted string
          </para>
        </listitem>
      </itemizedlist>
      <para>
        All of this, and a good deal more, is described in the API
        documentation for the <literal>Printf</literal> module in the
        OCaml Manual.
      </para>
    </sect2>
    <sect2 id="file-io">
      <title>File I/O</title>
      <para>
        Another common use of <literal>in_channel</literal>s and
        <literal>out_channel</literal>s is for working with files.
        Here's a couple of functions, one that creates a file full of
        numbers, and the other that reads in such a file and returns the
        sum of those numbers.
      </para>
      <programlisting language="ocaml">
# let create_number_file filename numbers =
    let outc = Out_channel.create filename in
    List.iter numbers ~f:(fun x -&gt; fprintf outc &quot;%d\n&quot; x);
    Out_channel.close outc
  ;;
 val create_number_file : string -&gt; int Core.Std.List.t -&gt; unit = &lt;fun&gt;
# let sum_file filename =
     let file = In_channel.create filename in
     let numbers = List.map ~f:Int.of_string (In_channel.input_lines file) in
     let sum = List.fold ~init:0 ~f:(+) numbers in
     In_channel.close file;
     sum
  ;;
val sum_file : string -&gt; int = &lt;fun&gt;
# create_number_file &quot;numbers.txt&quot; [1;2;3;4;5];;
- : unit = ()
# sum_file &quot;numbers.txt&quot;;;
- : int = 15
</programlisting>
      <para>
        For both of these functions we followed the same basic sequence:
        we first create the channel, then use the channel, and finally
        close the channel. The closing of the channel is important,
        since without it, we won't release resources associated with the
        file back to the operating system.
      </para>
      <para>
        One problem with the code above is that if it throws an
        exception in the middle of its work, it won't actually close the
        file. If we try to read a file that doesn't actually contain
        numbers, we'll see such an error:
      </para>
      <programlisting language="ocaml">
# sum_file &quot;/etc/hosts&quot;;;
Exception: (Failure &quot;Int.of_string: \&quot;##\&quot;&quot;).
</programlisting>
      <para>
        And if we do this over and over in a loop, we'll eventually run
        out of file descriptors.
      </para>
      <programlisting language="ocaml">
# for i = 1 to 10000 do try ignore (sum_file &quot;/etc/hosts&quot;) with _ -&gt; () done;;
- : unit = ()
# sum_file &quot;numbers.txt&quot;;;
Exception: (Sys_error &quot;numbers.txt: Too many open files&quot;).
</programlisting>
      <para>
        And now, you'll need to restart your toplevel if you want to
        open any more files!
      </para>
      <para>
        To avoid this, we need to make sure that our code cleans up
        after itself. We can do this using the
        <literal>protect</literal> function described in
        <xref linkend="error-handling"/>, as follows.
      </para>
      <programlisting language="ocaml">
# let sum_file filename =
     let file = In_channel.create filename in
     protect ~f:(fun () -&gt;
         let numbers = List.map ~f:Int.of_string (In_channel.input_lines file) in
         List.fold ~init:0 ~f:(+) numbers)
       ~finally:(fun () -&gt; In_channel.close file)
  ;;
val sum_file : string -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        And now, the file descriptor leak is gone:
      </para>
      <programlisting language="ocaml">
# for i = 1 to 10000 do try ignore (sum_file &quot;/etc/hosts&quot;) with _ -&gt; () done;;
- : unit = ()
# sum_file &quot;numbers.txt&quot;;;
- : int = 15
</programlisting>
      <para>
        This is really an example of a more general complexity of
        imperative programming. When programming imperatively, you need
        to be quite careful to make sure that exceptions don't leave you
        in an awkward state.
      </para>
      <para>
        <literal>In_channel</literal> also supports some idioms that
        handle some of the details of this for you. For example, the
        <literal>with_file</literal> function takes a filename and a
        function for processing that file, and takes care of the opening
        and closing of the file transparently.
      </para>
      <programlisting language="ocaml">
# let sum_file filename =
     In_channel.with_file filename ~f:(fun file -&gt;
       let numbers = List.map ~f:Int.of_string (In_channel.input_lines file) in
       List.fold ~init:0 ~f:(+) numbers)
  ;;
val sum_file : string -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        Another misfeature of our implementation of
        <literal>sum_file</literal> is that we read the entire file into
        memory before processing it. For a large file, it's more
        efficient to process a line at a time. You can use the
        <literal>In_channel.fold_lines</literal> function to do just
        that.
      </para>
      <programlisting language="ocaml">
# let sum_file filename =
     In_channel.with_file filename ~f:(fun file -&gt;
       In_channel.fold_lines file ~init:0 ~f:(fun sum line -&gt;
         sum + Int.of_string line))
  ;;
val sum_file : string -&gt; int = &lt;fun&gt;
</programlisting>
      <para>
        This is just a taste of the functionality of
        <literal>In_channel</literal> and
        <literal>Out_channel</literal>. To get a fuller understanding
        you should review the API documentation for those modules.
      </para>
    </sect2>
  </sect1>
  <sect1 id="order-of-evaluation">
    <title>Order of evaluation</title>
    <para>
      The order in which expressions are evaluated is an important part
      of the definition of a programming language, and it is
      particularly important when programming imperatively. Most
      programming languages you're likely to have encountered are
      <emphasis>strict</emphasis>, and OCaml is too. In a strict
      language, when you bind an identifier to the result of some
      expression, the expression is evaluated before the variable is
      defined. Similarly, if you call a function on a set of arguments,
      those arguments are evaluated before they are passed to the
      function.
    </para>
    <para>
      Consider the following simple example. Here, we have a collection
      of angles and we want to determine if any of them have a negative
      `sin. The following snippet of code would answer that question.
    </para>
    <programlisting language="ocaml">
# let x = sin 120. in
  let y = sin 75.  in
  let z = sin 128. in
  List.exists ~f:(fun x -&gt; x &lt; 0.) [x;y;z]
  ;;
- : bool = true
</programlisting>
    <para>
      In some sense, we don't really need to compute the
      <literal>sin 128</literal>, because <literal>sin 75.</literal> is
      negative, so we could know the answer before even computing
      <literal>sin 128</literal>.
    </para>
    <para>
      It doesn't have to be this way. Using the <literal>lazy</literal>
      keyword, we can write the original computation so that
      <literal>sin 128.</literal> won't ever be computed.
    </para>
    <programlisting language="ocaml">
# let x = lazy (sin 120.) in
  let y = lazy (sin 75.)  in
  let z = lazy (sin 128.) in
  List.exists ~f:(fun x -&gt; Lazy.force x &lt; 0.) [x;y;z]
  ;;
- : bool = true
</programlisting>
    <para>
      We can confirm that fact by a few well placed
      <literal>printf</literal>s.
    </para>
    <programlisting language="ocaml">
# let x = lazy (printf &quot;1\n&quot;; sin 120.) in
  let y = lazy (printf &quot;2\n&quot;; sin 75.)  in
  let z = lazy (printf &quot;3\n&quot;; sin 128.) in
  List.exists ~f:(fun x -&gt; Lazy.force x &lt; 0.) [x;y;z]
  ;;
1
2
- : bool = true
</programlisting>
    <para>
      OCaml is strict by default for a good reason: Lazy evaluation and
      imperative programming generally don't mix well, because laziness
      makes it harder to reason about when a given side effect is going
      to occur. Understanding the order of side-effects is essential to
      reasoning about the behavior of an imperative program.
    </para>
    <para>
      In a strict language, we know that expressions that are bound by a
      sequence of let-bindings will be evaluated in the order that
      they're defined. But what about the evaluation order within a
      single expression? Officially, the answer is that evaluation order
      within an expression is undefined. In practice, OCaml has only one
      compiler, and that behavior is a kind of <emphasis>de
      facto</emphasis> standard. Unfortunately, the evaluation order in
      this case is often the oppose of what one might expect.
    </para>
    <para>
      Consider the following example.
    </para>
    <programlisting language="ocaml">
# List.exists ~f:(fun x -&gt; x &lt; 0.)
    [ (printf &quot;1\n&quot;; sin 120.);
      (printf &quot;2\n&quot;; sin 75.);
      (printf &quot;3\n&quot;; sin 128.); ]
  ;;
3
2
1
- : bool = true
</programlisting>
    <para>
      Here, you can see that the sub-expression that came last was
      actually evaluated first! This is generally the case for many
      different kinds of expressions. If you want to make sure of the
      evaluation order of different sub-expressions, you should express
      them as a series of <literal>let</literal> bindings.
    </para>
  </sect1>
  <sect1 id="side-effects-and-weak-polymorphism">
    <title>Side-effects and weak polymorphism</title>
    <para>
      Consider the following simple imperative function.
    </para>
    <programlisting language="ocaml">
# let remember =
    let cache = ref None in
    (fun x -&gt;
       match !cache with
       | Some y -&gt; y
       | None -&gt; cache := Some x; x)
  ;;
</programlisting>
    <para>
      <literal>remember</literal> simply caches the first value that's
      passed to it, returning that value on every call. Note that we've
      carefully written <literal>remember</literal> so that
      <literal>cache</literal> is created and initialized once, and is
      shared across invocations of <literal>remember</literal>.
    </para>
    <para>
      <literal>remember</literal> is not a terribly useful function, but
      it raises an interesting question: what type should it have?
    </para>
    <para>
      On its first call, <literal>remember</literal> returns the same
      value its passed, which means its input type and return type
      should match. Accordingly, <literal>remember</literal> should have
      the type <literal>t -&gt; t</literal> for some type
      <literal>t</literal>. There's nothing about
      <literal>remember</literal> that ties the choice of
      <literal>t</literal> to any particular type, so you might expect
      OCaml to generalize, replacing <literal>t</literal> with a
      polymorphic type variable. It's this kind of generalization that
      gives us polymorphic types in the first place. The identity
      function, as an example, gets a polymorphic type in this way.
    </para>
    <programlisting language="ocaml">
# let identity x = x;;
val identity : 'a -&gt; 'a = &lt;fun&gt;
# identity 3;;
- : int = 3
# identity &quot;five&quot;;;
- : string = &quot;five&quot;
</programlisting>
    <para>
      As you can see, the polymorphic type of
      <literal>identity</literal> lets it operate on values with
      different types.
    </para>
    <para>
      This is not what happens with <literal>remember</literal>, though.
      Here's the type that OCaml infers for remember, which looks
      almost, but not quite, like the type of the identity function.
    </para>
    <programlisting language="ocaml">
val remember : '_a -&gt; '_a = &lt;fun&gt;
</programlisting>
    <para>
      The underscore in the type variable <literal>'_a</literal> tells
      us that the variable is only <emphasis>weakly
      polymorphic</emphasis>, which is to say that it can be used with
      any <emphasis>single</emphasis> type. That makes sense, because,
      unlike <literal>identity</literal>, <literal>remember</literal>
      always returns the value it was passed on its first invocation,
      which means it can only be used with one type.
    </para>
    <para>
      OCaml will convert a weakly polymorphic variable to a concrete
      type as soon as it gets a clue as to what concrete type it is to
      be used as, as you can see below.
    </para>
    <programlisting language="ocaml">
# let remember_three () = remember 3;;
val remember_three : unit -&gt; int = &lt;fun&gt;
# remember;;
- : int -&gt; int = &lt;fun&gt;
# remember &quot;avocado&quot;;;
Characters 9-18:
  remember &quot;avocado&quot;;;
           ^^^^^^^^^
Error: This expression has type string but an expression was expected of type
         int
</programlisting>
    <para>
      Note that the type of <literal>remember</literal> was settled by
      the definition of <literal>remember_three</literal>, even though
      <literal>remember_three</literal> was never called!
    </para>
    <sect2 id="the-value-restriction">
      <title>The Value Restriction</title>
      <para>
        So, when does the compiler infer weakly polymorphic types? As
        we've seen, we need weakly polymorphic types when a value of
        unknown type is stored in a persistent mutable cell. Because the
        type-system isn't precise enough to determine all cases where
        this might happen, OCaml uses a rough rule to flag cases where
        it's sure there are no persistent refs, and to only infer
        polymorphic types in those cases. This rule is called
        <emphasis>the value restriction</emphasis>.
      </para>
      <para>
        The core of the value restriction is the observation that some
        kinds of simple values by their nature can't contain refs,
        including:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Constants (<emphasis>i.e.</emphasis>, things like integer
            and floating point literals)
          </para>
        </listitem>
        <listitem>
          <para>
            Constructors that contain only other simple values
          </para>
        </listitem>
        <listitem>
          <para>
            Function declarations, <emphasis>i.e.</emphasis>,
            expressions that begin with <literal>fun</literal> or
            <literal>function</literal>, or, the equivalent let binding,
            <literal>let f x = ...</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>let</literal> bindings of the form
            <literal>let var = &lt;expr1&gt; in &lt;expr2&gt;</literal>,
            where both <literal>&lt;expr1&gt;</literal> and
            <literal>&lt;expr2&gt;</literal> are simple values.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Thus, the following expression is a simple value, and as a
        result, the types of values contained within it are allowed to
        be polymorphic.
      </para>
      <programlisting language="ocaml">
# (fun x -&gt; [x;x]);;
- : 'a -&gt; 'a list = &lt;fun&gt;
</programlisting>
      <para>
        But, if we write down an expression that isn't a simple value by
        the above definition, we'll get different results. For example,
        consider what happens if we try to memoize the function defined
        above.
      </para>
      <programlisting language="ocaml">
# memoize (fun x -&gt; [x;x]);;
- : '_a -&gt; '_a list = &lt;fun&gt;
</programlisting>
      <para>
        The memoized version of the function does in fact need to be
        restricted to a single type, because it uses mutable state
        behind the scenes to cache previous invocations of the function
        it has passed. But OCaml would make the same determination even
        if the function in question did no such thing. Consider this
        example:
      </para>
      <programlisting language="ocaml">
# identity (fun x -&gt; [x;x]);;
- : '_a -&gt; '_a list = &lt;fun&gt;
</programlisting>
      <para>
        It would be safe to infer a weakly polymorphic variable here,
        but because OCaml's type system doesn't distinguish between pure
        and impure functions, it can't separate those two cases.
      </para>
      <para>
        The value restriction doesn't require that there is no mutable
        state, only that there is no <emphasis>persistent</emphasis>
        mutable state that could share values between uses of the same
        function. Thus, a function that produces a fresh reference every
        time it's called can have a fully polymorphic type:
      </para>
      <programlisting language="ocaml">
# let f () = ref None;;
val f : unit -&gt; 'a option ref = &lt;fun&gt;
</programlisting>
      <para>
        But a function that has a mutable cache that persists across
        calls, like memoize, can only be weakly polymorphic.
      </para>
    </sect2>
    <sect2 id="partial-application-and-the-value-restriction">
      <title>Partial application and the value restriction</title>
      <para>
        Most of the time, when the value restriction kicks in, it's for
        a good reason, <emphasis>i.e.</emphasis>, it's because the value
        in question can actually only safely be used with a single type.
        But sometimes, the value restriction kicks in when you don't
        want it. The most common such case is partially applied
        functions. A partially applied function, like any function
        application, is not a simple value, and as such, functions
        created by partial application are sometimes less general than
        you might expect.
      </para>
      <para>
        Consider the <literal>List.init</literal> function, which is
        used for creating lists where each element is created by calling
        a function on the index of that element.
      </para>
      <programlisting language="ocaml">
# List.init;;
- : int -&gt; f:(int -&gt; 'a) -&gt; 'a list = &lt;fun&gt;
# List.init 10 ~f:Int.to_string;;
- : string list = [&quot;0&quot;; &quot;1&quot;; &quot;2&quot;; &quot;3&quot;; &quot;4&quot;; &quot;5&quot;; &quot;6&quot;; &quot;7&quot;; &quot;8&quot;; &quot;9&quot;]
</programlisting>
      <para>
        Imagine we wanted to create a specialized version of
        <literal>List.init</literal> that always created lists of length
        10. We could do that using partial application, as follows.
      </para>
      <programlisting language="ocaml">
# let list_init_10 = List.init 10;;
val list_init_10 : f:(int -&gt; '_a) -&gt; '_a list = &lt;fun&gt;
</programlisting>
      <para>
        As you can see, we now infer a weakly polymorphic type for the
        resulting function, and for good reason. There's nothing that
        tells us that <literal>List.init</literal> isn't creating a
        persistent <literal>ref</literal> somewhere inside of it that
        would be shared across multiple calls to
        <literal>list_init_10</literal>. We can eliminate this
        possibility, and at the same time get the compiler to infer a
        polymorphic type, by using explicit variables rather than
        partial application.
      </para>
      <programlisting language="ocaml">
# let list_init_10 ~f = List.init 10 ~f;;
val list_init_10 : f:(int -&gt; 'a) -&gt; 'a list = &lt;fun&gt;
</programlisting>
      <para>
        This transformation is referred to as <emphasis>eta
        expansion</emphasis>, and is often useful to resolve problems
        that arise from the value restriction.
      </para>
    </sect2>
    <sect2 id="relaxing-the-value-restriction">
      <title>Relaxing the value restriction</title>
      <para>
        OCaml is actually a little better at inferring polymorphic types
        than is implied above. The value restriction as we described it
        above is basically a syntactic check: there are a few operations
        that you can do that count as simple values, and anything that's
        a simple value can be generalized.
      </para>
      <para>
        But OCaml actually has a relaxed version of the value
        restriction that can make some use of type information to allow
        polymorphic types for things that are not simple values.
      </para>
      <para>
        For example, we saw above that a function application, even a
        simple application of the identity function, is not a simple
        value and thus can turn a polymorphic value into a weakly
        polymorphic one.
      </para>
      <programlisting language="ocaml">
# identity (fun x -&gt; [x;x]);;
- : '_a -&gt; '_a list = &lt;fun&gt;
</programlisting>
      <para>
        But that's not always the case. When the type of the returned
        value is immutable, then OCaml can typically infer a fully
        polymorphic type.
      </para>
      <programlisting language="ocaml">
# identity [];;
- : 'a list = []
</programlisting>
      <para>
        On the other hand, if the returned type is potentially mutable,
        then the result will be weakly polymorphic.
      </para>
      <programlisting language="ocaml">
# [||];;
- : 'a array = [||]
# identity [||];;
- : '_a array = [||]
</programlisting>
      <para>
        A more important example of this comes up when defining abstract
        data types. Consider the following simple data-structure for an
        immutable list type that supports constant-time concatenation.
      </para>
      <programlisting language="ocaml">
# module Concat_list : sig
    type 'a t
    val empty : 'a t
    val singleton : 'a -&gt; 'a t
    val concat  : 'a t -&gt; 'a t -&gt; 'a t  (* constant time *)
    val to_list : 'a t -&gt; 'a list       (* linear time   *)
  end = struct

    type 'a t = Empty | Singleton of 'a | Concat of 'a t * 'a t

    let empty = Empty
    let singleton x = Singleton x
    let concat x y = Concat (x,y)

    let rec to_list_with_tail t tail =
      match t with
      | Empty -&gt; tail
      | Singleton x -&gt; x :: tail
      | Concat (x,y) -&gt; to_list_with_tail x (to_list_with_tail y tail)

    let to_list t =
      to_list_with_tail t []

  end;;
 module Concat_list :
  sig
    type 'a t
    val empty : 'a t
    val singleton : 'a -&gt; 'a t
    val concat : 'a t -&gt; 'a t -&gt; 'a t
    val to_list : 'a t -&gt; 'a list
  end
</programlisting>
      <para>
        The details of the implementation don't matter so much, but it's
        important to note that a <literal>Concat_list.t</literal> is
        unquestionably an immutable value. However, when it comes to the
        value restriction, OCaml treats it as if it were mutable.
      </para>
      <programlisting language="ocaml">
# Concat_list.empty;;
- : 'a Concat_list.t = &lt;abstr&gt;
# identity Concat_list.empty;;
- : '_a Concat_list.t = &lt;abstr&gt;
</programlisting>
      <para>
        The issue here is that the signature, by virtue of being
        abstract, has obscured the fact that
        <literal>Concat_list.t</literal> is in fact an immutable
        data-type. We can resolve this in one of two ways: either by
        making the type concrete (<emphasis>i.e.</emphasis>, exposing
        the implementation in the <literal>mli</literal>), which is
        often not desirable; or by marking the type variable in question
        as <emphasis>covariant</emphasis>. We'll learn more about
        variance and covariance in
        <xref linkend="object-oriented-programming"/>, but for
        now, you can think of it as an annotation which can be put in
        the interface of a pure data structure.
      </para>
      <para>
        Thus, if we replace <literal>type 'a t</literal> in the
        interface with <literal>type +'a t</literal>, that will make it
        explicit in the interface that the data-structure doesn't
        contain any persistent references to values of type
        <literal>'a</literal>, at which point, OCaml can infer
        polymorphic types for expressions of this type that are not
        simple values.
      </para>
      <programlisting language="ocaml">
# identity Concat_list.empty;;
- : 'a Concat_list.t = &lt;abstr&gt;
</programlisting>
    </sect2>
  </sect1>
</chapter><chapter id="functors">
  <title>Functors</title>
  <para>
    Up until now, we've seen OCaml's module system play an important but
    limited role. In particular, we've seen them as a mechanism for
    organizing code into units with specified interfaces. But modules
    can do much more than that, acting as a powerful toolset for
    building generic code and structuring large-scale systems. Much of
    that power comes from functors.
  </para>
  <para>
    Functors are, roughly speaking, functions from modules to modules,
    and they can be used to solve a variety of code-structuring
    problems, including:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        <emphasis>Dependency injection</emphasis>, or making the
        implementations of some components of a system swappable. This
        is particularly useful when you want to mock up parts of your
        system for testing and simulation purposes.
      </para>
    </listitem>
    <listitem>
      <para>
        <emphasis>Auto-extension of modules</emphasis>. Functors give
        you a way of extending existing modules with new functionality
        in a standardized way. For example, you might want to add a slew
        of comparison operators derived from a base comparison function.
        To do this by hand would require a lot of repetitive code for
        each type, but functors let you write this logic just once and
        apply it to many different types.
      </para>
    </listitem>
    <listitem>
      <para>
        <emphasis>Instantiating modules with state</emphasis>. Modules
        can contain mutable state, and that means that you'll
        occasionally want to have multiple instantiations of a
        particular module, each with its own separate and independent
        mutable state. Functors let you automate the construction of
        such modules.
      </para>
    </listitem>
  </itemizedlist>
  <sect1 id="a-trivial-example">
    <title>A trivial example</title>
    <para>
      We'll start by considering the simplest possible example: a
      functor for incrementing an integer. More precisely, we'll create
      a functor that takes a module containing a single integer variable
      <literal>x</literal>, and returns a new module with
      <literal>x</literal> incremented by one. This is in no way a
      useful example, but it's a useful way to walk through the basic
      mechanics of functors.
    </para>
    <programlisting language="ocaml">
# module type X_int = sig val x : int end;;
module type X_int = sig val x : int end
# module Increment (M:X_int) : X_int = struct
    let x = M.x + 1
  end;;
module Increment : functor (M : X_int) -&gt; X_int
</programlisting>
    <para>
      One thing that immediately jumps out about functors is that
      they're considerably more heavyweight syntactically than ordinary
      functions. For one thing, functors require explicit (module) type
      annotations, which ordinary functions do not. Here, we've
      specified the module type <literal>X_int</literal> for both the
      input and output of the functor. Technically, only the type on the
      input is mandatory, although in practice, one often specifies
      both.
    </para>
    <para>
      The following shows what happens when we omit the module type for
      the output of the functor.
    </para>
    <programlisting language="ocaml">
# module Increment (M:X_int) = struct
    let x = M.x + 1
  end;;
module Increment : functor (M : X_int) -&gt; sig val x : int end
</programlisting>
    <para>
      We can see that the inferred module type of the output is now
      written out explicitly, rather than being a reference to the named
      signature <literal>X_int</literal>.
    </para>
    <para>
      We can now use <literal>Increment</literal> to define new modules.
    </para>
    <programlisting language="ocaml">
# module Three = struct let x = 3 end;;
  module Three : sig val x : int end
# module Four = Increment(Three);;
module Four : sig val x : int end
# Four.x - Three.x;;
- : int = 1
</programlisting>
    <para>
      In this case, we applied <literal>Increment</literal> to a module
      whose signature is exactly equal to <literal>X_int</literal>. But
      we can apply <literal>Increment</literal> to any module that
      <emphasis>satisfies</emphasis> the interface
      <literal>X_int</literal>, in the same way that the contents of an
      <literal>ml</literal> file must satisfy the
      <literal>mli</literal>. That means that the module type can omit
      some information available in the module, either by dropping
      fields or by leaving some fields abstract. Here's an example:
    </para>
    <programlisting language="ocaml">
# module Three_and_more = struct
    let x = 3
    let y = &quot;three&quot;
  end;;
module Three_and_more : sig val x : int val y : string end
# module Four = Increment(Three_and_more);;
module Four : sig val x : int end
</programlisting>
  </sect1>
  <sect1 id="a-bigger-example-computing-with-intervals">
    <title>A bigger example: computing with intervals</title>
    <para>
      Let's consider a more realistic example of how to use functors: a
      library for computing with intervals. This library will be
      functorized over the type of the endpoints of the intervals and
      the ordering of those endpoints.
    </para>
    <para>
      First we'll define a module type that captures the information
      we'll need about the endpoints. This interface, which we'll call
      <literal>Comparable</literal>, contains just two things: a
      comparison function, and the type of the values to be compared.
    </para>
    <programlisting language="ocaml">
# module type Comparable = sig
    type t
    val compare : t -&gt; t -&gt; int
  end ;;
module type Comparable = sig type t val compare : t -&gt; t -&gt; int end
</programlisting>
    <para>
      The comparison function follows the standard OCaml idiom for such
      functions, returning <literal>0</literal> if the two elements are
      equal, a positive number if the first element is larger than the
      second, and a negative number if the first element is smaller than
      the second. Thus, we could rewrite the standard comparison
      functions on top of <literal>compare</literal> as shown below.
    </para>
    <programlisting language="ocaml">
compare x y &lt; 0     (* x &lt; y *)
compare x y = 0     (* x = y *)
compare x y &gt; 0     (* x &gt; y *)
</programlisting>
    <para>
      The functor for creating the interval module is shown below. We
      represent an interval with a variant type, which is either
      <literal>Empty</literal> or <literal>Interval (x,y)</literal>,
      where <literal>x</literal> and <literal>y</literal> are the bounds
      of the interval.
    </para>
    <programlisting language="ocaml">
# module Make_interval(Endpoint : Comparable) = struct

    type t = | Interval of Endpoint.t * Endpoint.t
             | Empty

    let create low high =
      if Endpoint.compare low high &gt; 0 then Empty
      else Interval (low,high)

    let is_empty = function
      | Empty -&gt; true
      | Interval _ -&gt; false

    let contains t x =
      match t with
      | Empty -&gt; false
      | Interval (l,h) -&gt;
        Endpoint.compare x l &gt;= 0 &amp;&amp; Endpoint.compare x h &lt;= 0

    let intersect t1 t2 =
      let min x y = if Endpoint.compare x y &lt;= 0 then x else y in
      let max x y = if Endpoint.compare x y &gt;= 0 then x else y in
      match t1,t2 with
      | Empty, _ | _, Empty -&gt; Empty
      | Interval (l1,h1), Interval (l2,h2) -&gt;
        create (max l1 l2) (min h1 h2)

  end ;;
module Make_interval :
  functor (Endpoint : Comparable) -&gt;
    sig
      type t = Interval of Endpoint.t * Endpoint.t | Empty
      val create : Endpoint.t -&gt; Endpoint.t -&gt; t
      val is_empty : t -&gt; bool
      val contains : t -&gt; Endpoint.t -&gt; bool
      val intersect : t -&gt; t -&gt; t
    end
</programlisting>
    <para>
      We can instantiate the functor by applying it to a module with the
      right signature. In the following, we provide the functor input as
      an anonymous module.
    </para>
    <programlisting language="ocaml">
# module Int_interval =
    Make_interval(struct
      type t = int
      let compare = Int.compare
    end);;
module Int_interval :
  sig
    type t = Interval of int * int | Empty
    val create : int -&gt; int -&gt; t
    val is_empty : t -&gt; bool
    val contains : t -&gt; int -&gt; bool
    val intersect : t -&gt; t -&gt; t
  end
</programlisting>
    <para>
      If the input interface for your functor is aligned with the
      standards of the libraries you use, then you don't need to
      construct a custom module to feed to the functor. In this case, we
      can directly use the <literal>Int</literal> or
      <literal>String</literal> modules provided by Core.
    </para>
    <programlisting language="ocaml">
# module Int_interval = Make_interval(Int) ;;
# module String_interval = Make_interval(String) ;;
</programlisting>
    <para>
      This works because many modules in Core, including
      <literal>Int</literal> and <literal>String</literal>, satisfy an
      extended version of the <literal>Comparable</literal> signature
      described above. Such standardized signatures are good practice,
      both because they makes functors easier to use, and because they
      make your codebase generally easier to navigate.
    </para>
    <para>
      Now we can use the newly defined <literal>Int_interval</literal>
      module like any ordinary module.
    </para>
    <programlisting language="ocaml">
# let i1 = Int_interval.create 3 8;;
val i1 : Int_interval.t = Int_interval.Interval (3, 8)
# let i2 = Int_interval.create 4 10;;
val i2 : Int_interval.t = Int_interval.Interval (4, 10)
# Int_interval.intersect i1 i2;;
- : Int_interval.t = Int_interval.Interval (4, 8)
</programlisting>
    <para>
      This design gives us the freedom to use any comparison function we
      want for comparing the endpoints. We could, for example, create a
      type of int interval with the order of the comparison reversed, as
      follows:
    </para>
    <programlisting language="ocaml">
# module Rev_int_interval =
    Make_interval(struct
      type t = int
      let compare x y = Int.compare y x
    end);;
</programlisting>
    <para>
      The behavior of <literal>Rev_int_interval</literal> is of course
      different from <literal>Int_interval</literal>, as we can see
      below.
    </para>
    <programlisting language="ocaml">
# let interval = Int_interval.create 4 3;;
val interval : Int_interval.t = Int_interval.Empty
# let rev_interval = Rev_int_interval.create 4 3;;
val rev_interval : Rev_int_interval.t = Rev_int_interval.Interval (4, 3)
</programlisting>
    <para>
      Importantly, <literal>Rev_int_interval.t</literal> is a different
      type than <literal>Int_interval.t</literal>, even though its
      physical representation is the same. Indeed, the type system will
      prevent us from confusing them.
    </para>
    <programlisting language="ocaml">
# Int_interval.contains rev_interval 3;;
Characters 22-34:
  Int_interval.contains rev_interval 3;;
                        ^^^^^^^^^^^^
Error: This expression has type Rev_int_interval.t
       but an expression was expected of type
         Int_interval.t = Make_interval(Int).t
</programlisting>
    <para>
      This is important, because confusing the two kinds of intervals
      would be a semantic error, and it's an easy one to make. The
      ability of functors to mint new types is a useful trick that comes
      up a lot.
    </para>
    <sect2 id="making-the-functor-abstract">
      <title>Making the functor abstract</title>
      <para>
        There's a problem with <literal>Make_interval</literal>. The
        code we wrote depends on the invariant that the upper bound of
        an interval is greater than its lower bound, but that invariant
        can be violated. The invariant is enforced by the create
        function, but because <literal>Interval.t</literal> is not
        abstract, we can bypass the <literal>create</literal> function.
      </para>
      <programlisting language="ocaml">
# Int_interval.create 4 3;; (* going through create *)
- : Int_interval.t = Int_interval.Empty
# Int_interval.Interval (4,3);; (* bypassing create *)
- : Int_interval.t = Int_interval.Interval (4, 3)
</programlisting>
      <para>
        To make <literal>Int_interval.t</literal> abstract, we need to
        apply an interface to the output of the
        <literal>Make_interval</literal>. Here's an explicit interface
        that we can use for that purpose.
      </para>
      <programlisting language="ocaml">
# module type Interval_intf = sig
   type t
   type endpoint
   val create : endpoint -&gt; endpoint -&gt; t
   val is_empty : t -&gt; bool
   val contains : t -&gt; endpoint -&gt; bool
   val intersect : t -&gt; t -&gt; t
  end;;
</programlisting>
      <para>
        This interface includes the type <literal>endpoint</literal> to
        give us a way of referring to the endpoint type. Given this
        interface, we can redo our definition of
        <literal>Make_interval</literal>. Notice that we added the type
        <literal>endpoint</literal> to the implementation of the module
        to match <literal>Interval_intf</literal>.
      </para>
      <programlisting language="ocaml">
# module Make_interval(Endpoint : Comparable) : Interval_intf = struct

    type endpoint = Endpoint.t
    type t = | Interval of Endpoint.t * Endpoint.t
             | Empty

    ....

  end ;;
module Make_interval : functor (Endpoint : Comparable) -&gt; Interval_intf
</programlisting>
    </sect2>
    <sect2 id="sharing-constraints">
      <title>Sharing constraints</title>
      <para>
        The resulting module is abstract, but it's unfortunately too
        abstract. In particular, we haven't exposed the type
        <literal>endpoint</literal>, which means that we can't even
        construct an interval anymore.
      </para>
      <programlisting language="ocaml">
# module Int_interval = Make_interval(Int);;
module Int_interval : Interval_intf
# Int_interval.create 3 4;;
Characters 20-21:
  Int_interval.create 3 4;;
                      ^
Error: This expression has type int but an expression was expected of type
         Int_interval.endpoint
</programlisting>
      <para>
        To fix this, we need to expose the fact that
        <literal>endpoint</literal> is equal to <literal>Int.t</literal>
        (or more generally, <literal>Endpoint.t</literal>, where
        <literal>Endpoint</literal> is the argument to the functor). One
        way of doing this is through a <emphasis>sharing
        constraint</emphasis>, which allows you to tell the compiler to
        expose the fact that a given type is equal to some other type.
        The syntax for a simple sharing constraint is as follows.
      </para>
      <programlisting language="ocaml">
S with type s = t
</programlisting>
      <para>
        where <literal>S</literal> is a module type,
        <literal>s</literal> is a type inside of <literal>S</literal>,
        and <literal>t</literal> is a type defined outside of
        <literal>S</literal>. The result of this expression is a new
        signature that's been modified so that it exposes the fact that
        <literal>s</literal> is equal to <literal>t</literal>. We can
        use a sharing constraint to create a specialized version of
        <literal>Interval_intf</literal> for integer intervals.
      </para>
      <programlisting language="ocaml">
# module type Int_interval_intf =
    Interval_intf with type endpoint = int;;
module type Int_interval_intf =
  sig
    type t
    type endpoint = int
    val create : endpoint -&gt; endpoint -&gt; t
    val is_empty : t -&gt; bool
    val contains : t -&gt; endpoint -&gt; bool
    val intersect : t -&gt; t -&gt; t
  end
</programlisting>
      <para>
        And we can also use it in the context of a functor, where the
        right-hand side of the sharing constraint is an element of the
        functor argument. Thus, we expose an equality between a type in
        the output of the functor (in this case, the type
        <literal>endpoint</literal>) and a type in its input
        (<literal>Endpoint.t</literal>).
      </para>
      <programlisting language="ocaml">
# module Make_interval(Endpoint : Comparable)
      : Interval_intf with type endpoint = Endpoint.t = struct

    type endpoint = Endpoint.t
    type t = | Interval of Endpoint.t * Endpoint.t
             | Empty

    ...

  end ;;
module Make_interval :
  functor (Endpoint : Comparable) -&gt;
    sig
      type t
      type endpoint = Endpoint.t
      val create : endpoint -&gt; endpoint -&gt; t
      val is_empty : t -&gt; bool
      val contains : t -&gt; endpoint -&gt; bool
      val intersect : t -&gt; t -&gt; t
    end
</programlisting>
      <para>
        So now, the interface is as it was, except that
        <literal>endpoint</literal> is now known to be equal to
        <literal>Endpoint.t</literal>. As a result of that type
        equality, we can now do things like construct intervals again.
      </para>
      <programlisting language="ocaml">
# let i = Int_interval.create 3 4;;
val i : Int_interval.t = &lt;abstr&gt;
# Int_interval.contains i 5;;
- : bool = false
</programlisting>
    </sect2>
    <sect2 id="destructive-substitution">
      <title>Destructive substitution</title>
      <para>
        Sharing constraints basically do the job, but they have some
        downsides. In particular, we've now been stuck with the useless
        type declaration of <literal>endpoint</literal> that clutters up
        both the interface and the implementation. A better solution
        would be to modify the <literal>Interval_intf</literal>
        signature by replacing <literal>endpoint</literal> with
        <literal>Endpoint.t</literal> everywhere it shows up, and
        deleting the definition of <literal>endpoint</literal> from the
        signature. We can do just this using what's called
        <emphasis>destructive substitution</emphasis>. Here's the basic
        syntax.
      </para>
      <programlisting language="ocaml">
S with type s := t
</programlisting>
      <para>
        The following shows how we could use this with
        <literal>Make_interval</literal>.
      </para>
      <programlisting language="ocaml">
# module type Int_interval_intf =
    Interval_intf with type endpoint := int;;
module type Int_interval_intf =
  sig
    type t
    val create : int -&gt; int -&gt; t
    val is_empty : t -&gt; bool
    val contains : t -&gt; int -&gt; bool
    val intersect : t -&gt; t -&gt; t
  end
</programlisting>
      <para>
        There's now no <literal>endpoint</literal> type: all of its
        occurrences of have been replaced by <literal>int</literal>. As
        with sharing constraints, we can also use this in the context of
        a functor.
      </para>
      <programlisting language="ocaml">
# module Make_interval(Endpoint : Comparable)
    : Interval_intf with type endpoint := Endpoint.t =
  struct

    type t = | Interval of Endpoint.t * Endpoint.t
             | Empty

    ....

  end ;;
module Make_interval :
  functor (Endpoint : Comparable) -&gt;
    sig
      type t
      val create : Endpoint.t -&gt; Endpoint.t -&gt; t
      val is_empty : t -&gt; bool
      val contains : t -&gt; Endpoint.t -&gt; bool
      val intersect : t -&gt; t -&gt; t
    end
</programlisting>
      <para>
        The interface is precisely what we want, and we no longer need
        to define the <literal>endpoint</literal> type alias in the body
        of the module. If we instantiate this module, we'll see that it
        works properly: we can construct new intervals, but
        <literal>t</literal> is abstract, and so we can't directly
        access the constructors and violate the invariants of the data
        structure.
      </para>
      <programlisting language="ocaml">
# module Int_interval = Make_interval(Int);;
# Int_interval.create 3 4;;
- : Int_interval.t = &lt;abstr&gt;
# Int_interval.Interval (4,3);;
Characters 0-27:
  Int_interval.Interval (4,3);;
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: Unbound constructor Int_interval.Interval
</programlisting>
    </sect2>
    <sect2 id="using-multiple-interfaces">
      <title>Using multiple interfaces</title>
      <para>
        Another feature that we might want for our interval module is
        the ability to <emphasis>serialize</emphasis>,
        <emphasis>i.e.</emphasis>, to be able to read and write
        intervals as a stream of bytes. In this case, we'll do this by
        converting to and from <emphasis>s-expressions</emphasis>. An
        s-expression is essentially a parenthesized expression whose
        atoms are strings, and it is a serialization format that is used
        commonly in Core. Here's an example.
      </para>
      <programlisting language="ocaml">
# Sexp.of_string &quot;(This is (an s-expression))&quot;;;
- : Sexp.t = (This is (an s-expression))
</programlisting>
      <para>
        Core comes with a syntax extension called
        <literal>sexplib</literal> which will auto-generate s-expression
        conversion functions from a type declaration. These convereters
        will be generated for any type that one attaches
        <literal>with sexp</literal> to. Thus, we can write:
      </para>
      <programlisting language="ocaml">
# type some_type = int * string list with sexp;;
type some_type = int * string list
val some_type_of_sexp : Sexp.t -&gt; int * string list = &lt;fun&gt;
val sexp_of_some_type : int * string list -&gt; Sexp.t = &lt;fun&gt;
# sexp_of_some_type (33, [&quot;one&quot;; &quot;two&quot;]);;
- : Sexp.t = (33 (one two))
# some_type_of_sexp (Sexp.of_string &quot;(44 (five six))&quot;);;
- : int * string list = (44, [&quot;five&quot;; &quot;six&quot;])
</programlisting>
      <para>
        We'll discuss s-expressions and <literal>sexplib</literal> in
        more detail in
        <xref linkend="data-serialization-with-s-expressions"/>
        But for now, let's see what happens if attach the
        <literal>with sexp</literal> declaration to the definition of
        <literal>t</literal> within the functor.
      </para>
      <programlisting language="ocaml">
# module Make_interval(Endpoint : Comparable)
    : Interval_intf with type endpoint := Endpoint.t = struct

    type t = | Interval of Endpoint.t * Endpoint.t
             | Empty
    with sexp

    ....

  end ;;
Characters 120-123:
        type t = | Interval of Endpoint.t * Endpoint.t
                               ^^^^^^^^^^
Error: Unbound value Endpoint.t_of_sexp
</programlisting>
      <para>
        The problem is that <literal>with sexp</literal> adds code for
        defining the s-expression converters, and that code assumes that
        <literal>Endpoint</literal> has the appropriate sexp-conversion
        functions for <literal>Endpoint.t</literal>. But all we know
        about <literal>Endpoint</literal> is that it satisfies the
        <literal>Comparable</literal> interface, which doesn't say
        anything about s-expressions.
      </para>
      <para>
        Happily, Core comes with a built in interface for just this
        purpose called <literal>Sexpable</literal>, which is defined as
        follows:
      </para>
      <programlisting language="ocaml">
module type Sexpable = sig
  type t = int
  val sexp_of_t : t -&gt; Sexp.t
  val t_of_sexp : Sexp.t -&gt; t
end
</programlisting>
      <para>
        We can modify <literal>Make_interval</literal> to use the
        <literal>Sexpable</literal> interface, for both its input and
        its output. Note the use of destructive substitution to combine
        multiple signatures together. This is important because it stops
        the <literal>type t</literal>'s from the different signatures
        from shadowing each other.
      </para>
      <para>
        Also note that we have been careful to override the
        sexp-converter here to ensure that the data structures
        invariants are still maintained when reading in from an
        s-expression.
      </para>
      <programlisting language="ocaml">
# module type Interval_intf_with_sexp = sig
   type t
   include Interval_intf with type t := t
   include Sexpable      with type t := t
  end;;
module type Interval_intf_with_sexp =
  sig
    type t
    type endpoint
    val create : endpoint -&gt; endpoint -&gt; t
    val is_empty : t -&gt; bool
    val contains : t -&gt; endpoint -&gt; bool
    val intersect : t -&gt; t -&gt; t
    val t_of_sexp : Sexp.t -&gt; t
    val sexp_of_t : t -&gt; Sexp.t
  end
# module Make_interval(Endpoint : sig
    type t
    include Comparable with type t := t
    include Sexpable   with type t := t
  end) : Interval_intf_with_sexp with type endpoint := Endpoint.t =
  struct

      type t = | Interval of Endpoint.t * Endpoint.t
               | Empty
      with sexp

      let create low high =
         ...

      (* put a wrapper round the auto-generated sexp_of_t to enforce
         the invariants of the data structure *)
      let t_of_sexp sexp =
        match t_of_sexp sexp with
        | Empty -&gt; Empty
        | Interval (x,y) -&gt; create x y

      ....

     end ;;
module Make_interval :
  functor
    (Endpoint : sig
           type t
           val compare : t -&gt; t -&gt; int
           val sexp_of_t : t -&gt; Sexplib.Sexp.t
           val t_of_sexp : Sexplib.Sexp.t -&gt; t
         end) -&gt;
    sig
      type t
      val create : Endpoint.t -&gt; Endpoint.t -&gt; t
      val is_empty : t -&gt; bool
      val contains : t -&gt; Endpoint.t -&gt; bool
      val intersect : t -&gt; t -&gt; t
      val sexp_of_t : t -&gt; Sexplib.Sexp.t
      val t_of_sexp : Sexplib.Sexp.t -&gt; t
    end
</programlisting>
      <para>
        And now, we can use that sexp-converter in the ordinary way:
      </para>
      <programlisting language="ocaml">
# module Int = Make_interval(Int) ;;
# Int_interval.sexp_of_t (Int_interval.create 3 4);;
- : Sexplib.Sexp.t = (Interval 3 4)
# Int_interval.sexp_of_t (Int_interval.create 4 3);;
- : Sexplib.Sexp.t = Empty
</programlisting>
    </sect2>
  </sect1>
  <sect1 id="extending-modules">
    <title>Extending modules</title>
    <para>
      Another common use of functors is to generate type-specific
      functionality for a given module in a standardized way. Let's see
      how this works in the context of a functional queue, which is just
      a functional version of a FIFO (first-in, first-out) queue. Being
      functional, operations on the queue return new queues, rather than
      modifying the queues that were passed in.
    </para>
    <para>
      Here's a reasonable <literal>mli</literal> for such a module.
    </para>
    <programlisting language="ocaml">
(* file: fqueue.mli *)

type 'a t

val empty : 'a t

val enqueue : 'a t -&gt; 'a -&gt; 'a t

(** [dequeue q] returns None if the [q] is empty *)
val dequeue : 'a t -&gt; ('a * 'a t) option

val fold : 'a t -&gt; init:'acc -&gt; f:('acc -&gt; 'a -&gt; 'acc) -&gt; 'acc
</programlisting>
    <para>
      Now let's implement <literal>Fqueue</literal>. A standard trick is
      for the <literal>Fqueue</literal> to maintain an input and an
      output list, so that one can efficiently
      <literal>enqueue</literal> on the input list and efficiently
      dequeue from the output list. If you attempt to dequeue when the
      output list is empty, the input list is reversed and becomes the
      new output list. Here's an implementation that uses that trick.
    </para>
    <programlisting language="ocaml">
(* file: fqueue.ml *)
open Core.Std

type 'a t = 'a list * 'a list

let empty = ([],[])

let enqueue (l1,l2) x = (x :: l1,l2)

let dequeue (in_list,out_list) =
  match out_list with
  | hd :: tl -&gt; Some (hd, (in_list,tl))
  | [] -&gt;
    match List.rev in_list with
    | [] -&gt; None
    | hd :: tl -&gt; Some (hd, ([], tl))

let fold (in_list,out_list) ~init ~f =
  let after_out = List.fold ~init ~f out_list in
  List.fold_right ~init:after_out ~f in_list
</programlisting>
    <para>
      One problem with our <literal>Fqueue</literal> is that the
      interface is quite skeletal. There are lots of useful helper
      functions that one might want that aren't there. For example, for
      lists we have <literal>List.iter</literal> which runs a function
      on each node; and a <literal>List.find</literal> that finds the
      first element on the list that matches a given predicate. Such
      helper functions come up for pretty much every container type, and
      implementing them over and over is a bit of a dull and repetitive
      affair.
    </para>
    <para>
      As it happens, many of these helper functions can be derived
      mechanically from just the fold function we already implemented.
      Rather than write all of these helper functions by hand for every
      new container type, we can instead use a functor that will let us
      add this functionality to any container that has a
      <literal>fold</literal> function.
    </para>
    <para>
      We'll create a new module, <literal>Foldable</literal> that
      automates the process of adding helper functions to a
      fold-supporting container. As you can see,
      <literal>Foldable</literal> contains a module signature
      <literal>S</literal> which defines the signature that is required
      to support folding; and a functor <literal>Extend</literal> that
      allows one to extend any module that matches
      <literal>Foldable.S</literal>.
    </para>
    <programlisting language="ocaml">
(* file: foldable.ml *)

open Core.Std

module type S = sig
  type 'a t
  val fold : 'a t -&gt; init:'acc -&gt; f:('acc -&gt; 'a -&gt; 'acc) -&gt; 'acc
end

module type Extension = sig
  type 'a t
  val iter    : 'a t -&gt; f:('a -&gt; unit) -&gt; unit
  val length  : 'a t -&gt; int
  val count   : 'a t -&gt; f:('a -&gt; bool) -&gt; int
  val for_all : 'a t -&gt; f:('a -&gt; bool) -&gt; bool
  val exists  : 'a t -&gt; f:('a -&gt; bool) -&gt; bool
end

(* For extending a Foldable module *)
module Extend(Arg : S)
  : Extension with type 'a t := 'a Arg.t =
struct
  open Arg

  let iter t ~f =
    fold t ~init:() ~f:(fun () a -&gt; f a)

  let length t =
    fold t ~init:0  ~f:(fun acc _ -&gt; acc + 1)

  let count t ~f =
    fold t ~init:0  ~f:(fun count x -&gt; count + if f x then 1 else 0)

  exception Short_circuit

  let for_all c ~f =
    try iter c ~f:(fun x -&gt; if not (f x) then raise Short_circuit); true
    with Short_circuit -&gt; false

  let exists c ~f =
    try iter c ~f:(fun x -&gt; if f x then raise Short_circuit); false
    with Short_circuit -&gt; true
end
</programlisting>
    <para>
      Now we can apply this to <literal>Fqueue</literal>. We can rewrite
      the interface of <literal>Fqueue</literal> as follows.
    </para>
    <programlisting language="ocaml">
(* file: fqueue.mli *)
open Core.Std

type 'a t
val empty : 'a t
val enqueue : 'a t -&gt; 'a -&gt; 'a t
val dequeue : 'a t -&gt; ('a * 'a t) option
val fold : 'a t -&gt; init:'acc -&gt; f:('acc -&gt; 'a -&gt; 'acc) -&gt; 'acc

include Foldable.Extension with type 'a t := 'a t
</programlisting>
    <para>
      In order to apply the functor, we'll put the definition of
      <literal>Fqueue</literal> in a sub-module called
      <literal>T</literal>, and then call
      <literal>Foldable.Extend</literal> on <literal>T</literal>.
    </para>
    <programlisting language="ocaml">
open Core.Std

module T = struct
  type 'a t = 'a list * 'a list

  let empty = [],[]

  let enqueue (l1,l2) x =
    (x :: l1,l2)

  let rec dequeue (in_list,out_list) =
    match out_list with
    | hd :: tl -&gt; Some (hd, (in_list,tl))
    | [] -&gt; dequeue ([], List.rev in_list)

  let fold (in_list,out_list) ~init ~f =
    List.fold ~init:(List.fold ~init ~f out_list) ~f
      (List.rev in_list)
end
include T
include Foldable.Extend(T)
</programlisting>
    <para>
      This is a sufficiently useful pattern that it is implemented in
      Core, under the name <literal>Container.Make</literal>.
    </para>
    <para>
      This pattern comes up quite a bit in Core, and is used to for a
      variety of purposes.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Adding comparison-based data structures like maps and sets,
          based on the <literal>Comparable</literal> interface.
        </para>
      </listitem>
      <listitem>
        <para>
          Adding hash-based data structures like hash sets and hash
          heaps.
        </para>
      </listitem>
      <listitem>
        <para>
          Support for so-called monadic libraries, like the ones
          discussed in <xref linkend="error-handling"/> and
          <xref linkend="concurrent-programming-with-async"/>.
          Here, the functor is used to provide a collection of standard
          helper functions based on the core <literal>bind</literal> and
          <literal>return</literal> operators.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter><chapter id="object-oriented-programming">
  <title>Object Oriented Programming</title>
  <para>
    We've already seen several tools that OCaml provides for organizing
    programs, particularly first-class modules. In addition, OCaml also
    supports object-oriented programming. There are objects, classes,
    and their associated types. Objects are good for encapsulation and
    abstraction, and classes are good for code re-use.
  </para>
  <note>
  <title>
  What is Object-Oriented Programming?
  </title>
  <para>
    Object-oriented programming (often shorted to OOP) is a programming
    style that encapsulates computation and data within logical
    <emphasis>objects</emphasis>. Each object contains some data stored
    in <emphasis>fields</emphasis>, and has <emphasis>method</emphasis>
    functions that can be invoked against the data within the object.
    The code definition behind an object is called a
    <emphasis>class</emphasis>, and objects are constructed from a class
    definition by calling a constructor with the data that the object
    will use to build itself.
  </para>
  <para>
    There are four fundamental properties that differentiate OOP from
    other styles:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        <emphasis>Abstraction</emphasis>: the details of the
        implementation are hidden in the object, and the external
        interface is just the set of publically-accessible methods.
      </para>
    </listitem>
    <listitem>
      <para>
        <emphasis>Dynamic lookup</emphasis>: when a message is sent to
        an object, the method to be executed is determined by the
        implementation of the object, not by some static property of the
        program. In other words, different objects may react to the same
        message in different ways.
      </para>
    </listitem>
    <listitem>
      <para>
        <emphasis>Subtyping</emphasis>: if an object
        <literal>a</literal> has all the functionality of an object
        <literal>b</literal>, then we may use <literal>a</literal> in
        any context where <literal>b</literal> is expected.
      </para>
    </listitem>
    <listitem>
      <para>
        <emphasis>Inheritance</emphasis>: the definition of one kind of
        object can be re-used to produce a new kind of object. This new
        definition can override some behaviour, but also share code with
        its parent.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Almost every notable modern programming language has been influenced
    by OOP, and you'll have run across these terms if you've ever used
    C++, Java, C#, Ruby, Python or Javascript.
  </para>
  </note>
  <sect1 id="when-to-use-objects">
    <title>When to use objects</title>
    <para>
      You might wonder when to use objects in OCaml, which has a
      multitude of alternative mechanisms to express the same concept.
      First-class modules are more expressive (a module can include
      types, while classes and objects cannot). Modules, functors, and
      algebraic data types also offer a wide range of ways to express
      program structure. In fact, many seasoned OCaml programmers rarely
      use classes and objects, if at all.
    </para>
    <para>
      Modules already provide these features in some form, but the main
      focus of classes is on code re-use through inheritance and late
      binding of methods. This is a critical property of classes: the
      methods that implement an object are determined when the object is
      instantiated, a form of <emphasis>dynamic</emphasis> binding. In
      the meantime, while classes are being defined, it is possible (and
      necessary) to refer to methods without knowing statically how they
      will be implemented.
    </para>
    <para>
      In contrast, modules use static (lexical) scoping. If you want to
      parameterize your module code so that some part of it can be
      implemented later, you would write a function or functor. This is
      more explicit, but often more verbose than overriding a method in
      a class.
    </para>
    <para>
      In general, a rule of thumb is: use classes and objects in
      situations where dynamic binding is a big win, for example if you
      have many similar variations in the implementation of a concept.
      Two good examples are Xavier Leroy's
      <ulink url="http://gallium.inria.fr/~xleroy/software.html#cryptokit">Cryptokit</ulink>,
      which provides a variety of cryptographic primitives that can be
      combined in building-block style, and the
      <ulink url="http://cristal.inria.fr/camlimages/">Camlimages</ulink>
      library which manipulates various graphical file formats.
    </para>
    <para>
      In this chapter, we'll introduce you to the basics of object
      definition and use in OCaml, and then demonstrate their use with
      an example using Cryptokit. We'll return to the more advanced
      areas of object use later on in the book in
      <xref linkend="object-subtyping-and-inheritance"/>.
    </para>
  </sect1>
  <sect1 id="ocaml-objects">
    <title>OCaml objects</title>
    <para>
      If you already know about object oriented programming in a
      language like Java or C++, the OCaml object system may come as a
      surprise. Foremost is the complete separation of subtyping and
      inheritance in OCaml. In a language like Java, a class name is
      also used as the type of objects created by instantiating it, and
      the subtyping rule corresponds to inheritance. For example, if we
      implement a class <literal>Stack</literal> in Java by inheriting
      from a class <literal>Deque</literal>, we would be allowed to pass
      a stack anywhere a deque is expected (this is a silly example of
      course, practitioners will point out that we shouldn't do it).
    </para>
    <para>
      OCaml is entirely different. Classes are used to construct objects
      and support inheritance, including non-subtyping inheritance.
      Classes are not types. Instead, objects have <emphasis>object
      types</emphasis>, and if you want to use objects, you aren't
      required to use classes at all. Here's an example of a simple
      object.
    </para>
    <programlisting language="ocaml">
# let p =
  object
    val mutable x = 0
    method get = x
    method set i = x &lt;- i
  end;;
val p : &lt; get : int; set : int -&gt; unit &gt; = &lt;obj&gt;
</programlisting>
    <para>
      The object has an integer value <literal>x</literal>, a method
      <literal>get</literal> that returns x, and a method
      <literal>set</literal> that updates the value of
      <literal>x</literal>.
    </para>
    <para>
      The object type is enclosed in angle brackets
      <literal>&lt; ... &gt;</literal>, containing just the types of the
      methods. Fields, like <literal>x</literal>, are not part of the
      public interface of an object. All interaction with an object is
      through its methods. The syntax for a method invocation (also
      called &quot;sending a message&quot; to the object) uses the
      <literal>#</literal> character.
    </para>
    <programlisting language="ocaml">
# p#get;
- : int = 0
# p#set 17;;
- : unit = ()
# p#get;;
- : int = 17
</programlisting>
    <para>
      Objects can also be constructed by functions. If we want to
      specify the initial value of the object, we can define a function
      that takes the value and returns an object.
    </para>
    <programlisting language="ocaml">
# let make i =
  object
    val mutable x = i
    method get = x
    method set y = x &lt;- y
  end;;
val make : 'a -&gt; &lt; get : 'a; set : 'a -&gt; unit &gt; = &lt;fun&gt;
# let p = make 5;;
val p : &lt; get : int; set : int -&gt; unit &gt; = &lt;obj&gt;
# p#get;;
- : int = 5
</programlisting>
    <para>
      Note that the types of the function <literal>make</literal> and
      the returned object now use the polymorphic type
      <literal>'a</literal>. When make is invoked on a concrete value
      <literal>5</literal>, we get the same object type as before, with
      type <literal>int</literal> for the value.
    </para>
  </sect1>
  <sect1 id="object-polymorphism">
    <title>Object Polymorphism</title>
    <para>
      Functions can also take object arguments. Let's construct a new
      object <literal>average</literal> that returns the average of any
      two objects with a <literal>get</literal> method.
    </para>
    <programlisting language="ocaml">
# let average p1 p2 =
  object
    method get = (p1#get + p2#get) / 2
  end;;
val average :
  &lt; get : int; .. &gt; -&gt;
  &lt; get : int; .. &gt; -&gt;
  &lt; get : int &gt; = &lt;fun&gt;
</programlisting>
    <para>
      There's some new syntax in the type that's been inferred for
      <literal>average</literal> here. The parameters have the object
      type <literal>&lt; get : int; .. &gt;</literal>. The
      <literal>..</literal> are ellipsis, standing for any other
      methods. The type <literal>&lt; get : int; .. &gt;</literal>
      specifies an object that must have at least a
      <literal>get</literal> method, and possibly some others as well.
    </para>
    <para>
      We can use the <literal>average</literal> using the normal object
      invocation syntax:
    </para>
    <programlisting language="ocaml">
# let p1 = make 5;;
# let p2 = make 15;;
# let a = average p1 p2;;
# a#get;;
- : int = 10
# p2#set 25;;
# a#get;;
- : int = 15
</programlisting>
    <para>
      The potential extra parameters defined by the object are carefully
      tracked by the OCaml type checker. If we manually try and
      constrain the exact type <literal>&lt; get : int &gt;</literal>
      for an object with more methods, type inference will fail.
    </para>
    <programlisting language="ocaml">
# let (p : &lt; get : int &gt;) = make 5;;
Error: This expression has type &lt; get : int; set : int -&gt; unit &gt;
       but an expression was expected of type &lt; get : int &gt;
       The second object type has no method set
</programlisting>
    <note>
    <title>
    Elisions are polymorphic
    </title>
    <para>
      The <literal>..</literal> in an object type is an elision,
      standing for &quot;possibly more methods.&quot; It may not be
      apparent from the syntax, but an elided object type is actually
      polymorphic. If we try to write a type definition, we get an
      obscure error.
    </para>
    <programlisting language="ocaml">
# type point = &lt; get:int; .. &gt;;;
Error: A type variable is unbound in this type declaration.
In type &lt; get : int; .. &gt; as 'a the variable 'a is unbound
</programlisting>
    <para>
      A <literal>..</literal> in an object type is called a
      <emphasis>row variable</emphasis> and this typing scheme is called
      <emphasis>row polymorphism</emphasis>. Even though
      <literal>..</literal> doesn't look like a type variable, it
      actually is. The error message suggests a solution, which is to
      add the <literal>as 'a</literal> type constraint.
    </para>
    <programlisting language="ocaml">
# type 'a point = &lt; get:int; .. &gt; as 'a;;
type 'a point = 'a constraint 'a = &lt; get : int; .. &gt;
</programlisting>
    <para>
      In other words, the type <literal>'a point</literal> is equal to
      <literal>'a</literal>, where
      <literal>'a = &lt; get : int; .. &gt;</literal>. That may seem
      like an odd way to say it, and in fact, this type definition is
      not really an abbreviation because <literal>'a</literal> refers to
      the entire type.
    </para>
    </note>
    <para>
      An object of type <literal>&lt; get:int; .. &gt;</literal> can be
      any object with a method <literal>get:int</literal>, it doesn't
      matter how it is implemented. So far, we've constructed two
      objects with that type; the function <literal>make</literal>
      constructed one, and so did <literal>average</literal>. When the
      method <literal>#get</literal> is invoked, the actual method that
      is run is determined by the object.
    </para>
    <programlisting language="ocaml">
# let print_point p = Printf.printf &quot;Point: %d\n&quot; p#get;;
val print_point : &lt; get : int; .. &gt; -&gt; unit = &lt;fun&gt;
# print_point (make 5);;
Point: 5
# print_point (average (make 5) (make 15));;
Point: 10
</programlisting>
  </sect1>
  <sect1 id="classes">
    <title>Classes</title>
    <para>
      Programming with objects directly is great for encapsulation, but
      one of the main goals of object-oriented programming is code
      re-use through inheritance. For inheritance, we need to introduce
      <emphasis>classes</emphasis>. In object-oriented programming, a
      class is a &quot;recipe&quot; for creating objects. The recipe can
      be changed by adding new methods and fields, or it can be changed
      by modifying existing methods.
    </para>
    <para>
      In OCaml, class definitions must be defined as toplevel statements
      in a module. A class is not an object, and a class definition is
      not an expression. The syntax for a class definition uses the
      keyword <literal>class</literal>.
    </para>
    <programlisting language="ocaml">
# class point =
  object
    val mutable x = 0
    method get = x
    method set y = x &lt;- y
  end;;
class point :
  object
    val mutable x : int
    method get : int
    method set : int -&gt; unit
  end
</programlisting>
    <para>
      The type <literal>class point : ... end</literal> is a
      <emphasis>class type</emphasis>. This particular type specifies
      that the <literal>point</literal> class defines a mutable field
      <literal>x</literal>, a method <literal>get</literal> that returns
      an <literal>int</literal>, and a method <literal>set</literal>
      with type <literal>int -&gt; unit</literal>.
    </para>
    <para>
      To produce an object, classes are instantiated with the keyword
      <literal>new</literal>.
    </para>
    <programlisting language="ocaml">
# let p = new point;;
val p : point = &lt;obj&gt;
# p#get;;
- : int = 0
# p#set 5;;
- : unit = ()
# p#get;;
- : int = 5
</programlisting>
    <para>
      Inheritance uses an existing class to define a new one. For
      example, the following class definition supports an addition
      method <literal>moveby</literal> that moves the point by a
      relative amount.
    </para>
    <programlisting language="ocaml">
# class movable_point =
  object (self : 'self)
    inherit point
    method moveby dx = self#set (self#get + dx)
  end;;
class movable_point :
  object
    val mutable x : int
    method get : int
    method moveby : int -&gt; unit
    method set : int -&gt; unit
  end
</programlisting>
    <para>
      This new <literal>movable_point</literal> class also makes use of
      the <literal>(self : 'self)</literal> binding after the
      <literal>object</literal> keyword. The variable
      <literal>self</literal> stands for the current object, allowing
      self-invocation, and the type variable <literal>'self</literal>
      stands for the type of the current object (which in general is a
      subtype of <literal>movable_point</literal>).
    </para>
  </sect1>
  <sect1 id="an-example-cryptokit">
    <title>An Example: Cryptokit</title>
    <para>
      Let's take a break from describing the object system with a more
      practical example that uses the OCaml cryptographic library.
    </para>
    <note>
    <title>
    Installing the Cryptokit library
    </title>
    <para>
      The Cryptokit library can be installed via OPAM via
      <literal>opam install cryptokit</literal>. Once that's finished
      compiling and installing, you just need to
      <literal>#require &quot;cryptokit&quot;</literal> in your toplevel
      to load the library and make the modules available.
    </para>
    </note>
    <para>
      Our first example mimics the <literal>md5</literal> command, which
      reads in an input file and returns a hexadecimal representation of
      its MD5 cryptographic hash. Cryptokit defines a number of
      different functions and collects them together under the
      <literal>Cryptokit.hash</literal> class type:
    </para>
    <programlisting language="ocaml">
class type hash = object
  method add_byte : int -&gt; unit
  method add_char : char -&gt; unit
  method add_string : string -&gt; unit
  method add_substring : string -&gt; int -&gt; int -&gt; unit
  method hash_size : int
  method result : string
  method wipe : unit
end

val hash_string : hash -&gt; string -&gt; string
</programlisting>
    <para>
      Concrete hash objects can be instantiated from various sub-modules
      in Cryptokit. The simplest ones such as MD5 or SHA1 do not take
      any special input parameters to build the object. The
      <literal>hmac_sha1</literal> takes a string key to initialise the
      Message Authenticate Code for that particular hash function.
    </para>
    <programlisting language="ocaml">
# Cryptokit.Hash.md5;;
- : unit -&gt; Cryptokit.hash = &lt;fun&gt;
# Cryptokit.Hash.sha1;;
- : unit -&gt; Cryptokit.hash = &lt;fun&gt;
# Cryptokit.MAC.hmac_sha1;;
- : string -&gt; Cryptokit.hash = &lt;fun&gt;
</programlisting>
    <para>
      Hash objects hold state and are thus naturally imperative. Once
      instantiated, data is fed into them by the addition functions, the
      <literal>result</literal> is computed and finally the contents
      erased via <literal>wipe</literal>. The
      <literal>hash_string</literal> convenience function applies the
      hash function fully to a string, and returns the result. The
      <literal>md5</literal> command is quite straight-forward now:
    </para>
    <programlisting language="ocaml">
open Core.Std
open Cryptokit

let _ =
  In_channel.(input_all stdin)
  |&gt; hash_string (Hash.md5 ())
  |&gt; transform_string (Hexa.encode ())
  |&gt; print_endline
</programlisting>
    <para>
      After opening the right modules, we read in the entire standard
      input into an OCaml string. This is then passed onto the MD5 hash
      function, which returns a binary string. This binary is passed
      through the <literal>Hexa</literal> hexadecimal encoder, which
      returns an ASCII representation of the input. The output of this
      command will be the same as the <literal>md5</literal> command (or
      <literal>md5sum</literal> in some systems).
    </para>
    <para>
      We can extend this simple example by selecting either the
      <literal>md5</literal> or <literal>sha1</literal> hash function at
      runtime depending on the name of our binary.
      <literal>Sys.argv</literal> is an array containing the arguments
      the command was invoked with, and the first entry is the name of
      the binary itself.
    </para>
    <programlisting language="ocaml">
open Core.Std
open Cryptokit

let _ =
  let hash_fn =
    match Filename.basename Sys.argv.(0) with
    |&quot;md5&quot; -&gt; Hash.md5 ()
    |&quot;sha1&quot; -&gt; Hash.sha1 ()
    |_ -&gt; Hash.md5 ()
  in
  In_channel.(input_all stdin)
  |&gt; hash_string hash_fn
  |&gt; transform_string (Hexa.encode ())
  |&gt; print_endline
</programlisting>
    <para>
      Now let's try something more advanced. The
      <literal>openssl</literal> library is installed on most systems,
      and can be used to encrypt plaintext using several encryption
      strategies. At its simplest, it will take a secret phrase and
      derive an appropriate key and initialisation vector.
    </para>
    <programlisting>
$ openssl enc -nosalt -aes-128-cbc -base64 -k &quot;ocaml&quot; -P
key=6217C07FF169F6AB2EB2731F855095F1
iv =8164D5477E66E6A9EC99A8D58ACAADAF
</programlisting>
    <para>
      We've selected the <literal>-nosalt</literal> option here to make
      the output deterministic, and the <literal>-P</literal> option
      prints out the derived key and IV and exits. The algorithm used to
      derive these results is described in the
      <literal>man EVP_BytesToKey</literal> manual page (you may need to
      install the OpenSSL documentation packages on your system first).
      We can implement this derivation function using an imperative
      style:
    </para>
    <programlisting language="ocaml">
let md5 s = hash_string (Hash.md5 ()) s

let evp_byte_to_key password tlen =
  let o = Hexa.encode () in
  let v = ref (md5 password) in
  o#put_string !v;
  while o#available_output/2 &lt; tlen do
    let n = md5 (!v ^ password) in
    o#put_string n;
    v := n;
  done;
  String.uppercase o#get_string

let _ =
  let secret = &quot;ocaml&quot; in
  let key_len = 16 * 2 in
  let iv_len = 16 * 2 in
  let x = evp_byte_to_key secret (key_len+iv_len) in
  let key = String.sub x ~pos:0 ~len:key_len in
  let iv = String.sub x ~pos:key_len ~len:iv_len in
  Printf.printf &quot;key=%s\niv =%s\n%!&quot; key iv
</programlisting>
    <para>
      The derivation algorithm takes an input password and desired total
      length (the addition of the key and IV length). It initialises a
      <literal>Hexa.encode</literal> transformer, which will accept
      arbitrary binary data and output a hexadecimal string (with two
      output bytes per input byte). A reference stores the last digest
      that's been calculated, and then the algorithm iterates until it
      has sufficient data to satisfy the required key length.
    </para>
    <para>
      Notice how the encoder object is used as an accumulator, by using
      the <literal>put_string</literal> and
      <literal>available_output</literal> to keep track of progress.
      Objects don't <emphasis>require</emphasis> an imperative style
      though, and the same algorithm can be written more functionally:
    </para>
    <programlisting language="ocaml">
let evp_byte_to_key password tlen =
  let rec aux acc v =
    match String.length acc &lt; tlen with
    | true -&gt;
      let v = md5 (v ^ password) in
      aux (acc^v) v
    | false -&gt; acc
  in
  let v = md5 password in
  String.uppercase (transform_string (Hexa.encode ()) (aux v v))
</programlisting>
    <para>
      In this version, we don't use any references, and instead a
      recursive function keeps track of the last digest in use and the
      accumulated result string. This version isn't quite as efficient
      as the previous one due to the careless use of string
      concatenation for the accumulator, but this can easily be fixed by
      using the <literal>Buffer</literal> module instead.
    </para>
  </sect1>
  <sect1 id="class-parameters-and-polymorphism">
    <title>Class parameters and polymorphism</title>
    <para>
      A class definition serves as the <emphasis>constructor</emphasis>
      for the class. In general, a class definition may have parameters
      that must be provided as arguments when the object is created with
      <literal>new</literal>.
    </para>
    <para>
      Let's build an example of an imperative singly-linked list using
      object-oriented techniques. First, we'll want to define a class
      for a single element of the list. We'll call it a
      <literal>node</literal>, and it will hold a value of type
      <literal>'a</literal>. When defining the class, the type
      parameters are placed in square brackets before the class name in
      the class definition. We also need a parameter
      <literal>x</literal> for the initial value.
    </para>
    <programlisting language="ocaml">
class ['a] node x =
object
  val mutable value : 'a = x
  val mutable next_node : 'a node option = None

  method get = value
  method set x = value &lt;- x

  method next = next_node
  method set_next node = next_node &lt;- node
end;;
</programlisting>
    <para>
      The <literal>value</literal> is the value stored in the node, and
      it can be retrieved and changed with the <literal>get</literal>
      and <literal>set</literal> methods. The
      <literal>next_node</literal> field is the link to the next element
      in the stack. Note that the type parameter <literal>['a]</literal>
      in the definition uses square brackets, but other uses of the type
      can omit them (or use parentheses if there is more than one type
      parameter).
    </para>
    <para>
      The type annotations on the <literal>val</literal> declarations
      are used to constrain type inference. If we omit these
      annotations, the type inferred for the class will be &quot;too
      polymorphic,&quot; <literal>x</literal> could have some type
      <literal>'b</literal> and <literal>next_node</literal> some type
      <literal>'c option</literal>.
    </para>
    <programlisting language="ocaml">
  class ['a] node x =
  object
    val mutable value = x
    val mutable next_node = None

    method get = value
    method set x = value &lt;- x

    method next = next_node
    method set_next node = next_node &lt;- node
  end;;
Error: Some type variables are unbound in this type:
         class ['a] node :
           'b -&gt;
           object
             val mutable next_node : 'c option
             val mutable value : 'b
             method get : 'b
             method next : 'c option
             method set : 'b -&gt; unit
             method set_next : 'c option -&gt; unit
           end
       The method get has type 'b where 'b is unbound
</programlisting>
    <para>
      In general, we need to provide enough constraints so that the
      compiler will infer the correct type. We can add type constraints
      to the parameters, to the fields, and to the methods. It is a
      matter of preference how many constraints to add. You can add type
      constraints in all three places, but the extra text may not help
      clarity. A convenient middle ground is to annotate the fields
      and/or class parameters, and add constraints to methods only if
      necessary.
    </para>
    <para>
      Next, we can define the list itself. We'll keep a field
      <literal>head</literal> that refers to the first element in the
      list, and <literal>last</literal> that refers to the final element
      in the list. The method <literal>insert</literal> adds an element
      to the end of the list.
    </para>
    <programlisting language="ocaml">
class ['a] slist =
object
   val mutable first : ('a) node option = None
   val mutable last : ('a) node option = None

   method is_empty = first = None

   method insert x =
      let new_node = Some (new node x) in
      match last with
         Some last_node -&gt;
            last_node#set_next new_node;
            last &lt;- new_node
       | None -&gt;
            first &lt;- new_node;
            last &lt;- new_node
end;;
</programlisting>
  </sect1>
  <sect1 id="object-types">
    <title>Object types</title>
    <para>
      This definition of the class <literal>slist</literal> is not
      complete, we can construct lists, but we also need to add the
      ability to traverse the elements in the list. One common style for
      doing this is to define a class for an <literal>iterator</literal>
      object. An iterator provides a generic mechanism to inspect and
      traverse the elements of a collection. This pattern isn't
      restricted to lists, it can be used for many different kinds of
      collections.
    </para>
    <para>
      There are two common styles for defining abstract interfaces like
      this. In Java, an iterator would normally be specified with an
      interface, which specifies a set of method types. In languages
      without interfaces, like C++, the specification would normally use
      <emphasis>abstract</emphasis> classes to specify the methods
      without implementing them (C++ uses the &quot;= 0&quot; definition
      to mean &quot;not implemented&quot;).
    </para>
    <programlisting language="java">
// Java-style iterator, specified as an interface.
interface &lt;T&gt; iterator {
  T Get();
  boolean HasValue();
  void Next();
};

// Abstract class definition in C++.
template&lt;typename T&gt;
class Iterator {
 public:
  virtual ~Iterator() {}
  virtual T get() const = 0;
  virtual bool has_value() const = 0;
  virtual void next() = 0;
};
</programlisting>
    <para>
      OCaml support both styles. In fact, OCaml is more flexible than
      these approaches because an object type can be implemented by any
      object with the appropriate methods; it does not have to be
      specified by the object's class <emphasis>a priori</emphasis>.
      We'll leave abstract classes for later. Let's demonstrate the
      technique using object types.
    </para>
    <para>
      First, we'll define an object type <literal>iterator</literal>
      that specifies the methods in an iterator.
    </para>
    <programlisting language="ocaml">
type 'a iterator = &lt; get : 'a; has_value : bool; next : unit &gt;;;
</programlisting>
    <para>
      Next, we'll define an actual iterator for the class
      <literal>slist</literal>. We can represent the position in the
      list with a field <literal>current</literal>, following links as
      we traverse the list.
    </para>
    <programlisting language="ocaml">
class ['a] slist_iterator cur =
object
  val mutable current : 'a node option = cur

  method has_value = current &lt;&gt; None

  method get =
     match current with
        Some node -&gt; node#get
      | None -&gt; raise (Invalid_argument &quot;no value&quot;)

  method next =
     match current with
        Some node -&gt; current &lt;- node#next
      | None -&gt; raise (Invalid_argument &quot;no value&quot;)
end;;
</programlisting>
    <para>
      Finally, we add a method <literal>iterator</literal> to the slist
      class to produce an iterator. To do so, we construct an
      <literal>slist_iterator</literal> that refers to the first node in
      the list, but we want to return a value with the object type
      <literal>iterator</literal>. This requires an explicit coercion
      using the <literal>:&gt;</literal> operator.
    </para>
    <programlisting language="ocaml">
class ['a] slist = object
...
   method iterator = (new slist_iterator first :&gt; 'a iterator)
end

# let l = new slist;;
# l.insert 5;;
# l.insert 4;;
# let it = l#iterator;;
# it#get;;
- : int = 5
# it#next;;
- : unit = ()
# it#get;;
- : int = 4
# it#next;;
- : unit = ()
# it#has_value;;
- : bool = false
</programlisting>
    <para>
      We may also wish to define functional-style methods,
      <literal>iter f</literal> takes a function <literal>f</literal>
      and applies it to each of the elements of the list.
    </para>
    <programlisting language="ocaml">
method iter f =
  let it = self#iterator in
  while it#has_value do
    f it#get
    it#next
  done
</programlisting>
    <para>
      What about functional operations similar to
      <literal>List.map</literal> or <literal>List.fold</literal>? In
      general, these methods take a function that produces a value of
      some other type than the elements of the set. For example, the
      function <literal>List.fold</literal> has type
      <literal>'a list -&gt; ('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b</literal>,
      where <literal>'b</literal> is an arbitrary type. To replicate
      this in the <literal>slist</literal> class, we need a method type
      <literal>('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b</literal>, where
      the method type is polymorphic over <literal>'b</literal>.
    </para>
    <para>
      The solution is to use a type quantifier, as shown in the
      following example. The method type must be specified directly
      after the method name, which means that method parameters must be
      expressed using a <literal>fun</literal> or
      <literal>function</literal> expression.
    </para>
    <programlisting language="ocaml">
method fold : 'b. ('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b =
   (fun f x -&gt;
         let y = ref x in
         let it = self#iterator in
         while it#has_value do
            y := f !y it#get;
            it#next
         done;
         !y)
</programlisting>
  </sect1>
  <sect1 id="immutable-objects">
    <title>Immutable objects</title>
    <para>
      Many people consider object-oriented programming to be
      intrinsically imperative, where an object is like a state machine.
      Sending a message to an object causes it to change state, possibly
      sending messages to other objects.
    </para>
    <para>
      Indeed, in many programs, this makes sense, but it is by no means
      required. Let's define an object-oriented version of lists similar
      to the imperative list above. We'll implement it with a regular
      list type <literal>'a list</literal>, and insertion will be to the
      beginning of the list instead of to the end.
    </para>
    <programlisting language="ocaml">
class ['a] flist =
object (self : 'self)
   val elements : 'a list = []

   method is_empty = elements = []

   method insert x : 'self = {&lt; elements = x :: elements &gt;}

   method iterator =
      (new flist_iterator elements :&gt; 'a iterator)

   method iter (f : 'a -&gt; unit) = List.iter f elements

   method fold : 'b. ('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b =
      (fun f x -&gt; List.fold_left f x elements)
end;;
</programlisting>
    <para>
      A key part of the implementation is the definition of the method
      <literal>insert</literal>. The expression
      <literal>{&lt; ... &gt;}</literal> produces a copy of the current
      object, with the same type, and the specified fields updated. In
      other words, the <literal>new_fst new_x</literal> method produces
      a copy of the object, with <literal>x</literal> replaced by
      <literal>new_x</literal>. The original object is not modified, and
      the value of <literal>y</literal> is also unaffected.
    </para>
    <para>
      There are some restriction on the use of the expression
      <literal>{&lt; ... &gt;}</literal>. It can be used only within a
      method body, and only the values of fields may be updated. Method
      implementations are fixed at the time the object is created, they
      cannot be changed dynamically.
    </para>
    <para>
      We use the same object type <literal>iterator</literal> for
      iterators, but implement it differently.
    </para>
    <programlisting language="ocaml">
class ['a] flist_iterator l =
object
   val mutable elements : 'a list = l

   method has_value = l &lt;&gt; []

   method get =
      match l with
         h :: _ -&gt; h
       | [] -&gt; raise (Invalid_argument &quot;list is empty&quot;)

   method next =
      match l with
         _ :: l -&gt; elements &lt;- l
       | [] -&gt; raise (Invalid_argument &quot;list is empty&quot;)
end;;
</programlisting>
  </sect1>
  <sect1 id="class-types">
    <title>Class types</title>
    <para>
      Once we have defined the list implementation, the next step is to
      wrap it in a module or <literal>.ml</literal> file and give it a
      type so that it can be used in the rest of our code. What is the
      type?
    </para>
    <para>
      Before we begin, let's wrap up the implementation in an explicit
      module (we'll use explicit modules for illustration, but the
      process is similar when we want to define a
      <literal>.mli</literal> file). In keeping with the usual style for
      modules, we define a type <literal>'a t</literal> to represent the
      type of list values.
    </para>
    <programlisting language="ocaml">
module SList = struct
   type 'a iterator = &lt; get : 'a; has_value : bool; next : unit &gt;
   type 'a t = &lt; is_empty : bool; insert : 'a -&gt; unit; iterator : 'a iterator &gt;

   class ['a] node x = object ... end
   class ['a] slist_iterator cur = object ... end
   class ['a] slist = object ... end

   let make () = new slist
end;;
</programlisting>
    <para>
      We have multiple choices in defining the module type, depending on
      how much of the implementation we want to expose. At one extreme,
      a maximally-abstract signature would completely hide the class
      definitions.
    </para>
    <programlisting language="ocaml">
module AbstractSList : sig
   type 'a iterator = &lt; get : 'a; has_value : bool; next : unit &gt;
   type 'a t = &lt; is_empty : bool; insert : 'a -&gt; unit; iterator : 'a iterator &gt;

   val make : unit -&gt; 'a t
end = SList
</programlisting>
    <para>
      The abstract signature is simple because we ignore the classes.
      But what if we want to include them in the signature, so that
      other modules can inherit from the class definitions? For this, we
      need to specify types for the classes, called <emphasis>class
      types</emphasis>. Class types do not appear in mainstream
      object-oriented programming languages, so you may not be familiar
      with them, but the concept is pretty simple. A class type
      specifies the type of each of the visible parts of the class,
      including both fields and methods. Just like for module types, you
      don't have to give a type for everything; anything you omit will
      be hidden.
    </para>
    <programlisting language="ocaml">
module VisibleSList : sig
  type 'a iterator = &lt; get : 'a; has_value : bool; next : unit &gt;
  type 'a t = &lt; is_empty : bool; insert : 'a -&gt; unit; iterator : 'a iterator &gt;

  class ['a] node : 'a -&gt;
  object
     method get : 'a
     method set : 'a -&gt; unit
     method next : 'a node option
     method set_next : 'a node option -&gt; unit
  end

  class ['a] slist_iterator : 'a node option -&gt;
  object
     method has_value : bool
     method get : 'a
     method next : unit
  end

  class ['a] slist :
  object
    val mutable first : 'a node option
    val mutable last : 'a node option
    method is_empty : bool
    method insert : 'a -&gt; unit
    method iterator : 'a iterator
  end

  val make : unit -&gt; 'a slist
end = SList
</programlisting>
    <para>
      In this signature, we've chosen to make nearly everything visible.
      The class type for <literal>slist</literal> specifies the types of
      the fields <literal>first</literal> and <literal>last</literal>,
      as well as the types of each of the methods. We've also included a
      class type for <literal>slist_iterator</literal>, which is of
      somewhat more questionable value, since the type doesn't appear in
      the type for <literal>slist</literal> at all.
    </para>
    <para>
      One more thing, in this example the function
      <literal>make</literal> has type
      <literal>unit -&gt; 'a slist</literal>. But wait, we've stressed
      <emphasis>classes are not types</emphasis>, so what's up with
      that? In fact, what we've said is entirely true, classes and class
      names <emphasis>are not</emphasis> types. However, class names can
      be used to stand for types. When the compiler sees a class name in
      type position, it automatically constructs an object type from it
      by erasing all the fields and keeping only the method types. In
      this case, the type expression <literal>'a slist</literal> is
      exactly equivalent to <literal>'a t</literal>.
    </para>
  </sect1>
</chapter><chapter id="object-subtyping-and-inheritance">
  <title>Object Subtyping and Inheritance</title>
  <sect1 id="subtyping">
    <title>Subtyping</title>
    <para>
      Subtyping is a central concept in object-oriented programming. It
      governs when an object with one type <emphasis>A</emphasis> can be
      used in an expression that expects an object of another type
      <emphasis>B</emphasis>. When this is true, we say that
      <emphasis>A</emphasis> is a <emphasis>subtype</emphasis> of
      <emphasis>B</emphasis>. Actually, more concretely, subtyping
      determines when the coercion operator <literal>e :&gt; t</literal>
      can be applied. This coercion works only if the expression
      <literal>e</literal> has some type <literal>s</literal> and
      <literal>s</literal> is a subtype of <literal>t</literal>.
    </para>
    <para>
      To explore this, let's define some simple classes for geometric
      shapes. The generic type <literal>shape</literal> has a method to
      compute the area, and a <literal>square</literal> is a specific
      kind of shape.
    </para>
    <programlisting language="ocaml">
type shape = &lt; area : float &gt;;;

class square w =
object (self : 'self)
  method area = self#width *. self#width
  method width = w
end;;
</programlisting>
    <para>
      A <literal>square</literal> has a method <literal>area</literal>
      just like a <literal>shape</literal>, and an additional method
      <literal>width</literal>. Still, we expect a
      <literal>square</literal> to be a <literal>shape</literal>, and it
      is. The coercion <literal>:&gt;</literal> must be explicit.
    </para>
    <programlisting language="ocaml">
# let new_square x : shape = new square x;;
Characters 27-39:
  let new_square x : shape = new square x;;
                             ^^^^^^^^^^^^
Error: This expression has type square but an expression was expected of type shape
The second object type has no method width
# let new_square x : shape = (new square x :&gt; shape);;
val new_square : float -&gt; shape = &lt;fun&gt;
</programlisting>
    <para>
      What are the rules for subtyping? In general, object subtyping has
      two general forms, called <emphasis>width</emphasis> and
      <emphasis>depth</emphasis> subtyping. Width subtyping means that
      an object type <emphasis>A</emphasis> is a a subtype of
      <emphasis>B</emphasis>, if <emphasis>A</emphasis> has all of the
      methods of <emphasis>B</emphasis>, and possibly more. A
      <literal>square</literal> is a subtype of <literal>shape</literal>
      because it implements all of the methods of
      <literal>shape</literal> (the <literal>area</literal> method).
    </para>
    <para>
      The subtyping rules are purely technical, they have no relation to
      object semantics. We can define a class
      <literal>rectangle</literal> that has all of the methods of a
      <literal>square</literal>, so it is a subtype of square and can be
      used wherever a <literal>square</literal> is expected.
    </para>
    <programlisting language="ocaml">
# class rectangle h w =
  object (self : 'self)
     inherit square w
     method area = self#width *. self#height
     method height = h
  end;;
# let square_rectangle h w : square = (new rectangle h w :&gt; square);;
val square_rectangle : float -&gt; float -&gt; square = &lt;fun&gt;
</programlisting>
    <para>
      This may seem absurd, but this concept is expressible in all
      object-oriented languages. The contradiction is semantic -- we
      know that in the real world, not all rectangles are squares; but
      in the programming world, rectangles have all of the features of
      squares (according to our definition), so they can be used just
      like squares. Suffice it to say that it is usually better to avoid
      such apparent contradictions.
    </para>
    <para>
      Next, let's take a seemingly tiny step forward, and start building
      collections of shapes. It is easy enough to define a
      <literal>slist</literal> of squares.
    </para>
    <programlisting language="ocaml">
# let squares =
     let l = SList.make () in
     l#insert (new square 1.0);
     l#insert (new square 2.0);
     l;;
val squares : square slist = &lt;obj&gt;
</programlisting>
    <para>
      We can also define a function to calculate the total area of a
      list of shapes. There is no reason to restrict this to squares, it
      should work for any list of shapes with type
      <literal>shape slist</literal>. The problem is that doing so
      raises some serious typing questions -- can a
      <literal>square slist</literal> be passed to a function that
      expects a <literal>shape slist</literal>? If we try it, the
      compiler produces a verbose error message.
    </para>
    <programlisting language="ocaml">
# let total_area (l : shape slist) : float =
     let total = ref 0.0 in
     let it = l#iterator in
     while it#has_value do
        total := !total +. it#get#area;
        it#next
     done;
     !total;;
val total_area : shape slist -&gt; float = &lt;fun&gt;
# total_area squares;;
Characters 11-18:
  total_area squares;;
             ^^^^^^^
Error: This expression has type
         square slist =
           &lt; insert : square -&gt; unit; is_empty : bool;
             iterator : square iterator &gt;
       but an expression was expected of type
         shape slist =
           &lt; insert : shape -&gt; unit; is_empty : bool;
             iterator : shape iterator &gt;
       Type square = &lt; area : float; width : float &gt;
       is not compatible with type shape = &lt; area : float &gt; 
       The second object type has no method width
</programlisting>
    <para>
      It might seem tempting to give up at this point, especially
      because the subtyping is not even true -- the type
      <literal>square slist</literal> is not a subtype of
      <literal>shape slist</literal>. The problem is with the
      <literal>insert</literal> method. For
      <literal>shape slist</literal>, the <literal>insert</literal>
      method takes an arbitrary <literal>shape</literal> and inserts it
      into the list. So if we could coerce a
      <literal>square slist</literal> to a
      <literal>shape slist</literal>, then it would be possible to
      insert an arbitrary shape into the list, which would be an error.
    </para>
    <sect2 id="using-more-precise-types-to-address-subtyping-problems">
      <title>Using more precise types to address subtyping
      problems</title>
      <para>
        Still, the <literal>total_area</literal> function should be
        fine, in principle. It doesn't call <literal>insert</literal>,
        so it isn't making that error. To make it work, we need to use a
        more precise type that indicates we are not going to be mutating
        the list. We define a type
        <literal>readonly_shape_slist</literal> and confirm that we can
        coerce the list of squares.
      </para>
      <programlisting language="ocaml">
# type readonly_shape_slist = &lt; iterator : shape iterator &gt;;;
type readonly_shape_slist = &lt; iterator : shape iterator &gt;
# (squares :&gt; readonly_shape_slist);;
- : readonly_shape_slist = &lt;obj&gt;
# let total_area (l : readonly_shape_slist) : float = ...;;
val total_area : readonly_shape_slist -&gt; float = &lt;fun&gt;
#   total_area (squares :&gt; readonly_shape_slist);;
- : float = 5.
</programlisting>
      <para>
        Why does this work, why is a <literal>square slist</literal> a
        subtype of <literal>readonly_shape_slist</literal>. The
        reasoning is in two steps. First, the easy part is width
        subtyping: we can drop the other methods to see that
        <literal>square slist</literal> is a subtype of
        <literal>&lt; iterator : square iterator &gt;</literal>. The
        next step is to use <emphasis>depth</emphasis> subtyping, which,
        in its general form, says that an object type
        <literal>&lt; m : t1 &gt;</literal> is a subtype of a type
        <literal>&lt; m : t2&gt;</literal> iff <literal>t1</literal> is
        a subtype of <literal>t2</literal>. In other words, instead of
        reasoning about the number of methods in a type (the width), the
        number of methods is fixed, and we look within the method types
        themselves (the &quot;depth&quot;).
      </para>
      <para>
        In this particular case, depth subtyping on the
        <literal>iterator</literal> method requires that
        <literal>square iterator</literal> be a subtype of
        <literal>shape iterator</literal>. Expanding the type definition
        for the type <literal>iterator</literal>, we again invoke depth
        subtyping, and we need to show that the type
        <literal>&lt; get : square &gt;</literal> is a subtype of
        <literal>&lt;get : shape &gt;</literal>, which follows because
        <literal>square</literal> is a subtype of
        <literal>shape</literal>.
      </para>
      <para>
        This reasoning may seem fairly long and complicated, but it
        should be pointed out that this typing
        <emphasis>works</emphasis>, and in the end the type annotations
        are fairly minor. In most typed object-oriented languages, the
        coercion would simply not be possible. For example, in C++, a
        STL type <literal>slist&lt;T&gt;</literal> is invariant in
        <literal>T</literal>, it is simply not possible to use
        <literal>slist&lt;square&gt;</literal> where
        <literal>slist&lt;shape&gt;</literal> is expected (at least
        safely). The situation is similar in Java, although Java
        supports has an escape hatch that allows the program to fall
        back to dynamic typing. The situation in OCaml is much better;
        it works, it is statically checked, and the annotations are
        pretty simple.
      </para>
    </sect2>
    <sect2 id="using-elided-types-to-address-subtyping-problems">
      <title>Using elided types to address subtyping problems</title>
      <para>
        Before we move to the next topic, there is one more thing to
        address. The typing we gave above, using
        <literal>readonly_shape_slist</literal>, requires that the
        caller perform an explicit coercion before calling the
        <literal>total_area</literal> function. We would like to give a
        better type that avoids the coercion.
      </para>
      <para>
        A solution is to use an elided type. Instead of
        <literal>shape</literal>, we can use the elided type
        <literal>&lt; area : float; .. &gt;</literal>. In fact, once we
        do this, it also becomes possible to use the
        <literal>slist</literal> type.
      </para>
      <programlisting language="ocaml">
# let total_area (l : &lt; area : float; .. &gt; slist) : float = ...;;
val total_area : &lt; area : float; .. &gt; slist -&gt; float = &lt;fun&gt;
# total_area squares;;
- : float = 5.
</programlisting>
      <para>
        This works, and it removes the need for explicit coercions. This
        type is still fairly simple, but it does have the drawback that
        the programmer needs to remember that the types
        <literal>&lt; area : float; ..&gt;</literal> and
        <literal>shape</literal> are related.
      </para>
      <para>
        OCaml supports an abbreviation in this case, but it works only
        for classes, not object types. The type expression
        <literal># classname</literal> is an abbreviation for an elided
        type containing all of the methods in the named class, and more.
        Since <literal>shape</literal> is an object type, we can't write
        <literal>#shape</literal>. However, if a class definition is
        available, this abbreviation can be useful. The following
        definition is exactly equivalent to the preceding one.
      </para>
      <programlisting language="ocaml">
# class cshape = object method area = 0.0 end;;
class cshape : object method area : float end
# let total_area (l : #cshape list) : float = ...;;
val total_area : #cshape slist -&gt; float = &lt;fun&gt;
# total_area squares;;
- : float = 5.
</programlisting>
    </sect2>
    <sect2 id="narrowing">
      <title>Narrowing</title>
      <para>
        Narrowing, also called <emphasis>down casting</emphasis>, is the
        ability to coerce an object to one of its subtypes. For example,
        if we have a list of shapes <literal>shape slist</literal>, we
        might know (for some reason) what the actual type of each shape
        is. Perhaps we know that all objects in the list have type
        <literal>square</literal>. In this case,
        <emphasis>narrowing</emphasis> would allow the re-casting of the
        object from type <literal>shape</literal> to type
        <literal>square</literal>. Many languages support narrowing
        through dynamic type checking. For example, in Java, a coercion
        <literal>(Square) x</literal> is allowed if the value
        <literal>x</literal> has type <literal>Square</literal> or one
        of its subtypes; otherwise the coercion throws an exception.
      </para>
      <para>
        Narrowing is <emphasis>not permitted</emphasis> in OCaml.
        Period.
      </para>
      <para>
        Why? There are two reasonable explanations, one based on a
        design principle, and another technical (the technical reason is
        simple: it is hard to implement).
      </para>
      <para>
        The design argument is this: narrowing violates abstraction. In
        fact, with a structural typing system like in OCaml, narrowing
        would essentially provide the ability to enumerate the methods
        in an object. To check whether an object <literal>obj</literal>
        has some method <literal>foo : int</literal>, one would attempt
        a coercion <literal>(obj :&gt; &lt; foo : int &gt;)</literal>.
      </para>
      <para>
        More commonly, narrowing leads to poor object-oriented style.
        Consider the following Java code, which returns the name of a
        shape object.
      </para>
      <programlisting>
String GetShapeName(Shape s) {
  if (s instanceof Square) {
    return &quot;Square&quot;;
  } else if (s instanceof Circle) {
    return &quot;Circle&quot;;
  } else {
    return &quot;Other&quot;;
  }
}
</programlisting>
      <para>
        Most programmers would consider this code to be
        &quot;wrong.&quot; Instead of performing a case analysis on the
        type of object, it would be better to define a method to return
        the name of the shape. Instead of calling
        <literal>GetShapeName(s)</literal>, we should call
        <literal>s.Name()</literal> instead.
      </para>
      <para>
        However, the situation is not always so obvious. The following
        code checks whether an array of shapes looks like a
        &quot;barbell,&quot; composed to two <literal>Circle</literal>
        objects separated by a <literal>Line</literal>, where the
        circles have the same radius.
      </para>
      <programlisting>
boolean IsBarBell(Shape[] s) {
  return s.length == 3 &amp;&amp; (s[0] instanceof Circle) &amp;&amp;
    (s[1] instanceof Line) &amp;&amp; (s[2] instanceof Circle) &amp;&amp;
    ((Circle) s[0]).radius() == ((Circle) s[2]).radius();
}
</programlisting>
      <para>
        In this case, it is much less clear how to augment the
        <literal>Shape</literal> class to support this kind of pattern
        analysis. It is also not obvious that object-oriented
        programming is well-suited for this situation. Pattern matching
        seems like a better fit.
      </para>
      <programlisting language="ocaml">
let is_bar_bell = function
 | [Circle r1; Line _; Circle r2] when r1 == r2 -&gt; true
 | _ -&gt; false;;
</programlisting>
      <para>
        Regardless, there is a solution if you find yourself in this
        situation, which is to augment the classes with variants. You
        can define a method <literal>variant</literal> that injects the
        actual object into a variant type.
      </para>
      <programlisting language="ocaml">
type shape = &lt; variant : repr; area : float&gt;
and circle = &lt; variant : repr; area : float; radius : float &gt;
and line = &lt; variant : repr; area : float; length : float &gt;
and repr =
 | Circle of circle
 | Line of line;;
 
let is_bar_bell = function
 | [s1; s2; s3] -&gt;
   (match s1#variant, s2#variant, s3#variant with
     | Circle c1, Line _, Circle c2 when c1#radius == c2#radius -&gt; true
     | _ -&gt; false)
 | _ -&gt; false;;
</programlisting>
      <para>
        This pattern works, but it has drawbacks. In particular, the
        recursive type definition should make it clear that this pattern
        is essentially equivalent to using variants, and that objects do
        not provide much value here.
      </para>
    </sect2>
    <sect2 id="binary-methods">
      <title>Binary methods</title>
      <para>
        A <emphasis>binary method</emphasis> is a method that takes an
        object of <literal>self</literal> type. One common example is
        defining a method for equality.
      </para>
      <programlisting language="ocaml">
# class square w =
  object (self : 'self) 
    method width = w
    method area = self#width * self#width
    method equals (other : 'self) = other#width = self#width
  end;;
class square : int -&gt;
  object ('a)
    method area : int
    method equals : 'a -&gt; bool
    method width : int
  end
# class rectangle w h =
  object (self : 'self)
    method width = w
    method height = h
    method area = self#width * self#height
    method equals (other : 'self) = other#width = self#width &amp;&amp; other#height = self#height
  end;;
...
# (new square 5)#equals (new square 5);;
- : bool = true
# (new rectangle 5 6)#equals (new rectangle 5 7);;
- : bool = false
</programlisting>
      <para>
        This works, but there is a problem lurking here. The method
        <literal>equals</literal> takes an object of the exact type
        <literal>square</literal> or <literal>rectangle</literal>.
        Because of this, we can't define a common base class
        <literal>shape</literal> that also includes an equality method.
      </para>
      <programlisting language="ocaml">
# type shape = &lt; equals : shape -&gt; bool; area : int &gt;;;
# let sq = new square 5;;
# (sq :&gt; shape);;
Characters 0-13:
  (sq :&gt; shape);;
  ^^^^^^^^^^^^^
Error: Type square = &lt; area : int; equals : square -&gt; bool; width : int &gt;
       is not a subtype of shape = &lt; area : int; equals : shape -&gt; bool &gt; 
Type shape = &lt; area : int; equals : shape -&gt; bool &gt; is not a subtype of
  square = &lt; area : int; equals : square -&gt; bool; width : int &gt; 
</programlisting>
      <para>
        The problem is that a <literal>square</literal> expects to be
        compared with a <literal>square</literal>, not an arbitrary
        shape; similarly for <literal>rectangle</literal>.
      </para>
      <para>
        This problem is fundamental. Many languages solve it either with
        narrowing (with dynamic type checking), or by method
        overloading. Since OCaml has neither of these, what can we do?
      </para>
      <para>
        One proposal we could consider is, since the problematic method
        is equality, why not just drop it from the base type
        <literal>shape</literal> and use polymorphic equality instead?
        Unfortunately, the builtin equality has very poor behavior when
        applied to objects.
      </para>
      <programlisting language="ocaml">
# (object method area = 5 end) = (object method area = 5 end);;
- : bool = false
</programlisting>
      <para>
        The problem here is that the builtin polymorphic equality
        compares the method implementations, not their return values.
        The method implementations (the function values that implement
        the methods) are different, so the equality comparison is false.
        There are other reasons not to use the builtin polymorphic
        equality, but these false negatives are a showstopper.
      </para>
      <para>
        If we want to define equality for shapes in general, the
        remaining solution is to use the same approach as we described
        for narrowing. That is, introduce a
        <emphasis>representation</emphasis> type implemented using
        variants, and implement the comparison based on the
        representation type.
      </para>
      <programlisting language="ocaml">
type shape_repr =
 | Square of int
 | Circle of int
 | Rectangle of int * int;;
 
type shape = &lt; repr : shape_repr; equals : shape -&gt; bool; area : int &gt;;;

class square w =
object (self : 'self)
  method width = w
  method area = self#width * self#width
  method repr = Square self#width
  method equals (other : shape) = self#repr = other#repr
end;;
</programlisting>
      <para>
        The binary method <literal>equals</literal> is now implemented
        in terms of the concrete type <literal>shape_repr</literal>. In
        fact, the objects are now isomorphic to the
        <literal>shape_repr</literal> type. When using this pattern, you
        will not be able to hide the <literal>repr</literal> method, but
        you can hide the type definition using the module system.
      </para>
      <programlisting language="ocaml">
module Shapes : sig
  type shape_repr
  type shape = &lt; repr : shape_repr; equals : shape -&gt; bool; area -&gt; int &gt;
  
  class square : int -&gt;
    object
      method width : int
      method area : int
      method repr : shape_repr
      method equals : shape -&gt; bool
    end
end = struct
  type shape_repr = Square of int | Circle of int | Rectangle of int * int
  ...
end;;
</programlisting>
    </sect2>
  </sect1>
  <sect1 id="private-methods">
    <title>Private methods</title>
    <para>
      Methods can be declared <emphasis>private</emphasis>, which means
      that they may be called by subclasses, but they are not visible
      otherwise (similar to a <emphasis>protected</emphasis> method in
      C++).
    </para>
    <para>
      To illustrate, let's build a class <literal>vector</literal> that
      contains an array of integers, resizing the storage array on
      demand. The field <literal>values</literal> contains the actual
      values, and the <literal>get</literal>, <literal>set</literal>,
      and <literal>length</literal> methods implement the array access.
      For clarity, the resizing operation is implemented as a private
      method <literal>ensure_capacity</literal> that resizes the array
      if necessary.
    </para>
    <programlisting language="ocaml">
# class vector =
  object (self : 'self)
     val mutable values : int array = [||]
  
     method get i = values.(i)
     method set i x =
        self#ensure_capacity i;
        values.(i) &lt;- x
     method length = Array.length values
  
     method private ensure_capacity i =
        if self#length &lt;= i then
           let new_values = Array.create (i + 1) 0 in
           Array.blit values 0 new_values 0 (Array.length values);
           values &lt;- new_values
  end;;
# let v = new vector;;
# v#set 5 2;;
# v#get 5;;
- 2 : int
# v#ensure_capacity 10;;
Characters 0-1:
  v#ensure_capacity 10;;
  ^
Error: This expression has type vector
       It has no method ensure_capacity
</programlisting>
    <para>
      To be precise, the method <literal>ensure_capacity</literal> is
      part of the class type, but it is not part of the object type.
      This means the object <literal>v</literal> has no method
      <literal>ensure_capacity</literal>. However, it is available to
      subclasses. We can extend the class, for example, to include a
      method <literal>swap</literal> that swaps two elements.
    </para>
    <programlisting language="ocaml">
# class swappable_vector =
  object (self : 'self)
     inherit vector

     method swap i j =
        self#ensure_capacity (max i j);
        let tmp = values.(i) in
        values.(i) &lt;- values.(j);
        values.(j) &lt;- tmp
  end;;
</programlisting>
    <para>
      Yet another reason for private methods is to factor the
      implementation and support recursion. Moving along with this
      example, let's build a binary heap, which is a binary tree in heap
      order: where the label of parent elements is smaller than the
      labels of its children. One efficient implementation is to use an
      array to represent the values, where the root is at index 0, and
      the children of a parent node at index <literal>i</literal> are at
      indexes <literal>2 * i</literal> and <literal>2 * i + 1</literal>.
      To insert a node into the tree, we add it as a leaf, and then
      recursively move it up the tree until we restore heap order.
    </para>
    <programlisting language="ocaml">
class binary_heap =
object (self : 'self)
   val values = new swappable_vector

   method min =
      if values#length = 0 then
         raise (Invalid_argument &quot;heap is empty&quot;);
      values#get 0

   method add x =
      let pos = values#length in
      values#set pos x;
      self#move_up pos

   method private move_up i =
      if i &gt; 0 then
         let parent = (i - 1) / 2 in
            if values#get i &lt; values#get parent then begin
               values#swap i parent;
               self#move_up parent
            end
end;;
</programlisting>
    <para>
      The method <literal>move_up</literal> implements the process of
      restoring heap order as a recursive method (though it would be
      straightforward avoid the recursion and use iteration here).
    </para>
    <para>
      The key property of private methods is that they are visible to
      subclasses, but not anywhere else. If you want the stronger
      guarantee that a method is <emphasis>really</emphasis> private,
      not even accessible in subclasses, you can use an explicit typing
      that omits the method. In the following code, the
      <literal>move_up</literal> method is explicitly omitted from the
      object type, and it can't be invoked in subclasses.
    </para>
    <programlisting language="ocaml">
# class binary_heap :
  object
    method min : int
    method add : int -&gt; unit
  end =
  object (self : 'self) {
    ...
    method private move_up i = ...
  end;;
</programlisting>
  </sect1>
  <sect1 id="virtual-classes-and-methods">
    <title>Virtual classes and methods</title>
    <para>
      A <emphasis>virtual</emphasis> class is a class where some methods
      or fields are declared, but not implemented. This should not be
      confused with the word &quot;virtual&quot; as it is used in C++.
      In C++, a &quot;virtual&quot; method uses dynamic dispatch,
      regular non-virtual methods use static dispatched. In OCaml,
      <emphasis>all</emphasis> methods use dynamic dispatch, but the
      keyword <emphasis>virtual</emphasis> means the method or field is
      not implemented.
    </para>
    <para>
      In the previous section, we defined a class
      <literal>swappable_vector</literal> that inherits from
      <literal>array_vector</literal> and adds a <literal>swap</literal>
      method. In fact, the <literal>swap</literal> method could be
      defined for any object with <literal>get</literal> and
      <literal>set</literal> methods; it doesn't have to be the specific
      class <literal>array_vector</literal>.
    </para>
    <para>
      One way to do this is to declare the
      <literal>swappable_vector</literal> abstractly, declaring the
      methods <literal>get</literal> and <literal>set</literal>, but
      leaving the implementation for later. However, the
      <literal>swap</literal> method can be defined immediately.
    </para>
    <programlisting language="ocaml">
class virtual abstract_swappable_vector =
object (self : 'self)
   method virtual get : int -&gt; int
   method virtual set : int -&gt; int -&gt; unit
   method swap i j =
      let tmp = self#get i in
      self#set i (self#get j);
      self#set j tmp
end;;
</programlisting>
    <para>
      At some future time, we may settle on a concrete implementation
      for the vector. We can inherit from the
      <literal>abstract_swappable_bvector</literal> to get the
      <literal>swap</literal> method &quot;for free.&quot; Here's one
      implementation using arrays.
    </para>
    <programlisting language="ocaml">
class array_vector =
object (self : 'self)
   inherit abstract_swappable_vector

   val mutable values = [||]
   method get i = values.(i)
   method set i x =
      self#ensure_capacity i;
      values.(i) &lt;- x
   method length = Array.length values

   method private ensure_capacity i =
      if self#length &lt;= i then
         let new_values = Array.create (i + 1) 0 in
            Array.blit values 0 new_values 0 (Array.length values);
            values &lt;- new_values
end
</programlisting>
    <para>
      Here's a different implementation using
      <literal>HashTbl</literal>.
    </para>
    <programlisting language="ocaml">
class hash_vector =
object (self : 'self)
   inherit abstract_swappable_vector

   val table = Hashtbl.create 19

   method get i =
      try Hashtbl.find table i with
         Not_found -&gt; 0

   method set = Hashtbl.add table
end;;
</programlisting>
    <para>
      One way to view a <literal>virtual</literal> class is that it is
      like a functor, where the &quot;inputs&quot; are the declared, but
      not defined, virtual methods and fields. The functor application
      is implemented through inheritance, when virtual methods are given
      concrete implementations.
    </para>
    <para>
      We've been mentioning that fields can be virtual too. Here is
      another implementation of the swapper, this time with direct
      access to the array of values.
    </para>
    <programlisting language="ocaml">
class virtual abstract_swappable_array_vector =
object (self : 'self)
   val mutable virtual values : int array
   method private virtual ensure_capacity : int -&gt; unit

   method swap i j =
      self#ensure_capacity (max i j);
      let tmp = values.(i) in
      values.(i) &lt;- values.(j);
      values.(j) &lt;- tmp
end;;
</programlisting>
    <para>
      This level of dependency on the implementation details is
      possible, but it is hard to justify the use of a virtual class --
      why not just define the <literal>swap</literal> method as part of
      the concrete class? Virtual classes are better suited for
      situations where there are multiple (useful) implementations of
      the virtual parts. In most cases, this will be public virtual
      methods.
    </para>
  </sect1>
  <sect1 id="multiple-inheritance">
    <title>Multiple inheritance</title>
    <para>
      When a class inherits from more than one superclass, it is using
      <emphasis>multiple inheritance</emphasis>. Multiple inheritance
      extends the variety of ways in which classes can be combined, and
      it can be quite useful, particularly with virtual classes.
      However, it can be tricky to use, particularly when the
      inheritance hierarchy is a graph rather than a tree, so it should
      be used with care.
    </para>
    <sect2 id="how-names-are-resolved">
      <title>How names are resolved</title>
      <para>
        The main &quot;trickiness&quot; of multiple inheritance is due
        to naming -- what happens when a method or field with some name
        is defined in more than one class?
      </para>
      <para>
        If there is one thing to remember about inheritance in OCaml, it
        is this: inheritance is like textual inclusion. If there is more
        than one definition for a name, the last definition wins. Let's
        look at some artificial, but illustrative, examples.
      </para>
      <para>
        First, let's consider what happens when we define a method more
        than once. In the following example, the method
        <literal>get</literal> is defined twice; the second definition
        &quot;wins,&quot; meaning that it overrides the first one.
      </para>
      <programlisting language="ocaml">
# class m1 =
object (self : 'self)
   method get = 1
   method f = self#get
   method get = 2
end;;
class m1 : object method f : int method get : int end
# (new m1)#f;;
- : int = 2
</programlisting>
      <para>
        Fields have similar behavior, though the compiler produces a
        warning message about the override.
      </para>
      <programlisting language="ocaml">
# class m2 =
# class m2 =
  object (self : 'self)
     val x = 1
     method f = x
     val x = 2
  end;;
Characters 69-74:
     val x = 2
         ^^^^^
Warning 13: the instance variable x is overridden.
The behaviour changed in ocaml 3.10 (previous behaviour was hiding.)
class m2 : object val x : int method f : int end
# (new m2)#f;;
- : int = 2
</programlisting>
      <para>
        Of course, it is unlikely that you will define two methods or
        two fields of the same name in the same class. However, the
        rules for inheritance follow the same pattern: the last
        definition wins. In the following definition, the
        <literal>inherit</literal> declaration comes last, so the method
        definition <literal>method get = 2</literal> overrides the
        previous definition, always returning 2.
      </para>
      <programlisting language="ocaml">
# class m4 = object method get = 2 end;;
# class m5 =
  object
    val mutable x = 1
    method get = x
    method set x' = x &lt;- x'
    inherit m4
  end;;
class m5 : object val mutable x : int method get : int method set : int -&gt; unit end
# let x = new m5;;
val x : m5 = &lt;obj&gt;
# x#set 5;;
- : unit = ()
# x#get;;
- : int = 2
</programlisting>
      <para>
        To reiterate, to understand what inheritance means, replace each
        <literal>inherit</literal> directive with its definition, and
        take the last definition of each method or field. This holds
        even for private methods. However, it does
        <emphasis>not</emphasis> hold for private methods that are
        &quot;really&quot; private, meaning that they have been hidden
        by a type constraint. In the following definitions, there are
        three definitions of the private method <literal>g</literal>.
        However, the definition of <literal>g</literal> in
        <literal>m8</literal> is not overridden, because it is not part
        of the class type for <literal>m8</literal>.
      </para>
      <programlisting language="ocaml">
# class m6 =
  object (self : 'self)
     method f1 = self#g
     method private g = 1
  end;;
class m6 : object method f1 : int method private g : int end
# class m7 =
  object (self : 'self)
     method f2 = self#g
     method private g = 2
  end;;
class m7 : object method f2 : int method private g : int end
# class m8 : object method f3 : int end =
  object (self : 'self)
     method f3 = self#g
     method private g = 3
  end;;
class m8 : object method f3 : int end
# class m9 =
  object (self : 'self)
     inherit m6
     inherit m7
     inherit m8
  end;;
# class m9 :
  object
    method f1 : int
    method f2 : int
    method f3 : int
    method private g : int
  end
# let x = new m9;;
val x : m9 = &lt;obj&gt;
# x#f1;;
- : int = 2
# x#f3;;
- : int = 3
</programlisting>
    </sect2>
    <sect2 id="mixins">
      <title>Mixins</title>
      <para>
        When should you use multiple inheritance? If you ask multiple
        people, you're likely to get multiple (perhaps heated) answers.
        Some will argue that multiple inheritance is overly complicated;
        others will argue that inheritance is problematic in general,
        and one should use object composition instead. But regardless of
        who you talk to, you will rarely hear that multiple inheritance
        is great and you should use it widely.
      </para>
      <para>
        In any case, if you're programming with objects, there's one
        general pattern for multiple inheritance that is both useful and
        reasonably simple, the <emphasis>mixin</emphasis> pattern.
        Generically, a <emphasis>mixin</emphasis> is just a virtual
        class that implements a feature based on another one. If you
        have a class that implements methods <emphasis>A</emphasis>, and
        you have a mixin <emphasis>M</emphasis> that provides methods
        <emphasis>B</emphasis> from <emphasis>A</emphasis>, then you can
        inherit from <emphasis>M</emphasis> -- &quot;mixing&quot; it in
        -- to get features <emphasis>B</emphasis>.
      </para>
      <para>
        That's too abstract, so let's give an example based on
        collections. In Section XXX:Objecttypes, we introduced the
        <emphasis>iterator</emphasis> pattern, where an
        <emphasis>iterator</emphasis> object is used to enumerate the
        elements of a collection. Lots of containers can have iterators,
        singly-linked lists, dictionaries, vectors, etc.
      </para>
      <programlisting language="ocaml">
type 'a iterator = &lt; get : 'a; has_value : bool; next : unit &gt;;;
class ['a] slist : object ... method iterator : 'a iterator end;;
class ['a] vector : object ... method iterator : 'a iterator end;;
class ['a] deque : object ... method iterator : 'a iterator end;;
class ['a, 'b] map : object ... method iterator : 'b iterator end;;
...
</programlisting>
      <para>
        The collections are different is some ways, but they share a
        common pattern for iteration that we can re-use. For a simple
        example, let's define a mixin that implements an arithmetic sum
        for a collection of integers.
      </para>
      <programlisting language="ocaml">
# class virtual int_sum_mixin =
  object (self : 'self)
     method virtual iterator : int iterator
     method sum =
        let it = self#iterator in
        let total = ref 0 in
        while it#has_value do
           total := !total + it#get;
           it#next
        done;
        !total
  end;;
# class int_slist =
  object
     inherit [int] slist
     inherit int_sum_mixin
  end;;
# let l = new int_slist;;
val l : int_slist = &lt;obj&gt;
# l#insert 5;;
# l#insert 12;;
# l#sum;;
- : int = 17
# class int_deque =
  object
     inherit [int] deque
     inherit int_sum_mixin
  end;;
</programlisting>
      <para>
        In this particular case, the mixin works only for a collection
        of integers, so we can't add the mixin to the polymorphic class
        definition <literal>['a] slist</literal> itself. However, the
        result of using the mixin is that the integer collection has a
        method <literal>sum</literal>, and it is done with very little
        of the fuss we would need if we used object composition instead.
      </para>
      <para>
        The mixin pattern isn't limited to non-polymorphic classes, of
        course. We can use it to implement generic features as well. The
        following mixin defines functional-style iteration in terms of
        the imperative iterator pattern.
      </para>
      <programlisting language="ocaml">
class virtual ['a] fold_mixin =
object (self : 'self)
   method virtual iterator : 'a iterator
   method fold : 'b. ('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b =
      (fun f x -&gt;
            let y = ref x in
            let it = self#iterator in
            while it#has_value do
               y := f !y it#get;
               it#next
            done;
            !y)
end;;

class ['a] slist_with_fold =
object
   inherit ['a] slist
   inherit ['a] fold_mixin
end;;
</programlisting>
    </sect2>
  </sect1>
</chapter><chapter id="first-class-modules">
  <title>First class modules</title>
  <para>
    You can think of OCaml as being broken up into two parts: a core
    language that is concerned with values and types, and a module
    language that is concerned with modules and module signatures. These
    sub-languages are stratified, in that modules can contain types and
    values, but ordinary values can't contain modules or module types.
    That means you can't do things like define a variable whose
    definition is a module, or a function that takes a module as an
    argument.
  </para>
  <para>
    OCaml provides a way around this stratification in the form of
    <emphasis>first-class modules</emphasis>. First-class modules are
    ordinary values that can be created from and converted back to
    regular modules. As we'll see, letting modules into the core
    language makes it possible to use more flexible and dynamic
    module-oriented designs.
  </para>
  <sect1 id="a-trivial-example-1">
    <title>A trivial example</title>
    <para>
      Much as we did with functors, we'll start out with a trivial
      example, to allow us to show the basic mechanics of first class
      modules with a minimum of fuss.
    </para>
    <para>
      A first-class module is created by packaging up a module with a
      signature that it satisfies. The following defines a simple
      signature and a module that matches it.
    </para>
    <programlisting language="ocaml">
# module type X_int = sig val x : int end;;
module type X_int = sig val x : int end
# module Three : X_int = struct let x = 3 end;;
module Three : X_int
# Three.x;;
- : int = 3
</programlisting>
    <para>
      We can then create a first-class module using the
      <literal>module</literal> keyword.
    </para>
    <programlisting language="ocaml">
# let three = (module Three : X_int);;
val three : (module X_int) = &lt;module&gt;
</programlisting>
    <para>
      Note that the type of the first-class module,
      <literal>(module X_int)</literal>, is based on the name of the
      signature that we used in constructing it.
    </para>
    <para>
      To get at the contents of <literal>three</literal>, we need to
      unpack it into a module again, which we can do using the
      <literal>val</literal> keyword.
    </para>
    <programlisting language="ocaml">
# module New_three = (val three : X_int) ;;
module New_three : X_int
# New_three.x;;
- : int = 3
</programlisting>
    <para>
      Using these conversions as building blocks, we can create tools
      for working with first-class modules in a natural way. The
      following shows the definition of two function,
      <literal>to_int</literal>, which converts a
      <literal>(module X_int)</literal> into an <literal>int</literal>.
      And <literal>plus</literal>, which adds two
      <literal>(module X_int)</literal>s.
    </para>
    <programlisting language="ocaml">
# let to_int m =
    let module M = (val m : X_int) in
    M.x
  ;;
val to_int : (module X_int) -&gt; int = &lt;fun&gt;
# let plus m1 m2 =
    (module struct
       let x = to_int m1 + to_int m2
     end : X_int)
  ;;
val plus : (module X_int) -&gt; (module X_int) -&gt; (module X_int) = &lt;fun&gt;
</programlisting>
    <para>
      With these functions in hand, we can start operating on our
      <literal>(module X_int)</literal>'s in a more natural style,
      taking full advantage of the concision and simplicity of the core
      language.
    </para>
    <programlisting language="ocaml">
# let six = plus three three;;
val six : (module X_int) = &lt;module&gt;
# to_int (List.fold ~init:six ~f:plus [three;three]);;
- : int = 12
</programlisting>
    <para>
      Of course, all we've really done with this example is come up with
      a more cumbersome way of working with integers. Let's see what
      happens when with work with more complex abstract types.
    </para>
  </sect1>
  <sect1 id="standard-vs.-first-class-modules">
    <title>Standard vs. first-class modules</title>
    <para>
      <emphasis>(yminsky: I'm not in solve with the example. It feels in
      some sense too artificial, and that aside, when you get to the end
      of the example, you haven't really gotten any juice of first-class
      modules)</emphasis>
    </para>
    <para>
      <emphasis>(yminsky: using &quot;standard&quot; in quotes seems a
      little awkward. Maybe just drop the quotes, and talk about
      standard or ordinary modules directly?)</emphasis>
    </para>
    <para>
      Let's compare the style of &quot;standard&quot; modules to
      first-class modules, using a simple library of abstract geometric
      shapes. In a &quot;standard&quot; module definition, we would
      define the shapes using abstract data types, where there is a type
      <literal>t</literal> that defines the actual representation, and
      the module would include functions that operate on the values of
      type <literal>t</literal>. In the following code, the module type
      <literal>Shape</literal> defines the type of generic shape, and
      the modules <literal>Rectangle</literal> and
      <literal>Line</literal> implement some concrete shapes.
    </para>
    <programlisting language="ocaml">
module type Shape = sig
  type t
  val area : t -&gt; int
  val position : t -&gt; int * int
end

module Rectangle = struct
   type t = { width : int; height : int; x : int; y : int }
   let make ~x ~y ~width ~height =
      { width = width; height = height; x = x; y = y }
   let area { width = width; height = height } = width * height
   let position { x = x; y = y } = (x, y)
end

module Line = struct
   type t = { dx : int; dy : int; x : int; y : int }
   let make ~x ~y ~dx ~dy = { dx = dx; dy = dy; x = x; y = y }
   let area _ = 0
   let position { x = x; y = y } = (x, y)
end
</programlisting>
    <para>
      Next, if we want to define a generic shape that is either a
      rectangle or a line, we would probably use a variant type. The
      following module <literal>Shapes</literal> is entirely
      boilerplate. We define the variant type, then functions to perform
      a dynamic dispatch based on the type of object.
    </para>
    <programlisting language="ocaml">
module Shapes = struct
   type t = [ `Rect of Rectangle.t | `Line of Line.t ]
   let make_rectangle = Rectangle.make
   let make_line = Line.make
   let area = function
      `Rect r -&gt; Rectangle.area r
    | `Line l -&gt; Line.area l
   let position = function
      `Rect r -&gt; Rectangle.position r
    | `Line l -&gt; Line.position l
end;;
</programlisting>
    <para>
      In fact, confronted with this boilerplate, we would probably
      choose not use modules at all, but simply define a single module
      with a variant type and the code for all of the shapes. This isn't
      to say that separate code for separate shapes is bad, it just
      means that the language doesn't support it well (at least with
      standard modules).
    </para>
    <para>
      With first-class modules, the situation changes, but we have to
      dispense with the representation type altogether. For immutable
      shapes, the implementation is now trivial.
    </para>
    <programlisting language="ocaml">
# module type Shape = sig
    val area : int
    val position : int * int
  end;;
module type Shape = sig val area : int val position : int * int end
# let make_rectangle ~x ~y ~width ~height =
   let module Rectangle = struct
      let area = width * height
      let position = (x, y)
   end in
   (module Rectangle : Shape);;
val make_rectangle :
  x:int -&gt; y:int -&gt; width:int -&gt; height:int -&gt; (module Shape) = &lt;fun&gt;
# let make_line ~x ~y ~dx ~dy =
   let module Line = struct
      let area = 0
      let position = (x, y)
   end in
   (module Line : Shape);;
val make_line : x:int -&gt; y:int -&gt; dx:'a -&gt; dy:'b -&gt; (module Shape) = &lt;fun&gt;
</programlisting>
    <para>
      For mutable shapes, it isn't much different, but we have to
      include the state as values in the module implementations. For
      this, we'll define a representation type <literal>t</literal> in
      the module implementation, and for rectangles, a value
      <literal>rect</literal> of that type. The code for lines is
      similar.
    </para>
    <programlisting language="ocaml">
# module type Shape = sig
     val area : unit -&gt; int
     val position : unit -&gt; int * int
     val moveby : dx:int -&gt; dy:int -&gt; unit
     val enlargeby : size:int -&gt; unit
  end;;
module type Shape = ...
# let make_rectangle ~x ~y ~width ~height =
    let module Rectangle = struct
      type t = { mutable x : int; mutable y : int;
                 mutable width : int; mutable height : int }
      let rect = { x = x; y = y; width = width; height = height }
      let area () = rect.width * rect.height
      let position () = (rect.x, rect.y)
      let moveby ~dx ~dy =
         rect.x &lt;- rect.x + dx;
         rect.y &lt;- rect.y + dy
      let enlargeby ~size =
         rect.width &lt;- rect.width * size;
         rect.height &lt;- rect.height * size
    end in
    (module Rectangle : Shape);;
val make_rectangle :
  x:int -&gt; y:int -&gt; width:int -&gt; height:int -&gt; (module Shape) = &lt;fun&gt;
</programlisting>
  </sect1>
  <sect1 id="a-more-complete-example----containers">
    <title>A more complete example -- containers</title>
    <para>
      So far, we haven't done anything that really needs modules. The
      type <literal>Shape</literal> could just as well be specified as a
      record type
      <literal>type shape = { area : int; position : int * int; ... }</literal>.
    </para>
    <para>
      To explore the topic more fully, let's implement a system of
      dynamic containers. OCaml already provides a set of standard
      containers like <literal>List</literal>, <literal>Set</literal>,
      <literal>Hashtbl</literal>, etc., but these types have to be
      selected statically. If a function expects a value of type
      <literal>Set.Make(ElementType).t</literal>, then you have to pass
      it a set of exactly that type. What we would like is a kind of
      container where the container implementation is chosen by the
      caller. We define an abstract <emphasis>interface</emphasis>, as a
      module type, then define one or more concrete module
      implementations.
    </para>
    <para>
      Let's start by defining an abstract container interface. It
      contains some elements of type <literal>elt</literal>, and
      functions to examine and iterate through the contents. For
      convenience, we also define a normal type
      <literal>'a container</literal> to represent containers with
      elements of type <literal>'a</literal>.
    </para>
    <programlisting language="ocaml">
module type Container = sig
   type elt
   val empty : unit -&gt; bool
   val iter : (elt -&gt; unit) -&gt; unit
   val fold : ('a -&gt; elt -&gt; 'a) -&gt; 'a -&gt; 'a
end;;

type 'a container = (module Container with type elt = 'a)
</programlisting>
    <sect2 id="imperative-containers">
      <title>Imperative containers</title>
      <para>
        For imperative containers, will also want functions to mutate
        the contents by adding or removing elements. For example, a
        stack can be implemented as a module <literal>Stack</literal>
        that includes all the functions in the generic
        <literal>Container</literal> module, as well as functions to
        push and pop elements.
      </para>
      <programlisting language="ocaml">
module type Stack = sig
   include Container
   val push : elt -&gt; unit
   val pop : unit -&gt; elt
end;;

type 'a stack = (module Stack with type elt = 'a)
</programlisting>
      <para>
        Now that the types are defined, the next step is to define a
        concrete container implementation. For this simple example,
        we'll use a list to represent a stack. The function
        <literal>make_list_stack</literal> constructs module
        implementation using a <literal>let module</literal>
        construction, then returns the result.
      </para>
      <programlisting language="ocaml">
# let make_list_stack (type element) () : element stack =
    let module ListStack = struct
      type elt = element
      let contents = ref []
      let empty () = !contents = []
      let iter f = List.iter f !contents
      let fold f x = List.fold_left f x !contents
      let push x = contents := x :: !contents
      let pop () =
         match !contents with
            x :: rest -&gt; contents := rest; x
          | [] -&gt; raise (Invalid_argument &quot;stack is empty&quot;)
    end in
    (module ListStack : Stack with type elt = element);;
val make_list_stack : unit -&gt; 'a stack = &lt;fun&gt;
</programlisting>
      <para>
        Note the use of the explicit type parameter
        <literal>element</literal>. This is required because the use of
        a type variable in the module definition (like
        <literal>type elt = 'a</literal>) would be rejected by the
        compiler. The construction and use of the stack is
        straightforward.
      </para>
      <programlisting language="ocaml">
# let demo (s : int stack) =
    let module S = (val s) in
    S.push 5;
    S.push 17;
    S.iter (fun i -&gt; Printf.printf &quot;Element: %d\n&quot; i);;
val demo : int stack -&gt; unit = &lt;fun&gt;
# demo (make_list_stack ());;
Element: 17
Element: 5
- : unit = ()
</programlisting>
      <para>
        The <literal>demo</literal> function is entirely oblivious to
        the implementation of the stack. Instead of passing a module
        implementation based on lists, we could pass a different
        implementation based on arrays.
      </para>
      <para>
        We could go on to define other containers, sets, dictionaries,
        queues, etc. but the implementations would be similar to what we
        have seen. Instead, let's look at functional data structures,
        which require a little more work to express.
      </para>
    </sect2>
    <sect2 id="pure-functional-containers">
      <title>Pure functional containers</title>
      <para>
        Imperative data structures have simpler types that functional
        ones because the return type of imperative functions is just
        <literal>unit</literal>. When we look at pure functional data
        structures, we immediately run into a problem with type
        recursion.
      </para>
      <programlisting language="ocaml">
# module type Container = sig
    type elt
    val empty : bool
    val iter : (elt -&gt; unit) -&gt; unit
    val fold : ('a -&gt; elt -&gt; 'a) -&gt; 'a -&gt; 'a
    val add : elt -&gt; (module Container)
  end;;
Characters 160-178:
     val add : elt -&gt; (module Container)
                      ^^^^^^^^^^^^^^^^^^
Error: Unbound module type Container
</programlisting>
      <para>
        The problem here is that module type definitions are not
        recursive -- we can't use the type being defined in its own
        definition.
      </para>
      <para>
        Recursive modules provide a solution, but it requires a
        &quot;trick&quot;, where we define a module that is equal to
        itself. This module contains only type definitions, and the only
        purpose of the outer recursive module is to allow the recursion
        in the definition. While we're at it, let's include a
        <literal>map</literal> function with the usual semantics.
      </para>
      <programlisting language="ocaml">
module rec Container : sig
   module type T = sig
      type elt
      val empty : bool
      val iter : (elt -&gt; unit) -&gt; unit
      val fold : ('a -&gt; elt -&gt; 'a) -&gt; 'a -&gt; 'a
      val map : (elt -&gt; 'a) -&gt; 'a Container.t
      val add : elt -&gt; elt Container.t
   end
   type 'a t = (module Container.T with type elt = 'a)
end = Container;;
</programlisting>
      <para>
        There are several ways to write this model, but this definition
        is convenient because it defines both a module type
        <literal>Container.T</literal> and a value type
        <literal>'a Container.t</literal>. The outer recursive module
        <literal>Container</literal> allows the module type
        <literal>T</literal> to refer to the value type
        <literal>t</literal> and <emphasis>vice versa</emphasis>. Note
        that the module <literal>Container</literal> is defined as
        itself (as <literal>Container</literal>).
      </para>
      <para>
        With this first technicality out of the way, the next one is how
        to construct values of type <literal>Container.t</literal>. In
        the imperative version of the stack, we used a function
        <literal>make_list_stack</literal>. We want to do the same here,
        but the function definition must be both recursive and
        polymorphic.
      </para>
      <programlisting language="ocaml">
# let make_stack () =
    let rec make : 'a. 'a list -&gt; 'a Container.t = fun
      (type element) (contents : element list) -&gt;
      let module NewList = struct
         type elt = element
         let empty = contents = []
         let iter f = List.iter f contents
         let fold f x = List.fold_left f x contents
         let map f = make (List.map f contents)
         let add x = make (x :: contents)
      end in
      (module NewList : Container.T with type elt = element)
   in
   make [];;
val make_stack : unit -&gt; 'a Container.t = &lt;fun&gt;
</programlisting>
      <para>
        The recursion here is particularly important. The functions
        <literal>map</literal> and <literal>add</literal> return new
        collections, so they call the function <literal>make</literal>
        recursively. The explicit polymorphic type
        <literal>make : 'a. 'a list -&gt; 'a Container.t</literal> means
        that the function <literal>make</literal> is properly
        polymorphic, so that the <literal>map</literal> function is
        polymorphic.
      </para>
      <para>
        Now that the construction is done, the usage is similar to the
        imperative case, except that now the data structure is
        functional.
      </para>
      <programlisting language="ocaml">
# let demo (s : int Container.t) =
    let module S = (val s) in
    let module S = (val (S.add 5)) in
    let module S = (val (S.add 17)) in
    S.iter (fun i -&gt; Printf.printf &quot;Int Element: %d\n&quot; i);
    let s = S.map (fun i -&gt; float_of_int i +. 0.1) in
    let module S = (val s) in
    S.iter (fun x -&gt; Printf.printf &quot;Float Element: %f\n&quot; x);
    s;;
val demo : int Container.t -&gt; float Container.t = &lt;fun&gt;
# demo (make_stack ());;
Int Element: 17
Int Element: 5
Float Element: 17.100000
Float Element: 5.100000
- : unit = ()
</programlisting>
      <para>
        The syntactic load here is pretty high, requiring a
        <literal>let module</literal> expression to name every
        intermediate value. First-class modules are fairly new to the
        language, and this is likely to change, but in the meantime the
        syntactic load can be pretty daunting.
      </para>
      <para>
        Let's look a some other more typical examples, where dynamic
        module selection is more localized.
      </para>
      <para>
        _(jyh: This is a rough draft, I'm not sure about the ordering
        and the topics, yet. Switching back to Ron's text now.)
      </para>
    </sect2>
  </sect1>
  <sect1 id="dynamically-choosing-a-module">
    <title>Dynamically choosing a module</title>
    <para>
      Perhaps the simplest thing you can do with first-class modules
      that you can't do without them is to pick the implementation of a
      module at runtime.
    </para>
    <para>
      Consider an application that does I/O multiplexing using a system
      call like <literal>select</literal> to determine which file
      descriptors are ready to use. There are in fact multiple APIs you
      might want to use, including <literal>select</literal> itself,
      <literal>epoll</literal>, and <literal>libev</literal>, where
      different multiplexers make somewhat different performance and
      portability trade-offs. You could support all of these in one
      application by defining a single module, let's call it
      <literal>Mutliplexer</literal>, whose implementation is chosen at
      run-time based on an environment variable.
    </para>
    <para>
      To do this, you'd first need an interface <literal>S</literal>
      that all of the different multiplexer implementations would need
      to match, and then an implementation of each multiplexer.
    </para>
    <programlisting language="ocaml">
(* file: multiplexer.ml *)

(* An interface the OS-specific functionality *)
module type S = sig ... end

(* The implementations of each individual multiplexer *)
module Select : S = struct ... end
module Epoll  : S = struct ... end
module Libev  : S = struct ... end
</programlisting>
    <para>
      We can choose the first-class module that we want based on looking
      up an environment variable.
    </para>
    <programlisting language="ocaml">
let multiplexer =
  match Sys.getenv &quot;MULTIPLEXER&quot; with
  | None
  | Some &quot;select&quot; -&gt; (module Select : S)
  | Some &quot;epoll&quot;  -&gt; (module Epoll : S)
  | Some &quot;libev&quot;  -&gt; (module Libev : S)
  | Some other -&gt; failwithf &quot;Unknown multiplexer: %s&quot; other ()
</programlisting>
    <para>
      Finally, we can convert the resulting first-class module back to
      an ordinary module, and then include that so it becomes part of
      the body of our module.
    </para>
    <programlisting language="ocaml">
(* The final, dynamically chosen, implementation *)
include (val multiplexer : S)
</programlisting>
  </sect1>
  <sect1 id="example-a-service-bundle">
    <title>Example: A service bundle</title>
    <para>
      This section describes the design of a library for bundling
      together multiple services, where a service is a piece of code
      that exports a query interface. A service bundle combines together
      multiple individual services under a single query interface that
      works by dispatching incoming queries to the appropriate
      underlying service.
    </para>
    <para>
      The following is a first attempt at an interface for our
      <literal>Service</literal> module, which contains both a module
      type <literal>S</literal>, which is the interface that a service
      should meet, as well as a <literal>Bundle</literal> module which
      is for combining multiple services.
    </para>
    <programlisting language="ocaml">
(* file: service.mli *)

open Core.Std

(** The module type for a service. *)
module type S = sig
  type t
  val name           : string
  val create         : unit -&gt; t
  val handle_request : t -&gt; Sexp.t -&gt; Sexp.t Or_error.t
end

(** Bundles multiple services together *)
module Bundle : sig
  type t
  val create : (module S) list -&gt; t
  val handle_request : t -&gt; Sexp.t -&gt; Sexp.t Or_error.t
  val service_names  : t -&gt; string list
end
</programlisting>
    <para>
      Here, a service has a state, represented by the type
      <literal>t</literal>, a name by which the service can be
      referenced, a function <literal>create</literal> for instantiating
      a service, and a function by which a service can actually handle a
      request. Here, requests and responses are delivered as
      s-expressions. At the <literal>Bundle</literal> level, the
      s-expression of a request is expected to be formatted as follows:
    </para>
    <programlisting>
(&lt;service-name&gt; &lt;body&gt;)
</programlisting>
    <para>
      where <literal>&lt;service_name&gt;</literal> is the service that
      should handle the request, and <literal>&lt;body&gt;</literal> is
      the body of the request.
    </para>
    <para>
      Now let's look at how to implement <literal>Service</literal>. The
      core datastructure of <literal>Bundle</literal> is a hashtable of
      request handlers, one per service. Each request handler is a
      function of type
      <literal>(Sexp.t -&gt; Sexp.t Or_error.t)</literal>. These request
      handlers really stand in for the underlying service, with the
      particular state of the service in question being hidden inside of
      the request handler.
    </para>
    <para>
      The first part of <literal>service.ml</literal> is just the
      preliminaries: the definition of the module type
      <literal>S</literal>, and the definition of the type
      <literal>Bundle.t</literal>.
    </para>
    <programlisting language="ocaml">
(* file: service.ml *)

open Core.Std

module type S = sig
  type t
  val name           : string
  val create         : unit -&gt; t
  val handle_request : t -&gt; Sexp.t -&gt; Sexp.t Or_error.t
end

module Bundle = struct
  type t = { handlers: (Sexp.t -&gt; Sexp.t Or_error.t) String.Table.t; }
</programlisting>
    <para>
      The next thing we need is a function for creating a
      <literal>Bundle.t</literal>. This <literal>create</literal>
      function builds a table to hold the request handlers, and then
      iterates through the services, unpacking each module, constructing
      the request handler, and then putting that request handler in the
      table.
    </para>
    <programlisting language="ocaml">
  (** Creates a handler given a list of services *)
  let create services =
    let handlers = String.Table.create () in
    List.iter services ~f:(fun service_m -&gt;
      let module Service = (val service_m : S) in
      let service = Service.create () in
      if Hashtbl.mem handlers Service.name then
        failwith (&quot;Attempt to register duplicate handler for &quot;^Service.name);
      Hashtbl.replace handlers ~key:Service.name
        ~data:(fun sexp -&gt; Service.handle_request service sexp)
    );
    {handlers}
</programlisting>
    <para>
      Note that the <literal>Service.t</literal> that is created is
      referenced by the corresponding request handler, so that it is
      effectively hidden behind the function in the
      <literal>handlers</literal> table.
    </para>
    <para>
      Now we can write the function for the bundle to handle requests.
      The handler will examine the s-expression to determine the body of
      the query and the name of the service to dispatch to. It then
      looks up the handler calls it to generate the response.
    </para>
    <programlisting language="ocaml">
  let handle_request t sexp =
    match sexp with
    | Sexp.List [Sexp.Atom name;query] -&gt;
      begin match Hashtbl.find t.handlers name with
      | None -&gt; Or_error.error_string (&quot;Unknown service: &quot;^name)
      | Some handler -&gt;
        try handler query
        with exn -&gt; Error (Error.of_exn exn)
      end
    | _ -&gt; Or_error.error_string &quot;Malformed query&quot;
</programlisting>
    <para>
      Last of all, we define a function for looking up the names of the
      available services.
    </para>
    <programlisting language="ocaml">
  let service_names t = Hashtbl.keys t.handlers

end
</programlisting>
    <para>
      To see this system in action, we need to define some services,
      create the corresponding bundle, and then hook that bundle up to
      some kind of client. For simplicity, we'll build a simple
      command-line interface. There are two functions below:
      <literal>handle_one</literal>, which handles a single interaction;
      and <literal>handle_loop</literal>, which creates the bundle and
      then runs <literal>handle_one</literal> in a loop.
    </para>
    <programlisting language="ocaml">
(* file: service_client.ml *)

open Core.Std

(** Handles a single request coming from stdin *)
let handle_one bundle =
  printf &quot;&gt;&gt;&gt; %!&quot;; (* prompt *)
  match In_channel.input_line stdin with
  | None -&gt; `Stop (* terminate on end-of-stream, so Ctrl-D will exit *)
  | Some line -&gt;
    let line = String.strip line in (* drop leading and trailing whitespace *)
    if line = &quot;&quot; then `Continue
    else match Or_error.try_with (fun () -&gt; Sexp.of_string line) with
    | Error err -&gt;
      eprintf &quot;Couldn't parse query: %s\n%!&quot; (Error.to_string_hum err);
      `Continue
    | Ok query_sexp -&gt;
      let resp = Service.Bundle.handle_request bundle query_sexp in
      Sexp.output_hum stdout (&lt;:sexp_of&lt;Sexp.t Or_error.t&gt;&gt; resp);
      Out_channel.newline stdout;
      `Continue

let handle_loop services =
  let bundle = Service.Bundle.create services in
  let rec loop () =
    match handle_one bundle with
    | `Stop -&gt; ()
    | `Continue -&gt; loop ()
  in
  loop ()
</programlisting>
    <para>
      Now we'll create a couple of toy services. One service is a
      counter that can be updated by query; and the other service lists
      a directory. The last line then kicks off the shell with the
      services we've defined.
    </para>
    <programlisting language="ocaml">
module Counter : Service.S = struct
  type t = int ref

  let name = &quot;update-counter&quot;
  let create () = ref 0

  let handle_request t sexp =
    match Or_error.try_with (fun () -&gt; int_of_sexp sexp) with
    | Error _ as err -&gt; err
    | Ok x -&gt;
      t := !t + x;
      Ok (sexp_of_int !t)
end

module List_dir : Service.S = struct
  type t = unit

  let name = &quot;ls&quot;
  let create () = ()

  let handle_request () sexp =
    match Or_error.try_with (fun () -&gt; string_of_sexp sexp) with
    | Error _ as err -&gt; err
    | Ok dir -&gt; Ok (Array.sexp_of_t String.sexp_of_t (Sys.readdir dir))
end

let () =
  handle_loop [(module List_dir : Service.S); (module Counter : Service.S)]
</programlisting>
    <para>
      And now we can go ahead and start up the client.
    </para>
    <programlisting>
$ ./service_client.byte
&gt;&gt;&gt; (update-counter 1)
(Ok 1)
&gt;&gt;&gt; (update-counter 10)
(Ok 11)
&gt;&gt;&gt; (ls .)
(Ok
 (_build _tags service.ml service.mli service.mli~ service.ml~
  service_client.byte service_client.ml service_client.ml~))
&gt;&gt;&gt;
</programlisting>
    <para>
      Now, let's consider what happens to the design when we want to
      make the interface of a service a bit more realistic. In
      particular, right now services are created without any
      configuration. Let's add a config type to each service, and change
      the interface of <literal>Bundle</literal> so that services can be
      registered along with their configs. At the same time, we'll
      change the <literal>Bundle</literal> API to allow services to be
      changed dynamically, rather than just added at creation time.
    </para>
  </sect1>
</chapter></part><part label="II"><title>Tools and Techniques</title><partintro><para>Part II builds on the basics by working through useful tools and techniques for using OCaml. 
     Here you'll pick up useful techniques for building networked systems, as well as functional 
     design patterns that help combine different features of the language to good effect.</para><para>The focus throughout this section is on networked systems, and among other examples we'll 
      build a running example that will perform Internet queries using the DuckDuckGo search engine.</para></partintro><chapter id="maps-and-hashtables">
  <title>Maps and Hashtables</title>
  <para>
    Lots of programming problems require dealing with data organized as
    key/value pairs. Maybe the simplest way of representing such data in
    OCaml is an <emphasis>association list</emphasis>, which is simply a
    list of pairs of keys and values. For example, you could represent a
    mapping between the 10 digits and their English names as follows.
  </para>
  <programlisting language="ocaml">
# let digit_alist =
    [ 0, &quot;zero&quot;; 1, &quot;one&quot;; 2, &quot;two&quot;  ; 3, &quot;three&quot;; 4, &quot;four&quot;
    ; 5, &quot;five&quot;; 6, &quot;six&quot;; 7, &quot;seven&quot;; 8, &quot;eight&quot;; 9, &quot;nine&quot; ]
  ;;
</programlisting>
  <para>
    We can use functions from the <literal>List.Assoc</literal> module
    to manipulate such an association list.
  </para>
  <programlisting language="ocaml">
# List.Assoc.find digit_alist 6;;
- : string option = Some &quot;six&quot;
# List.Assoc.find digit_alist 22;;
- : string option = None
# List.Assoc.add digit_alist 0 &quot;zilch&quot;;;
- : (int, string) List.Assoc.t =
[(0, &quot;zilch&quot;); (1, &quot;one&quot;); (2, &quot;two&quot;); (3, &quot;three&quot;); (4, &quot;four&quot;);
 (5, &quot;five&quot;); (6, &quot;six&quot;); (7, &quot;seven&quot;); (8, &quot;eight&quot;); (9, &quot;nine&quot;)]
</programlisting>
  <para>
    Association lists are simple and easy to use, but their performance
    is not ideal, since almost every non-trivial operation on an
    association list requires a linear-time scan of the list.
  </para>
  <para>
    In this chapter, we'll talk about two more efficient alternatives to
    association lists: <emphasis>maps</emphasis> and
    <emphasis>hashtables</emphasis>. A map is an immutable tree-based
    data structure where most operations take time logarithmic in the
    size of the map, whereas a hashtable is a mutable data structure
    where most operations have constant time complexity. We'll describe
    both of these data structures in detail, and provide some advice as
    to how to choose between them.
  </para>
  <sect1 id="maps">
    <title>Maps</title>
    <para>
      Let's consider an example of how one might use a map in practice.
      In <xref linkend="files-modules-and-programs"/>, we
      showed a module <literal>Counter</literal> for keeping frequency
      counts on a set of strings. Here's the interface.
    </para>
    <programlisting language="ocaml">
(* counter.mli *)
open Core.Std

type t

val empty : t
val touch : t -&gt; string -&gt; t
val to_list : t -&gt; (string * int) list
</programlisting>
    <para>
      The intended behavior here is straightforward.
      <literal>Counter.empty</literal> represents an empty collection of
      frequency counts; <literal>touch</literal> increments the
      frequency count of the specified string by 1; and
      <literal>to_list</literal> returns the list of non-zero
      frequencies.
    </para>
    <para>
      Here's the implementation.
    </para>
    <programlisting language="ocaml">
(* counter.ml *)
open Core.Std

type t = int String.Map.t

let empty = String.Map.empty

let to_list t = Map.to_alist t

let touch t s =
  let count = Option.value ~default:0 (Map.find t s) in
  Map.add t ~key:s ~data:(count + 1)
</programlisting>
    <para>
      Note that in some places the above code refers to
      <literal>String.Map.t</literal>, and in others
      <literal>Map.t</literal>. This has to do with the fact that maps
      are implemented as ordered binary trees, and as such, need a way
      of comparing keys.
    </para>
    <para>
      To deal with this, a map, once created, stores the necessary
      comparison function within the data structure. Thus, operations
      like <literal>Map.find</literal> or <literal>Map.add</literal>
      that access the contents of a map or create a new map from an
      existing one, do so by using the comparison function embedded
      within the map.
    </para>
    <para>
      But in order to get a map in the first place, you need to get your
      hands on the comparison function somehow. For this reason, modules
      like <literal>String</literal> contain a <literal>Map</literal>
      sub-module that have values like
      <literal>String.Map.empty</literal> and
      <literal>String.Map.of_alist</literal> that are specialized to
      strings, and thus have access to a string comparison function.
      Such a <literal>Map</literal> sub-module is included in every
      module that satisfies the <literal>Comparable.S</literal>
      interface from Core.
    </para>
    <sect2 id="creating-maps-with-comparators">
      <title>Creating maps with comparators</title>
      <para>
        The specialized <literal>Map</literal> sub-module is convenient,
        but it's not the only way of creating a
        <literal>Map.t</literal>. The information required to compare
        values of a given type is wrapped up in a value called a
        <emphasis>comparator</emphasis>, that can be used to create maps
        using the <literal>Map</literal> module directly.
      </para>
      <programlisting language="ocaml">
# let digit_map = Map.of_alist_exn digit_alist
                     ~comparator:Int.comparator;;
val digit_map : (int, string, Int.comparator) Map.t = &lt;abstr&gt;
# Map.find digit_map 3;;
- : string option = Some &quot;three&quot;
</programlisting>
      <para>
        The above uses <literal>Map.of_alist_exn</literal> which creates
        a map from an association list, throwing an exception if there
        are duplicate keys in the list.
      </para>
      <para>
        The comparator is only required for operations that create maps
        from scratch. Operations that update an existing map simply
        inherit the comparator of the map they start with.
      </para>
      <programlisting language="ocaml">
# let zilch_map = Map.add digit_map ~key:0 ~data:&quot;zilch&quot;;;
val zilch_map : (int, string, Int.comparator) Map.t = &lt;abstr&gt;
</programlisting>
      <para>
        The type <literal>Map.t</literal> has three type parameters: one
        for the key, one for the value, and one to identify the
        comparator. Indeed, the type <literal>'a Int.Map.t</literal> is
        just a type alias for
        <literal>(int,'a,Int.comparator) Map.t</literal>
      </para>
      <para>
        Including the comparator in the type is important because
        because operations that work on multiple maps at the same time
        often require that the maps share their comparison function.
        Consider, for example, <literal>Map.symmetric_diff</literal>,
        which computes a summary of the differences between two maps.
      </para>
      <programlisting language="ocaml">
# let left = String.Map.of_alist_exn [&quot;foo&quot;,1; &quot;bar&quot;,3; &quot;snoo&quot;, 0]
  let right = String.Map.of_alist_exn [&quot;foo&quot;,0; &quot;snoo&quot;, 0]
  let diff = Map.symmetric_diff ~data_equal:Int.equal left right
  ;;
val left : int String.Map.t = &lt;abstr&gt;
val right : int String.Map.t = &lt;abstr&gt;
val diff :
  (string * [ `Left of int | `Right of int | `Unequal of int * int ]) list =
  [(&quot;foo&quot;, `Unequal (1, 0)); (&quot;bar&quot;, `Left 3)]
</programlisting>
      <para>
        The type of <literal>Map.symmetric_diff</literal>, shown below,
        requires that the two maps it compares have the same comparator
        type. Each comparator has a fresh abstract type, so the type of
        a comparator identifies the comparator uniquely.
      </para>
      <programlisting language="ocaml">
# Map.symmetric_diff;;
- : ('k, 'v, 'cmp) Map.t -&gt;
    ('k, 'v, 'cmp) Map.t -&gt;
    data_equal:('v -&gt; 'v -&gt; bool) -&gt;
    ('k * [ `Left of 'v | `Right of 'v | `Unequal of 'v * 'v ]) list
= &lt;fun&gt;
</programlisting>
      <para>
        This constraint is important because the algorithm that
        <literal>Map.symmetric_diff</literal> uses depends on the fact
        that both maps have the same comparator.
      </para>
      <para>
        We can create a new comparator using the
        <literal>Comparator.Make</literal> functor, which takes as its
        input a module containing the type of the object to be compared,
        sexp-converter functions, and a comparison function. The sexp
        converters are included in the comparator to make it possible
        for users of the comparator to generate better error messages.
        Here's an example.
      </para>
      <programlisting language="ocaml">
# module Reverse = Comparator.Make(struct
    type t = string
    let sexp_of_t = String.sexp_of_t
    let t_of_sexp = String.t_of_sexp
    let compare x y = String.compare y x
  end);;
module Reverse :
  sig
    type t = string
    val compare : t -&gt; t -&gt; int
    val t_of_sexp : Sexp.t -&gt; t
    val sexp_of_t : t -&gt; Sexp.t
    type comparator
    val comparator : (t, comparator) Comparator.t_
  end
</programlisting>
      <para>
        As you can see below, both <literal>Reverse.comparator</literal>
        and <literal>String.comparator</literal> can be used to create
        maps with a key type of <literal>string</literal>.
      </para>
      <programlisting language="ocaml">
# let alist = [&quot;foo&quot;, 0; &quot;snoo&quot;, 3];;
val alist : (string * int) list = [(&quot;foo&quot;, 0); (&quot;snoo&quot;, 3)]
# let ord_map = Map.of_alist_exn ~comparator:String.comparator alist;;
val ord_map : (string, int, String.comparator) Map.t = &lt;abstr&gt;
# let rev_map = Map.of_alist_exn ~comparator:Reverse.comparator alist;;
val rev_map : (string, int, Reverse.comparator) Map.t = &lt;abstr&gt;
</programlisting>
      <para>
        <literal>Map.min_elt</literal> returns the key and value for the
        smallest key in the map, which lets us see that these two maps
        do indeed use different comparison functions.
      </para>
      <programlisting language="ocaml">
# Map.min_elt ord_map;;
- : (string * int) option = Some (&quot;foo&quot;, 0)
# Map.min_elt rev_map;;
- : (string * int) option = Some (&quot;snoo&quot;, 3)
</programlisting>
      <para>
        And accordingly, if we try to use
        <literal>Map.symmetric_diff</literal> on these two maps, we'll
        get a compile-timer error.
      </para>
      <programlisting language="ocaml">
# Map.symmetric_diff ord_map rev_map;;

Error: This expression has type (string, int, Reverse.comparator) Map.t
       but an expression was expected of type
         ('a, 'b, 'c) Map.t = (string, int, String.comparator) Map.t
       Type Reverse.comparator is not compatible with type String.comparator 
</programlisting>
    </sect2>
    <sect2 id="trees">
      <title>Trees</title>
      <para>
        As we've discussed, maps carry within them the comparator that
        they were created with. Sometimes, often for space efficiency
        reasons, you want a version of the map data structure that
        doesn't include the comparator. You can get such a
        representation with <literal>Map.to_tree</literal>, which
        returns just the tree that the map is built out of, and not
        including the comparator.
      </para>
      <programlisting language="ocaml">
# let ord_tree = Map.to_tree ord_map;; 
val ord_tree : (string, int, String.comparator) Map.Tree.t = &lt;abstr&gt;
</programlisting>
      <para>
        Even though a <literal>Map.Tree.t</literal> doesn't physically
        include a comparator, it does include the comparator in its
        type. This is what is known as a <emphasis>phantom type
        parameter</emphasis>, because it reflects something about the
        logic of value in question, even though it doesn't correspond to
        any values directly represented in the underlying physical
        structure of the value.
      </para>
      <para>
        Since the comparator isn't included in the tree, we need to
        provide the comparator explicitly when we, say, search for a
        key, as shown below.
      </para>
      <programlisting language="ocaml">
# Map.Tree.find ~comparator:String.comparator ord_tree &quot;snoo&quot;;;
- : int option = Some 3
</programlisting>
      <para>
        The algorithm of <literal>Map.Tree.find</literal> depends on the
        fact that it's using the same comparator when looking a value up
        as you were when you stored it. That's the invariant that the
        phantom type is there to enforce. As you can see below, using
        the wrong comparator will lead to a type error.
      </para>
      <programlisting language="ocaml">
# Map.Tree.find ~comparator:Reverse.comparator ord_tree &quot;snoo&quot;;;

Error: This expression has type (string, int, String.comparator) Map.Tree.t
       but an expression was expected of type
         ('a, 'b, 'c) Map.Tree.t = (string, 'b, Reverse.comparator) Map.Tree.t
       Type String.comparator is not compatible with type Reverse.comparator 
</programlisting>
    </sect2>
    <sect2 id="the-polymorphic-comparator">
      <title>The polymorphic comparator</title>
      <para>
        We don't need to generate specialized comparators for every type
        we want to build a map on. We can instead use a comparator based
        on OCaml's build-in polymorphic comparison function, which was
        discussed in <xref linkend="lists-and-patterns"/>.
        This comparator is found in the
        <literal>Comparator.Poly</literal> module, allowing us to write:
      </para>
      <programlisting language="ocaml">
# Map.of_alist_exn ~comparator:Comparator.Poly.comparator digit_alist;;
- : (int, string, Comparator.Poly.comparator) Map.t = &lt;abstr&gt;
</programlisting>
      <para>
        Or, equivalently:
      </para>
      <programlisting language="ocaml">
# Map.Poly.of_alist_exn digit_alist;;
- : (int, string) Map.Poly.t = &lt;abstr&gt;
</programlisting>
      <para>
        Note that maps based on the polymorphic comparator are not
        equivalent to those based on the type-specific comparators from
        the point of view of the type system. Thus, the compiler rejects
        the following:
      </para>
      <programlisting language="ocaml">
# Map.symmetric_diff (Map.Poly.singleton 3 &quot;three&quot;)
                     (Int.Map.singleton  3 &quot;four&quot; ) ;;

Error: This expression has type 'a Int.Map.t = (int, 'a, Int.comparator) Map.t
       but an expression was expected of type
         ('b, 'c, 'd) Map.t = (int, string, Z.Poly.comparator) Map.t
       Type Int.comparator is not compatible with type Z.Poly.comparator 
</programlisting>
      <para>
        This is rejected for good reason: there's no guarantee that the
        comparator associated with a given type will order things in the
        same way that polymorphic compare does.
      </para>
    </sect2>
    <sect2 id="sets">
      <title>Sets</title>
      <para>
        Sometimes, instead of keeping track of a set of key/value pairs,
        you just want a data-type for keeping track of a set of keys.
        You could build this on top of a map by representing a set of
        values by a map whose data type is <literal>unit</literal>. But
        a more idiomatic (and efficient) solution is to use Core's set
        type, which is similar in design and spirit to the map type,
        while having an API better tuned to working with sets, and a
        lower memory footprint. Here's a simple example:
      </para>
      <programlisting language="ocaml">
# let dedup ~comparator l =
    List.fold l ~init:(Set.empty ~comparator) ~f:Set.add
    |&gt; Set.to_list
  ;;
val dedup : comparator:('a, 'b) Core.Comparator.t_ -&gt; 'a list -&gt; 'a list =
  &lt;fun&gt;
# dedup ~comparator:Int.comparator [8;3;2;3;7;8;10];;
- : int list = [2; 3; 7; 8; 10]
</programlisting>
      <para>
        In addition to the operators you would expect to have for maps,
        sets support the traditional set operations, including union,
        intersection and set difference. And, as with maps, we can
        create sets based on type-specific comparators or on the
        polymorphic comparator.
      </para>
      <warning> <title> 
      The perils of polymorphic compare
      </title>
      <para>
        Polymorphic compare is highly convenient, but it has serious
        downsides as well, and should be used with care. In particular,
        polymorphic compare has a fixed algorithm for comparing values
        of any type, and that algorithm can sometimes yield surprising
        results.
      </para>
      <para>
        To understand what's wrong with polymorphic compare, you need to
        understand a bit about how it works. Polymorphic compare is
        <emphasis>structural</emphasis>, in that it operates directly on
        the runtime-representation of OCaml values, walking the
        structure of the values in question without regard for their
        type.
      </para>
      <para>
        This is convenient because it provides a comparison function
        that works for most OCaml values, and largely behaves as you
        would expect. For example, on <literal>int</literal>s and
        <literal>float</literal>s it acts as you would expect a numeric
        comparison function to act. For simple containers like strings
        and lists and arrays it operates as a lexicographic comparison.
        And except for closures and values from outside of the OCaml
        heap, it works on almost every OCaml type.
      </para>
      <para>
        But sometimes, a structural comparison is not what you want.
        Sets are a great example of this. Consider the following two
        sets.
      </para>
      <programlisting language="ocaml">
# let (s1,s2) = (Int.Set.of_list [1;2],
                 Int.Set.of_list [2;1]);;
val s1 : Int.Set.t = &lt;abstr&gt;
val s2 : Int.Set.t = &lt;abstr&gt;
</programlisting>
      <para>
        Logically, these two sets should be equal, and that's the result
        that you get if you call <literal>Set.equal</literal> on them.
      </para>
      <programlisting language="ocaml">
# Set.equal s1 s2;;
- : bool = true
</programlisting>
      <para>
        But because the elements were added in different orders, the
        layout of the trees underlying the sets will be different. As
        such, a structural comparison function will conclude that
        they're different.
      </para>
      <para>
        Let's see what happens if we use polymorphic compare to test for
        equality by way of the <literal>=</literal> operator. Comparing
        the maps directly will fail at runtime because the comparators
        stored within the sets contain function values.
      </para>
      <programlisting language="ocaml">
# s1 = s2;;
Exception: (Invalid_argument &quot;equal: functional value&quot;).
</programlisting>
      <para>
        We can however use the function <literal>Set.to_tree</literal>
        to expose the underlying tree without the attached comparator.
      </para>
      <programlisting language="ocaml">
# Set.to_tree s1 = Set.to_tree s2;;
- : bool = false
</programlisting>
      <para>
        This can cause real and quite subtle bugs. If, for example, you
        use a map whose keys contain sets, then the map built with the
        polymorphic comparator will behave incorrectly, separating out
        keys that should be aggregated together. Even worse, it will
        work sometimes and fail others, since if the sets are built in a
        consistent order, then they will work as expected, but once the
        order changes, the behavior will change.
      </para>
      <para>
        For this reason, it's preferable to avoid polymorphic compare
        for serious applications.
      </para>
      </warning>
    </sect2>
    <sect2 id="satisfying-the-comparable.s-interface">
      <title>Satisfying the <literal>Comparable.S</literal>
      interface</title>
      <para>
        Core's <literal>Comparable.S</literal> interface includes a lot
        of useful functionality, including support for working with maps
        and sets. In particular, <literal>Comparable.S</literal>
        requires the presence of the <literal>Map</literal> and
        <literal>Set</literal> sub-modules as well as a comparator.
      </para>
      <para>
        <literal>Comparable.S</literal> is satisfied by most of the
        types in Core, but the question arises of how to satisfy the
        comparable interface for a new type that you design. Certainly
        implementing all of the required functionality from scratch
        would be an absurd amount of work.
      </para>
      <para>
        The module <literal>Comparable</literal> contains a number of
        functors to help you do just this. The simplest one of these is
        <literal>Comparable.Make</literal>, which takes as an input any
        module that satisfies the following interface:
      </para>
      <programlisting language="ocaml">
sig
  type t
  val sexp_of_t : t -&gt; Sexp.t
  val t_of_sexp : Sexp.t -&gt; t
  val compare : t -&gt; t -&gt; int
end
</programlisting>
      <para>
        In other words, it expects a type with a comparison function as
        well as functions for converting to and from
        <emphasis>s-expressions</emphasis>. S-expressions are a
        serialization format used commonly in Core, which we'll discuss
        more in
        <xref linkend="data-serialization-with-s-expressions"/>.
        In the meantime, we can just use the
        <literal>with sexp</literal> declaration that comes from the
        <literal>sexplib</literal> syntax extension to create
        s-expression converters for us. S-expression converters can also
        be written by hand.
      </para>
      <para>
        The following example shows how this all fits together,
        following the same basic pattern for using functors described in
        <xref linkend="extending-modules"/>.
      </para>
      <programlisting language="ocaml">
# module Foo_and_bar : sig
    type t = { foo: Int.Set.t; bar: string }
    include Comparable.S with type t := t
  end = struct
    module T = struct
      type t = { foo: Int.Set.t; bar: string } with sexp
      let compare t1 t2 =
        let c = Int.Set.compare t1.foo t2.foo in
        if c &lt;&gt; 0 then c else String.compare t1.bar t2.bar
    end
    include T
    include Comparable.Make(T)
  end;;
</programlisting>
      <para>
        We don't include the full response from the top-level because it
        is quite lengthy, but <literal>Foo_and_bar</literal> does
        satisfy <literal>Comparable.S</literal>.
      </para>
      <para>
        In the above, we wrote the comparison function by hand, but this
        isn't strictly necessary. Core ships with a syntax extension
        called <literal>comparelib</literal> which will create a
        comparison function from a type definition. Using it, we can
        rewrite the above example as follows.
      </para>
      <programlisting language="ocaml">
# module Foo_and_bar : sig
    type t = { foo: Int.Set.t; bar: string }
    include Comparable.S with type t := t
  end = struct
    module T = struct
      type t = { foo: Int.Set.t; bar: string } with sexp, compare
    end
    include T
    include Comparable.Make(T)
  end;;
</programlisting>
      <para>
        The comparison function created by <literal>comparelib</literal>
        for a given type will call out to the comparison functions for
        its component types. As a result, the <literal>foo</literal>
        field will be compared using <literal>Int.Set.compare</literal>.
        This is different, and sander, than the structural comparison
        done by polymorphic compare.
      </para>
      <para>
        If you want your comparison function to behave in a specific
        way, you should still write your own comparison function by
        hand; but if all you want is a total order suitable for creating
        maps and sets with, then <literal>comparelib</literal> is a good
        way to go.
      </para>
      <para>
        You can also satisfy the <literal>Comparable.S</literal>
        interface using polymorphic compare.
      </para>
      <programlisting language="ocaml">
# module Foo_and_bar : sig
    type t = { foo: int; bar: string }
    include Comparable.S with type t := t
  end = struct
    module T = struct
      type t = { foo: int; bar: string } with sexp
    end
    include T
    include Comparable.Poly(T)
  end;;
</programlisting>
      <para>
        That said, for reasons we discussed earlier, polymorphic compare
        should be used sparingly.
      </para>
    </sect2>
  </sect1>
  <sect1 id="hashtables">
    <title>Hashtables</title>
    <para>
      Hashtables are the imperative cousin of maps. We walked over a
      basic hashtable implementation in
      <xref linkend="imperative-programming-1"/>, so in this
      section we'll mostly discuss the pragmatics of Core's
      <literal>Hashtbl</literal> module. We'll cover this material more
      briefly than we did with maps, because many of the concepts are
      shared.
    </para>
    <para>
      Hashtables differ from maps in a few key ways. First, hashtables
      are mutable, meaning that adding a key/value pair to a hashtable
      modifies the table, rather than creating a new table with the
      binding added. Second, hashtables generally have better
      time-complexity than maps, providing constant time lookup and
      modifications as opposed to logarithmic for maps. And finally,
      just as maps depend on having a comparison function for creating
      the ordered binary tree that underlies a map, hashtables depend on
      having a <emphasis>hash function</emphasis>,
      <emphasis>i.e.</emphasis>, a function for converting a key to an
      integer.
    </para>
    <para>
      When creating a hashtable, we need to provide a value of type
      <emphasis>hashable</emphasis> which includes among other things
      the function for hashing the key type. This is analogous to the
      comparator used for creating maps.
    </para>
    <programlisting language="ocaml">
# let table = Hashtbl.create ~hashable:String.hashable ();;
val table : (string, '_a) Hashtbl.t = &lt;abstr&gt;
# Hashtbl.replace table ~key:&quot;three&quot; ~data:3;;
- : unit = ()
# Hashtbl.find table &quot;three&quot;;;
- : int option = Some 3
</programlisting>
    <para>
      The <literal>hashable</literal> value is included as part of the
      <literal>Hashable.S</literal> interface, which is satisfied by
      most types in Core. The <literal>Hashable.S</literal> interface
      also includes a <literal>Table</literal> sub-module which provides
      more convenient creation functions.
    </para>
    <programlisting language="ocaml">
# let table = String.Table.create ();;
val table : '_a String.Table.t = &lt;abstr&gt;
</programlisting>
    <para>
      There is also a polymorphic <literal>hashable</literal> value,
      corresponding to the polymorphic hash function provided by the
      OCaml runtime, for cases where you don't have a hash function for
      your specific type.
    </para>
    <programlisting language="ocaml">
# let table = Hashtbl.create ~hashable:Hashtbl.Poly.hashable ();;
val table : ('_a, '_b) Hashtbl.t = &lt;abstr&gt;
</programlisting>
    <para>
      Or, equivalently:
    </para>
    <programlisting language="ocaml">
# let table = Hashtbl.Poly.create ();;
val table : ('_a, '_b) Hashtbl.t = &lt;abstr&gt;
</programlisting>
    <para>
      Note that, unlike the comparators used with maps and sets,
      hashables don't show up in the type of a
      <literal>Hashtbl.t</literal>. That's because hashtables don't have
      operations that operate on multiple hashtables that depend on
      those tables having the same hash function, in that way that
      <literal>Map.symmetric_diff</literal> and
      <literal>Set.union</literal> depend on their arguments using the
      same comparison function.
    </para>
    <sect2 id="satisfying-the-hashable.s-interface">
      <title>Satisfying the <literal>Hashable.S</literal>
      interface</title>
      <para>
        Most types in Core satisfy the <literal>Hashable.S</literal>
        interface, but as with the <literal>Comparable.S</literal>
        interface, the question remains of how one should satisfy this
        interface with a new type. Again, the answer is to use a functor
        to build the necessary functionality; in this case,
        <literal>Hashable.Make</literal>. Note that we use OCaml's
        <literal>lxor</literal> operator for doing the
        &quot;logical&quot; (<emphasis>i.e.</emphasis>, bit-wise)
        exclusive-or of the hashes from the component values.
      </para>
      <programlisting language="ocaml">
# module Foo_and_bar : sig
    type t = { foo: int; bar: string }
    include Hashable.S with type t := t
  end = struct
    module T = struct
      type t = { foo: int; bar: string } with sexp, compare
      let hash t =
        (Int.hash t.foo) lxor (String.hash t.bar)
    end
    include T
    include Hashable.Make(T)
  end;;
</programlisting>
      <para>
        Note that in order to satisfy hashable, one also needs to
        provide a comparison function. That's because Core's hashtables
        use ordered binary tree data-structure for the hash-buckets, so
        that performance of the table degrades gracefully in the case of
        pathologically bad choice of hash function.
      </para>
      <para>
        There is currently no analogue of <literal>comparelib</literal>
        for auto-generation of hash-functions, so you do need to either
        write the hash-function by hand, or use the built-in polymorphic
        hash function, <literal>Hashtbl.hash</literal>.
      </para>
    </sect2>
  </sect1>
  <sect1 id="choosing-between-maps-and-hashtables">
    <title>Choosing between maps and hashtables</title>
    <para>
      Maps and hashtables overlap enough in functionality that it's not
      always clear when to choose one or the other. Maps, by virtue of
      being immutable, are generally the default choice in OCaml by
      virtue of fitting most naturally with otherwise functional code.
      OCaml also has good support for imperative programming, though,
      and when programming in an imperative idiom, hashtables are often
      the more natural choice.
    </para>
    <para>
      Programming idioms aside, there are significant performance
      differences between maps and hashtables as well. For code that is
      dominated by updates and lookups, hashtables are a clear
      performance win, and the win is clearer the larger the size of the
      tables.
    </para>
    <para>
      The best way of answering a performance question is by running a
      benchmark, so let's do just that. The following benchmark uses the
      <literal>core_bench</literal> library, and it compares maps and
      hashtables under a very simple workload. Here, we're keeping track
      of a set of 1000 different integer keys, and cycling over the keys
      and updating the values they contain. Note that we use the
      <literal>Map.change</literal> and
      <literal>Hashtbl.change</literal> functions to update the
      respective data structures.
    </para>
    <programlisting language="ocaml">
(* file: map_vs_hash.ml *)

open Core.Std
open Core_bench.Std

let map_iter ~num_keys ~iterations =
  let rec loop i map =
    if i &lt;= 0 then ()
    else loop (i - 1)
           (Map.change map (i mod num_keys) (fun current -&gt;
              Some (1 + Option.value ~default:0 current)))
  in
  loop iterations Int.Map.empty

let table_iter ~num_keys ~iterations =
  let table = Int.Table.create ~size:num_keys () in
  let rec loop i =
    if i &lt;= 0 then ()
    else (
      Hashtbl.change table (i mod num_keys) (fun current -&gt;
        Some (1 + Option.value ~default:0 current));
      loop (i - 1)
    )
  in
  loop iterations

let tests ~num_keys ~iterations =
  let test name f = Bench.Test.create f ~name in
  [ test &quot;map&quot;   (fun () -&gt; map_iter   ~num_keys ~iterations)
  ; test &quot;table&quot; (fun () -&gt; table_iter ~num_keys ~iterations)
  ]

let () =
  tests ~num_keys:1000 ~iterations:100_000
  |&gt; Bench.make_command
  |&gt; Command.run
</programlisting>
    <para>
      The results, shown below, show the hashtable version to be around
      four times faster than the map version.
    </para>
    <programlisting>
bench $ ./map_vs_hash.native -clear-columns name time speedup
Estimated testing time 20s (change using -quota SECS).
┌───────┬────────────┬─────────┐
│ Name  │  Time (ns) │ Speedup │
├───────┼────────────┼─────────┤
│ map   │ 31_584_468 │    1.00 │
│ table │  8_157_439 │    3.87 │
└───────┴────────────┴─────────┘
</programlisting>
    <para>
      We can make the speedup smaller or larger depending on the details
      of the test; for example, it will very with the number of distinct
      keys. But overall, for code that is heavy on sequences of querying
      and updating a set of key/value pairs, hashtables will
      significantly outperform maps.
    </para>
    <para>
      Hashtables are not always the faster choice, though. In
      particular, maps are often more performant in situations where you
      want to take advantage of maps as a persistent data-structure. In
      particular, if you create map <literal>m'</literal> by calling
      <literal>Map.add</literal> on some other map <literal>m</literal>,
      then <literal>m</literal> and <literal>m'</literal> can be used
      independently, and in fact share most of their underlying storage.
      Thus, if you need to keep in memory at the same time multiple
      different related collections of key/value pairs, then a map is
      typically a much more efficient data structure to do it with.
    </para>
    <para>
      Here's a benchmark to demonstrates this. In it, we create a list
      of maps (or hashtables) that are built up by iteratively applying
      updates, starting from an empty map. In the hashtable
      implementation, we do this by calling
      <literal>Hashtbl.copy</literal> to get the list entries.
    </para>
    <programlisting language="ocaml">
(* file: map_vs_hash2.ml *)

open Core.Std
open Core_bench.Std

let create_maps ~num_keys ~iterations =
  let rec loop i map =
    if i &lt;= 0 then []
    else
      let new_map =
        Map.change map (i mod num_keys) (fun current -&gt;
          Some (1 + Option.value ~default:0 current))
      in
      new_map :: loop (i - 1) new_map
  in
  loop iterations Int.Map.empty

let create_tables ~num_keys ~iterations =
  let table = Int.Table.create ~size:num_keys () in
  let rec loop i =
    if i &lt;= 0 then []
    else (
      Hashtbl.change table (i mod num_keys) (fun current -&gt;
        Some (1 + Option.value ~default:0 current));
      let new_table = Hashtbl.copy table in
      new_table :: loop (i - 1)
    )
  in
  loop iterations

let tests ~num_keys ~iterations =
  let test name f = Bench.Test.create f ~name in
  [ test &quot;map&quot;   (fun () -&gt; ignore (create_maps   ~num_keys ~iterations))
  ; test &quot;table&quot; (fun () -&gt; ignore (create_tables ~num_keys ~iterations))
  ]

let () =
  tests ~num_keys:50 ~iterations:1000
  |&gt; Bench.make_command
  |&gt; Command.run
</programlisting>
    <para>
      Unsurprisingly, maps perform far better than hashtables on this
      benchmark, in this case by more than a factor of ten.
    </para>
    <programlisting>
$ ./map_vs_hash2.native -clear-columns name time speedup
Estimated testing time 20s (change using -quota SECS).
┌───────┬───────────┬─────────┐
│ Name  │ Time (ns) │ Speedup │
├───────┼───────────┼─────────┤
│ map   │   208_438 │   12.62 │
│ table │ 2_630_707 │    1.00 │
└───────┴───────────┴─────────┘
</programlisting>
    <para>
      These numbers can be made more extreme by increasing the size of
      the tables or the length of the list.
    </para>
    <para>
      As you can see, the relative performance of trees and maps depends
      a great deal on the details of how they're used, and so whether to
      choose one data structure or the other will depend on the details
      of the application.
    </para>
  </sect1>
</chapter><chapter id="command-line-parsing">
  <title>Command Line Parsing</title>
  <para>
    Many of the OCaml programs that you'll write will end up as binaries
    that will be run directly from a command prompt. Any non-trivial
    command-line program needs a few features:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        program options and file inputs need to be parsed from the
        command line arguments.
      </para>
    </listitem>
    <listitem>
      <para>
        sensible error messages have to be generated in response to
        incorrect inputs.
      </para>
    </listitem>
    <listitem>
      <para>
        help needs to be shown for all the available options.
      </para>
    </listitem>
    <listitem>
      <para>
        interactive auto-completion of commands to assist the user.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    It's tedious and error-prone to code all this manually for every
    program you write. Core simplifies this by letting you declare all
    your command-line options in one place, using the
    <literal>Command</literal> library. This then takes care of parsing
    the arguments, generating help text and provides interactive
    auto-completion to the user of the library.
  </para>
  <para>
    The <literal>Command</literal> library also scales as you add more
    features to your programs. It's simple to use for small
    applications, but provides a sophisticated subcommand mode that
    groups related commands together as the application grows more
    options. You may also be familiar with this command-line style from
    the Git or Mercurial version control systems.
  </para>
  <para>
    This chapter demonstrates how to use <literal>Command</literal> to
    extend the cryptographic utility from
    <xref linkend="object-oriented-programming"/> and builds a
    simple equivalents to the <literal>md5</literal> and
    <literal>shasum</literal> utilities. It also demonstrates how
    <emphasis>functional combinators</emphasis> can be used to declare
    complex data structures in a type-safe and elegant way.
  </para>
  <sect1 id="basic-command-line-parsing">
    <title>Basic command line parsing</title>
    <para>
      We'll begin by cloning the <literal>md5</literal> binary that is
      present on most Linux distributions and Mac OS X. It reads in the
      contents of a file, applies the MD5 one-way hash function to the
      data, and outputs an ASCII hex representation of the result.
    </para>
    <programlisting language="ocaml">
(* md5.ml : calculate MD5 hash of input *)

open Core.Std

let do_hash file =
  let open Cryptokit in
  In_channel.read_all file
  |&gt; hash_string (Hash.md5 ())
  |&gt; transform_string (Hexa.encode ())
  |&gt; print_endline

let command =
  Command.basic
    ~summary:&quot;Generate an MD5 hash of the input data&quot;
    ~readme:(fun () -&gt; &quot;More detailed information&quot;)
    Command.Spec.(
      empty
      +&gt; anon (&quot;filename&quot; %: string)
    )
  (fun file () -&gt; do_hash file)

let () = Command.run ~version:&quot;1.0&quot; ~build_info:&quot;RWO&quot; command
</programlisting>
    <para>
      You can compile this file the usual way with
      <literal>ocamlfind</literal>, but passing an additional
      <literal>cryptokit</literal> package. You may need to install
      Cryptokit via OPAM if you didn't do so earlier.
    </para>
    <programlisting>
$ opam install cryptokit
$ ocamlfind ocamlopt -thread -package cryptokit -package core -linkpkg -o md5 basic.ml
$ ./md5
</programlisting>
    <para>
      The <literal>do_hash</literal> function accepts a filename
      parameter and prints the human-readable MD5 string to the console
      standard output. The subsequent <literal>command</literal> value
      declares how to invoke <literal>do_hash</literal> by parsing the
      command-line arguments. When you compile this program and run it,
      you can query the version information simply by:
    </para>
    <programlisting>
$ ./md5 -version
1.0
$ ./md5 -build-info
RWO
</programlisting>
    <para>
      The <literal>version</literal> and <literal>build_info</literal>
      optional arguments to <literal>Command.run</literal> let you
      specify versions in the command-line help. You can leave these
      blank, or get your build system to generate them directly from
      your version control system (e.g. by running
      <literal>hg tip</literal> to generate a build revision number, in
      the case of Mercurial).
    </para>
    <programlisting>
$ ./md5
Generate an MD5 hash of the input data

  md5 filename

More detailed information

=== flags ===

  [-build-info]  print info about this build and exit
  [-version]     print the version of this build and exit
  [-help]        print this help text and exit
                 (alias: -?)

missing anonymous argument: filename
</programlisting>
    <para>
      When we invoke this binary without any arguments, it outputs a
      help screen that informs you that a required argument
      <literal>filename</literal> is missing. Supplying the argument to
      the command results in <literal>do_hash</literal> being called,
      and the MD5 output being displayed to the standard output.
    </para>
    <programlisting>
$ ./md5 ./md5
59562f5e4f790d16f1b2a095cd5de844
</programlisting>
    <para>
      So how does all this work? Most of the interesting logic lies in
      how the specifications are defined. The
      <literal>Command.Spec</literal> module defines several combinators
      that can be chained together to define flags and anonymous
      arguments, what types they should map to, and whether to take
      special actions (such as interactive input) if certain fields are
      encountered.
    </para>
    <para>
      Let's build the specification for a single argument that is
      specified directly on the command-line (this is known as an
      <emphasis>anonymous</emphasis> argument).
    </para>
    <programlisting language="ocaml">
Command.Spec.(
  empty
  +&gt; anon (&quot;filename&quot; %: string)
)
</programlisting>
    <para>
      The specification above begins with an <literal>empty</literal>
      value, and then chains more parameters via the
      <literal>+&gt;</literal> combinator. Our example uses the
      <literal>anon</literal> function to define a single anonymous
      parameter. Anonymous parameters are assigned a string name that is
      used in help text, and an OCaml type that they are parsed into
      from the raw command-line string. The example
      <literal>filename</literal> argument above is extracted from the
      command-line and kept as an OCaml <literal>string</literal>.
    </para>
    <para>
      This specification is then bundled together with the callback
      functions using <literal>Command.basic</literal>. For our
      <literal>md5</literal> example, we have:
    </para>
    <programlisting language="ocaml">
Command.basic
  ~summary:&quot;Generate an MD5 hash of the input data&quot;
  ~readme:(fun () -&gt; &quot;More detailed information&quot;)
  Command.Spec.(
    empty
    +&gt; anon (&quot;filename&quot; %: string)
  )
  (fun file () -&gt; do_hash file)
</programlisting>
    <para>
      The <literal>basic</literal> function takes a few more arguments
      in addition to the specification. The <literal>summary</literal>
      is a one-line description to go at the top of the command help
      screen, while <literal>readme</literal> is for longer help text
      when the command is called with <literal>-help</literal>. The
      <literal>readme</literal> argument is a function that is only
      evaluated when the help text is actually needed.
    </para>
    <para>
      The final argument is the callback function where all the actual
      work happens after the command-line parsing is complete. This
      function will be applied with the parsed command-line arguments,
      and should perform the actual work. In our example, we had just
      one anonymous argument, so the callback function just has a single
      <literal>string</literal> parameter applied to it:
    </para>
    <programlisting language="ocaml">
(fun file () -&gt; do_hash file)
</programlisting>
    <para>
      The function also needs an extra <literal>unit</literal> argument
      after <literal>file</literal>. This is simply so that the command
      specifications can work even when they are empty
      (<literal>Command.Spec.empty</literal>). Every OCaml function
      needs at least one argument, so the final <literal>unit</literal>
      guarantees that it will not be evaluated immediately as a value if
      there are no other arguments.
    </para>
    <para>
      You aren't just limited to parsing command lines as strings of
      course. <literal>Command.Spec</literal> defines several other
      conversion functions that validate and parse input into various
      types:
    </para>
    <informaltable>
      <tgroup cols="3">
        <colspec align="left"/>
        <colspec align="left"/>
        <colspec align="left"/>
        <thead>
          <row>
            <entry>
              Argument type
            </entry>
            <entry>
              OCaml type
            </entry>
            <entry>
              Example
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <literal>string</literal>
            </entry>
            <entry>
              <literal>string</literal>
            </entry>
            <entry>
              <literal>foo</literal>
            </entry>
          </row>
          <row>
            <entry>
              <literal>int</literal>
            </entry>
            <entry>
              <literal>int</literal>
            </entry>
            <entry>
              <literal>123</literal>
            </entry>
          </row>
          <row>
            <entry>
              <literal>float</literal>
            </entry>
            <entry>
              <literal>float</literal>
            </entry>
            <entry>
              <literal>123.01</literal>
            </entry>
          </row>
          <row>
            <entry>
              <literal>bool</literal>
            </entry>
            <entry>
              <literal>bool</literal>
            </entry>
            <entry>
              <literal>true</literal>
            </entry>
          </row>
          <row>
            <entry>
              <literal>date</literal>
            </entry>
            <entry>
              <literal>Date.t</literal>
            </entry>
            <entry>
              <literal>2013-12-25</literal>
            </entry>
          </row>
          <row>
            <entry>
              <literal>time_span</literal>
            </entry>
            <entry>
              <literal>Span.t</literal>
            </entry>
            <entry>
              <literal>5s</literal>
            </entry>
          </row>
          <row>
            <entry>
              <literal>file</literal>
            </entry>
            <entry>
              <literal>string</literal>
            </entry>
            <entry>
              <literal>/etc/passwd</literal>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      A more realistic <literal>md5</literal> function might also read
      from the standard input if a filename isn't specified. We can
      change our specification with a single line to reflect this by
      writing:
    </para>
    <programlisting language="ocaml">
Command.Spec.(
  empty
  +&gt; anon (maybe (&quot;filename&quot; %: string))
)
</programlisting>
    <para>
      The anonymous parameter has been prefixed with a
      <literal>maybe</literal> that indicates the value is now optional.
      If you compile the example, you'll get a type error though:
    </para>
    <programlisting>
File &quot;md5_broken.ml&quot;, line 18, characters 26-30:
Error: This expression has type string option
       but an expression was expected of type string
Command exited with code 2.
</programlisting>
    <para>
      This is because the type of the callback function has changed. It
      now wants a <literal>string option</literal> instead of a
      <literal>string</literal> since the value is optional. We can
      quickly adapt our example to use the new information and read from
      standard input if no file is specified.
    </para>
    <programlisting language="ocaml">
(* md5.ml : calculate md5 with an optional filename *)
open Core.Std

let get_file_data = function
  | None
  | Some &quot;-&quot; -&gt; In_channel.(input_all stdin)
  | Some file -&gt; In_channel.read_all file

let do_hash file =
  let open Cryptokit in
  get_file_data file
  |&gt; hash_string (Hash.md5 ())
  |&gt; transform_string (Hexa.encode ())
  |&gt; print_endline

let command =
  Command.basic
    ~summary:&quot;Generate an MD5 hash of the input data&quot;
    Command.Spec.(
      empty
      +&gt; anon (maybe (&quot;filename&quot; %: string))
    )
  (fun file () -&gt; do_hash file)

let () = Command.run command
</programlisting>
    <para>
      There are several other transformations you can do on anonymous
      arguments. We've shown you <literal>maybe</literal>, and you can
      also obtain lists of arguments or supply default values. Try
      altering the example above to take a list of files and output
      checksums for all of them, just as the <literal>md5</literal>
      command does.
    </para>
    <informaltable>
      <tgroup cols="2">
        <colspec align="left"/>
        <colspec align="left"/>
        <thead>
          <row>
            <entry>
              Anonymous argument
            </entry>
            <entry>
              OCaml type
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              sequence
            </entry>
            <entry>
              <literal>list</literal> of arguments
            </entry>
          </row>
          <row>
            <entry>
              maybe
            </entry>
            <entry>
              <literal>option</literal> argument
            </entry>
          </row>
          <row>
            <entry>
              maybe_with_default
            </entry>
            <entry>
              argument with a default value if argument is missing
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>
  <sect1 id="using-flags-to-label-the-command-line">
    <title>Using flags to label the command line</title>
    <para>
      You aren't just limited to anonymous arguments on the
      command-line, and you'll find that flags are useful once your
      program has more options. A flag is a named field that can be
      followed by an optional argument. These flags can appear in any
      order on the command-line, or multiple times, depending on how
      they're declared in the specification.
    </para>
    <para>
      Let's add two arguments to our <literal>md5</literal> command that
      mimic the Linux version. A <literal>-s</literal> flag specifies
      the string to be hashed directly on the command-line, and a
      <literal>-t</literal> runs a benchmarking self-test. The complete
      example is:
    </para>
    <programlisting language="ocaml">
(* mlmd5.ml : generate an MD5 hash of the input data *)
open Core.Std

let get_file_data file checksum =
  match file, checksum with
  | None, Some buf -&gt; buf
  | _, Some buf -&gt; eprintf &quot;Warning: ignoring file\n&quot;; buf
  | (None|Some &quot;-&quot;), None -&gt; In_channel.(input_all stdin)
  | Some file, None -&gt; In_channel.read_all file

let do_hash file checksum =
  let open Cryptokit in
  get_file_data file checksum
  |&gt; hash_string (Hash.md5 ())
  |&gt; transform_string (Hexa.encode ())
  |&gt; print_endline

let command =
  Command.basic
    ~summary:&quot;Generate an MD5 hash of the input data&quot;
    Command.Spec.(
      empty
      +&gt; flag &quot;-s&quot; (optional string) ~doc:&quot;string Checksum the given string&quot;
      +&gt; flag &quot;-t&quot; no_arg ~doc:&quot; run a built-in time trial&quot;
      +&gt; anon (maybe (&quot;filename&quot; %: string))
    )
  (fun checksum trial file () -&gt;
    match trial with
    | true -&gt; printf &quot;Running time trial\n&quot;
    | false -&gt; do_hash file checksum)

let () = Command.run command
</programlisting>
    <para>
      The example specification uses the <literal>flag</literal> command
      now. The first argument to <literal>flag</literal> is its name on
      the command-line, and the <literal>doc</literal> argument supplies
      the help text. The <literal>doc</literal> string is formatted so
      that the first word is the short name that appears in the usage
      text, with the remainder being the full help text. Notice that the
      <literal>-t</literal> flag has no argument, and so we prepend its
      <literal>doc</literal> text with a blank space. The help text for
      the above code looks like this:
    </para>
    <programlisting>
$ ./mlmd5 -help
Generate an MD5 hash of the input data

  ./mlmd5 [filename]

=== flags ===

  [-s string]    Checksum the given string
  [-t]           run a built-in time trial
  [-build-info]  print info about this build and exit
  [-version]     print the version of this build and exit
  [-help]        print this help text and exit
                 (alias: -?)


$ ./mlmd5 -s &quot;ocaml rocks&quot;
5a118fe92ac3b6c7854c595ecf6419cb
</programlisting>
    <para>
      The <literal>-s</literal> flag in our specification requires a
      <literal>string</literal> argument, and the parser outputs an
      error message if it isn't supplied. Here's a list of some of the
      functions that you can wrap flags in to control how they are
      parsed:
    </para>
    <informaltable>
      <tgroup cols="2">
        <colspec align="left"/>
        <colspec align="left"/>
        <thead>
          <row>
            <entry>
              Flag function
            </entry>
            <entry>
              OCaml type
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <literal>required</literal> <emphasis>arg</emphasis>
            </entry>
            <entry>
              <emphasis>arg</emphasis> and error if not present
            </entry>
          </row>
          <row>
            <entry>
              <literal>optional</literal> <emphasis>arg</emphasis>
            </entry>
            <entry>
              <emphasis>arg</emphasis> <literal>option</literal>
            </entry>
          </row>
          <row>
            <entry>
              <literal>optional_with_default</literal>
            </entry>
            <entry>
              <emphasis>arg</emphasis> with a default if not present
            </entry>
          </row>
          <row>
            <entry>
              <literal>listed</literal> <emphasis>arg</emphasis>
            </entry>
            <entry>
              <emphasis>arg</emphasis> <literal>list</literal>, flag may
              appear multiple times
            </entry>
          </row>
          <row>
            <entry>
              <literal>no_arg</literal>
            </entry>
            <entry>
              <literal>bool</literal> that is true if flag is present.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      The flags affect the type of the callback function in exactly the
      same way as anonymous arguments do. This lets you change the
      specification and ensure that all the callback functions are
      updated appropriately, without runtime errors.
    </para>
    <para>
      Notice that the <literal>get_file_data</literal> function now
      pattern matches across the <literal>checksum</literal> flag and
      the <literal>file</literal> anonymous argument. It selects the
      flag in preference to the anonymous argument, but emits a warning
      if there's ambiguity and both are specified.
    </para>
  </sect1>
  <sect1 id="grouping-sub-commands-together">
    <title>Grouping sub-commands together</title>
    <para>
      You can get pretty far by combining flags and anonymous arguments
      to assemble complex command-line interfaces. After a while though,
      too many options can make the program very confusing for newcomers
      to your application. One way to solve this is by grouping common
      operations together and adding some hierarchy to the command-line
      interface.
    </para>
    <para>
      You'll have run across this style already when using the OPAM
      package manager (or, in the non-OCaml world, the Git or Mercurial
      commands). OPAM exposes commands in this form:
    </para>
    <programlisting>
opam config env
opam remote list -kind git
opam install --help
opam install xmlm
</programlisting>
    <para>
      The <literal>config</literal>, <literal>remote</literal> and
      <literal>install</literal> keywords form a logical grouping of
      commands, and factor out flags and arguments that are specific to
      that particular operation. It's really simple to extend your
      application to do this in Command: just swap
      <literal>Command.basic</literal> for
      <literal>Command.group</literal>:
    </para>
    <programlisting language="ocaml">
val group :
  summary:string -&gt;
  ?readme:(unit -&gt; string) -&gt;
  (string * t) list -&gt; t
</programlisting>
    <para>
      The <literal>group</literal> signature accepts a list of basic
      <literal>Command.t</literal> values and their corresponding names.
      When executed, it looks for the appropriate sub-command from the
      name list, and dispatches it to the right command handler.
    </para>
    <para>
      Let's build the beginning of a calendar tool that does a few
      operations over dates from the command line. We first define a
      command that adds days to an input date and prints the resulting
      date.
    </para>
    <programlisting language="ocaml">
open Core.Std

let add =
  Command.basic
    ~summary:&quot;Add [days] to the [base] date and print day&quot;
    Command.Spec.(
      empty
      +&gt; anon (&quot;base&quot; %: date)
      +&gt; anon (&quot;days&quot; %: int)
    )
  (fun base span () -&gt;
    Date.add_days base span
    |&gt; Date.to_string
    |&gt; print_endline
  )

let () = Command.run add
</programlisting>
    <para>
      Once we've tested this and made sure it works, we can define
      another command that takes the difference of two dates. Both of
      the commands are now grouped as sub-commands using
      <literal>Command.group</literal>.
    </para>
    <programlisting language="ocaml">
open Core.Std

let add =
  Command.basic ~summary:&quot;Add [days] to the [base] date&quot;
    Command.Spec.(
      empty
      +&gt; anon (&quot;base&quot; %: date)
      +&gt; anon (&quot;days&quot; %: int)
    )
  (fun base span () -&gt;
    Date.add_days base span
    |&gt; Date.to_string
    |&gt; print_endline
  )

let diff =
  Command.basic ~summary:&quot;Show days between [date1] and [date2]&quot;
    Command.Spec.(
      empty
      +&gt; anon (&quot;date1&quot; %: date)
      +&gt; anon (&quot;date2&quot; %: date)
    )
  (fun date1 date2 () -&gt;
    Date.diff date1 date2
    |&gt; printf &quot;%d days\n&quot;
  )

let command =
  Command.group ~summary:&quot;Manipulate dates&quot;
    [ &quot;add&quot;, add; &quot;diff&quot;, diff ]

let () = Command.run command
</programlisting>
    <para>
      And that's all you need to add sub-command support! The help page
      for our calendar now reflects the two commands we just added:
    </para>
    <programlisting>
$ cal
Manipulate dates

  cal SUBCOMMAND

=== subcommands ===

  add      Add [days] to the [base] date
  diff     Show days between [date1] and [date2]
  version  print version information
  help     explain a given subcommand (perhaps recursively)

missing subcommand for command cal
</programlisting>
    <para>
      We can invoke the two commands we just defined to verify that they
      work and see the date parsing in action.
    </para>
    <programlisting>
$ cal add 2012-12-25 40
2013-02-03
$ cal diff 2012-12-25 2012-11-01
54 days
</programlisting>
  </sect1>
  <sect1 id="advanced-control-over-parsing">
    <title>Advanced control over parsing</title>
    <para>
      The use of the spec combinators has been somewhat magic so far: we
      just build them up with the '+&gt;' combinator and things seem to
      work. As your programs get larger and more complex, you'll want to
      factor out common functionality between specifications. Some other
      times, you'll need to interrupt the parsing to perform special
      processing, such as requesting an interactive passphrase from the
      user before proceeding. We'll show you some new combinators that
      let you do this now.
    </para>
    <sidebar>
    <title>
    The types behind <literal>Command.Spec</literal>
    </title>
    <para>
      The Command module's safety relies on the specification's output
      values precisely matching the callback function which invokes the
      main program. Any mismatch here will inevitably result in a
      dynamic failure, and so Command uses some interesting type
      abstraction to guarantee they remain in sync. You don't have to
      understand this section to use the more advanced combinators, but
      it'll help you debug type errors as you use
      <literal>Command</literal> more.
    </para>
    <para>
      The type of <literal>Command.t</literal> looks deceptively simple:
    </para>
    <programlisting language="ocaml">
type ('main_in, 'main_out) t
</programlisting>
    <para>
      You can think of <literal>('a, 'b) t</literal> as a function of
      type <literal>'a -&gt; 'b</literal>, but embellished with
      information about:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          how to parse the command line
        </para>
      </listitem>
      <listitem>
        <para>
          what the command does and how to call it
        </para>
      </listitem>
      <listitem>
        <para>
          how to auto-complete a partial command line
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The type of a specification transforms a
      <literal>'main_in</literal> to a <literal>'main_out</literal>
      value. For instance, a value of <literal>Spec.t</literal> might
      have type:
    </para>
    <programlisting language="ocaml">
(arg1 -&gt; ... -&gt; argN -&gt; 'r, 'r) Spec.t
</programlisting>
    <para>
      Such a value transforms a main function of type
      <literal>arg1 -&gt; ... -&gt; argN -&gt; 'r</literal> by supplying
      all the argument values, leaving a main function that returns a
      value of type <literal>'r</literal>. Let's look at some examples
      of specs, and their types:
    </para>
    <programlisting language="ocaml">
# Command.Spec.empty ;;
- : ('m, 'm) Spec.t = &lt;abstr&gt;
# Command.Spec.(empty +&gt; anon (&quot;foo&quot; %: int)) ;;
- : (int -&gt; '_a, '_a) Command.Spec.t = &lt;abstr&gt;
</programlisting>
    <para>
      The empty specification is simple as it doesn't add any parameters
      to the callback type. The second example adds an
      <literal>int</literal> anonymous parameter that is reflected in
      the inferred type. One forms a command by combining a spec of type
      <literal>('main, unit) Spec.t</literal> with a function of type
      <literal>'main</literal>. The combinators we've shown so far
      incrementally build the type of <literal>'main</literal> according
      to the command-line parameters it expects, so the resulting type
      of <literal>'main</literal> is something like
      <literal>arg1 -&gt; ... -&gt; argN -&gt; unit</literal>.
    </para>
    <para>
      The type of <literal>Command.basic</literal> should make more
      sense now:
    </para>
    <programlisting language="ocaml">
val basic :
  summary:string -&gt;
  ?readme:(unit -&gt; string) -&gt;
  ('main, unit -&gt; unit) Spec.t -&gt; 'main -&gt; t
</programlisting>
    <para>
      The final line is the important one. It shows that the callback
      function for a spec should consume identical arguments to the
      supplied <literal>main</literal> function, expect for an
      additional <literal>unit</literal> argument. This final
      <literal>unit</literal> is there to make sure the callback is
      evaluated as a function, since if zero command-line arguments are
      specified (i.e. <literal>Spec.empty</literal>), the callback would
      otherwise have no arguments and be evaluated immediately. That's
      why you have to supply an additional <literal>()</literal> to the
      callback function in all the previous examples.
    </para>
    </sidebar>
    <sect2 id="composing-specification-fragments-together">
      <title>Composing specification fragments together</title>
      <para>
        If you want to factor out common command-line operations, the
        <literal>++</literal> operator will append two specifications
        together. Let's add some dummy verbosity and debug flags to our
        calendar application to illustrate this.
      </para>
      <programlisting language="ocaml">
open Core.Std

let add ~common =
  Command.basic ~summary:&quot;Add [days] to the [base] date&quot;
    Command.Spec.(
      empty
      +&gt; anon (&quot;base&quot; %: date)
      +&gt; anon (&quot;days&quot; %: int)
      ++ common
    )
  (fun base span debug verbose () -&gt;
    Date.add_days base span
    |&gt; Date.to_string
    |&gt; print_endline
  )

let diff ~common =
  Command.basic ~summary:&quot;Show days between [date2] and [date1]&quot;
    Command.Spec.(
      empty
      +&gt; anon (&quot;date1&quot; %: date)
      +&gt; anon (&quot;date2&quot; %: date)
      ++ common
    )
  (fun date1 date2 debug verbose () -&gt;
    Date.diff date1 date2
    |&gt; printf &quot;%d days\n&quot;
  )
</programlisting>
      <para>
        The definitions of the specifications are very similar to the
        earlier example, except that they append a
        <literal>common</literal> parameter after each specification. We
        can supply these flags when defining the groups:
      </para>
      <programlisting>
let () =
  let common =
    Command.Spec.(
      empty
      +&gt; flag &quot;-d&quot; (optional_with_default false bool) ~doc:&quot; Debug mode&quot;
      +&gt; flag &quot;-v&quot; (optional_with_default false bool) ~doc:&quot; Verbose output&quot;
    )
  in
  List.map ~f:(fun (name, cmd) -&gt; (name, cmd ~common))
    [ &quot;add&quot;, add; &quot;diff&quot;, diff ]
  |&gt; Command.group ~summary:&quot;Manipulate dates&quot;
  |&gt; Command.run
</programlisting>
      <para>
        Both of these flags will now be applied and passed to all the
        callback functions. This makes code refactoring a breeze by
        using the compiler to spot places where you use commands. Just
        add a parameter to the common definition, run the compiler, and
        fix type errors until everything works again.
      </para>
      <para>
        For example, if we remove the <literal>verbose</literal> flag
        above and compile, we'll get this impressively long type error:
      </para>
      <programlisting language="ocaml">
File &quot;cal_compose_error.ml&quot;, line 39, characters 38-45:
Error: This expression has type
         (bool -&gt; unit -&gt; unit -&gt; unit, unit -&gt; unit -&gt; unit)
         Command.Spec.t =
           (bool -&gt; unit -&gt; unit -&gt; unit, unit -&gt; unit -&gt; unit)
           Command.Spec.t
       but an expression was expected of type
         (bool -&gt; unit -&gt; unit -&gt; unit, unit -&gt; unit) Command.Spec.t
           = (bool -&gt; unit -&gt; unit -&gt; unit, unit -&gt; unit) Command.Spec.t
       Type unit -&gt; unit is not compatible with type unit
</programlisting>
      <para>
        While this does look scary, the key line to scan is the last
        one, where it's telling you that you have supplied too many
        arguments in the callback function
        (<literal>unit -&gt; unit</literal> vs <literal>unit</literal>).
        If you started with a working program and made this single
        change, you typically don't even need to read the type error, as
        the filename and location information is sufficient to make the
        obvious fix.
      </para>
    </sect2>
    <sect2 id="prompting-for-interactive-input">
      <title>Prompting for interactive input</title>
      <para>
        The <literal>step</literal> combinator lets you control the
        normal course of parsing by supplying a function that maps
        callback arguments to a new set of values. For instance, let's
        revisit our first calendar application that added a number of
        days onto a supplied base date.
      </para>
      <programlisting language="ocaml">
(* cal_add.ml *)
open Core.Std

let add_days base span () =
  Date.add_days base span
  |&gt; Date.to_string
  |&gt; print_endline

let add =
  Command.basic
    ~summary:&quot;Add [days] to the [base] date and print day&quot;
    Command.Spec.(
      empty
      +&gt; anon (&quot;base&quot; %: date)
      +&gt; anon (&quot;days&quot; %: int)
    )
    add_days

let () = Command.run add
</programlisting>
      <para>
        This <literal>cal_add</literal> program requires you to specify
        both the <literal>base</literal> date and the number of
        <literal>days</literal> to add onto it. If
        <literal>days</literal> isn't supplied on the command-line, an
        error is output. Now let's modify it to interactively prompt for
        a number of days if only the <literal>base</literal> date is
        supplied.
      </para>
      <programlisting language="ocaml">
(* cal_add_interactive.ml *)
open Core.Std

let add_days base span () =
  Date.add_days base span
  |&gt; Date.to_string
  |&gt; print_endline

let add =
  Command.basic
    ~summary:&quot;Add [days] to the [base] date and print day&quot;
    Command.Spec.( 
      step 
        (fun m base days -&gt;
           match days with
           | Some days -&gt;
             m base days
           | None -&gt;
             print_endline &quot;enter days: &quot;;
             read_int ()
             |&gt; m base
        )
      +&gt; anon (&quot;base&quot; %: date)
      +&gt; anon (maybe (&quot;days&quot; %: int))
    )
    add_days

let () = Command.run add
</programlisting>
      <para>
        The <literal>days</literal> anonymous argument is now an
        optional integer in the spec, and we want to transform it into a
        non-optional value before calling our
        <literal>add_days</literal> callback. The
        <literal>step</literal> combinator in the specification performs
        this transformation. It applies its supplied callback function
        first, which checks if <literal>day</literal> is defined. If
        it's undefined, then it interactively reads an integer from the
        standard input. The first <literal>m</literal> argument to the
        <literal>step</literal> callback is the next callback function
        in the chain. The transformation is completed by calling
        <literal>m base days</literal> to continue processing with the
        new values we've just calculated. The <literal>days</literal>
        value that is passed onto the next callback now has a
        non-optional <literal>int</literal> type.
      </para>
      <programlisting>
$ cal_add_interactive 2013-12-01
enter days:
35
2014-01-05
</programlisting>
      <para>
        The transformation means that the <literal>add_days</literal>
        callback can just keep its original definition of
        <literal>Date.t -&gt; int -&gt; unit</literal>. The
        <literal>step</literal> function transformed the
        <literal>int option</literal> argument from the parsing into an
        <literal>int</literal> suitable for <literal>add_days</literal>.
        This transformation is explicitly represented in the type of the
        <literal>step</literal> return value:
      </para>
      <programlisting language="ocaml">
# open Core.Std ;;
# open Command.Spec ;;
# step (fun m (base:Date.t) days -&gt;
  match days with
  | Some days -&gt; m base days
  | None -&gt;
     print_endline &quot;enter days: &quot;;
     m base (read_int ()));;
- : (Date.t -&gt; int -&gt; '_a, Date.t -&gt; int option -&gt; '_a) Spec.t = &lt;abstr&gt;
</programlisting>
      <para>
        The first half of the <literal>Spec.t</literal> shows that the
        callback type is <literal>Date.t -&gt; int</literal>, whereas
        the resulting value expected from the next specification in the
        chain is a <literal>Date.t -&gt; int option</literal>.
      </para>
    </sect2>
    <sect2 id="adding-labelled-arguments-to-callbacks">
      <title>Adding labelled arguments to callbacks</title>
      <para>
        The <literal>step</literal> chaining lets you control the types
        of your callbacks very easily. This can help you match existing
        interfaces or make things more explicit by adding labelled
        arguments.
      </para>
      <programlisting language="ocaml">
(* cal_add_labels.ml *)
open Core.Std

let add_days ~base_date ~num_days () =
  Date.add_days base_date num_days
  |&gt; Date.to_string
  |&gt; print_endline

let add =
  Command.basic
    ~summary:&quot;Add [days] to the [base] date and print day&quot;
    Command.Spec.( 
      step (fun m base days -&gt; m ~base_date:base ~num_days:days)
      +&gt; anon (&quot;base&quot; %: date)
      +&gt; anon (&quot;days&quot; %: int)
    )
  add_days

let () = Command.run add
</programlisting>
      <para>
        This <literal>cal_add_labels</literal> example goes back to our
        non-interactive calendar addition program, but the
        <literal>add_days</literal> main function now expects labelled
        arguments. The <literal>step</literal> function in the
        specification simply converts the default
        <literal>base</literal> and <literal>days</literal> arguments
        into a labelled function, and everything compiles again.
      </para>
      <para>
        Labelled arguments are more verbose, but also help prevent
        errors with command-line arguments with similar types but
        different names and purposes. It's good form to use them when
        you have a lot of otherwise anonymous <literal>int</literal> and
        <literal>string</literal> arguments.
      </para>
    </sect2>
  </sect1>
  <sect1 id="command-line-auto-completion-with-bash">
    <title>Command-line auto-completion with
    <literal>bash</literal></title>
    <para>
      Modern UNIX shells usually have a tab-completion feature to
      interactively help you figure out how to build a command-line.
      These work by pressing the <literal>&lt;tab&gt;</literal> key in
      the middle of typing a command, and seeing the options that pop
      up. You've probably used this most often to find the files in the
      current directory, but it can actually be extended for other parts
      of the command too.
    </para>
    <para>
      The precise mechanism for autocompletion varies depending on what
      shell you are using, but we'll assume you are using the most
      common one: <literal>bash</literal>. This is the default
      interactive shell on most Linux distributions and Mac OS X, but
      you may need to switch to it on *BSD or Windows (when using
      Cygwin). The rest of this section assumes that you're using
      <literal>bash</literal>.
    </para>
    <para>
      Bash autocompletion isn't always installed by default, so check
      your OS package manager to see if you have it available.
    </para>
    <informaltable>
      <tgroup cols="3">
        <colspec align="left"/>
        <colspec align="left"/>
        <colspec align="left"/>
        <thead>
          <row>
            <entry>
              Operating System
            </entry>
            <entry>
              Package Manager
            </entry>
            <entry>
              Package
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              Debian Linux
            </entry>
            <entry>
              <literal>apt</literal>
            </entry>
            <entry>
              <literal>TODO</literal>
            </entry>
          </row>
          <row>
            <entry>
              CentOS
            </entry>
            <entry>
              <literal>yum</literal>
            </entry>
            <entry>
              <literal>TODO</literal>
            </entry>
          </row>
          <row>
            <entry>
              Mac OS X
            </entry>
            <entry>
              Homebrew
            </entry>
            <entry>
              <literal>bash-completion</literal>
            </entry>
          </row>
          <row>
            <entry>
              Mac OS X
            </entry>
            <entry>
              MacPorts
            </entry>
            <entry>
              <literal>TODO</literal>
            </entry>
          </row>
          <row>
            <entry>
              FreeBSD
            </entry>
            <entry>
              Ports System
            </entry>
            <entry>
              <literal>/usr/ports TODO</literal>
            </entry>
          </row>
          <row>
            <entry>
              OpenBSD
            </entry>
            <entry>
              <literal>pkg_add</literal>
            </entry>
            <entry>
              <literal>TODO</literal>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      Once you have bash completion installed and configured, check that
      it works by typing the <literal>ssh</literal> command, and
      pressing <literal>tab</literal>. This should show you the list of
      known hosts from your <literal>~/.ssh/known_hosts</literal> file.
      If it lists those, then you can continue on, but if it lists the
      files in your current directory instead, then check your OS
      documentation to configure completion correctly.
    </para>
    <para>
      One last bit of information you'll need to find is the location of
      the <literal>bash_completion.d</literal> directory. This is where
      all the shell fragments that contain the completion logic are
      held. On Linux, this is often in
      <literal>/etc/bash_completion.d</literal>, and in Homebrew on Mac
      OS X it would be
      <literal>/usr/local/etc/bash_completion.d</literal> by default.
    </para>
    <sect2 id="generating-completion-fragments-from-command">
      <title>Generating completion fragments from Command</title>
      <para>
        The Command library has a declarative description of all the
        possible valid options, and it can use this information to
        generate a shell script which provides completion support for
        that command. To generate the fragment, just run the command
        with the <literal>COMMAND_OUTPUT_INSTALLATION_BASH</literal>
        environment variable set to any value.
      </para>
      <para>
        For example, let's try it on our calendar example from earlier,
        assuming that the binary is called <literal>cal</literal> in the
        current directory:
      </para>
      <programlisting>
$ COMMAND_OUTPUT_INSTALLATION_BASH=1 ./cal

function _jsautocom_41790 {
  export COMP_CWORD
  COMP_WORDS[0]=./cal
  COMPREPLY=($(&quot;${COMP_WORDS[@]}&quot;))
}
complete -F _jsautocom_41790 ./cal
</programlisting>
    </sect2>
    <sect2 id="installing-the-completion-fragment">
      <title>Installing the completion fragment</title>
      <para>
        You don't need to worry about what this script actually does
        (unless you have an unhealthy fascination with shell scripting,
        that is). Instead, redirect the output to a file in your
        <literal>bash_completion.d</literal> directory, named after the
        command you're installing.
      </para>
      <programlisting>
$ sudo env COMMAND_OUTPUT_INSTALLATION_BASH=1 ./cal \
    &gt; /etc/bash_completion.d/cal
$ bash -l
$ ./cal &lt;tab&gt;
add      diff     help     version
</programlisting>
      <para>
        The first line above redirects the earlier output into your
        <literal>bash_completion.d</literal> directory. The
        <literal>bash -l</literal> loads the new configuration as a
        fresh login shell, and then the final line shows the four valid
        commands by pressing the tab key.
      </para>
      <para>
        Command completion support works for flags and grouped commands,
        and is very useful when building larger command-line interfaces.
      </para>
      <note>
      <title>
      Installing a generic completion handler
      </title>
      <para>
        Sadly, <literal>bash</literal> doesn't support installing a
        generic handler for all Command-based applications. This means
        that you have to install the completion script for every
        application, but you should be able to automate this in the
        build and packaging system for your application.
      </para>
      <para>
        It will help to check out how other applications that install
        tab-completion scripts and following their lead, as the details
        are very OS-specific.
      </para>
      </note>
    </sect2>
  </sect1>
</chapter><chapter id="handling-json-data">
  <title>Handling JSON data</title>
  <para>
    Data serialization, <emphasis>i.e.</emphasis> converting data to and
    from a sequence of bytes that's suitable for writing to disk or
    sending across the network, is an important and common programming
    task. Sometimes you need to match someone else's data format (such
    as XML), sometimes you need a highly efficient format, and sometimes
    you just want something that is easy for humans to read and edit. To
    this end, OCaml comes with several techniques for data serialization
    depending on what your problem is.
  </para>
  <para>
    We'll start by using the popular and simple JSON data format, and
    then look at other serialization formats later in in the book. This
    chapter introduces you to a couple of new techniques that glue
    together the basic ideas from Part I of the book:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Using polymorphic variants to write more extensible libraries
        and protocols (but still retain the ability to extend them if
        needed)
      </para>
    </listitem>
    <listitem>
      <para>
        The use of <emphasis>combinators</emphasis> to compose common
        operations over data structures in a type-safe way.
      </para>
    </listitem>
    <listitem>
      <para>
        Using external tools to generate boilerplate OCaml modules and
        signatures from external specification files.
      </para>
    </listitem>
  </itemizedlist>
  <sect1 id="json-basics">
    <title>JSON Basics</title>
    <para>
      JSON is a lightweight data-interchange format often used in web
      services and browsers. It's described in
      <ulink url="http://www.ietf.org/rfc/rfc4627.txt">RFC4627</ulink>,
      and is easier to parse and generate than alternatives such as XML.
      You'll run into JSON very often when working with modern web APIs,
      so we'll cover several different ways to manipulate it in this
      chapter.
    </para>
    <para>
      JSON consists of two basic structures: an unordered collection of
      key/value pairs, and an ordered list of values. Values can be
      strings, booleans, floats, integers or null. Let's see what a JSON
      record for an example book description looks like:
    </para>
    <programlisting language="json">
{
  &quot;title&quot;: &quot;Real World OCaml&quot;,
  &quot;tags&quot; : [ &quot;functional programming&quot;, &quot;ocaml&quot;, &quot;algorithms&quot; ],
  &quot;pages&quot;: 450,
  &quot;authors&quot;: [
    { &quot;name&quot;: &quot;Jason Hickey&quot;, &quot;affiliation&quot;: &quot;Google&quot; },
    { &quot;name&quot;: &quot;Anil Madhavapeddy&quot;, &quot;affiliation&quot;: &quot;Cambridge&quot;},
    { &quot;name&quot;: &quot;Yaron Minsky&quot;, &quot;affiliation&quot;: &quot;Jane Street&quot;}
  ],
  &quot;is_online&quot;: true
}
</programlisting>
    <para>
      The outermost JSON value is usually a record (delimited by the
      curly braces) and contains an unordered set of key/value pairs.
      The keys must be strings but values can be any JSON type. In the
      example above, <literal>tags</literal> is a string list, while the
      <literal>authors</literal> field contains a list of records.
      Unlike OCaml lists, JSON lists can contain multiple different JSON
      types within a single list.
    </para>
    <para>
      This free-form nature of JSON types is both a blessing and a
      curse. It's very easy to generate JSON values, but code that
      parses them also has to handle subtle variations in how the values
      are represented. For example, what if the <literal>pages</literal>
      value above is actually represented as a string value of
      <literal>&quot;450&quot;</literal> instead of an integer?
    </para>
    <para>
      Our first task is to parse the JSON into a more structured OCaml
      type so that we can use static typing more effectively. When
      manipulating JSON in Python or Ruby, you might write unit tests to
      check that you have handled unusual inputs. The OCaml model
      prefers compile-time static checking as well as unit tests. For
      example, using pattern matching can warn you if you've not checked
      that a value can be <literal>Null</literal> as well as contain an
      actual value.
    </para>
    <note>
    <title>
    Installing the Yojson library
    </title>
    <para>
      There are several JSON libraries available for OCaml. For this
      chapter, we've picked the
      <ulink url="http://mjambon.com/yojson.html"><literal>Yojson</literal></ulink>
      library by Martin Jambon. It's easiest to install via OPAM.
    </para>
    <programlisting>
$ opam install yojson
</programlisting>
    <para>
      See <xref linkend="installation"/> for installation
      instructions if you haven't already got OPAM. Once installed, you
      can open it in the <literal>utop</literal> toplevel by:
    </para>
    <programlisting>
#require &quot;yojson&quot; ;;
open Yojson ;;
</programlisting>
    </note>
  </sect1>
  <sect1 id="parsing-json-with-yojson">
    <title>Parsing JSON with Yojson</title>
    <para>
      The JSON specification has very few data types, and the
      <literal>Yojson.Basic.json</literal> type shown below is
      sufficient to express any valid JSON structure.
    </para>
    <programlisting language="ocaml">
type json = [
  | `Assoc of (string * json) list
  | `Bool of bool
  | `Float of float
  | `Int of int
  | `List of json list
  | `Null
  | `String of string ]
</programlisting>
    <para>
      Some interesting properties should leap out at you after reading
      this definition:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Some of the type definitions are
          <emphasis>recursive</emphasis> (that is, one of the algebraic
          data types includes a reference to the name of the type being
          defined). Fields such as <literal>Assoc</literal> can contain
          references to more JSON fields, and thus precisely describe
          the underlying JSON data structure. The JSON
          <literal>List</literal> can contain fields of different types,
          unlike the OCaml <literal>list</literal> whose contents must
          be uniform.
        </para>
      </listitem>
      <listitem>
        <para>
          The definition specifically includes a <literal>Null</literal>
          variant for empty fields. OCaml doesn't allow null values by
          default, so this must be encoded like any other value.
        </para>
      </listitem>
      <listitem>
        <para>
          The type definition uses polymorphic variants and not normal
          variants. This will become significant later when we extend it
          with custom extensions to the JSON format.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Let's parse the earlier JSON example into this type now. The first
      stop is the <literal>Yojson.Basic</literal> documentation, where
      we find these helpful functions:
    </para>
    <programlisting language="ocaml">
val from_string : ?buf:Bi_outbuf.t -&gt; ?fname:string -&gt; ?lnum:int -&gt; string -&gt; json
(* Read a JSON value from a string.
   [buf]   : use this buffer at will during parsing instead of
             creating a new one. 
   [fname] : data file name to be used in error messages. It does not 
             have to be a real file. 
   [lnum]  : number of the first line of input. Default is 1.

val from_channel : ?buf:Bi_outbuf.t -&gt; ?fname:string -&gt; ?lnum:int -&gt; in_channel -&gt; json
(* Read a JSON value from a channel. See [from_string] for the meaning of the
   optional arguments. *)

val from_file : ?buf:Bi_outbuf.t -&gt; ?fname:string -&gt; ?lnum:int -&gt; string -&gt; json
(* Read a JSON value from a file. See [from_string] for the meaning of the optional
   arguments. *)
</programlisting>
    <para>
      When first reading these interfaces, you can generally ignore the
      optional arguments (which have the question marks in the type
      signature), as they will be filled in with sensible values. In the
      above signature, the optional arguments offer finer control over
      the memory buffer allocation and error messages from parsing
      incorrect JSON.
    </para>
    <para>
      The type signature for these functions with the optional elements
      removed makes their purpose much clearer:
    </para>
    <programlisting language="ocaml">
val from_string : string -&gt; json
val from_file : string -&gt; json
val from_channel : in_channel -&gt; json
</programlisting>
    <para>
      The <literal>in_channel</literal> constructor is from the original
      OCaml standard library, and its use is considered deprecated when
      using the Core standard library. This leaves us with two ways of
      parsing the JSON: either from a string or from a file on a
      filesystem. The next example shows both in action, assuming the
      JSON record is stored in a file called
      <literal>book.json</literal>.
    </para>
    <programlisting language="ocaml">
(* read_json.ml *)
open Core.Std

let () =
  (* Read JSON file into an OCaml string *)
  let buf = In_channel.read_all &quot;book.json&quot; in

  (* Use the string JSON constructor *)
  let json1 = Yojson.Basic.from_string buf in

  (* Use the file JSON constructor *)
  let json2 = Yojson.Basic.from_file &quot;book.json&quot; in

  (* Test that the two values are the same *)
  print_endline (if json1 = json2 then &quot;OK&quot; else &quot;FAIL&quot;)
  print_endline (if phys_equal json1 json2 then &quot;FAIL&quot; else &quot;OK&quot;)
</programlisting>
    <para>
      You can build this by writing a <literal>_tags</literal> file to
      define the package dependencies, and then running
      <literal>ocamlbuild</literal>.
    </para>
    <programlisting>
$ cat _tags
true: package(core,yojson)
true: thread, debug, annot

$ ocamlbuild -use-ocamlfind read_json.native
$ ./read_json.native
OK
OK
</programlisting>
    <para>
      The <literal>from_file</literal> function accepts an input
      filename and takes care of opening and closing it for you. It's
      far more common to use <literal>from_string</literal> to construct
      JSON values though, since these strings come in via a network
      connection (we'll see more of this in
      <xref linkend="concurrent-programming-with-async"/>) or
      a database. Finally, the example checks that the two input
      mechanisms actually resulted in the same OCaml data structure.
    </para>
    <sidebar>
    <title>
    The difference between <literal>=</literal> and
    <literal>==</literal>, and <literal>phys_equal</literal> in Core
    </title>
    <para>
      If you come from a C/C++ background, you will probably reflexively
      use <literal>==</literal> to test two values for equality. In
      OCaml, <literal>==</literal> tests for
      <emphasis>physical</emphasis> equality, and <literal>=</literal>
      tests for <emphasis>structural</emphasis> equality.
    </para>
    <para>
      The <literal>==</literal> physical equality test will match if two
      data structures have precisely the same pointer in memory. Two
      data structures that have identical contents, but are constructed
      separately, will not match using this operator. In the JSON
      example, the <literal>json1</literal> and <literal>json2</literal>
      values are not identical and so would fail the physical equality
      test.
    </para>
    <para>
      The <literal>=</literal> structural equality operator recursively
      inspects each field in the two values and tests them individually
      for equality. In the JSON parsing example, every field will be
      traversed and checked, and they will check out as equal.
      Crucially, if your data structure is cyclical (that is, a value
      recursively points back to another field within the same
      structure), the <literal>=</literal> operator will never
      terminate, and your program will hang! In this situation, you must
      use the physical equality operator, or write a custom comparison
      function that breaks the recursion.
    </para>
    <para>
      It's quite easy to mix up the use of <literal>=</literal> and
      <literal>==</literal>, so Core disables the <literal>==</literal>
      operator and provides the more explicit
      <literal>phys_equal</literal> function instead. You'll see a type
      error if you use <literal>==</literal> anywhere:
    </para>
    <programlisting language="ocaml">
# 1 == 2;;
Error: This expression has type int but an expression was expected of type
         [ `Consider_using_phys_equal ]
# phys_equal 1 2;;
- : bool = false
</programlisting>
    <para>
      If you feel like hanging your OCaml interpreter, you can verify
      what happens with recursive values and structural equality for
      yourself:
    </para>
    <programlisting language="ocaml">
# type t1 = { foo1:int; bar1:t2 } and t2 = { foo2:int; bar2:t1 } ;;
type t1 = { foo1 : int; bar1 : t2; }
and t2 = { foo2 : int; bar2 : t1; }
# let rec v1 = { foo1=1; bar1=v2 } and v2 = { foo2=2; bar2=v1 };;
&lt;lots of text&gt;
# v1 == v1;;
- : bool = true
# phys_equal v1 v1;;
- : bool = true
# v1 = v1 ;;
&lt;press ^Z and kill the process now&gt;
</programlisting>
    </sidebar>
  </sect1>
  <sect1 id="selecting-values-from-json-structures">
    <title>Selecting values from JSON structures</title>
    <para>
      Now that we've figured out how to parse the example JSON into an
      OCaml value, let's manipulate it from OCaml code and extract
      specific fields.
    </para>
    <programlisting language="ocaml">
(* parse_book.ml *)
open Core.Std

let () =
  (* Read the JSON file *)
  let json = Yojson.Basic.from_file &quot;book.json&quot; in

  (* Locally open the JSON manipulation functions *)
  let open Yojson.Basic.Util in
  let title = json |&gt; member &quot;title&quot; |&gt; to_string in
  let tags = json |&gt; member &quot;tags&quot; |&gt; to_list |&gt; filter_string in
  let pages = json |&gt; member &quot;pages&quot; |&gt; to_int in
  let is_online = json |&gt; member &quot;is_online&quot; |&gt; to_bool_option in
  let is_translated = json |&gt; member &quot;is_translated&quot; |&gt; to_bool_option in
  let authors = json |&gt; member &quot;authors&quot; |&gt; to_list in
  let names = List.map authors ~f:(fun json -&gt; member &quot;name&quot; json |&gt; to_string) in

  (* Print the results of the parsing *)
  printf &quot;Title: %s (%d)\n&quot; title pages;
  printf &quot;Authors: %s\n&quot; (String.concat ~sep:&quot;, &quot; names);
  printf &quot;Tags: %s\n&quot; (String.concat ~sep:&quot;, &quot; tags);
  let string_of_bool_option =
    function
    | None -&gt; &quot;&lt;none&gt;&quot;
    | Some true -&gt; &quot;yes&quot;
    | Some false -&gt; &quot;no&quot; in
  printf &quot;Online: %s\n&quot; (string_of_bool_option is_online);
  printf &quot;Translated: %s\n&quot; (string_of_bool_option is_translated)
</programlisting>
    <para>
      Build this with the same <literal>_tags</literal> file as the
      earlier example, and run <literal>ocamlbuild</literal> on the new
      file.
    </para>
    <programlisting>
$ ocamlbuild -use-ocamlfind parse_book.native
$ ./parse_book.native 
Title: Real World OCaml (450)
Authors: Jason Hickey, Anil Madhavapeddy, Yaron Minsky
Tags: functional programming, ocaml, algorithms
Online: yes
Translated: &lt;none&gt;
</programlisting>
    <para>
      This code introduces the <literal>Yojson.Basic.Util</literal>
      module, which contains <emphasis>combinator</emphasis> functions
      that let you easily map a JSON object into a more strongly-typed
      OCaml value.
    </para>
    <sidebar>
    <title>
    Functional Combinators
    </title>
    <para>
      Combinators are a design pattern that crops up quite often in
      functional programming. John Hughes defines them as &quot;a
      function which builds program fragments from program
      fragments&quot;. In a functional language, this generally means
      higher-order functions that combine other functions to apply
      useful transformations over values.
    </para>
    <para>
      You've already run across several of these in the
      <literal>List</literal> module:
    </para>
    <programlisting language="ocaml">
val map  : 'a list -&gt; f:('a -&gt; 'b)   -&gt; 'b list
val fold : 'a list -&gt; init:'accum -&gt; f:('accum -&gt; 'a -&gt; 'accum) -&gt; 'accum
</programlisting>
    <para>
      <literal>map</literal> and <literal>fold</literal> are extremely
      common combinators that transform an input list by applying a
      function to each value of the list. The <literal>map</literal>
      combinator is simplest, with the resulting list being output
      directly. <literal>fold</literal> applies each value in the input
      list to a function that accumulates a single result, and returns
      that instead.
    </para>
    <programlisting language="ocaml">
val iter : 'a list -&gt; f:('a -&gt; unit) -&gt; unit
</programlisting>
    <para>
      <literal>iter</literal> is a more specialised combinator that is
      only useful in OCaml due to side-effects being allowed. The input
      function is applied to every value, but no result is supplied. The
      function must instead apply some side-effect such as changing a
      mutable record field or printing to the standard output.
    </para>
    </sidebar>
    <para>
      <literal>Yojson</literal> provides several combinators in the
      <literal>Yojson.Basic.Util</literal> module, such as:
    </para>
    <programlisting language="ocaml">
val member : string -&gt; json -&gt; json
val index : int -&gt; json -&gt; json
val to_string : json -&gt; string
val to_int : json -&gt; int
val filter_string : json list -&gt; string list
</programlisting>
    <para>
      We'll go through each of these uses one-by-one. Core provides the
      <literal>|&gt;</literal> pipe-forward which can chain combinators
      together, and the example code uses this to select and convert
      values out of the JSON structure. Let's examine some of them in
      more detail:
    </para>
    <programlisting language="ocaml">
  let open Yojson.Basic.Util in
  let title = json |&gt; member &quot;title&quot; |&gt; to_string in
</programlisting>
    <para>
      The <literal>member</literal> function accepts a JSON object and
      named key and returns the JSON field associated with that key, or
      <literal>Null</literal>. Since we know that the
      <literal>title</literal> value is always a string in our example
      schema, we want to convert it to an OCaml string. The
      <literal>to_string</literal> function performs this conversion,
      and raises an exception if there is an unexpected JSON type. The
      <literal>|&gt;</literal> operator provides a convenient way to
      chain these operations together.
    </para>
    <programlisting language="ocaml">
  let tags = json |&gt; member &quot;tags&quot; |&gt; to_list |&gt; filter_string in
  let pages = json |&gt; member &quot;pages&quot; |&gt; to_int in
</programlisting>
    <para>
      The <literal>tags</literal> field is similar to
      <literal>title</literal>, but the field is a list of strings
      instead of a single one. Converting this to an OCaml
      <literal>string list</literal> is a two stage process. First, we
      convert the JSON <literal>List</literal> to an OCaml list of JSON
      values, and then filter out the <literal>String</literal> values
      as an OCaml <literal>string list</literal>. Remember that OCaml
      lists must contain values of the same type, so any JSON values
      that cannot be converted to a <literal>string</literal> will be
      skipped from the output of <literal>filter_string</literal>.
    </para>
    <programlisting language="ocaml">
  let is_online = json |&gt; member &quot;is_online&quot; |&gt; to_bool_option in
  let is_translated = json |&gt; member &quot;is_translated&quot; |&gt; to_bool_option in
</programlisting>
    <para>
      The <literal>is_online</literal> and
      <literal>is_translated</literal> fields are optional in our JSON
      schema, so no error should be raised if they are not present. The
      OCaml type is a <literal>string option</literal> to reflect this,
      and can be extracted via <literal>to_bool_option</literal>. In our
      example JSON, only <literal>is_online</literal> is present and
      <literal>is_translated</literal> will be <literal>None</literal>.
    </para>
    <programlisting language="ocaml">
  let authors = json |&gt; member &quot;authors&quot; |&gt; to_list in
  let names = List.map authors ~f:(fun json -&gt; member &quot;name&quot; json |&gt; to_string) in
</programlisting>
    <para>
      The final use of JSON combinators is to extract all the
      <literal>name</literal> fields from the list of authors. We first
      construct the <literal>author list</literal>, and then
      <literal>map</literal> it into a <literal>string list</literal>.
      Notice that the example explicitly binds
      <literal>authors</literal> to a variable name. It can also be
      written more succinctly using the pipe-forward operator:
    </para>
    <programlisting language="ocaml">
let names =
  json
  |&gt; member &quot;authors&quot;
  |&gt; to_list
  |&gt; List.map ~f:(fun json -&gt; member &quot;name&quot; json |&gt; to_string)
</programlisting>
    <para>
      This style of programming which omits variable names and chains
      functions together is known as &quot;point-free programming&quot;.
      It's a succinct style, but shouldn't be overused due to the
      increased difficulty of debugging intermediate values. If an
      explicit name is assigned to each stage of the transformations,
      debuggers in particular have an easier time making the program
      flow easier to represent to the programmer.
    </para>
    <para>
      This technique of using chained parsing functions is very powerful
      in combination with the OCaml type system. Many errors that don't
      make sense at runtime (for example, mixing up lists and objects)
      will be caught statically via a type error.
    </para>
  </sect1>
  <sect1 id="constructing-json-values">
    <title>Constructing JSON values</title>
    <para>
      Building and printing JSON values is pretty straightforward given
      the <literal>Yojson.Basic.json</literal> type. You can just
      construct values of type <literal>json</literal> and call the
      <literal>to_string</literal> function] on them. Let's remind
      ourselves of the <literal>Yojson.Basic.type</literal> again:
    </para>
    <programlisting language="ocaml">
type json = [
  | `Assoc of (string * json) list
  | `Bool of bool
  | `Float of float
  | `Int of int
  | `List of json list
  | `Null
  | `String of string ]
</programlisting>
    <para>
      We can directly build a JSON value against this type, and use the
      pretty-printing functions in the <literal>Yojson.Basic</literal>
      module to lay the output out in the JSON format.
    </para>
    <programlisting language="ocaml">
# let x = `Assoc [ (&quot;key&quot;, `String &quot;value&quot;) ] ;;
val x : [&gt; `Assoc of (string * [&gt; `String of string ]) list ] =
  `Assoc [(&quot;key&quot;, `String &quot;value&quot;)]
</programlisting>
    <para>
      In the example above, we've constructed a value
      <literal>x</literal> that represents a simple JSON object. We
      haven't actually defined the type of <literal>x</literal>
      explicitly here, as we're relying on the magic of polymorphic
      variants to make this all work. The OCaml type system infers a
      type for <literal>x</literal> based on how you construct the
      value. In this case only the <literal>Assoc</literal> and
      <literal>String</literal> variants are used, and the inferred type
      only contains these fields without knowledge of the other possible
      variants that you haven't used yet.
    </para>
    <programlisting language="ocaml">
# Yojson.Basic.pretty_to_string ;;
- : ?std:bool -&gt; Yojson.Basic.json -&gt; string = &lt;fun&gt;  
</programlisting>
    <para>
      <literal>pretty_to_string</literal> has a more explicit signature
      that wants an argument of type
      <literal>Yojson.Basic.json</literal>. When <literal>x</literal> is
      applied to <literal>pretty_to_string</literal>, the inferred type
      of <literal>x</literal> is statically checked against the
      structure of the <literal>json</literal> type to ensure that
      they're compatible.
    </para>
    <programlisting language="ocaml">
# Yojson.Basic.pretty_to_string x ;;
- : string = &quot;{ \&quot;key\&quot;: \&quot;value\&quot; }&quot;

# Yojson.Basic.pretty_to_channel stdout x ;;
{ &quot;key&quot;: &quot;value&quot; }
- : unit = ()
</programlisting>
    <para>
      In this case, there are no problems. Our <literal>x</literal>
      value has an inferred type that is a valid sub-type of
      <literal>json</literal>, and the function application just works
      without us ever having to explicitly specify a type for
      <literal>x</literal>. Type inference lets you write more succinct
      code without sacrificing runtime reliability, as all the uses of
      polymorphic variants are still checked at compile-time.
    </para>
    <sidebar>
    <title>
    Polymorphic variants and easier type checking
    </title>
    <para>
      One difficulty you will encounter is that type errors involving
      polymorphic variants can be quite verbose if you make a mistake in
      your code. For example, suppose you build an
      <literal>Assoc</literal> and mistakenly include a single value
      instead of a list of keys:
    </para>
    <programlisting language="ocaml">
# let x = `Assoc (&quot;key&quot;, `String &quot;value&quot;);;
val x : [&gt; `Assoc of string * [&gt; `String of string ] ] =
  `Assoc (&quot;key&quot;, `String &quot;value&quot;)

# Yojson.Basic.pretty_to_string x;;
Error: This expression has type
         [&gt; `Assoc of string * [&gt; `String of string ] ]
       but an expression was expected of type Yojson.Basic.json
       Types for tag `Assoc are incompatible
</programlisting>
    <para>
      The type error above isn't <emphasis>wrong</emphasis> as such, but
      can be inconvenient to wade through for larger values. An easy way
      to narrow down this sort of type error is to add explicit type
      annotations as a compiler hint about your intentions:
    </para>
    <programlisting language="ocaml">
# let (x:Yojson.Basic.json) = `Assoc (&quot;key&quot;, `String &quot;value&quot;);;
Error: This expression has type 'a * 'b
       but an expression was expected of type
         (string * Yojson.Basic.json) list
</programlisting>
    <para>
      In this case, we've marked the <literal>x</literal> as being of
      type <literal>Yojson.Basic.json</literal>, and the compiler
      immediately spots that the argument to the
      <literal>Assoc</literal> variant has the incorrect type. This
      illustrates the strengths and weaknesses of polymorphic variants:
      they make it possible to easily subtype across module boundaries,
      but the error messages can be more confusing. However, a bit of
      careful manual type annotation is all it takes to make tracking
      down such issues much easier.
    </para>
    </sidebar>
  </sect1>
  <sect1 id="using-non-standard-json-extensions">
    <title>Using non-standard JSON extensions</title>
    <para>
      The standard JSON types are <emphasis>really</emphasis> basic, and
      OCaml types are far more expressive. Yojson supports an extended
      JSON format for those times when you're not interoperating with
      external systems and just want a convenient human-readable local
      format. The <literal>Yojson.Safe.json</literal> type is a superset
      of the <literal>Basic</literal> polymorphic variant, and looks
      like this:
    </para>
    <programlisting language="ocaml">
type json = [
  | `Assoc of (string * json) list
  | `Bool of bool
  | `Float of float
  | `Floatlit of string
  | `Int of int
  | `Intlit of string
  | `List of json list
  | `Null
  | `String of string
  | `Stringlit of string
  | `Tuple of json list
  | `Variant of string * json option ]
</programlisting>
    <para>
      The <literal>Safe.json</literal> type includes all of the variants
      from <literal>Basic.json</literal> and extends it with a few more
      useful ones. A standard JSON type such as a
      <literal>String</literal> will type-check against both the
      <literal>Basic</literal> module and also the non-standard
      <literal>Safe</literal> module. If you use the extension values
      with the <literal>Basic</literal> module however, the compiler
      will reject your code until you make it compliant with the
      portable subset of JSON.
    </para>
    <para>
      Yojson supports the following JSON extensions:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The <literal>lit</literal> suffix denotes that the value is
          stored as a JSON string. For example, a
          <literal>Floatlit</literal> will be stored as
          <literal>&quot;1.234&quot;</literal> instead of
          <literal>1.234</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          The <literal>Tuple</literal> type is stored as
          <literal>(&quot;abc&quot;, 123)</literal> instead of a list.
        </para>
      </listitem>
      <listitem>
        <para>
          The <literal>Variant</literal> type encodes OCaml variants
          more explicitly, as <literal>&lt;&quot;Foo&quot;&gt;</literal>
          or <literal>&lt;&quot;Bar&quot;:123&gt;</literal> for a
          variant with parameters.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The only purpose of these extensions is to make the data
      representation more expressive without having to refer to the
      original OCaml types. You can always cast a
      <literal>Safe.json</literal> to a <literal>Basic.json</literal>
      type by using the <literal>to_basic</literal> function as follows:
    </para>
    <programlisting language="ocaml">
val to_basic : json -&gt; Yojson.Basic.json
(** Tuples are converted to JSON arrays, Variants are converted to
    JSON strings or arrays of a string (constructor) and a json value
    (argument). Long integers are converted to JSON strings.
    Examples:

    `Tuple [ `Int 1; `Float 2.3 ]   -&gt;    `List [ `Int 1; `Float 2.3 ]
    `Variant (&quot;A&quot;, None)            -&gt;    `String &quot;A&quot;
    `Variant (&quot;B&quot;, Some x)          -&gt;    `List [ `String &quot;B&quot;, x ]
    `Intlit &quot;12345678901234567890&quot;  -&gt;    `String &quot;12345678901234567890&quot;
 *)
</programlisting>
  </sect1>
  <sect1 id="automatically-mapping-json-to-ocaml-types">
    <title>Automatically mapping JSON to OCaml types</title>
    <para>
      The combinators described earlier make it easy to write functions
      that extract fields from JSON records, but the process is still
      pretty manual. When you implement larger specifications, it's much
      easier to generate the mappings from JSON schemas to OCaml values
      more mechanically than writing conversion functions individually.
      We'll cover an alternative JSON processing method that is better
      for larger-scale JSON handling now, using the
      <ulink url="http://mjambon.com/atd-biniou-intro.html">ATD</ulink>
      tool. This will introduce our first <emphasis>Domain Specific
      Language</emphasis> that compiles JSON specifications into OCaml
      modules, which are then used throughout your application.
    </para>
    <note>
    <title>
    Installing the ATDgen library and tool
    </title>
    <para>
      ATDgen installs some OCaml libraries that interface with Yojson,
      and also a command-line tool that generates code. It can all be
      installed via OPAM:
    </para>
    <programlisting>
$ opam install atdgen
$ atdgen -version
1.2.3
</programlisting>
    <para>
      The command-line tool will be installed within your
      <literal>~/.opam</literal> directory, and will already be on your
      <literal>PATH</literal> from running
      <literal>opam config env</literal>. See
      <xref linkend="installation"/> if this isn't working.
    </para>
    </note>

    <para>
      The idea behind ATD is to specify the format of the JSON in a
      separate file, and then run a compiler (<literal>atdgen</literal>)
      that outputs OCaml code to construct and parse JSON values. This
      means that you don't need to write any OCaml parsing code at all,
      as it will all be auto-generated for you.
    </para>
    <para>
      Let's go straight into looking at an example of how this works, by
      using a small portion of the GitHub API. GitHub is a popular code
      hosting and sharing website that provides a JSON-based web
      <ulink url="http://developer.github.com">API</ulink>. The ATD code
      fragment below describes the GitHub authorization API. It is based
      on a pseudo-standard web protocol known as OAuth, and is used to
      authorize users for GitHub services.
    </para>
    <programlisting language="ocaml">
type scope = [
    User &lt;json name=&quot;user&quot;&gt;
  | Public_repo &lt;json name=&quot;public_repo&quot;&gt;
  | Repo &lt;json name=&quot;repo&quot;&gt;
  | Repo_status &lt;json name=&quot;repo_status&quot;&gt;
  | Delete_repo &lt;json name=&quot;delete_repo&quot;&gt;
  | Gist &lt;json name=&quot;gist&quot;&gt;
]

type app = {
  name: string;
  url: string;
}  &lt;ocaml field_prefix=&quot;app_&quot;&gt;

type authorization_request = {
  scopes: scope list;
  note: string;
} &lt;ocaml field_prefix=&quot;auth_req_&quot;&gt;

type authorization_response = {
  scopes: scope list;
  token: string;
  app: app;
  url: string;
  id: int;
  ?note: string option;
  ?note_url: string option;
}
</programlisting>
    <para>
      ATD specifications are deliberately similar to OCaml type
      definitions. Each field can include extra annotations to customise
      the parsing code for a particular backend. For example, the GitHub
      <literal>scope</literal> field above is defined as a variant type,
      but with the actual JSON values being defined explicitly (as
      lower-case versions).
    </para>
    <para>
      The ATD spec can be compiled to a number of OCaml targets. Let's
      run the compiler twice, to generate some OCaml type definitions,
      and a JSON serializer.
    </para>
    <programlisting language="bash">
$ atdgen -t github.atd
$ atdgen -j github.atd
</programlisting>
    <para>
      This will generate some new files in your current directory.
      <literal>Github_t.ml</literal> and <literal>Github_t.mli</literal>
      will contain an OCaml module with types defines that correspond to
      the ATD file. The signature looks like this:
    </para>
    <programlisting language="ocaml">
type scope = [
  | `User | `Public_repo | `Repo | `Repo_status
  | `Delete_repo | `Gist
]

type app = {
  app_name (*atd name *): string;
  app_url (*atd url *): string
}

type authorization_request = {
  auth_req_scopes (*atd scopes *): scope list;
  auth_req_note (*atd note *): string
}

type authorization_response = {
  scopes: scope list;
  token: string;
  app: app;
  url: string;
  id: int;
  note: string option;
  note_url: string option
}
</programlisting>
    <para>
      There is an obvious correspondence to the ATD definition. Note
      that field names in OCaml records in the same module cannot shadow
      each other, and so we instruct ATDgen to prefix every field with a
      name that distinguishes it from other records in the same module.
      For example,
      <literal>&lt;ocaml field_prefix=&quot;auth_req_&quot;&gt;</literal>
      in the ATD spec prefixes every field name in the generated
      <literal>authorization_request</literal> record with
      <literal>auth_req</literal>.
    </para>
    <para>
      The <literal>Github_t</literal> module only contains the type
      definitions, while <literal>Github_j</literal> provides
      serialization functions to and from JSON. You can read the
      <literal>github_j.mli</literal> to see the full interface, but the
      important functions for most uses are the conversion functions to
      and from a string. For our example above, this looks like:
    </para>
    <programlisting language="ocaml">
val string_of_authorization_response :
  ?len:int -&gt; authorization_response -&gt; string
  (** Serialize a value of type {!authorization_response}
      into a JSON string.
      @param len specifies the initial length
                 of the buffer used internally.
                 Default: 1024. *)

val authorization_response_of_string :
  string -&gt; authorization_response
</programlisting>
    <para>
      This is pretty convenient! We've written a single ATD file, and
      all the OCaml boilerplate to convert between JSON and a strongly
      typed record has been generated for us. You can control various
      aspects of the serializer by passing flags to
      <literal>atdgen</literal>. The important ones for JSON are:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>-j-std</literal>: work in standard JSON mode, and
          never print non-standard JSON extensions.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>-j-custom-fields FUNCTION</literal>: call a custom
          function for every unknown field encountered, instead of
          raising a parsing exception.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>-j-defaults</literal>: always explicitly output a
          JSON value if possible. This requires the default value for
          that field to be defined in the ATD specification.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The full ATD specification is quite sophisticated (and well
      documented online at its homepage). The ATD compiler can also
      target formats other than JSON, and outputs code for other
      languages such as Java if you need more interoperability. There
      are also several similar projects you can investigate which
      automate the code generation process:
      <ulink url="http://piqi.org">Piqi</ulink> uses the Google protobuf
      format, and <ulink url="http://thrift.apache.org">Thrift</ulink>
      supports many other programming languages and includes OCaml
      bindings.
    </para>
    <sect2 id="example-querying-github-organization-information">
      <title>Example: Querying Github organization information</title>
      <para>
        Let's finish up with an example of some live JSON parsing from
        Github, and build a tool to query organization information via
        their API. Look at the online
        <ulink url="http://developer.github.com/v3/orgs/">API
        documentation</ulink> for Github to see what the JSON schema
        looks like retrieving the organization information. Then create
        an ATD file that covers the fields we need. Any extra fields
        present in the response will be ignored by the ATD parser.
      </para>
      <programlisting>
(* github_org.atd *)
type org = {
  login: string;
  id: int;
  url: string;
  ?name: string option;
  ?blog: string option;
  ?email: string option;
  public_repos: int
}
</programlisting>
      <para>
        The OCaml program that uses this will fetch the JSON and output
        a one-line summary. You'll also need the <literal>curl</literal>
        tool installed on your system to fetch the HTTP web pages, as
        our example below calls <literal>curl</literal> via the
        <literal>Core_extended.Shell</literal> interface.
      </para>
      <programlisting language="ocaml">
(* github_org_info.ml *)
open Core.Std

let print_org file () =
  let url = sprintf &quot;https://api.github.com/orgs/%s&quot; file in
  Core_extended.Shell.run_full &quot;curl&quot; [url]
  |&gt; Github_org_j.org_of_string
  |&gt; fun org -&gt;
      let open Github_org_t in
      let name = Option.value ~default:&quot;???&quot; org.name in
      printf &quot;%s (%d) with %d public repos\n&quot;
        name org.id org.public_repos

let () =
  Command.basic ~summary:&quot;Print Github organization information&quot;
    Command.Spec.(empty +&gt; anon (&quot;organization&quot; %: string))
    print_org
  |&gt; Command.run
</programlisting>
      <para>
        Finally, write a short shell script to generate the OCaml
        <literal>Github_org</literal> parsers via
        <literal>atdgen</literal>, and build the OCaml command-line
        interface.
      </para>
      <programlisting>
$ cat _tags 
true: package(core,core_extended,yojson,atdgen)
true: thread, debug, annot

$ cat buildgh.sh 
#!/bin/sh

atdgen -t github_org.atd
atdgen -j github_org.atd
ocamlbuild -use-ocamlfind github_org_info.native

$ ./buildgh.sh
</programlisting>
      <para>
        You can now run the command-line tool with a single argument to
        specify the name of the organization, and it will dynamically
        fetch the JSON from the web, parse it, and render the summary to
        your console.
      </para>
      <programlisting>
$ curl https://api.github.com/orgs/janestreet 
{
  &quot;login&quot;: &quot;janestreet&quot;,
  &quot;id&quot;: 3384712,
  &quot;url&quot;: &quot;https://api.github.com/orgs/janestreet&quot;,
  &quot;public_repos&quot;: 31,
  &quot;public_gists&quot;: 0,
  &quot;followers&quot;: 0,
  &quot;following&quot;: 0,
  &quot;html_url&quot;: &quot;https://github.com/janestreet&quot;,
  &quot;created_at&quot;: &quot;2013-01-25T19:35:43Z&quot;,
  &quot;updated_at&quot;: &quot;2013-05-23T14:03:06Z&quot;,
  &quot;type&quot;: &quot;Organization&quot;
}
$ ./github_org_info.native mirage
Mirage account (131943) with 32 public repos
$ ./github_org_info.native janestreet
??? (3384712) with 31 public repos
</programlisting>
      <para>
        The JSON returned from the <literal>janestreet</literal> query
        is missing an organization name, but this is explicitly
        reflected in the OCaml type since the ATD spec marked
        <literal>name</literal> as an optional field. Our OCaml code
        explicitly handles this case and doesn't have to worry about
        null-pointer exceptions. Similarly, the JSON integer for the
        <literal>id</literal> is mapped into a native OCaml integer via
        the ATD conversion.
      </para>
      <para>
        While this tool is obviously quite simple, the ability to
        specify optional and default fields is very powerful. Take a
        look at the full ATD specification for the GitHub API in the
        <ulink url="http://github.com/avsm/ocaml-github"><literal>ocaml-github</literal></ulink>
        repository online, which has lots of quirks typical in
        real-world web APIs.
      </para>
      <para>
        Our example shells out to <literal>curl</literal> on the
        command-line to obtain the JSON, which is rather inefficient.
        We'll explain how to integrate the HTTP fetch directly into your
        OCaml application later on in
        <xref linkend="concurrent-programming-with-async"/>.
      </para>
    </sect2>
  </sect1>
</chapter><chapter id="parsing-with-ocamllex-and-menhir">
  <title>Parsing with OCamllex and Menhir</title>
  <para>
    OCaml provides lexer and parser generators modeled on lex and yacc.
    Similar tools are available in a variety of languages, and with them
    you can parse a variety of kinds of input, including web formats or
    full blown programming languages.
  </para>
  <para>
    Let's be more precise about these terms. By
    <emphasis>parsing</emphasis>, we mean reading a textual input into a
    form that is easier for a program to manipulate. For example,
    suppose we want to read a file containing a value in JSON format.
    JSON has a variety of values, including numbers, strings, arrays,
    and objects, and each of these has a precise textual representation.
    For example, the following text represents an object containing a
    string labeled <literal>title</literal>, and an array containing two
    objects, each with a name and array of zip codes.
  </para>
  <programlisting language="json">
{ title: &quot;Cities&quot;,
  cities: [{ name: &quot;Chicago&quot;, zips: [60601] },
           { name: &quot;New York&quot;, zips: [10004] }]
}
</programlisting>
  <para>
    The input text is represented as a sequence of characters.
    Manipulating it in that form would be really hard, so what we want
    is to give it a structured type that is easier for our programs to
    manipulate. For our example, we'll use the following type to
    represent JSON <emphasis>abstract syntax</emphasis>.
  </para>
  <programlisting language="ocaml">
type value = [
| `Object of (string * value) list
| `Array of value array
| `String of string
| `Int of int
| `Float of float
| `True
| `False
| `Null ]
</programlisting>
  <para>
    The objective of <emphasis>parsing</emphasis> is to convert the text
    input into a value of type <literal>value</literal>. This is
    normally done in two phase. First, <emphasis>lexical</emphasis>
    analysis (or lexing, for short) is used to convert the text input
    into a sequence of tokens, or words. For example, the JSON input
    would be tokenized into a sequence of tokens like the following. In
    most cases (and in this example), lexical analysis will choose to
    omit white space from the token stream.
  </para>
  <programlisting>
LEFT_BRACE, ID(&quot;title&quot;), COLON, STRING(&quot;Cities&quot;), COMMA, ID(&quot;cities&quot;), ...
</programlisting>
  <para>
    The next step is to convert the token stream into a program value
    that represents the abstract syntax tree, like the type
    <literal>value</literal> above. This is called
    <emphasis>parsing</emphasis>.
  </para>
  <programlisting>
`Object
  [&quot;title&quot;, `String &quot;Cities&quot;;
   &quot;cities&quot;, `Array
     [|`Object [&quot;name&quot;, `String &quot;Chicago&quot;; &quot;zips&quot;, `Array [|Int 60601|]];
       `Object [&quot;name&quot;, `String &quot;New York&quot;; &quot;zips&quot;, `Array [|Int 10004|]]|]]
</programlisting>
  <para>
    There are many techniques for lexing and parsing. In the lex/yacc
    world, lexing is specified using regular expressions, and parsing is
    specified using context-free grammars. These are concepts from
    formal languages; the lex/yacc tools constructing the machinery for
    you. For <literal>lex</literal>, this means constructing a finite
    automaton; and for <literal>yacc</literal>, this means constructing
    a pushdown automaton.
  </para>
  <para>
    Parsing is a broad and often intricate topic, and our purpose here
    is not to teach all of the ins and outs of yacc and lex, but to show
    how to use these tools in OCaml. There are online resources, and
    most experience you may have using lex/yacc in other languages will
    also apply in OCaml. However, there are differences, and we'll try
    to point out the larger ones here.
  </para>
  <para>
    For illustration, let's continue with the JSON example. For lexing,
    we'll use <literal>ocamllex</literal>, and for parsing, we'll use
    <literal>menhir</literal>, which is somewhat easier to use than
    <literal>ocamlyacc</literal>.
  </para>
  <sect1 id="defining-a-json-parser-with-menhir">
    <title>Defining a JSON parser with menhir</title>
    <para>
      The process of building a parser is interleaved between
      constructing the lexer and parser; you will have to do them
      simultaneously. The first step is to define the set of tokens that
      will be produced by the lexer. For various reasons, the tokens are
      specified by the parser (to specify what it expects as input), so
      we'll start with the parser first.
    </para>
    <para>
      A parser file has suffix <literal>.mly</literal> (we'll use the
      name <literal>parser.mly</literal>) and it contains several parts
      in the following sequence:
    </para>
    <programlisting>
  declarations
  %%
  rules
  %%
  optional OCaml code
</programlisting>
    <para>
      The <literal>%%</literal> are section separators; they have to be
      on a line by themselves. The declarations include token and type
      specifications, precedence directives, and other things, but we
      start by declaring the tokens.
    </para>
    <sect2 id="token-declarations">
      <title>Token declarations</title>
      <para>
        A token is declared using the syntax
        <literal>%token &lt;</literal><emphasis>type</emphasis><literal>&gt;</literal>
        <emphasis>uid</emphasis>, where the
        <literal>&lt;type&gt;</literal> is optional, and
        <emphasis>uid</emphasis> is an capitalized identifier. For JSON,
        we need tokens for numbers, strings, identifiers, and
        punctuation. To start, let's define just the tokens in the
        <literal>parser.mly</literal> file. For technical reasons, we
        need to include a <literal>%start</literal> declaration. For
        now, we'll include just a dummy grammar specification
        <literal>exp: { () }</literal> (we'll replace this when we
        implement the grammar below).
      </para>
      <programlisting language="ocaml">
%token &lt;int&gt; INT
%token &lt;float&gt; FLOAT
%token &lt;string&gt; ID
%token &lt;string&gt; STRING
%token TRUE
%token FALSE
%token NULL
%token LEFT_BRACE
%token RIGHT_BRACE
%token LEFT_BRACK
%token RIGHT_BRACK
%token COLON
%token COMMA
%token EOF

%start &lt;unit&gt; exp

%%

exp: { () }
</programlisting>
      <para>
        The
        <literal>&lt;</literal><emphasis>type</emphasis><literal>&gt;</literal>
        specifications mean that a token carries a value. The
        <literal>INT</literal> token carries an integer value with it,
        <literal>FLOAT</literal> has a <literal>float</literal> value,
        etc. Most of the remaining tokens, like <literal>TRUE</literal>,
        <literal>FALSE</literal>, the punctuation, aren't associated
        with any value, so we omit the
        <literal>&lt;</literal><emphasis>type</emphasis><literal>&gt;</literal>
        specification.
      </para>
      <para>
        Compile this file with <literal>menhir</literal>. It will issue
        multiple warnings about unused tokens because we haven't
        actually defined a grammar yet. It is ok to ignore the warnings
        for now.
      </para>
      <programlisting>
$ menhir parser.mly
Warning: the token COLON is unused.
...
</programlisting>
      <para>
        The <literal>menhir</literal> tool is a parser generator,
        meaning it generates the code to perform parsing from the
        <literal>parser.mly</literal> description. The
        <literal>parser.ml</literal> contains an automaton
        implementation, and is generally difficult to read. However, the
        <literal>parser.mli</literal> contains declarations that we need
        to build a lexer.
      </para>
      <programlisting>
$ cat parser.mli
exception Error

type token = 
  | TRUE
  | STRING of (string)
  | RIGHT_BRACK
  | RIGHT_BRACE
  | NULL
  | LEFT_BRACK
  | LEFT_BRACE
  | INT of (int)
  | ID of (string)
  | FLOAT of (float)
  | FALSE
  | EOF
  | COMMA
  | COLON


val exp: (Lexing.lexbuf -&gt; token) -&gt; Lexing.lexbuf -&gt; (unit)
</programlisting>
    </sect2>
    <sect2 id="specifying-the-grammar-rules">
      <title>Specifying the grammar rules</title>
      <para>
        The grammar itself is specified using a set of rules, where a
        rule contains a set of productions. Abstractly, a production
        looks like the following.
      </para>
      <programlisting>
symbol: [ id1 = ] symbol1; [ id2 = ] symbol2; ...; [ idN = ] symbolN
   { OCaml code }
</programlisting>
      <para>
        A production can be interpreted as follows: given values
        <literal>id1</literal>, ..., <literal>idN</literal> for the
        input symbols <literal>symbol1</literal>, ...,
        <literal>symbolN</literal>; the OCaml code computes a value for
        the target <literal>symbol</literal>. That's too abstract, so
        let's get down to defining productions for parsing JSON. Here is
        the main production for a JSON value.
      </para>
      <programlisting>
value: LEFT_BRACE; obj = opt_object_fields; RIGHT_BRACE
    { `Object obj }
  | LEFT_BRACK; vl = array_values; RIGHT_BRACK
    { `Array vl }
  | s = STRING
    { `String s }
  | i = INT
    { `Int i }
  | x = FLOAT
    { `Float x }
  | TRUE
    { `True }
  | FALSE
    { `False }
  | NULL
    { `Null }
  ;
</programlisting>
      <para>
        We can read it like this, &quot;A JSON <literal>value</literal>
        is either an object bracketed with curly braces, or an array
        bracketed with square braces. or a string, integer, float, etc.
        In each of the productions, the right hand side specifies the
        expected sequence. For example, the object is specified with the
        curly-bracket production.
      </para>
      <programlisting>
value: LEFT_BRACE; obj = opt_object_fields; RIGHT_BRACE
    { `Object obj }
</programlisting>
      <para>
        That is, an object value starts with a
        <literal>LEFT_BRACE</literal>, contains some optional object
        field values (to be defined), and end with a
        <literal>RIGHT_BRACE</literal>. The returned value is
        <literal>Object obj</literal>, where <literal>obj</literal> is
        the sequence of object fields. Note that we've left out bindings
        for <literal>LEFT_BRACE</literal> and
        <literal>RIGHT_BRACE</literal>, because their tokens don't have
        values.
      </para>
      <para>
        Next, let's define the object fields. In the following rules,
        the <literal>opt_object_fields</literal> are either empty, or a
        non-empty sequence of fields in reverse order. Note that if you
        wish to have comments in the rule definitions, you will have to
        use C comment delimiters. By convention, the C comment
        <literal>/* empty */</literal> is used to point out that a
        production has an empty right hand side.
      </para>
      <programlisting>
opt_object_fields: /* empty */
    { [] }
  | obj = rev_object_fields
    { List.rev obj }
  ;

rev_object_fields: k = ID; COLON; v = value
    { [k, v] }
  | obj = rev_object_fields; COMMA; k = ID; COLON; v = value
    { (k, v) :: obj }
  ;
</programlisting>
      <para>
        The rule <literal>rev_object_fields</literal> is defined
        recursively. It has either one key/value field, or it is a
        sequence of fields, followed by a <literal>COMMA</literal> and
        one more field definition.
      </para>
      <para>
        The <literal>rev_</literal> prefixed is intended to point out
        that the fields are returned in reverse order. Why would we do
        that? One reason is that the <literal>menhir</literal> parser
        generator is left-recursive, which means that the constructed
        pushdown automoton uses less stack space with left-recursive
        definitions. The following right-recursive rule accepts the same
        input, but during parsing it requires linear stack space to read
        object field definitions.
      </para>
      <programlisting>
/* Inefficient right-recursive rule */
object_fields: k = ID; COLON; v = value
    { [k, v] }
  | k = ID; COLON; v = value; COMMA; obj = object_fields
    { (k, v) :: obj }
</programlisting>
      <para>
        Alternatively, we could keep the left-recursive definition and
        simply construct the returned value in left-to-right order. This
        is fine, though less efficient. You will have to choose you
        technique according to circumstances.
      </para>
      <programlisting>
/* Quadratic left-recursive rule */
object_fields: k = ID; COLON; v = value
    { [k, v] }
  | obj = rev_object_fields; COMMA; k = ID; COLON; v = value
    { obj @ [k, v] }
  ;
</programlisting>
      <para>
        Finally, we can finish off the grammar by defining the rules for
        arrays, and adding a correct <literal>%start</literal>
        production. For the <literal>%start</literal> production, we'll
        return a <literal>value option</literal>, using
        <literal>None</literal> to represent end of file. Here is the
        complete file.
      </para>
      <programlisting>
%token &lt;int&gt; INT
%token &lt;float&gt; FLOAT
%token &lt;string&gt; ID
%token &lt;string&gt; STRING
%token TRUE
%token FALSE
%token NULL
%token LEFT_BRACE
%token RIGHT_BRACE
%token LEFT_BRACK
%token RIGHT_BRACK
%token COLON
%token COMMA
%token EOF

%type &lt;Json.value option&gt; prog

%start prog

%%

prog: v = value
    { Some v }
  | EOF
    { None }
  ;

value: LEFT_BRACE; obj = opt_object_fields; RIGHT_BRACE
    { `Object obj }
  | LEFT_BRACK; vl = array_values; RIGHT_BRACK
    { `Array vl }
  | s = STRING
    { `String s }
  | i = INT
    { `Int i }
  | x = FLOAT
    { `Float x }
  | TRUE
    { `True }
  | FALSE
    { `False }
  | NULL
    { `Null }
  ;


opt_object_fields: /* empty */
    { [] }
  | obj = rev_object_fields
    { List.rev obj }
  ;

rev_object_fields: k = ID; COLON; v = value
    { [k, v] }
  | obj = rev_object_fields; COMMA; k = ID; COLON; v = value
    { (k, v) :: obj }
  ;

array_values: /* empty */
    { [||] }
  | vl = rev_values
    { Array.of_list (List.rev vl) }
  ;

rev_values: v = value
    { [v] }
  | vl = rev_values; COMMA; v = value
    { v :: vl }
  ;
</programlisting>
      <para>
        That's it. We can compile this with <literal>menhir</literal>,
        which will now no longer complain about unused symbols.
      </para>
    </sect2>
  </sect1>
  <sect1 id="defining-a-lexer-with-ocamllex">
    <title>Defining a lexer with ocamllex</title>
    <para>
      For the next part, we need to define a lexer to tokenize the input
      text, meaning that we break the input into a sequence of words or
      tokens. For this, we'll define a lexer using
      <literal>ocamllex</literal>. In this case, the specification is
      placed in a file with a <literal>.mll</literal> suffix (we'll use
      the name <literal>lexer.mll</literal>). A lexer file has several
      parts in the following sequence.
    </para>
    <programlisting>
{ OCaml code }
let definitions...
rules...
{ OCaml code }
</programlisting>
    <sect2 id="let-definitions-for-regular-expressions">
      <title>Let-definitions for regular expressions</title>
      <para>
        The OCaml code for the header and trailer is optional. The
        let-definitions are used to ease the definition of regular
        expressions. They are optional, but very useful. To get started,
        we know that we'll need to match numbers and strings, so let's
        define names for the regular expressions that specify their
        form.
      </para>
      <para>
        An integer is a sequence of digits, optionally preceded by a
        minus sign. Leading zeroes are not allowed. The question mark
        means that the preceding symbol <literal>-</literal> is
        optional. The square brackets ['1'-'9'] define a character
        range, meaning that the first digit of the integer should be
        1-9. The final range <literal>['0'-'9']*</literal> includes star
        <literal>*</literal>, which means zero-or-more occurrences of
        the characters 0-9. Read formally then, an
        <literal>int</literal> has an optional minus sign, followed by a
        digit in the range 1-9, followed by zero or more digits in the
        range 0-9.
      </para>
      <programlisting>
let int = '-'? ['1'-'9'] ['0'-'9']*
</programlisting>
      <para>
        Floating-point numbers are similar, but we deal with decimal
        points and exponents. We can use multiple let-definitions for
        the different parts.
      </para>
      <programlisting>
let digits = ['0'-'9']+
let frac = '.' digits
let exp = ['e' 'E'] ['-' '+']? digits
let float = int (frac | exp | frac exp)
</programlisting>
      <para>
        The <literal>digits</literal> expression has a
        <literal>+</literal> symbol, meaning that
        <literal>digits</literal> has one or more occurrences of digits
        in the range 0-9. A fractional part <literal>frac</literal> has
        a decimal point followed by some digits; an exponent
        <literal>exp</literal> begins with an <literal>e</literal>
        followed by some digits; and a <literal>float</literal> has an
        integer part, and one or both of a <literal>frac</literal> and
        <literal>exp</literal> part. The vertical bar is a choice; the
        expression <literal>(frac | exp | frac exp)</literal> is either
        a <literal>frac</literal>, or an <literal>exp</literal>, or a
        <literal>frac</literal> followed by an <literal>exp</literal>.
      </para>
      <para>
        Finally, let's define identifiers and whitespace. An identifier
        (label), is an alphanumeric sequence not beginning with a digit.
      </para>
      <programlisting>
let white = [' ' '\t']+
let newline = '\r' | '\n' | &quot;\r\n&quot;

let id = ['a'-'z' 'A'-'Z' '_'] ['a'-'z' 'A'-'Z' '0'-'9' '_']*
</programlisting>
    </sect2>
    <sect2 id="lexing-rules">
      <title>Lexing rules</title>
      <para>
        The lexing rules are specified as a set of
        <literal>parse</literal> rules. A <literal>parse</literal> rule
        has a regular expression followed by OCaml code that defines a
        semantic action. Let's write JSON parse rule.
      </para>
      <programlisting>
rule read = parse
| white { read lexbuf }
| newline { next_line lexbuf; read lexbuf }
| int { INT (int_of_string (Lexing.lexeme lexbuf)) }
| float { FLOAT (float_of_string (Lexing.lexeme lexbuf)) }
| &quot;true&quot; { TRUE }
| &quot;false&quot; { FALSE }
| &quot;null&quot; { NULL }
| id { ID (Lexing.lexeme lexbuf) }
| '&quot;' { read_string (Buffer.create 17) lexbuf }
| '{' { LEFT_BRACE }
| '}' { RIGHT_BRACE }
| '[' { LEFT_BRACK }
| ']' { RIGHT_BRACK }
| ':' { COLON }
| ',' { COMMA }
| _ { raise (SyntaxError (&quot;Unexpected character: &quot; ^ Lexing.lexeme lexbuf)) }
| eof { EOF }
</programlisting>
      <para>
        The OCaml code for the rules has a parameter called
        <literal>lexbuf</literal> that defines the input, including the
        position in the input file, as well as the text that was matched
        by the regular expression. Let's skip to the third action.
      </para>
      <programlisting>
| int { INT (int_of_string (Lexing.lexeme lexbuf)) }
</programlisting>
      <para>
        This action specifies that when the input matches the
        <literal>int</literal> regular expression (defined as
        <literal>'-'? ['1'-'9'] ['0'-'9']*</literal>, then the lexer
        should return the expression
        <literal>INT (int_of_string (Lexing.lexeme lexbuf))</literal>.
        The expression <literal>Lexing.lexeme lexbuf</literal> returns
        the complete string matched by the regular expression. In this
        case, the string represents a number, so we use the
        <literal>int_of_string</literal> function to convert it to a
        number.
      </para>
      <para>
        Going back to the first actions, the first
        <literal>white { read lexbuf }</literal> calls the lexer
        recursively. That's, it skips the input whitespace and returns
        the following token. The action
        <literal>newline { next_line lexbuf; read lexbuf }</literal> is
        similar, but we use it to advance the line number for the lexer.
        Here is the definition of the <literal>next_line</literal>
        function, which updates the line number in the
        <literal>lexbuf</literal>.
      </para>
      <programlisting>
let next_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p &lt;-
    { pos with pos_bol = lexbuf.lex_curr_pos;
               pos_lnum = pos.pos_lnum + 1
    }
</programlisting>
      <para>
        There are actions for each different kind of token. The string
        expressions like <literal>&quot;true&quot; { TRUE }</literal>
        are used for keywords, and the special characters have actions
        too, like <literal>'{' { LEFT_BRACE }</literal>.
      </para>
      <para>
        Some of these patterns overlap. For example, the regular
        expression <literal>&quot;true&quot;</literal> is also matched
        by the <literal>id</literal> pattern.
        <literal>ocamllex</literal> used the following disambiguation
        when a prefix of the input is matched by more than one pattern.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            The longest match always wins. For example, the first input
            <literal>trueX: 167</literal> matches the regular expression
            <literal>&quot;true&quot;</literal> for 4 characters, and it
            matches <literal>id</literal> for 5 characters. The longer
            match wins, and the return value is
            <literal>ID &quot;trueX&quot;</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            If all matches have the same length, then the first action
            wins. If the input were <literal>true: 167</literal>, then
            both <literal>&quot;true&quot;</literal> and
            <literal>id</literal> match the first 4 characters;
            <literal>&quot;true&quot;</literal> is first, so the return
            value is <literal>TRUE</literal>.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
    <sect2 id="recursive-rules">
      <title>Recursive rules</title>
      <para>
        Unlike many other lexer generators, <literal>ocamllex</literal>
        allows the definition of multiple lexer in the same file, and
        the definitions can be recursive. In this case, we use recursion
        to match string literals, using the following rule definition.
      </para>
      <programlisting>
and read_string buf = parse
| '&quot;' { STRING (Buffer.contents buf) }
| '\\' '/' { Buffer.add_char buf '/'; read_string buf lexbuf }
| '\\' '\\' { Buffer.add_char buf '\\'; read_string buf lexbuf }
| '\\' 'b' { Buffer.add_char buf '\b'; read_string buf lexbuf }
| '\\' 'f' { Buffer.add_char buf '\012'; read_string buf lexbuf }
| '\\' 'n' { Buffer.add_char buf '\n'; read_string buf lexbuf }
| '\\' 'r' { Buffer.add_char buf '\r'; read_string buf lexbuf }
| '\\' 't' { Buffer.add_char buf '\t'; read_string buf lexbuf }
| '\\' 'u' hex hex hex hex
  { let string_code = String.sub (Lexing.lexeme lexbuf) 2 4 in
    let code = int_of_string (&quot;0x&quot; ^ string_code) in
    add_utf8 buf code;
    read_string buf lexbuf
  }
| [^ '&quot;' '\\']+
  { Buffer.add_string buf (Lexing.lexeme lexbuf);
    read_string buf lexbuf
  }
| _ { raise (SyntaxError (&quot;Illegal string character: &quot; ^ Lexing.lexeme lexbuf)) }
| eof { raise (SyntaxError (&quot;String is not terminated&quot;)) }
</programlisting>
      <para>
        This rule takes a <literal>buf : Buffer.t</literal> as an
        argument. If we reach the terminating double quote
        <literal>&quot;</literal>, then we return the contents of the
        buffer as a <literal>STRING</literal>.
      </para>
      <para>
        The other cases are for handling the string contents. The action
        <literal>[^ '&quot;' '\\']+ { ... }</literal> matches normal
        input that does not contain a double-quote or backslash. The
        actions beginning with a backslash <literal>\</literal> define
        what to do for escape sequences. In each of these cases, the
        final step includes a recursive call to the lexer.
      </para>
      <para>
        As specified by JSON, we also handle Unicode code points,
        <literal>'\\' 'u' hex hex hex hex</literal>. Ocaml doesn't have
        any built-in handling for Unicode, so in this case we choose to
        represent the code point in UTF-8. We define the following
        function for adding the UTF-8 encoding to the buffer.
      </para>
      <programlisting language="ocaml">
let add_utf8 buf code =
  if code &lt;= 0x7f then
    Buffer.add_char buf (Char.chr code)
  else if code &lt;= 0x7ff then begin
    Buffer.add_char buf (Char.chr (0b11000000 lor ((code lsr 6) land 0x3f)));
    Buffer.add_char buf (Char.chr (0b10000000 lor (code land 0x3f)))
  end else begin
    Buffer.add_char buf (Char.chr (0b11100000 lor ((code lsr 12) land 0x3f)));
    Buffer.add_char buf (Char.chr (0b10000000 lor ((code lsr 6) land 0x3f)));
    Buffer.add_char buf (Char.chr (0b10000000 lor (code land 0x3f)))
  end
</programlisting>
      <para>
        That covers the lexer. Next, we need to combine the lexer with
        the parser to bring it all together.
      </para>
    </sect2>
  </sect1>
  <sect1 id="bringing-it-all-together">
    <title>Bringing it all together</title>
    <para>
      For the final part, we need to compose the lexer and parser. As we
      saw the the type definition in <literal>parser.mli</literal>, the
      parsing function expects a lexer of type
      <literal>Lexing.lexbuf -&gt; token</literal>, and it also expects
      a <literal>lexbuf</literal>.
    </para>
    <programlisting language="ocaml">
val prog: (Lexing.lexbuf -&gt; token) -&gt; Lexing.lexbuf -&gt; (Json.value option)
</programlisting>
    <para>
      The standard lexing library <literal>Lexing</literal> provides a
      function <literal>from_channel</literal> to read the input from a
      channel. The following function describes the structure, where the
      <literal>Lexing.from_channel</literal> function is used to
      construct a <literal>lexbuf</literal>, which is passed with the
      lexing function <literal>Lexer.read</literal> to the
      <literal>Parser.prog</literal> function.
      <literal>Parsing.prog</literal> returns <literal>None</literal>
      when it reaches end of file. We define a function
      <literal>Json.output_value</literal>, not shown here, to print a
      <literal>Json.value</literal>.
    </para>
    <programlisting language="ocaml">
let rec parse_and_print lexbuf =
  match Parser.prog Lexer.read lexbuf with
  | Some value -&gt; Json.output_value stdout value; parse_and_print lexbuf
  | None -&gt; ()
  
let loop filename =
  let inx = open_in filename in
  let lexbuf = Lexing.from_channel inx in
  parse_and_print lexbuf;
  close_in inx
</programlisting>
    <para>
      This isn't quite right yet -- we need to handle parsing errors.
      Currently there are two errors, <literal>Parser.Error</literal>
      and <literal>Lexer.SyntaxError</literal>. A simple solution when
      encountering an error is to print the error and give up.
    </para>
    <programlisting language="ocaml">
let parse_with_error lexbuf =
  try Parser.prog Lexer.read lexbuf with
  | SyntaxError msg -&gt;
      Printf.fprintf stderr &quot;%a: %s\n&quot; print_position lexbuf msg;
      None
  | Parser.Error -&gt;
      Printf.fprintf stderr &quot;%a: syntax error\n&quot; print_position lexbuf;
      None

let rec parse_and_print lexbuf =
  match parse_with_error lexbuf with
  | Some value -&gt; Json.output_value stdout value; parse_and_print lexbuf
  | None -&gt; ()
</programlisting>
    <para>
      This approach, &quot;give up on the first error,&quot; is easy to
      implement, but it isn't very friendly. In general, error handling
      can be pretty intricate, and we won't discuss it here. However,
      the menhir parser defines additional mechanisms you can use to try
      and recover from errors, describe it its reference manual.
    </para>
    <para>
      Here is an example of a successful run on the following input
      file.
    </para>
    <programlisting>
$ cat test1.json
true
false
null
[1, 2]
&quot;Hello\r\n\t\b\\\/\u12345&quot;
{ field1: &quot;Hello&quot;,
  field2: 17e13,
  field3: [1, 2, 3],
  field4: { fieldA: 1, fieldB: &quot;Hello&quot; }
}

$ ./test test1.json
true
false
null
[1, 2]
&quot;Hello
       \/ሴ5&quot;
{ field1: &quot;Hello&quot;, field2: 170000000000000.000000, field3: [1, 2, 3], field4: { fieldA: 1, fieldB: &quot;Hello&quot; } }
</programlisting>
    <para>
      With our simple error handling scheme, errors are fatal.
    </para>
    <programlisting language="ocaml">
$ cat test2.json
{ name: &quot;Chicago&quot;,
  zips: [12345,
}
{ name: &quot;New York&quot;,
  zips: [10004]
}
$ ./test test2.json
test2.json:3:2: syntax error
</programlisting>
  </sect1>
</chapter><chapter id="data-serialization-with-s-expressions">
  <title>Data Serialization with S-Expressions</title>
  <para>
    We've already shown you how to parse third-party data formats into
    OCaml in earlier chapters. Sometimes though, you just want to
    quickly convert an OCaml type to and from a human-readable and
    editable form in your own code, and not worry about
    interoperability. Core's solution to this problem is to use
    s-expressions.
  </para>
  <para>
    S-expressions are nested paranthetical expressions whose atomic
    values are strings. They were first popularized by the Lisp
    programming language in the 1960s, and have remained one of the
    simplest and most effective ways to encode structured data. An
    example s-expression might look like this:
  </para>
  <programlisting language="scheme">
(this (is an) (s expression))
</programlisting>
  <para>
    The OCaml type of an s-expression is quite simple:
  </para>
  <programlisting language="ocaml">
module Sexp : sig
  type t = Atom of string | List of t list
end
</programlisting>
  <para>
    An s-expression can be thought of as a tree where each node contains
    a list of its children, and where the leaves of the tree are
    strings.
  </para>
  <para>
    The <literal>Sexp</literal> module in Core comes with functionality
    for parsing and printing s-expressions.
  </para>
  <programlisting language="ocaml">
# let sexp =
    let a x = Sexp.Atom x and l x = Sexp.List x in
    l [a &quot;this&quot;;l [a &quot;is&quot;; a &quot;an&quot;]; l [a &quot;s&quot;; a &quot;expression&quot;]];;
val sexp : Sexp.t = (this (is an) (s expression))
</programlisting>
  <para>
    In addition, most of the base types in Core support conversion to
    and from s-expressions. For example, we can write:
  </para>
  <programlisting language="ocaml">
# Int.sexp_of_t 3;;
- : Sexp.t = 3
# List.sexp_of_t;;
- : ('a -&gt; Sexp.t) -&gt; 'a List.t -&gt; Sexp.t = &lt;fun&gt;
# List.sexp_of_t Int.sexp_of_t [1;2;3];;
- : Sexp.t = (1 2 3)
</programlisting>
  <para>
    Notice that <literal>List.sexp_of_t</literal> is polymorphic, and
    takes as its first argument another conversion function to handle
    the elements of the list to be converted. Core uses this scheme more
    generally for defining sexp-converters for polymorphic types.
  </para>
  <para>
    But what if you want a function to convert some brand new type to an
    s-expression? You can of course write it yourself manually:
  </para>
  <programlisting language="ocaml">
# type t = { foo: int; bar: float };;
# let sexp_of_t t =
    let a x = Sexp.Atom x and l x = Sexp.List x in
    l [ l [a &quot;foo&quot;; Int.sexp_of_t t.foo  ];
        l [a &quot;bar&quot;; Float.sexp_of_t t.bar]; ]
  ;;
val sexp_of_t : t -&gt; Core.Std.Sexp.t = &lt;fun&gt;
# sexp_of_t { foo = 3; bar = -5.5 };;
- : Core.Std.Sexp.t = ((foo 3) (bar -5.5))
</programlisting>
  <para>
    This is somewhat tiresome to write, and it gets more so when you
    consider the parser, <emphasis>i.e.</emphasis>,
    <literal>t_of_sexp</literal>, which is considerably more complex.
    Writing this kind of parsing and printing code by hand is mechanical
    and error prone, not to mention a drag.
  </para>
  <para>
    Given how mechanical the code is, you could imagine writing a
    program that inspected the type definition and auto-generated the
    conversion code for you. As it turns out, we can do just that using
    <literal>Sexplib</literal>. The <literal>Sexplib</literal> package,
    which is included with Core, provides both a library for
    manipulating s-expressions and a syntax extension for generating
    such conversion functions. With that syntax extension enabled, any
    type that has <literal>with sexp</literal> as an annotation will
    trigger the generation of the functions we want for free.
  </para>
  <programlisting language="ocaml">
# type t = { foo: int; bar: float } with sexp;;
type t = { foo : int; bar : float; }
val t_of_sexp__ : Sexplib.Sexp.t -&gt; t = &lt;fun&gt;
val t_of_sexp : Sexplib.Sexp.t -&gt; t = &lt;fun&gt;
val sexp_of_t : t -&gt; Sexplib.Sexp.t = &lt;fun&gt;
# t_of_sexp (Sexp.of_string &quot;((bar 35) (foo 3))&quot;);;
- : t = {foo = 3; bar = 35.}
</programlisting>
  <para>
    The <literal>with sexp</literal> is detected by a
    <literal>Sexplib</literal> syntax extension and replaced with the
    extra conversion functions you see above. You can ignore
    <literal>t_of_sexp__</literal>, which is a helper function that is
    needed in very rare cases.
  </para>
  <para>
    The syntax extensions in Core almost all have this same basic
    structure: they auto-generate code based on type definitions,
    implementing functionality that you could in theory have implemented
    by hand, but with far less programmer effort.
  </para>
  <note>
  <title>
  The <literal>camlp4</literal> preprocessor and
  <literal>type_conv</literal>
  </title>
  <para>
    OCaml doesn't directly support converting static type definitions to
    and from other data formats. Instead, it supplies a powerful syntax
    extension mechanism known as <literal>camlp4</literal>. This lets
    you extend the grammar of the language to mark types as requiring
    special action, and then mechanically generate boilerplate code over
    those types (such as converting to and from other data formats).
  </para>
  <para>
    Many of the examples in the subsequent chapters depend on
    <literal>camlp4</literal>, but the examples all invoke it
    automatically for you via the <literal>-pp</literal> flag to the
    OCaml compiler. If you're interested in building your own
    generators, investigate the <literal>type_conv</literal> library
    which provides the basic extension mechanism used by the rest of
    this chapter.
  </para>
  </note>
  <sect1 id="the-sexp-format">
    <title>The Sexp format</title>
    <para>
      The textual representation of s-expressions is pretty
      straightforward. An s-expression is written down as a nested
      parenthetical expression, with whitespace-separated strings as the
      atoms. Quotes are used for atoms that contain parenthesis or
      spaces themselves; backslash is the escape character; and
      semicolons are used to introduce single-line comments. Thus, the
      following file, <literal>example.scm</literal>:
    </para>
    <programlisting language="scheme">
;; example.scm

((foo 3.3) ;; This is a comment
 (bar &quot;this is () an \&quot; atom&quot;))
</programlisting>
    <para>
      can be loaded using sexplib. As you can see, the commented data is
      not part of the resulting s-expression.
    </para>
    <programlisting language="ocaml">
# Sexp.load_sexp &quot;example.scm&quot;;;
- : Core.Std.Sexp.t = ((foo 3.3) (bar &quot;this is () an \&quot; atom&quot;))
</programlisting>
    <para>
      All in, the s-expression format actually supports three comment
      syntaxes:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>;</literal>, which comments out everything to the end
          of a line
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>#|</literal> and <literal>|#</literal>, which are
          delimiters for commenting out a block
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>#;</literal>, which comments out the first complete
          s-expression that follows.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The following example shows all of these in action.
    </para>
    <programlisting language="scheme">
;; comment_heavy_example.scm
((this is included)
 ; (this is commented out
 (this stays)
 #; (all of this is commented
     out (even though it crosses lines.))
  (and #| block delimiters #| which can be nested #|
     will comment out
    an arbitrary multi-line block))) |#
   now we're done
   ))
</programlisting>
    <para>
      Again, loading the file as an s-expression drops the comments.
    </para>
    <programlisting language="ocaml">
# Sexp.load_sexp &quot;comment_heavy_example.scm&quot;;;
- : Core.Std.Sexp.t = ((this is included) (this stays) (and now we're done))
</programlisting>
    <para>
      Note that the comments were dropped from the file upon reading.
      This is expected, since there's no place in the
      <literal>Sexp.t</literal> type to store comments.
    </para>
    <para>
      If we introduce an error into our s-expression, by, say, deleting
      the open-paren in front of <literal>bar</literal>, we'll get a
      parse error:
    </para>
    <programlisting language="ocaml">
# Exn.handle_uncaught ~exit:false (fun () -&gt;
    ignore (Sexp.load_sexp &quot;example.scm&quot;));;
  Uncaught exception:

  (Sexplib.Sexp.Parse_error
   ((location parse) (err_msg &quot;unexpected character: ')'&quot;) (text_line 4)
    (text_char 29) (global_offset 94) (buf_pos 94)))
</programlisting>
    <para>
      In the above, we use <literal>Exn.handle_uncaught</literal> to
      make sure that the exception gets printed out in full detail. You
      should generally wrap every Core program in this handler to get
      good error messages for any unexpected exceptions.
    </para>
  </sect1>
  <sect1 id="sexp-converters">
    <title>Sexp converters</title>
    <para>
      The most important functionality provided by Sexplib is the
      auto-generation of converters for new types. We've seen a bit of
      how this works already, but let's walk through a complete example.
      Here's the source for the beginning of a library for representing
      integer intervals.
    </para>
    <programlisting language="ocaml">
(* file: int_interval.ml *)
(* Module for representing closed integer intervals *)

open Core.Std

(* Invariant: For any Range (x,y), y &gt;= x *)
type t = | Range of int * int
         | Empty
with sexp

let is_empty = function Empty -&gt; true | Range _ -&gt; false
let create x y = if x &gt; y then Empty else Range (x,y)
let contains i x = match i with
   | Empty -&gt; false
   | Range (low,high) -&gt; x &gt;= low &amp;&amp; x &lt;= high
</programlisting>
    <para>
      We can now use this module as follows:
    </para>
    <programlisting language="ocaml">
(* file: test_interval.ml *)

open Core.Std

let intervals =
  let module I = Int_interval in
  [ I.create 3 4;
    I.create 5 4; (* should be empty *)
    I.create 2 3;
    I.create 1 6;
  ]

let () =
  intervals
  |&gt; List.sexp_of_t Int_interval.sexp_of_t
  |&gt; Sexp.to_string_hum
  |&gt; print_endline
</programlisting>
    <para>
      But we're still missing something: we haven't created an
      <literal>mli</literal> signature for
      <literal>Int_interval</literal> yet. Note that we need to
      explicitly export the s-expression converters that were created
      within the ml. If we don't:
    </para>
    <programlisting language="ocaml">
(* file: int_interval.mli *)
(* Module for representing closed integer intervals *)

type t

val is_empty : t -&gt; bool
val create : int -&gt; int -&gt; t
val contains : t -&gt; int -&gt; bool
</programlisting>
    <para>
      then we'll get the following error:
    </para>
    <programlisting>
File &quot;test_interval.ml&quot;, line 15, characters 20-42:
Error: Unbound value Int_interval.sexp_of_t
Command exited with code 2.
</programlisting>
    <para>
      We could export the types by hand in the signature:
    </para>
    <programlisting language="ocaml">
type t
val sexp_of_t : Sexp.t -&gt; t
val t_of_sexp : t -&gt; Sexp.t
</programlisting>
    <para>
      But Sexplib has a shorthand for this as well, so that we can just
      use the same <literal>with</literal> shorthand in the
      <literal>mli</literal>.
    </para>
    <programlisting language="ocaml">
type t with sexp
</programlisting>
    <para>
      at which point <literal>test_interval.ml</literal> will compile
      again, and if we run it, we'll get the following output:
    </para>
    <programlisting>
$ ./test_interval.native
((Range 3 4) Empty (Range 2 3) (Range 1 6))
</programlisting>
    <sect2 id="preserving-invariants">
      <title>Preserving invariants</title>
      <para>
        One easy mistake to make when dealing with sexp converters is to
        ignore the fact that those converters can violate the invariants
        of your code. For example, the <literal>Int_interval</literal>
        module depends for the correctness of the
        <literal>is_empty</literal> check on the fact that for any value
        <literal>Range (x,y)</literal>, <literal>y</literal> is greater
        than or equal to <literal>x</literal>. The
        <literal>create</literal> function preserves this invariant, but
        the <literal>t_of_sexp</literal> function does not.
      </para>
      <para>
        We can fix this problem by overriding the autogenerated function
        and writing a custom sexp-converter that is based on the
        auto-generated converter.
      </para>
      <programlisting language="ocaml">
type t = | Range of int * int
         | Empty
with sexp

let create x y = if x &gt; y then Empty else Range (x,y)

let t_of_sexp sexp =
  let t = t_of_sexp sexp in
  begin match t with
  | Empty -&gt; ()
  | Range (x,y) -&gt;
    if y &lt; x then of_sexp_error &quot;Upper and lower bound of Range swapped&quot; sexp
  end;
  t
</programlisting>
      <para>
        This trick of overriding an existing function definition with a
        new one is perfectly acceptable in OCaml. Function definitions
        are only recursive if the <literal>rec</literal> keyword is
        specified, and so in this case the inner
        <literal>t_of_sexp</literal> call will go to the earlier
        auto-generated definition that resulted from the
        <literal>type t with sexp</literal> definition.
      </para>
      <para>
        We call the function <literal>of_sexp_error</literal> to raise
        an exception because that improves the error reporting that
        Sexplib can provide when a conversion fails.
      </para>
    </sect2>
    <sect2 id="getting-good-error-messages">
      <title>Getting good error messages</title>
      <para>
        There are two steps to deserializing a type from an
        s-expression: first, converting the bytes in a file to an
        s-expression, and the second, converting that s-expression into
        the type in question. One problem with this is that it can be
        hard to localize errors to the right place using this scheme.
        Consider the following example:
      </para>
      <programlisting language="ocaml">
(* file: read_foo.ml *)

open Core.Std

type t = { a: string; b: int; c: float option } with sexp

let run () =
  let t =
    Sexp.load_sexp &quot;example.scm&quot;
    |&gt; t_of_sexp
  in
  printf &quot;b is: %d\n%!&quot; t.b

let () =
  Exn.handle_uncaught ~exit:true run
</programlisting>
      <para>
        If you were to run this on a malformatted file, say, this one:
      </para>
      <programlisting>
;; example.scm
((a not-an-integer)
 (b not-an-integer)
 (c ()))
</programlisting>
      <para>
        you'll get the following error:
      </para>
      <programlisting>
read_foo $ ./read_foo.native
Uncaught exception:

  (Sexplib.Conv.Of_sexp_error
   (Failure &quot;int_of_sexp: (Failure int_of_string)&quot;) not-an-integer)
</programlisting>
      <para>
        If all you have is the error message and the string, it's not
        terribly informative. In particular, you know that the parsing
        error-ed out on the atom &quot;not-an-integer&quot;, but you
        don't know which one! In a large file, this kind of bad error
        message can be pure misery.
      </para>
      <para>
        But there's hope! If we make small change to the
        <literal>run</literal> function as follows:
      </para>
      <programlisting language="ocaml">
let run () =
  let t = Sexp.load_sexp_conv_exn &quot;example.scm&quot; t_of_sexp in
  printf &quot;b is: %d\n%!&quot; t.b
</programlisting>
      <para>
        and run it again, we'll get the following much more helpful
        error message:
      </para>
      <programlisting language="ocaml">
read_foo $ ./read_foo.native
Uncaught exception:

  (Sexplib.Conv.Of_sexp_error
   (Sexplib.Sexp.Annotated.Conv_exn example.scm:3:4
    (Failure &quot;int_of_sexp: (Failure int_of_string)&quot;))
   not-an-integer)
</programlisting>
      <para>
        In the above error, &quot;example.scm:3:4&quot; tells us that
        the error occurred on &quot;example.scm&quot;, line 3, character
        4, which is a much better start for figuring out what has gone
        wrong.
      </para>
    </sect2>
  </sect1>
  <sect1 id="sexp-conversion-directives">
    <title>Sexp-conversion directives</title>
    <para>
      Sexplib supports a collection of directives for modifying the
      default behavior of the auto-generated sexp-converters. These
      directives allow you to customize the way in which types are
      represented as s-expressions without having to write a custom
      parser.
    </para>
    <sect2 id="sexp_opaque">
      <title><literal>sexp_opaque</literal></title>
      <para>
        The most commonly used directive is
        <literal>sexp_opaque</literal>, whose purpose is to mark a given
        component of a type as being unconvertible. Anything marked with
        <literal>sexp_opaque</literal> will be presented as the atom
        <literal>&lt;opaque&gt;</literal> by the to-sexp converter, and
        will trigger an exception from the from-sexp converter. Note
        that the type of a component marked as opaque doesn't need to
        have a sexp-converter defined. Here, if we define a type without
        a sexp-converter, and then try to use it another type with a
        sexp-converter, we'll error out:
      </para>
      <programlisting language="ocaml">
# type no_converter = int * int;;
type no_converter = int * int
# type t = { a: no_converter; b: string } with sexp;;
Characters 14-26:
  type t = { a: no_converter; b: string } with sexp;;
                ^^^^^^^^^^^^
Error: Unbound value no_converter_of_sexp
</programlisting>
      <para>
        But with <literal>sexp_opaque</literal>, we won't:
      </para>
      <programlisting language="ocaml">
# type t = { a: no_converter sexp_opaque; b: string } with sexp;;
type t = { a : no_converter Core.Std.sexp_opaque; b : string; }
val t_of_sexp__ : Sexplib.Sexp.t -&gt; t = &lt;fun&gt;
val t_of_sexp : Sexplib.Sexp.t -&gt; t = &lt;fun&gt;
val sexp_of_t : t -&gt; Sexplib.Sexp.t = &lt;fun&gt;
</programlisting>
      <para>
        And if we now convert a value of this type to an s-expression,
        we'll see the contents of field <literal>a</literal> marked as
        opaque:
      </para>
      <programlisting language="ocaml">
# sexp_of_t { a = (3,4); b = &quot;foo&quot; };;
- : Sexp.t = ((a &lt;opaque&gt;) (b foo))
</programlisting>
    </sect2>
    <sect2 id="sexp_list">
      <title><literal>sexp_list</literal></title>
      <para>
        Sometimes, sexp-converters have more parentheses than one would
        ideally like. Consider, for example, the following variant type:
      </para>
      <programlisting language="ocaml">
# type compatible_versions = | Specific of string list
                             | All
  with sexp;;
# sexp_of_compatible_versions (Specific [&quot;3.12.0&quot;; &quot;3.12.1&quot;; &quot;3.13.0&quot;]);;
- : Sexp.t = (Specific (3.12.0 3.12.1 3.13.0))
</programlisting>
      <para>
        You might prefer to make the syntax a bit less parenthesis-laden
        by dropping the parentheses around the list.
        <literal>sexp_list</literal> gives us this alternate syntax:
      </para>
      <programlisting language="ocaml">
# type compatible_versions = | Specific of string sexp_list
                             | All
  with sexp;;
# sexp_of_compatible_versions (Specific [&quot;3.12.0&quot;; &quot;3.12.1&quot;; &quot;3.13.0&quot;]);;
- : Sexp.t = (Specific 3.12.0 3.12.1 3.13.0)
</programlisting>
    </sect2>
    <sect2 id="sexp_option">
      <title><literal>sexp_option</literal></title>
      <para>
        Another common directive is <literal>sexp_option</literal>,
        which is used to to make a record field optional in the
        s-expressoin. Normally, optional values are represented either
        as <literal>()</literal> for <literal>None</literal>, or as
        <literal>(x)</literal> for <literal>Some x</literal>, and a
        record field containing an option would be rendered accordingly.
        For example:
      </para>
      <programlisting language="ocaml">
# type t = { a: int option; b: string } with sexp;;
# sexp_of_t { a = None; b = &quot;hello&quot; };;
- : Sexp.t = ((a ()) (b hello))
# sexp_of_t { a = Some 3; b = &quot;hello&quot; };;
- : Sexp.t = ((a (3)) (b hello))
</programlisting>
      <para>
        But what if we want a field to be optional,
        <emphasis>i.e.</emphasis>, we want to allow it to be omitted
        from the record entirely? In that case, we can mark it with
        <literal>sexp_option</literal>:
      </para>
      <programlisting language="ocaml">
# type t = { a: int sexp_option; b: string } with sexp;;
# sexp_of_t { a = Some 3; b = &quot;hello&quot; };;
- : Sexp.t = ((a 3) (b hello))
# sexp_of_t { a = None; b = &quot;hello&quot; };;
- : Sexp.t = ((b hello))
</programlisting>
    </sect2>
    <sect2 id="specifying-defaults">
      <title>Specifying defaults</title>
      <para>
        The <literal>sexp_option</literal> declaration is really just an
        example of how one might want to deal with default values. With
        <literal>sexp_option</literal>, your type on the OCaml side is
        an option, with <literal>None</literal> representing the case
        where no value is provided. But you might want to allow other
        ways of filling in default values.
      </para>
      <para>
        Consider the following type which represents the configuration
        of a very simple web-server.
      </para>
      <programlisting language="ocaml">
# type http_server_config = {
     web_root: string;
     port: int;
     addr: string;
  } with sexp;;
</programlisting>
      <para>
        One could imagine making some of these paramters optional; in
        particular, by default, we might want the web server to bind to
        port 80, and to listen as localhost. The sexp-syntax allows this
        to do this, as follows.
      </para>
      <programlisting language="ocaml">
# type http_server_config = {
     web_root: string;
     port: int with default(80);
     addr: string with default(&quot;localhost&quot;);
  } with sexp;;
type http_server_config = { web_root : string; port : int; addr : string; }
val http_server_config_of_sexp__ : Sexplib.Sexp.t -&gt; http_server_config =
  &lt;fun&gt;
val http_server_config_of_sexp : Sexplib.Sexp.t -&gt; http_server_config = &lt;fun&gt;
val sexp_of_http_server_config : http_server_config -&gt; Sexplib.Sexp.t = &lt;fun&gt;
# http_server_config_of_sexp (Sexp.of_string &quot;((web_root /var/www/html))&quot;;;
# let cfg = http_server_config_of_sexp (Sexp.of_string &quot;((web_root /var/www/html))&quot;);;
val cfg : http_server_config =
  {web_root = &quot;/var/www/html&quot;; port = 80; addr = &quot;localhost&quot;}
</programlisting>
      <para>
        When we convert that back out to an s-expression, you'll notice
        that no data is dropped.
      </para>
      <programlisting language="ocaml">
# sexp_of_http_server_config cfg;;
- : Sexplib.Sexp.t = ((web_root /var/www/html) (port 80) (addr localhost))
</programlisting>
      <para>
        We could make the generated s-expression also drop exported
        values, by using the <literal>sexp_drop_default</literal>
        directive.
      </para>
      <programlisting language="ocaml">
# type http_server_config = {
     web_root: string;
     port: int with default(80), sexp_drop_default;
     addr: string with default(&quot;localhost&quot;), sexp_drop_default;
  } with sexp;;
type http_server_config = { web_root : string; port : int; addr : string; }
val http_server_config_of_sexp__ : Sexplib.Sexp.t -&gt; http_server_config =
  &lt;fun&gt;
val http_server_config_of_sexp : Sexplib.Sexp.t -&gt; http_server_config = &lt;fun&gt;
val sexp_of_http_server_config : http_server_config -&gt; Sexplib.Sexp.t = &lt;fun&gt;
# let cfg = http_server_config_of_sexp (Sexp.of_string &quot;((web_root /var/www/html))&quot;);;
val cfg : http_server_config =
  {web_root = &quot;/var/www/html&quot;; port = 80; addr = &quot;localhost&quot;}
# sexp_of_http_server_config cfg;;
- : Sexplib.Sexp.t = ((web_root /var/www/html))
</programlisting>
      <para>
        As you can see, the fields that are at their default values are
        simply omitted from the s-expression. On the other hand, if we
        convert a config with other values, then those values will be
        included in the s-expression.
      </para>
      <programlisting language="ocaml">
# sexp_of_http_server_config { cfg with port = 8080 };;
- : Sexplib.Sexp.t = ((web_root /var/www/html) (port 8080))
# sexp_of_http_server_config { cfg with port = 8080; addr = &quot;192.168.0.1&quot; };;
- : Sexplib.Sexp.t =
((web_root /var/www/html) (port 8080) (addr 192.168.0.1))
</programlisting>
      <para>
        This can be very useful in designing config file formats that
        are both reasonably terse and easy to generate and maintain. It
        can also be useful for backwards compatibility: if you add a new
        field to your config record, but you make that field optiona,
        then you should still be able to parse older version of your
        config.
      </para>
    </sect2>
  </sect1>
</chapter><chapter id="concurrent-programming-with-async">
  <title>Concurrent Programming with Async</title>
  <para>
    The logic of building programs that interact with the outside world
    is often dominated by waiting: waiting for the click of a mouse, or
    for data to be fetched from disk, or for space to be available on an
    outgoing network buffer. Even mildly sophisticated interactive
    applications are typically <emphasis>concurrent</emphasis>, needing
    to wait for multiple different events at the same time, responding
    immediately to whatever event happens first.
  </para>
  <para>
    A common approach to concurrency is to use preemptive system
    threads, which is the most common solution in languages like Java or
    C#. In this model, each task that may require simultaneous waiting
    is given an operating system thread of its own, so it can block
    without stopping the entire program. Other language runtimes such as
    Javascript are single-threaded, and applications register function
    callbacks to be triggered upon external events such as a timeout or
    browser click.
  </para>
  <para>
    Each of these mechanisms has its own trade-offs. Preemptive threads
    require significant memory and other resources per thread. Also, the
    operating system can arbitrarily interleave the execution of
    preemptive threads, requiring the programmer to carefully protect
    shared resources with locks and condition variables, which can be
    exceedingly error-prone.
  </para>
  <para>
    Single-threaded event-driven systems, on the other hand, execute a
    single task at a time and do not require the same kind of complex
    synchronization that preemptive threads do. However, the inverted
    control structure of an event-driven program often means that your
    own control flow has to be threaded awkwardly through the system's
    event loop, leading to a maze of event callbacks.
  </para>
  <para>
    This chapter covers the Async library, which offers a hybrid model
    that aims to provide the best of both worlds, avoiding the
    performance compromises and synchronization woes of preemptive
    threads without the confusing inversion of control that usually
    comes with event-driven systems.
  </para>
  <sect1 id="async-basics">
    <title>Async basics</title>
    <para>
      Consider a typical function for doing I/O in Core.
    </para>
    <programlisting language="ocaml">
# In_channel.read_all;;
- : string -&gt; string = &lt;fun&gt;
</programlisting>
    <para>
      Since the function returns a concrete string, it has to block
      until the read completes. The blocking nature of the call means
      that no progress can be made on anything else until the read is
      completed, as you can see below.
    </para>
    <programlisting language="ocaml">
# Out_channel.write_all &quot;test.txt&quot; ~data:&quot;This is only a test.&quot;;;
- : unit = ()
# In_channel.read_all &quot;test.txt&quot;;;
- : string = &quot;This is only a test.&quot;
</programlisting>
    <para>
      In Async, well-behaved functions never block. Instead, they return
      a value of type <literal>Deferred.t</literal> that acts as a
      placeholder that will eventually be filled in with the result. As
      an example, consider the signature of the Async equivalent of
      <literal>In_channel.read_all</literal>.
    </para>
    <programlisting language="ocaml">
# open Async.Std;;
# Reader.file_contents;;
- : string -&gt; string Deferred.t = &lt;fun&gt;
</programlisting>
    <para>
      Note that we opened <literal>Async.Std</literal>, which adds a
      number of new identifiers and modules into our environment that
      make using Async more convenient. Opening
      <literal>Async.Std</literal> is standard practice for writing
      programs using Async, much like opening
      <literal>Core.Std</literal> is for using Core.
    </para>
    <para>
      A deferred is essentially a handle to a value that may be computed
      in the future. As such, if we call
      <literal>Reader.file_contents</literal>, the resulting deferred
      will initially be empty, as you can see by calling
      <literal>Deferred.peek</literal> on the resulting deferred.
    </para>
    <programlisting language="ocaml">
# let contents = Reader.file_contents &quot;test.txt&quot;;;
val contents : string Deferred.t = &lt;abstr&gt;
# Deferred.peek contents;;
- : string option = None
</programlisting>
    <para>
      The value in <literal>contents</literal> isn't yet determined in
      part because there's nothing running that could do the necessary
      I/O. When using Async, processing of I/O and other events is
      handled by the Async scheduler. When writing a stand-along
      program, you need to start the scheduler explicitly, but utop
      knows about Async, and can start the scheduler automatically. More
      than that, utop knows about deferred values, and when you type in
      an expression of type <literal>Deferred.t</literal>, it will make
      sure the scheduler is running and block until the deferred is
      determined. Thus, we can write:
    </para>
    <programlisting language="ocaml">
# contents;;
- : string = &quot;This is only a test.\n&quot;
# Deferred.peek contents;;
- : string option = Some &quot;This is only a test.\n&quot;
</programlisting>
    <para>
      In order to do real work with deferreds, we need a way of
      sequencing deferred computations, which we do using
      <literal>Deferred.bind</literal>. First, let's consider the
      type-signature of bind.
    </para>
    <programlisting language="ocaml">
# Deferred.bind ;;
- : 'a Deferred.t -&gt; ('a -&gt; 'b Deferred.t) -&gt; 'b Deferred.t = &lt;fun&gt;
</programlisting>
    <para>
      Thus, <literal>Deferred.bind d f</literal> takes a deferred value
      <literal>d</literal> and a function f that is to be run with value
      of <literal>d</literal> once it's determined. The call to
      <literal>Deferred.bind</literal> returns a new deferred that
      becomes determined when the deferred returned by
      <literal>f</literal> is determined. It also implicitly registers
      with the scheduler an <emphasis>Async job</emphasis> that is
      responsible for running <literal>f</literal> once
      <literal>d</literal> is determined.
    </para>
    <para>
      Here's a simple use of bind for a function that replaces a file
      with an uppercase version of its contents.
    </para>
    <programlisting language="ocaml">
# let uppercase_file filename =
    let text = Reader.file_contents filename in
    Deferred.bind text (fun text -&gt;
      Writer.save filename ~contents:(String.uppercase text))
  ;;
val uppercase_file : string -&gt; unit Deferred.t = &lt;fun&gt;
# uppercase_file &quot;test.txt&quot;;;
- : unit = ()
# Reader.file_contents &quot;test.txt&quot;;;
- : string = &quot;THIS IS ONLY A TEST.&quot;
</programlisting>
    <para>
      Writing out <literal>Deferred.bind</literal> explicitly can be
      rather verbose, and so <literal>Async.Std</literal> includes an
      infix operator for it: <literal>&gt;&gt;=</literal>. Using this
      operator, we can rewrite <literal>uppercase_file</literal> as
      follows.
    </para>
    <programlisting language="ocaml">
# let uppercase_file filename =
    Reader.file_contents filename &gt;&gt;= fun text -&gt;
    Writer.save filename ~contents:(String.uppercase text)
  ;;
val uppercase_file : string -&gt; unit Deferred.t = &lt;fun&gt;
</programlisting>
    <para>
      In the above we've dropped the parenthesis around the function on
      the right-hand side of the bind, and we've didn't add a level of
      indentation for the contents of that function. This is standard
      practice for using the bind operator.
    </para>
    <para>
      Now let's look at another potential use of bind. In this case,
      we'll write a function that counts the number of lines in a file.
    </para>
    <programlisting language="ocaml">
# let count_lines filename =
    Reader.file_contents filename &gt;&gt;= fun text -&gt;
    List.length (String.split text ~on:'\n');;
  ;;
</programlisting>
    <para>
      This looks reasonable enough, but when we try to compile it, we
      get the following error.
    </para>
    <programlisting>
Error: This expression has type int but an expression was expected of type
         'a Deferred.t
</programlisting>
    <para>
      The issue here is that bind expects a function that returns a
      deferred, but we've provided it a function that simply returns the
      result. To make these signatures match, we need a function for
      taking an ordinary value and wrapping it in a deferred. This
      function is a standard part of Async, and is called
      <literal>return</literal>:
    </para>
    <programlisting>
# return;;
- : 'a -&gt; 'a Deferred.t = &lt;fun&gt;
# let three = return 3;;
val three : int Deferred.t = &lt;abstr&gt;
# three;;
- : int = 3
</programlisting>
    <para>
      Using <literal>return</literal>, we can make
      <literal>count_lines</literal> compile.
    </para>
    <programlisting language="ocaml">
# let count_lines filename =
    Reader.file_contents filename &gt;&gt;= fun text -&gt;
    return (List.length (String.split text ~on:'\n'));;
  ;;
val count_lines : string -&gt; int Deferred.t = &lt;fun&gt;
</programlisting>
    <para>
      Together, <literal>bind</literal> and <literal>return</literal>
      form a design pattern in functional programming known as a
      <emphasis>monad</emphasis>. You'll run across this signature in
      many applications beyond just threads. Indeed, we already ran
      across monads in
      <xref linkend="bind-and-other-error-handling-idioms"/>.
    </para>
    <para>
      Calling <literal>bind</literal> and <literal>return</literal>
      together is a fairly common pattern, and as such there is a
      standard shortcut for it called <literal>Deferred.map</literal>,
      which has the following signature:
    </para>
    <programlisting language="ocaml">
# Deferred.map;;
- : 'a Deferred.t -&gt; f:('a -&gt; 'b) -&gt; 'b Deferred.t = &lt;fun&gt;
</programlisting>
    <para>
      and comes with its own infix equivalent,
      <literal>&gt;&gt;|</literal>. Using it, we can rewrite
      <literal>count_lines</literal> again a bit more succinctly:
    </para>
    <programlisting language="ocaml">
# let count_lines filename =
    Reader.file_contents filename &gt;&gt;| fun text -&gt;
    List.length (String.split text ~on:'\n');;
  ;;
val count_lines : string -&gt; int Deferred.t = &lt;fun&gt;
</programlisting>
    <sect2 id="ivars-and-upon">
      <title>Ivars and upon</title>
      <para>
        Deferreds are usually built using combinations of
        <literal>bind</literal>, <literal>map</literal> and
        <literal>return</literal>, but sometimes you want to construct a
        deferred that you can determine explicitly with user-code. This
        is done using an <emphasis>ivar</emphasis>, which is a handle
        that lets you control precisely when a deferred becomes
        determined.
      </para>
      <para>
        There are three fundamental operations for working with an ivar;
        you can create one, using <literal>Ivar.create</literal>, you
        can read off the deferred that corresponds to the ivar in
        question, using <literal>Ivar.read</literal>, and you can fill
        an ivar, thus causing that deferred to become determined, using
        <literal>Ivar.fill</literal>. These operations are illustrated
        below.
      </para>
      <programlisting language="ocaml">
# let ivar = Ivar.create ();;
val ivar : '_a Ivar.t = &lt;abstr&gt;
# let def = Ivar.read ivar;;
val def : '_a Ivar.Deferred.t = &lt;abstr&gt;
# Deferred.peek def;;
- : '_a option = None
# Ivar.fill ivar &quot;Hello&quot;;;
- : unit = ()
# Deferred.peek def;;
- : string option = Some &quot;Hello&quot;
</programlisting>
      <para>
        Ivars are something of a low-level feature; operators like map,
        bind and return are typically easier to use and think about. But
        ivars can be useful when you want to build complicated
        synchronization patterns that can't be constructed naturally
        otherwise.
      </para>
      <para>
        As an example, imagine we wanted a way of scheduling a sequence
        of actions that would run after a fixed delay. In addition, we'd
        like to guarantee that these delayed actions are executed in the
        same order they were scheduled in. One could imagine building a
        module for handling this with the following interface.
      </para>
      <programlisting language="ocaml">
# module type Delayer_intf = sig
    type t
    val create : Time.Span.t -&gt; t
    val schedule : t -&gt; (unit -&gt; 'a Deferred.t) -&gt; 'a Deferred.t
  end;;
</programlisting>
      <para>
        An action is handed to <literal>schedule</literal> in the form
        of a deferred-returning thunk (a thunk is a function whose
        argument is of type <literal>unit</literal>). A deferred is
        handed back to the caller of <literal>schedule</literal> that
        will eventually be filled with the contents of the deferred
        value returned by the thunk to be scheduled. We can implement
        this using an <literal>ivar</literal> which we fill after the
        thunk is called and the deferred it returns becomes determined.
        Instead of using <literal>bind</literal> or
        <literal>map</literal> for scheduling these events, we'll use a
        different operator called <literal>upon</literal>. Here's the
        signature of <literal>upon</literal>:
      </para>
      <programlisting language="ocaml">
# upon;;
- : 'a Deferred.t -&gt; ('a -&gt; unit) -&gt; unit = &lt;fun&gt;
</programlisting>
      <para>
        Like <literal>bind</literal> and <literal>return</literal>,
        <literal>upon</literal> schedules a callback to be executed when
        the deferred it is passed is determined; but unlike those calls,
        it doesn't create a new deferred for this callback to fill.
      </para>
      <para>
        Our delayer implementation is organized around a queue of
        thunks, where every call to <literal>schedule</literal> adds a
        thunk to the queue, and also schedules a job in the future to
        grab a thunk off the queue and run it. The waiting will be done
        using the function <literal>after</literal> which takes a time
        span and returns a deferred which becomes determined after that
        time span elapses. The role of the <literal>ivar</literal> here
        is to take the value returned by the thunk and use it to fill
        the deferred returned by the provided thunk.
      </para>
      <programlisting language="ocaml">
# module Delayer : Delayer_intf = struct
    type t = { delay: Time.Span.t;
               jobs: (unit -&gt; unit) Queue.t;
             }

    let create delay =
      { delay; jobs = Queue.create () }

    let schedule t thunk =
      let ivar = Ivar.create () in
      Queue.enqueue t.jobs (fun () -&gt;
        upon (thunk ()) (fun x -&gt; Ivar.fill ivar x));
      upon (after t.delay) (fun () -&gt;
        let job = Queue.dequeue_exn t.jobs in
        job ());
      Ivar.read ivar
  end;;
module Delayer : Delayer_intf
</programlisting>
      <para>
        This code isn't particularly long, but it is a bit subtle. This
        is typical of code that involves ivars and
        <literal>upon</literal>, and because of this, you should stick
        to the simpler map/bind/return style of working with deferreds
        when you can.
      </para>
    </sect2>
  </sect1>
  <sect1 id="examples-an-echo-server">
    <title>Examples: an echo server</title>
    <para>
      Now that we have the basics of Async under our belt, let's look at
      a small complete stand-alone Async program. In particular, we'll
      write an echo server, <emphasis>i.e.</emphasis>, a program that
      accepts connections from clients and spits back every line of text
      sent to it.
    </para>
    <para>
      The first step is to create a function that can copy data from an
      input to an output. Here, we'll use Async's
      <literal>Reader</literal> and <literal>Writer</literal> modules
      which provide a convenient abstraction for working with input and
      output channels.
    </para>
    <programlisting language="ocaml">
(* filename: echo.ml *)
open Core.Std
open Async.Std

(* Copy data from the reader to the writer, using the provided buffer
   as scratch space *)
let rec copy_blocks buffer r w =
  Reader.read r buffer
  &gt;&gt;= function
  | `Eof -&gt; return ()
  | `Ok bytes_read -&gt;
    Writer.write w buffer ~len:bytes_read;
    Writer.flushed w
    &gt;&gt;= fun () -&gt;
    copy_blocks buffer r w
</programlisting>
    <para>
      Bind is used in the above code to sequence the operations: first,
      we call <literal>Reader.read</literal> to get a block of input,
      then, when that's complete and if a new block was returned, we
      write that block to the writer. Finally, we wait until the
      writer's buffers are flushed, waiting on the deferred returned by
      <literal>Writer.flushed</literal>, at which point we recur. If we
      hit an end-of-file condition, the loop is ended. The deferred
      returned by a call to <literal>copy_blocks</literal> becomes
      determined only once the end-of-file condition is hit.
    </para>
    <para>
      One important aspect of how this is written is that it uses
      <emphasis>pushback</emphasis>, which is to say that if the writer
      can't make progress writing, the reader will stop reading. If you
      don't implement pushback in your servers, then a stopped client
      can cause your program to leak memory, since you'll need to
      allocate space for the data that's been read in but not yet
      written out.
    </para>
    <para>
      <literal>copy_blocks</literal> provides the logic for handling a
      client connection, but we still need to set up a server to receive
      such connections and dispatch to <literal>copy_blocks</literal>.
      For this, we'll use Async's <literal>Tcp</literal> module, which
      has a collection of utilities for creating simple TCP clients and
      servers.
    </para>
    <programlisting language="ocaml">
(** Starts a TCP server, which listens on the specified port, invoking
    copy_lines every time a client connects. *)
let run () =
  let buffer = String.create (16 * 1024) in
  let host_and_port =
    Tcp.Server.create
      ~on_handler_error:`Raise
      (Tcp.on_port 8765)
      (fun _addr r w -&gt; copy_blocks buffer r w)
  in
  ignore (host_and_port : (Socket.Address.Inet.t, int) Tcp.Server.t Deferred.t)
</programlisting>
    <para>
      The result of calling <literal>Tcp.Server.create</literal> is a
      <literal>Tcp.Server.t</literal>, which is a handle to the server
      that lets you shut the server down. We don't use that
      functionality here, so we explicitly ignore [server] to suppress
      the unused-variables error. We put in a type annotation around the
      ignored value to make the nature of the value we're ignoring
      explicit.
    </para>
    <para>
      The most important argument to
      <literal>Tcp.Server.create</literal> is the final one, which is
      the client connection handler. Notably, the above code does
      nothing explicit to close down the client connections when the
      communication is done. That's because the server will
      automatically shut down the connection once the deferred returned
      by the handler becomes determined.
    </para>
    <para>
      Finally, we need to initiate the server and start the Async
      scheduler.
    </para>
    <programlisting language="ocaml">
(* Call [run], and then start the scheduler *)
let () =
  run ();
  never_returns (Scheduler.go ())
</programlisting>
    <para>
      One of the most common newbie errors with Async is to forget to
      run the scheduler. It can be a bewildering mistake, because
      without the scheduler, your program won't do anything at all; even
      calls to <literal>printf</literal> won't actually reach the
      terminal.
    </para>
    <para>
      It's worth noting that even though we didn't spend much explicit
      effort on thinking about multiple clients, this server is able to
      handle many concurrent clients without further modification.
    </para>
    <para>
      Now that we have the echo server, we can try it out using
      <literal>netcat</literal>.
    </para>
    <programlisting>
echo_server $ ./echo.native &amp;
[1] 25030
echo_server $ nc 127.0.0.1 8765
This is an echo server
This is an echo server
It repeats whatever I write.
It repeats whatever I write.
</programlisting>
    <note>
    <title>
    Functions that never return
    </title>
    <para>
      You might wonder what's going on with the call to
      <literal>never_returns</literal> above.
      <literal>never_returns</literal> is an idiom that comes from
      <literal>Core</literal> that is used to mark functions that don't
      return. Typically, a function that doesn't return is inferred as
      having return type <literal>'a</literal>.
    </para>
    <programlisting language="ocaml">
# let rec loop_forever () = loop_forever ();;
val loop_forever : unit -&gt; 'a = &lt;fun&gt;
# let always_fail () = assert false;;
val always_fail : unit -&gt; 'a = &lt;fun&gt;
</programlisting>
    <para>
      This can be surprising when you call a function like this
      expecting it to return unit, and really it never returns. The
      type-checker won't necessarily complain in such a case.
    </para>
    <programlisting language="ocaml">
# let do_stuff n =
    let x = 3 in
    if n &gt; 0 then loop_forever ();
    x + n
  ;;
val do_stuff : int -&gt; unit = &lt;fun&gt;
</programlisting>
    <para>
      With a name like <literal>loop_forever</literal>, the meaning is
      clear enough in this case. But with something like
      <literal>Scheduler.go</literal>, the fact that it never returns is
      less clear, and so we use the type-system to make it more explicit
      by giving it a return type of <literal>never_returns</literal>. To
      make it clearer how this works, let's do the same trick with
      <literal>loop_forever</literal>.
    </para>
    <programlisting language="ocaml">
# let rec loop_forever () : never_returns = loop_forever ();;
val loop_forever : unit -&gt; never_returns = &lt;fun&gt;
</programlisting>
    <para>
      The type <literal>never_returns</literal> is uninhabited, so a
      function can't return a value of type
      <literal>never_returns</literal>, which means only functions that
      never return can have it as their return type! Now, if we rewrite
      our <literal>do_stuff</literal> function, we'll get a helpful type
      error.
    </para>
    <programlisting language="ocaml">
# let do_stuff n =
    let x = 3 in
    if n &gt; 0 then loop_forever ();
    x + n
  ;;
Error: This expression has type unit but an expression was expected of type
         never_returns
</programlisting>
    <para>
      We can resolve the error by calling the function
      <literal>never_returns</literal>.
    </para>
    <programlisting language="ocaml">
# never_returns;;
- : never_returns -&gt; 'a = &lt;fun&gt;
# let do_stuff n =
    let x = 3 in
    if n &gt; 0 then never_returns (loop_forever ());
    x + n
  ;;
val do_stuff : int -&gt; int = &lt;fun&gt;
</programlisting>
    <para>
      Thus, we got the compilation to go through by explicitly marking
      in the source that the call to <literal>loop_forever</literal>
      never returns.
    </para>
    </note>
    <sect2 id="improving-the-echo-server">
      <title>Improving the echo server</title>
      <para>
        Let's try to go a little bit farther with our echo server. Let's
        walk through a few small improvements:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Add a proper command-line interface with
            <literal>Command</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            Add a flag to specify the port to listen on, and a flag to
            make the server echo back the capitalized version of
            whatever was sent to it.
          </para>
        </listitem>
        <listitem>
          <para>
            Simplify the code using Async's <literal>Pipe</literal>
            interface.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Here's the improved code below.
      </para>
      <programlisting language="ocaml">
let run ~uppercase ~port =
  let host_and_port =
    Tcp.Server.create
      ~on_handler_error:`Raise
      (Tcp.on_port port)
      (fun _addr r w -&gt;
        Pipe.transfer (Reader.pipe r) (Writer.pipe w)
           ~f:(if uppercase then String.uppercase else Fn.id))
  in
  ignore (host_and_port : (Socket.Address.Inet.t, int) Tcp.Server.t Deferred.t);
  Deferred.never ()

let () =
  Command.async_basic
    ~summary:&quot;Start an echo server&quot;
    Command.Spec.(
      empty
      +&gt; flag &quot;-uppercase&quot; no_arg
        ~doc:&quot; Convert to uppercase before echoing back&quot;
      +&gt; flag &quot;-port&quot; (optional_with_default 8765 int)
        ~doc:&quot; Port to listen on (default 8765)&quot;
    )
    (fun uppercase port () -&gt; run ~uppercase ~port)
  |&gt; Command.run
</programlisting>
      <para>
        The most notable change in this function is the use of Async's
        <literal>Pipe</literal>. A <literal>Pipe</literal> is a
        communication channel that's used for connecting different parts
        of your program. You can think of it as a consumer/producer
        queue that uses deferreds for communicating when the pipe is
        ready to be read from or written to. Our use of pipes is fairly
        minimal here, but they are an important part of Async, so it's
        worth discussing them in some detail.
      </para>
      <para>
        Pipes are created in connected read/write pairs, as you can see
        below.
      </para>
      <programlisting language="ocaml">
# let (r,w) = Pipe.create ();;
val r : '_a Pipe.Reader.t = &lt;abstr&gt;
val w : '_a Pipe.Writer.t = &lt;abstr&gt;
</programlisting>
      <para>
        <literal>r</literal> and <literal>w</literal> are really just
        read and write handles to the same underlying object. Note that
        <literal>r</literal> and <literal>w</literal> have weakly
        polymorphic types. That's because a pipe is mutable and so can
        contain elements of only one type, which will be settled by the
        compiler once we try to use the pipe for anything.
      </para>
      <para>
        If we just try and write to the writer, we'll see that we block
        indefinitely in utop. You can break out of the wait by hitting
        <literal>Control-C</literal>.
      </para>
      <programlisting language="ocaml">
# Pipe.write w &quot;Hello World!&quot;;;
Interrupted.
</programlisting>
      <para>
        The deferred returned by write completes on its own once the
        value written into the pipe has been read out:
      </para>
      <programlisting language="ocaml">
# let (r,w) = Pipe.create ();;
val r : '_a Pipe.Reader.t = &lt;abstr&gt;
val w : '_a Pipe.Writer.t = &lt;abstr&gt;
# let write_complete = Pipe.write w &quot;Hello World!&quot;;;
val write_complete : unit Deferred.t = &lt;abstr&gt;
# Pipe.read r;;
- : [ `Eof | `Ok of string ] = `Ok &quot;Hello World!&quot;
# write_complete;;
- : unit = ()
</programlisting>
      <para>
        In the function <literal>run</literal> above, we're taking
        advantage of one of the many utility functions provided for
        pipes in the <literal>Pipe</literal> module. In particular,
        we're using <literal>Pipe.transfer</literal> to set up a process
        that takes data from a reader-pipe and moves it to a
        writer-pipe. Here's the type of
        <literal>Pipe.transfer</literal>:
      </para>
      <programlisting language="ocaml">
# Pipe.transfer;;
- : 'a Pipe.Reader.t -&gt; 'b Pipe.Writer.t -&gt; f:('a -&gt; 'b) -&gt; unit Deferred.t =
&lt;fun&gt;
</programlisting>
      <para>
        The two pipes being connected are generated by the
        <literal>Reader.pipe</literal> and
        <literal>Writer.pipe</literal> call respectively. Note that
        pushback is preserved throughout the process, so that if the
        writer gets blocked, the the writer's pipe will stop pulling
        data from the reader's pipe, which will prevent the reader from
        reading in more data.
      </para>
      <para>
        Importantly, the deferred returned by
        <literal>Pipe.transfer</literal> becomes determined once the
        reader has been closed and the last element is transferred from
        the reader to the writer. Once that deferred becomes determined,
        the server will shut down that client connection. So, when a
        client disconnects, the rest of the shutdown happens
        transparently.
      </para>
      <para>
        The command-line parsing for this program is based on the
        <literal>Command</literal> library that we introduced in
        <xref linkend="command-line-parsing"/>. When you open
        <literal>Async.Std</literal>, the <literal>Command</literal>
        module has added to it the <literal>async_basic</literal> call:
      </para>
      <programlisting language="ocaml">
# Command.async_basic;;
- : summary:string -&gt;
    ?readme:(unit -&gt; string) -&gt;
    ('a, unit -&gt; unit Deferred.t) Command.Spec.t -&gt; 'a -&gt; Command.t
= &lt;fun&gt;
</programlisting>
      <para>
        This differs from the ordinary <literal>Command.basic</literal>
        call in that the main function must return a
        <literal>Deferred.t</literal>, and that the running of the
        command (using <literal>Command.run</literal>) automatically
        starts the async scheduler, without requiring an explicit call
        to <literal>Scheduler.go</literal>.
      </para>
    </sect2>
  </sect1>
  <sect1 id="example-searching-definitions-with-duckduckgo">
    <title>Example: searching definitions with DuckDuckGo</title>
    <para>
      DuckDuckGo is a search engine with a freely available search
      interface. In this section, we'll use Async to write a small
      command-line utility for querying DuckDuckGo to extract
      definitions for a collection of terms.
    </para>
    <para>
      Our code is going to rely on a number of other libraries, all of
      which can be installed using OPAM. Refer to
      <xref linkend="installation"/> if you need help on the
      installation. Here's the list of libraries we'll need.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>textwrap</literal>, a library for wrapping long
          lines. We'll use this for printing out our results.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>uri</literal>, a library for handling URI's, or
          &quot;Uniform Resource Identifiers&quot;, of which HTTP URL's
          are an example.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>yojson</literal>, a JSON parsing library that was
          described in <xref linkend="handling-json-data"/>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>cohttp</literal>, a library for creating HTTP clients
          and servers. We need Async support, which comes with the
          <literal>cohttp.async</literal> package.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Now let's dive into the implementation.
    </para>
    <sect2 id="uri-handling">
      <title>URI handling</title>
      <para>
        You're probably familiar with HTTP URLs, which identify
        endpoints across the World Wide Web. These are actually part of
        a more general family known as Uniform Resource Identifiers
        (URIs). The full URI specification is defined in
        <ulink url="http://tools.ietf.org/html/rfc3986">RFC3986</ulink>,
        and is rather complicated. Luckily, the <literal>uri</literal>
        library provides a strongly-typed interface which takes care of
        much of the hassle.
      </para>
      <para>
        We'll need a function for generating the URI's that we're going
        to use to query the DuckDuckGo servers.
      </para>
      <programlisting language="ocaml">
(* file: search.ml *)
open Core.Std
open Async.Std

(* Generate a DuckDuckGo search URI from a query string *)
let query_uri query =
  let base_uri = Uri.of_string &quot;http://api.duckduckgo.com/?format=json&quot; in
  Uri.add_query_param base_uri (&quot;q&quot;, [query])
</programlisting>
      <para>
        A <literal>Uri.t</literal> is constructed from the
        <literal>Uri.of_string</literal> function, and a query parameter
        <literal>q</literal> is added with the desired search query. The
        library takes care of encoding the URI correctly when outputting
        it in the network protocol.
      </para>
    </sect2>
    <sect2 id="parsing-json-strings">
      <title>Parsing JSON strings</title>
      <para>
        The HTTP response from DuckDuckGo is in JSON, a common (and
        thankfully simple) format that is specified in
        <ulink url="http://www.ietf.org/rfc/rfc4627.txt">RFC4627</ulink>.
        We'll parse the JSON data using the Yojson library, which we
        already introduced in
        <xref linkend="handling-json-data"/>.
      </para>
      <para>
        We expect the response from DuckDuckGo to come across as a JSON
        record, which is represented by the <literal>Assoc</literal> tag
        in Yojson's JSON variant. We expect the definition itself to
        come across under either the key &quot;Abstract&quot; or
        &quot;Definition&quot;, and so the code below looks under both
        keys, returning the first one for which a non-empty value is
        defined.
      </para>
      <programlisting language="ocaml">
(* Extract the &quot;Definition&quot; or &quot;Abstract&quot; field from the DuckDuckGo results *)
let get_definition_from_json json =
  match Yojson.Safe.from_string json with
  | `Assoc kv_list -&gt;
    let find key =
      begin match List.Assoc.find kv_list key with
      | None | Some (`String &quot;&quot;) -&gt; None
      | Some s -&gt; Some (Yojson.Safe.to_string s)
      end
    in
    begin match find &quot;Abstract&quot; with
    | Some _ as x -&gt; x
    | None -&gt; find &quot;Definition&quot;
    end
  | _ -&gt; None
</programlisting>
    </sect2>
    <sect2 id="executing-an-http-client-query">
      <title>Executing an HTTP client query</title>
      <para>
        Now let's look at the code for dispatching the search queries
        over HTTP, using the Cohttp library.
      </para>
      <programlisting language="ocaml">
(* Execute the DuckDuckGo search *)
let get_definition word =
  Cohttp_async.Client.get (query_uri word)
  &gt;&gt;= fun (_, body) -&gt;
  Pipe.to_list body
  &gt;&gt;| fun strings -&gt;
  (word, get_definition_from_json (String.concat strings))
</programlisting>
      <para>
        To better understand what's going on, it's useful to look at the
        type for <literal>Cohttp_async.Client.get</literal>, which we
        can do in utop.
      </para>
      <programlisting language="ocaml">
# #require &quot;cohttp.async&quot;;;
# Cohttp_async.Client.get;;
- : ?interrupt:unit Deferred.t -&gt;
    ?headers:Cohttp.Header.t -&gt;
    Uri.t -&gt; (Cohttp.Response.r * Cohttp_async.body) Deferred.t
= &lt;fun&gt;
</programlisting>
      <para>
        The <literal>get</literal> call takes as a required argument a
        URI, and returns a deferred value is returned, containing a
        <literal>Cohttp.Response.t</literal> (which we ignore) and a
        pipe reader to which the body of the request will be written to
        as it is received.
      </para>
      <para>
        In this case, the HTTP body probably isn't very large, so we
        call <literal>Pipe.to_list</literal> to collect the strings from
        the pipe as a single deferred list of strings. We then join
        those strings using <literal>String.concat</literal> and pass
        the result through our parsing function.
      </para>
      <para>
        Running a single search isn't that interesting from a
        concurrency perspective, so let's write code for dispatching
        multiple searches in parallel. First, we need code for
        formatting and printing out the search result.
      </para>
      <programlisting language="ocaml">
(* Print out a word/definition pair *)
let print_result (word,definition) =
  printf &quot;%s\n%s\n\n%s\n\n&quot;
    word
    (String.init (String.length word) ~f:(fun _ -&gt; '-'))
    (match definition with
    | None -&gt; &quot;No definition found&quot;
    | Some def -&gt;
      String.concat ~sep:&quot;\n&quot;
        (Wrapper.wrap (Wrapper.make 70) def))
</programlisting>
      <para>
        We use the <literal>Wrapper</literal> module from the
        <literal>textwrap</literal> package to do the line-wrapping. It
        may not be obvious that this routine is using Async, but it
        does: the version of <literal>printf</literal> that's called
        here is actually Async's specialized <literal>printf</literal>
        that goes through the Async scheduler rather than printing
        directly. The original definition of <literal>printf</literal>
        is shadowed by this ne one when you open
        <literal>Async.Std</literal>. An important side effect of this
        is that if you write an Async program and forget to start the
        scheduler, calls like <literal>printf</literal> won't actually
        generate any output!
      </para>
      <para>
        The next function dispatches the searches in parallel, waits for
        the results, and then prints.
      </para>
      <programlisting language="ocaml">
(* Run many searches in parallel, printing out the results after they're all
   done. *)
let search_and_print words =
  Deferred.all (List.map words ~f:get_definition)
  &gt;&gt;| fun results -&gt;
  List.iter results ~f:print_result
</programlisting>
      <para>
        We used <literal>List.map</literal> to call
        <literal>get_definition</literal> on each word, and
        <literal>Deferred.all</literal> to wait for all the results.
        Here's the type of <literal>Deferred.all</literal>:
      </para>
      <programlisting language="ocaml">
# Deferred.all;;
- : 'a Deferred.t list -&gt; 'a list Deferred.t = &lt;fun&gt;
</programlisting>
      <para>
        Note that the list returned by <literal>Deferred.all</literal>
        reflects the order of the deferreds passed to it. As such, the
        definitions will be printed out in the same order that the
        search wrods are passed in, no matter what orders the queries
        return in. We could rewrite this code to print out the results
        as they're received (and thus potentially out of order) as
        follows.
      </para>
      <programlisting language="ocaml">
(* Run many searches in parallel, printing out the results as you go *)
let search_and_print words =
  Deferred.all_unit (List.map words ~f:(fun word -&gt;
    get_definition word &gt;&gt;| print_result))
</programlisting>
      <para>
        The difference is that we both dispatch the query and print out
        the result in the closure passed to <literal>map</literal>,
        rather than waiting for all of the results to get back and then
        printing them out together. We use
        <literal>Deferred.all_unit</literal>, which takes a list of
        <literal>unit</literal> deferreds and returns a single
        <literal>unit</literal> deferred that becomes determined when
        every deferred on the input list is determined. We can see the
        type of this function in utop.
      </para>
      <programlisting language="ocaml">
# Deferred.all_unit;;
- : unit Deferred.t list -&gt; unit Deferred.t = &lt;fun&gt;
</programlisting>
      <para>
        Finally, we create a command line interface using
        <literal>Command.async_basic</literal>.
      </para>
      <programlisting language="ocaml">
let () =
  Command.async_basic
    ~summary:&quot;Retrieve definitions from duckduckgo search engine&quot;
    Command.Spec.(
      empty
      +&gt; anon (sequence (&quot;word&quot; %: string))
    )
    (fun words () -&gt; search_and_print words)
  |&gt; Command.run
</programlisting>
      <para>
        And that's all we need to create a simple but usable definition
        searcher.
      </para>
      <programlisting>
$ ./search.native &quot;Concurrent Programming&quot; &quot;OCaml&quot;
Concurrent Programming
----------------------

&quot;Concurrent computing is a form of computing in which programs are
designed as collections of interacting computational processes that
may be executed in parallel.&quot;

OCaml
-----

&quot;OCaml, originally known as Objective Caml, is the main implementation
of the Caml programming language, created by Xavier Leroy, Jérôme
Vouillon, Damien Doligez, Didier Rémy and others in 1996.&quot;
</programlisting>
    </sect2>
  </sect1>
  <sect1 id="exception-handling">
    <title>Exception handling</title>
    <para>
      When programming with external resources, errors are everywhere:
      everything from a flaky server to a network outage to exhausting
      of local resources can lead to a run-time error. When programming
      in OCaml, some of these errors will show up explicitly in a
      function's return type, and of them will show up as exceptions. We
      covered exception handling in OCaml in
      <xref linkend="exceptions"/>, but as we'll see,
      exception handling in a concurrent program presents some new
      challenges.
    </para>
    <para>
      Let's get a better sense of how exceptions work in Async by
      creating an asynchronous computation that (sometimes) fails with
      an exception. The function <literal>maybe_raise</literal> below
      blocks for half a second, and then either throws an exception or
      returns unit, alternating between the two behaviors on subsequent
      calls.
    </para>
    <programlisting language="ocaml">
# let maybe_raise =
    let should_fail = ref false in
    fun () -&gt;
      let will_fail = !should_fail in
      should_fail := not will_fail;
      after (Time.Span.of_sec 0.5)
      &gt;&gt;= fun () -&gt;
      if will_fail then raise Exit else return ()
 ;;
val maybe_raise : Core.Span.t -&gt; unit Deferred.t = &lt;fun&gt;
# maybe_raise ();;
- : unit = ()
# maybe_raise ();;
Exception:
(lib/monitor.ml.Error_
 ((exn Exit) (backtrace (&quot;&quot;))
  (monitor
   (((name block_on_async) (here ()) (id 5) (has_seen_error true)
     (someone_is_listening true) (kill_index 0))
    ((name main) (here ()) (id 1) (has_seen_error false)
     (someone_is_listening false) (kill_index 0)))))).
</programlisting>
    <para>
      In utop, the exception thrown by <literal>maybe_raise ()</literal>
      terminates the evaluation of just that expression, but in a
      stand-alone program, an uncaught exception would bring down the
      entire process.
    </para>
    <para>
      So, how could we capture and handle such an exception? You might
      try to do this using OCaml's built-in <literal>try/with</literal>
      statement, but as you can see below, that doesn't quite do the
      trick.
    </para>
    <programlisting language="ocaml">
# let handle_error () =
    try
      maybe_raise ()
      &gt;&gt;| fun () -&gt; &quot;success&quot;
    with _ -&gt; return &quot;failure&quot;
  ;;
val handle_error : unit -&gt; string Deferred.t = &lt;fun&gt;
# handle_error ();;
- : string = &quot;success&quot;
# handle_error ();;
Exception:
(lib/monitor.ml.Error_
 ((exn Exit) (backtrace (&quot;&quot;))
  (monitor
   (((name block_on_async) (here ()) (id 58) (has_seen_error true)
     (someone_is_listening true) (kill_index 0))
    ((name main) (here ()) (id 1) (has_seen_error false)
     (someone_is_listening false) (kill_index 0)))))).
</programlisting>
    <para>
      This didn't work because <literal>try/with</literal> only captures
      exceptions that are thrown in the code directly executed within
      it, while <literal>maybe_raise</literal> schedules an Async job to
      run in the future, and it's that job that throws an exception.
    </para>
    <para>
      We can capture this kind of asynchronous error use the
      <literal>try_with</literal> function provided by Async:
    </para>
    <programlisting language="ocaml">
# let handle_error () =
    try_with (fun () -&gt; maybe_raise ())
    &gt;&gt;| function
    | Ok ()   -&gt; &quot;success&quot;
    | Error _ -&gt; &quot;failure&quot;
  ;;
# handle_error ();;
- : string = &quot;success&quot;
# handle_error ();;
  - : string = &quot;failure&quot;
</programlisting>
    <para>
      <literal>try_with f</literal> takes as its argument a
      deferred-returning thunk <literal>f</literal>, and returns a
      deferred that becomes determined either as <literal>Ok</literal>
      of whatever <literal>f</literal> returned, or
      <literal>Error exn</literal> if <literal>f</literal> threw an
      exception before its return value became determined.
    </para>
    <sect2 id="monitors">
      <title>Monitors</title>
      <para>
        <literal>try_with</literal> is a a great way of handling
        exceptions in Async, but it's not the whole story. All of
        Async's exception-handling mechanisms,
        <literal>try_with</literal> included, are built on top of
        Async's system of <emphasis>monitors</emphasis>, which are
        inspired by the error-handling mechanism in Erlang of the same
        name. Monitors are fairly low-level and are only occasionally
        used directly, but it's nontheless worth understanding how they
        work.
      </para>
      <para>
        In Async, a monitor is a context that determines what to do when
        there is an unhandled exception. Every Async job runs within the
        context of some monitor, which, when the job is running, is
        referred to as the current monitor. When a new Async job is
        scheduled, say, using <literal>bind</literal> or
        <literal>map</literal>, it inherits the current monitor of the
        job that spawned it.
      </para>
      <para>
        Monitors are arranged in a tree -- when a new monitor is created
        (say, using <literal>Monitor.create</literal>) it is a child of
        the current monitor. You can explicitly run jobs within a
        monitor using <literal>within</literal>, which takes a thunk
        that returns a non-deferred value, or
        <literal>within'</literal>, which takes a thunk that returns a
        deferred. Here's an example.
      </para>
      <programlisting language="ocaml">
# let blow_up () =
    let monitor = Monitor.create ~name:&quot;blow up monitor&quot; () in
    within' ~monitor maybe_raise
  ;;
# blow_up ();;
- : unit = ()
# blow_up ();;
Exception:
(lib/monitor.ml.Error_
 ((exn Exit) (backtrace (&quot;&quot;))
  (monitor
   (((name &quot;blow up monitor&quot;) (here ()) (id 73) (has_seen_error true)
     (someone_is_listening false) (kill_index 0))
    ((name block_on_async) (here ()) (id 72) (has_seen_error false)
     (someone_is_listening true) (kill_index 0))
    ((name main) (here ()) (id 1) (has_seen_error false)
     (someone_is_listening false) (kill_index 0)))))).
</programlisting>
      <para>
        In addition to the ordinary stack-trace, the exception displays
        the trace of monitors through which the exception traveled,
        starting at the one we created, called &quot;blow up
        monitor&quot;. The other monitors you see come from utop's
        special handling of deferreds.
      </para>
      <para>
        Monitors can do more than just augment the error-trace of an
        exception. You can also use a monitor to explicitly handle
        errors delivered to that monitor. The
        <literal>Monitor.errors</literal> call is a particularly
        important one. It detaches the monitor from its parent, handing
        back the stream of errors that would otherwise have been
        delivered to the parent monitor. This allows one to do custom
        handling of errors, which may include re-raising errors to the
        parent. Here is a very simple example of function that captures
        and ignores errors in the processes it spawns.
      </para>
      <programlisting language="ocaml">
# let swallow_error () =
    let monitor = Monitor.create () in
    Stream.iter (Monitor.errors monitor) ~f:(fun _exn -&gt;
      printf &quot;an error happened\n&quot;);
    within' ~monitor (fun () -&gt;
      after (Time.Span.of_sec 0.5) &gt;&gt;= fun () -&gt; failwith &quot;Kaboom!&quot;)
  ;;
val swallow_error : unit -&gt; 'a Deferred.t = &lt;fun&gt;
# swallow_error ();;
an error happened
</programlisting>
      <para>
        The message &quot;an error happened&quot; is printed out, but
        the deferred returned by <literal>swallow_error</literal> is
        never determined. This makes sense, since the calculation never
        actually completes, so there's no value to return. You can break
        out of this in utop by hitting <literal>Control-C</literal>.
      </para>
      <para>
        Here's an example of a monitor which passes some exceptions
        through to the parent, and handles others. Exceptions are sent
        to the parent using <literal>Monitor.send_exn</literal>, with
        <literal>Monitor.current</literal> being called to find the
        current monitor, which is the parent of the newly created
        monitor.
      </para>
      <programlisting language="ocaml">
# exception Ignore_me;;
exception Ignore_me
# let swallow_some_errors exn_to_raise =
    let child_monitor  = Monitor.create  () in
    let parent_monitor = Monitor.current () in
    Stream.iter (Monitor.errors child_monitor) ~f:(fun error -&gt;
      match Monitor.extract_exn error with
      | Ignore_me -&gt; printf &quot;ignoring exn\n&quot;
      | _ -&gt; Monitor.send_exn parent_monitor error);
    within' ~monitor:child_monitor (fun () -&gt;
       after (Time.Span.of_sec 0.5)
       &gt;&gt;= fun () -&gt; raise exn_to_raise)
  ;;
val swallow_some_errors : exn -&gt; 'a Deferred.t = &lt;fun&gt;
</programlisting>
      <para>
        Note that we use <literal>Monitor.extract_exn</literal> to grab
        the underlying exception that was thrown. Async wraps exceptions
        it catches with extra information, including the monitor trace,
        so you need to grab the underlying exception to match on it.
      </para>
      <para>
        If we pass in an exception other than
        <literal>Ignore_me</literal>, like, say, the built-in exception
        <literal>Not_found</literal>, then the exception will be passed
        to the parent monitor and delivered as usual.
      </para>
      <programlisting language="ocaml">
# swallow_some_errors Not_found;;
Exception:
(lib/monitor.ml.Error_
 ((exn Not_found) (backtrace (&quot;&quot;))
  (monitor
   (((name (id 3)) (here ()) (id 3) (has_seen_error true)
     (someone_is_listening true) (kill_index 0))
    ((name block_on_async) (here ()) (id 2) (has_seen_error true)
     (someone_is_listening true) (kill_index 0))
    ((name main) (here ()) (id 1) (has_seen_error false)
     (someone_is_listening false) (kill_index 0)))))).
</programlisting>
      <para>
        If instead we use <literal>Ignore_me</literal>, the exception
        will be ignored, and we again see that the deferred never
        returns, but the exception was caught and ignored.
      </para>
      <programlisting language="ocaml">
# swallow_some_errors Ignore_me;;
ignoring exn
</programlisting>
      <para>
        In practice, you should rarely use monitors directly, instead
        using functions like <literal>try_with</literal> and
        <literal>Monitor.protect</literal> that are built on top of
        monitors. One example of a library that uses monitors directly
        is <literal>Tcp.Server.create</literal>, which tracks both
        exceptions thrown by the logic that handles the network
        connection and by the callback for responding to an individual
        request, in either case responding to an exception by closing
        the connection. It is for building this kind of custom error
        handling that monitors can be helpful.
      </para>
    </sect2>
    <sect2 id="example-handling-exceptions-with-duckduckgo">
      <title>Example: Handling exceptions with DuckDuckGo</title>
      <para>
        Let's now go back and improve the exception handling of our
        DuckDuckGo client. In particular, we'll change it so that any
        individual queries that fail are reported as such, without
        preventing other queries from succeeding.
      </para>
      <para>
        The search code as it is fails rarely, so let's make make a
        change that can cause it to fail more predictably, by making it
        possible to distribute the requests over multiple servers. Then,
        we'll handle the errors that occur when one of those servers is
        mis-specified.
      </para>
      <para>
        First we'll need to change <literal>query_uri</literal> to take
        an argument specifying the server to connect to, as follows.
      </para>
      <programlisting language="ocaml">
(* Generate a DuckDuckGo search URI from a query string *)
let query_uri ~server query =
  let base_uri =
    Uri.of_string (String.concat [&quot;http://&quot;;server;&quot;/?format=json&quot;])
  in
  Uri.add_query_param base_uri (&quot;q&quot;, [query])
</programlisting>
      <para>
        and then making the appropriate changes to get the list of
        servers on the command-line, and to distribute the search
        queries round-robin over the list of servers. Now, let's see
        what happens if we rebuild the application and run it giving it
        a list of servers, some of which won't respond to the query.
      </para>
      <programlisting>
$ ./search_with_configurable_server.native \
     -servers localhost,api.duckduckgo.com \
     &quot;Concurrent Programming&quot; OCaml
(&quot;unhandled exception&quot;
 ((lib/monitor.ml.Error_
   ((exn (Unix.Unix_error &quot;Connection refused&quot; connect 127.0.0.1:80))
    (backtrace
     (&quot;Raised by primitive operation at file \&quot;lib/unix_syscalls.ml\&quot;, line 793, characters 12-69&quot;
      &quot;Called from file \&quot;lib/deferred.ml\&quot;, line 24, characters 62-65&quot;
      &quot;Called from file \&quot;lib/scheduler.ml\&quot;, line 120, characters 6-17&quot;
      &quot;Called from file \&quot;lib/jobs.ml\&quot;, line 73, characters 8-13&quot; &quot;&quot;))
    (monitor
     (((name Tcp.close_sock_on_error) (here ()) (id 3) (has_seen_error true)
       (someone_is_listening true) (kill_index 0))
      ((name main) (here ()) (id 1) (has_seen_error true)
       (someone_is_listening false) (kill_index 0))))))
  (Pid 1352)))
</programlisting>
      <para>
        As you can see, we got a &quot;Connection refused&quot; failure
        which ends the entire program, even though one of the two
        queries would have gone through successfully. We can handle the
        failures of individual connections separately by using the
        <literal>try_with</literal> function within each call to
        <literal>get_definition</literal>, as follows.
      </para>
      <programlisting language="ocaml">
(* Execute the DuckDuckGo search *)
let get_definition ~server word =
  try_with (fun () -&gt;
    Cohttp_async.Client.get (query_uri ~server word)
    &gt;&gt;= fun  (_, body) -&gt;
    Pipe.to_list body
    &gt;&gt;| fun strings -&gt;
    (word, get_definition_from_json (String.concat strings)))
  &gt;&gt;| function
  | Ok (word,result) -&gt; (word, Ok result)
  | Error _          -&gt; (word, Error &quot;Unexpected failure&quot;)
</programlisting>
      <para>
        Here, we use <literal>try_with</literal> to capture the
        exception, which we then use map (the
        <literal>&gt;&gt;|</literal> operator) to convert the error into
        the form we want: a pair whose first element is the word being
        searched for, and the second element is the (possibly erroneous)
        result.
      </para>
      <para>
        Now we just need to change the code for
        <literal>print_result</literal> so that it can handle the new
        type.
      </para>
      <programlisting language="ocaml">
(* Print out a word/definition pair *)
let print_result (word,definition) =
  printf &quot;%s\n%s\n\n%s\n\n&quot;
    word
    (String.init (String.length word) ~f:(fun _ -&gt; '-'))
    (match definition with
     | Error s -&gt; &quot;DuckDuckGo query failed: &quot; ^ s
     | Ok None -&gt; &quot;No definition found&quot;
     | Ok (Some def) -&gt;
       String.concat ~sep:&quot;\n&quot;
         (Wrapper.wrap (Wrapper.make 70) def))
</programlisting>
      <para>
        Now, if we run that same query, we'll get individualized
        handling of the connection failures:
      </para>
      <programlisting>
$ ./search_with_error_handling.native \
     -servers localhost,api.duckduckgo.com \
     &quot;Concurrent Programming&quot; OCaml
Concurrent Programming
----------------------

DuckDuckGo query failed unexpectedly

OCaml
-----

&quot;OCaml, originally known as Objective Caml, is the main implementation
of the Caml programming language, created by Xavier Leroy, Jérôme
Vouillon, Damien Doligez, Didier Rémy and others in 1996.&quot;
</programlisting>
      <para>
        Now, only the query that went to <literal>localhost</literal>
        failed.
      </para>
      <para>
        Note that in this code, we're relying on the fact that
        <literal>Cohttp_async.Client.get</literal> will clean up after
        itself after an exception, in particular by closing its file
        descriptors. If you need to implement such functionality
        directly, you may want to use the
        <literal>Monitor.protect</literal> call, which is analogous to
        the <literal>protect</literal> call described in
        <xref linkend="cleaning-up-in-the-presence-of-exceptions"/>.
      </para>
    </sect2>
  </sect1>
  <sect1 id="timeouts-cancellation-and-choices">
    <title>Timeouts, Cancellation and Choices</title>
    <para>
      In a concurrent program, one often needs to combine results from
      multiple distinct concurrent sub-computations going on in the same
      program. We already saw this in our DuckDuckGo example, where we
      used <literal>Deferred.all</literal> and
      <literal>Deferred.all_unit</literal> to wait for a list of
      deferreds to become determined. Another useful primitive is
      <literal>Deferred.both</literal>, which lets you wait until two
      deferreds of different types have returned, returning both values
      as a tuple. Here, we use the function <literal>sec</literal>,
      which is shorthand for creating a time-span equal to a given
      number of seconds.
    </para>
    <programlisting language="ocaml">
# let string_and_float = Deferred.both
   (after (sec 0.5)  &gt;&gt;| fun () -&gt; &quot;A&quot;)
   (after (sec 0.25) &gt;&gt;| fun () -&gt; 32.33);;
val string_and_float : (string * float) Deferred.t = &lt;abstr&gt;
# string_and_float;;
- : string * float = (&quot;A&quot;, 32.33)
</programlisting>
    <para>
      Sometimes, however, we want to wait only for the first of multiple
      events to occur. This happens particularly often when dealing with
      timeouts. In that case, we can use the call
      <literal>Deferred.any</literal>, which, given a list of deferreds,
      returns a single deferred that will become determined once any of
      the values on the list is determined.
    </para>
    <programlisting language="ocaml">
# Deferred.any [ (after (sec 0.5) &gt;&gt;| fun () -&gt; &quot;half a second&quot;)
               ; (after (sec 10.) &gt;&gt;| fun () -&gt; &quot;ten seconds&quot;) ] ;;
- : string = &quot;half a second&quot;
</programlisting>
    <para>
      Let's use this to add timeouts to our DuckDuckGo searches. We'll
      do this by writing a wrapper for <literal>get_definition</literal>
      that takes a timeout (in the form of a
      <literal>Time.Span.t</literal>) as an argument, and returns either
      the definition, or, if that takes too long, the timeout.
    </para>
    <programlisting language="ocaml">
let get_definition_with_timeout ~server ~timeout word =
  Deferred.any
    [ (after timeout &gt;&gt;| fun () -&gt; (word,Error &quot;Timed out&quot;))
    ; (get_definition ~server word
       &gt;&gt;| fun (word,result) -&gt;
       let result' = match result with
         | Ok _ as x -&gt; x
         | Error _ -&gt; Error &quot;Unexpected failure&quot;
       in
       (word,result')
      )
    ]
</programlisting>
    <para>
      We use <literal>&gt;&gt;|</literal> above to transform the
      deferred values we're waiting for so that
      <literal>Deferred.any</literal> can choose between values of the
      same type.
    </para>
    <para>
      A problem with this code is that the HTTP query kicked off by
      <literal>get_definition</literal> is not actually shut down when
      the timeout fires. As such,
      <literal>get_definition_with_timeout</literal> essentially leaks
      an open connection. Happily, Cohttp does provide a way of shutting
      down a client. You can pass a deferred under the label
      <literal>interrupt</literal> to
      <literal>Cohttp_async.Client.get</literal>. Once
      <literal>interrupt</literal> is determined, the client connection
      will terminated and the corresponding connections closed.
    </para>
    <para>
      The following code shows how you can change
      <literal>get_definition</literal> and
      <literal>get_definition_with_timeout</literal> to cancel the
      <literal>get</literal> call if the timeout expires.
    </para>
    <programlisting language="ocaml">
(* Execute the DuckDuckGo search *)
let get_definition ~server ~interrupt word =
  try_with (fun () -&gt;
    Cohttp_async.Client.get ~interrupt (query_uri ~server word)
    &gt;&gt;= fun  (_, body) -&gt;
    Pipe.to_list body
    &gt;&gt;| fun strings -&gt;
    (word, get_definition_from_json (String.concat strings)))
  &gt;&gt;| function
  | Ok (word,result) -&gt; (word, Ok result)
  | Error exn        -&gt; (word, Error exn)
</programlisting>
    <para>
      Next, we'll modify <literal>get_definition_with_timeout</literal>
      to create a deferred to pass in to
      <literal>get_definition</literal> which will become determined
      when our timeout expires.
    </para>
    <programlisting language="ocaml">
let get_definition_with_timeout ~server ~timeout word =
  get_definition ~server ~interrupt:(after timeout) word
  &gt;&gt;| fun (word,result) -&gt;
  let result' = match result with
    | Ok _ as x -&gt; x
    | Error _ -&gt; Error &quot;Unexpected failure&quot;
  in
  (word,result')
</programlisting>
    <para>
      This will work, and will cause the connection to shut-down cleanly
      when we time out; but our code no longer explicitly knows whether
      or not the timeout has kicked in. In particular, the error message
      on a timeout will now be <literal>Unexpected failure</literal>
      rather than <literal>Timed out</literal>, which it was in our
      previous implementation. This is a minor issue in this case, but
      if we wanted to have special behavior in the case of a timeout, it
      would be a more serious issue.
    </para>
    <para>
      We can get more precise handling of timeouts using Async's
      <literal>choose</literal> operator, which lets you pick between a
      collection of different deferreds, reacting to exactly one of
      them. Each deferred is combined, using the function
      <literal>choice</literal>, with a function that is called if and
      only if that is the chosen deferred. Here's the type signature of
      <literal>choice</literal> and <literal>choose</literal>:
    </para>
    <programlisting language="ocaml">
# choice;;
- : 'a Deferred.t -&gt; ('a -&gt; 'b) -&gt; 'b Deferred.choice = &lt;fun&gt;
# choose;;
- : 'a Deferred.choice list -&gt; 'a Deferred.t = &lt;fun&gt;
</programlisting>
    <para>
      <literal>choose</literal> provides no guarantee that the
      <literal>choice</literal> built around the first deferred to
      become determined will in fact be chosen. But
      <literal>choose</literal> does guarantee that only one
      <literal>choice</literal> will be chosen, and only the chosen
      <literal>choice</literal> will execute the attached closure.
    </para>
    <para>
      In the following, we use <literal>choose</literal> to ensure that
      the <literal>interrupt</literal> deferred becomes determined if
      and only if the timeout-deferred is chosen. Here's the code.
    </para>
    <programlisting language="ocaml">
let get_definition_with_timeout ~server ~timeout word =
  let interrupt = Ivar.create () in
  choose
    [ choice (after timeout) (fun () -&gt;
       Ivar.fill interrupt ();
       (word,Error &quot;Timed out&quot;))
    ; choice (get_definition ~server ~interrupt:(Ivar.read interrupt) word)
        (fun (word,result) -&gt;
           let result' = match result with
             | Ok _ as x -&gt; x
             | Error _ -&gt; Error &quot;Unexpected failure&quot;
           in
           (word,result')
        )
    ]
</programlisting>
    <para>
      Now, if we run this with a suitably small timeout, we'll see that
      some queries succeed and some fail, and the timeouts are reported
      as such.
    </para>
    <programlisting>
$ ./search_with_timeout_no_leak.native &quot;concurrent programming&quot; ocaml -timeout 0.1s
concurrent programming
----------------------

DuckDuckGo query failed: Timed out

ocaml
-----

&quot;OCaml or Objective Caml, is the main implementation of the Caml
programming language, created by Xavier Leroy, Jérôme Vouillon,
Damien Doligez, Didier Rémy and others in 1996.&quot;
</programlisting>
  </sect1>
</chapter><chapter id="fast-binary-serialization">
  <title>Fast Binary Serialization</title>
  <para>
    Now that we've learned the basics of working with Async, let's walk
    through a small but non-trivial application: a message broker which
    provides clients with a simple pub/sub API that lets them publish
    and subscribe to streams of values associated with a given topic.
  </para>
  <para>
    All of this will require a serialization format for the messages
    themselves. S-expressions, which we encountered in
    <xref linkend="data-serialization-with-s-expressions"/>,
    are a good serialization format when you need something
    machine-parseable as well as human readable and editable. But
    Sexplib's s-expressions are not particularly performant for a couple
    of reasons:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        s-expression serialization goes through an intermediate type,
        <literal>Sexp.t</literal>, which must be allocated and is then
        typically thrown away, putting non-trivial pressure on the
        garbage collector.
      </para>
    </listitem>
    <listitem>
      <para>
        parsing and printing to strings in an ASCII format can be
        expensive for types like <literal>int</literal>s,
        <literal>float</literal>s and <literal>Time.t</literal>s where
        some real computation needs to be done to produce or parse the
        ASCII representation.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Bin-prot is a library and syntax extension that addresses these
    issues by providing efficient serialization in a compact binary
    format. You can enable Bin-prot in your top-level by typing the
    following:
  </para>
  <programlisting language="ocaml">
# #require &quot;bin_prot.syntax&quot;;;
</programlisting>
  <para>
    The syntax extension is triggered on a given type by writing
    <literal>with bin_io</literal> to the end of the type definition.
    Thus, we can write:
  </para>
  <programlisting language="ocaml">
# module M = struct
    type t = { number: int;
               text: string;
               variant : [`Whatever of float | `Nothing ];
             }
    with bin_io
  end;;
module M :
  sig
    type t = {
      number : int;
      text : string;
      variant : [ `Nothing | `Whatever of float ];
    }
    val bin_size_t : t -&gt; int
    val bin_write_t_ :
      Bin_prot.Unsafe_common.sptr -&gt;
      Bin_prot.Unsafe_common.eptr -&gt; t -&gt; Bin_prot.Unsafe_common.sptr
    val bin_write_t : Bin_prot.Common.buf -&gt; pos:int -&gt; t -&gt; int
    val bin_writer_t : t Bin_prot.Type_class.writer0
    val bin_read_t__ : 'a -&gt; 'b -&gt; 'c -&gt; 'd
    val bin_read_t_ :
      Bin_prot.Unsafe_common.sptr_ptr -&gt; Bin_prot.Unsafe_common.eptr -&gt; t
    val bin_read_t : Bin_prot.Common.buf -&gt; pos_ref:int ref -&gt; t
    val bin_reader_t : t Bin_prot.Type_class.reader0
    val bin_t : t Bin_prot.Type_class.t0
  end
</programlisting>
  <para>
    The details of the generated values are not particularly important,
    but they give you the functionality needed to serialize and
    deserialize binary messages efficiently.
  </para>
  <para>
    Clients can either publish values under a topic, or subscribe to the
    stream of values associated with a given topic. The server will
    maintain a cache of the last value published under any given topic,
    so that a subscriber immediately receives the most recently
    published value under said topic. To make it easier to see what's
    going on, we'll also implement a query for dumping the current state
    of the server.
  </para>
  <para>
    We'll use Async's <literal>Rpc</literal> module for implementing
    that client/server protocol. The following module specifies the
    specific message types we'll use, as well as the RPCs that will be
    used for communicating with the server.
  </para>
  <para>
    First, we'll start with the basic types.
  </para>
  <programlisting language="ocaml">
(* file: protocol.ml *)
open Core.Std
open Async.Std

module Username : Identifiable = String
module Topic    : Identifiable = String

module Message = struct
  type t = { text: string;
             topic: Topic.t;
             from: Username.t;
             time: Time.t;
           }
  with sexp, bin_io
end
</programlisting>
  <para>
    <literal>Username.t</literal> and <literal>Topic.t</literal> are
    just abstract types that are implemented as strings. The
    <literal>Message.t</literal> type contains the basic information
    associated with a message, including the text of the message, who
    it's from, the topic, and the time it was sent.
  </para>
  <para>
    Note that the declaration of <literal>Message.t</literal> is
    followed by the annotation <literal>with sexp, bin_io</literal>.
    We've seen <literal>with sexp</literal> before in
    <xref linkend="data-serialization-with-s-expressions"/>,
    but <literal>bin_io</literal> is new. S-expressions are a convenient
    serialization format, but like any human-readable serialization
    format,
  </para>
  <para>
    Now we can move on to declaring the <literal>Rpc</literal> protocol
    we'll use. The <literal>Rpc</literal> module actually supports two
    different kinds of RPC protocols: an ordinary RPC, represented by an
    <literal>Rpc.Rpc.t</literal>, is a simple back-and-forth style of
    communication: the client sends a message, and the server sends a
    response. In the following, we use <literal>Rpc.Rpc.create</literal>
    to declare the <literal>Rpc</literal> interface.
  </para>
  <programlisting language="ocaml">
let publish_rpc = Rpc.Rpc.create
  ~name:&quot;publish&quot;
  ~version:0
  ~bin_query:Message.bin_t
  ~bin_response:Unit.bin_t
</programlisting>
  <para>
    Note that we declare a name for the RPC and a version number. The
    name and the version number are used together to identify which RPC
    is being sent, with the version number allowing the minting of
    multiple revisions of the RPC, potentially with different types and
    behavior.
  </para>
  <para>
    The argument <literal>bin_query</literal> and
    <literal>bin_response</literal> are used
  </para>
  <para>
    ```ocaml let subscribe_rpc = Rpc.Pipe_rpc.create
    ~name:&quot;subscribe&quot; ~version:0 ~bin_query:Topic.bin_t
    ~bin_response:Message.bin_t ~bin_error:String.bin_t
  </para>
  <para>
    module Dump = struct type single = { topic : Topic.t; message :
    Message.t; num_subscribers: int; } with sexp,bin_io type t = single
    list with sexp,bin_io end
  </para>
  <para>
    let dump_rpc = Rpc.Rpc.create ~name:&quot;dump&quot; ~version:0
    ~bin_query:Unit.bin_t ~bin_response:Dump.bin_t ``` # Fast Binary
    Serialization with bin_prot
  </para>
  <para>
    S-expressions are a good serialization format when you need
    something machine-parseable as well as human readable and editable.
    But Sexplib's s-expressions are not particularly performant for a
    couple of reasons:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        s-expression serialization goes through an intermediate type,
        <literal>Sexp.t</literal>, which must be allocated and is then
        typically thrown away, putting non-trivial pressure on the
        garbage collector.
      </para>
    </listitem>
    <listitem>
      <para>
        parsing and printing to strings in an ASCII format can be
        expensive for types like <literal>int</literal>s,
        <literal>float</literal>s and <literal>Time.t</literal>s where
        some real computation needs to be done to produce or parse the
        ASCII representation.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    <literal>Bin_prot</literal> is a library that addresses these issues
    by providing fast serialization in a compact binary format. We'll
    also introduce the Core <literal>Bigstring</literal> library for
    handling large binary strings efficiently during this chapter.
  </para>
  <note>
  <title>
  Using <literal>bin_prot</literal> in the toplevel
  </title>
  <para>
    The <literal>bin_prot</literal> syntax extension isn't activated by
    default in the toplevel, but is easily available if you add this to
    your <literal>~/.ocamlinit</literal> file. You can also just type
    this in directly into <literal>utop</literal> (with
    <literal>;;</literal> to finish the line) instead.
  </para>
  <programlisting>
#require &quot;bin_prot.syntax&quot;
</programlisting>
  <para>
    The extension is activated by putting <literal>with bin_io</literal>
    after the type declaration. This looks a bit unsightly in the
    toplevel because of all the definitions that are generated. We'll
    elide those definitions in the book, but you can see them for
    yourself in the toplevel.
  </para>
  </note>
  <sect1 id="defining-a-message-broker">
    <title>Defining a message broker</title>
    <para>
      Here's a small complete example of a program that can read and
      write values using <literal>bin_io</literal>. Here, the
      serialization is of types that might be used as part of a
      message-queue, where each message has a topic, some content, and a
      source, which is in turn a hostname and a port.
    </para>
    <programlisting language="ocaml">
open Core.Std

module Message = struct
  module Source = struct
    type t = { hostname: string;
               port: int;
             }
    with bin_io
  end

  type t = { topic: string;
             content: string;
             source: Source.t;
           }
  with bin_io
end
</programlisting>
    <para>
      You can can combine multiple syntax generators in the same type
      declaration by comma-separating them, so you could generate both
      formats via <literal>with bin_io,sexp</literal> above.
    </para>
    <para>
      Next we need to define how to marshal and unmarshal these
      messages. The interface is a little more complex than for
      s-expressions since we don't just want to serialise from the
      normal OCaml <literal>string</literal>, but also to the
      <literal>bigstring</literal> type. We'll explain what this is in
      more detail shortly, but for now think of it as a more efficient
      alternative for large binary data.
    </para>
    <programlisting language="ocaml">
let binable =
  (module Message : Binable.S with type t = Message.t)

let save_message outc msg =
  let s = Binable.to_bigstring binable msg in
  let len = Bigstring.length s in
  Out_channel.output_binary_int outc len;
  Bigstring.really_output outc s
</programlisting>
    <para>
      The <literal>binable</literal> value above captures all the
      auto-generated <literal>bin_io</literal> functions into a
      first-class module of type <literal>Binable.S</literal>. This
      module has the low-level reader and writer functions which we
      don't want to have to manually construct.
    </para>
    <para>
      The <literal>save_message</literal> is then responsible for
      writing the binary content out to a <literal>bigstring</literal>.
      It first invokes the <literal>Binable.to_bigstring</literal> on a
      <literal>Message.t</literal> value to retrieve a marshalled
      string. It then determines the length of this string, and writes
      out the length and the string to the output channel.
    </para>
    <para>
      The <literal>Binable</literal> interface in Core is pretty simple:
      <literal>type 'a m = (module Binable.S with type t = 'a)  val of_bigstring : 'a m -&gt; bigstring -&gt; 'a val to_bigstring : ?prefix_with_length:bool -&gt; 'a m -&gt; 'a -&gt; bigstring val of_string : 'a m -&gt; string -&gt; 'a val to_string : 'a m -&gt; 'a -&gt; string</literal>
    </para>
    <para>
      Since the <literal>Binable.S</literal> module values are generated
      for you automatically, the only functions you'll need to regularly
      use are the conversion functions above.
    </para>
    <para>
      Reading back the binary value we've just defined is quite similar.
      We read in the length field, read that much data into a
      <literal>bigstring</literal>, and convert it to our type using
      <literal>Binable.of_bigstring</literal>.
    </para>
    <programlisting language="ocaml">
let load_message inc =
  match In_channel.input_binary_int inc with
  | None -&gt; failwith &quot;length missing from header&quot;
  | Some len -&gt;
    let buf = Bigstring.create len in
    Bigstring.really_input ~pos:0 ~len inc buf;
    Binable.of_bigstring binable buf
</programlisting>
    <para>
      The code to generate and read and write these messages now just
      uses the static <literal>Message.t</literal> type, with no need to
      worry about the marshalling mechanism.
    </para>
    <programlisting language="ocaml">
(* Generate some example messages *)
let example content =
  let source =
    { Message.Source.
      hostname = &quot;ocaml.org&quot;; port = 2322 }
  in
  { Message.
    topic = &quot;rwo-example&quot;; content; source; }

(* write out three messages... *)
let write_messages () =
  let outc = Out_channel.create &quot;tmp.bin&quot; in
  List.iter ~f:(save_message outc) [
    example &quot;a wonderful&quot;;
    example &quot;trio&quot;;
    example &quot;of messages&quot;;
  ];
  Out_channel.close outc

(* ... and read them back in *)
let read_messages () =
  let inc = In_channel.create &quot;tmp.bin&quot; in
  for i = 1 to 3 do
    let msg = load_message inc in
    printf &quot;msg %d: %s\n&quot; i msg.Message.content
  done

let () =
  write_messages (); read_messages ()
</programlisting>
  </sect1>
  <sect1 id="bigstring">
    <title>Bigstring</title>
    <para>
      We earlier mentioned that <literal>bigstring</literal> is a more
      efficient version of <literal>string</literal>. Understanding the
      difference requires some understanding of how OCaml allocates
      values. TODO.
    </para>
  </sect1>
  <sect1 id="fieldslib">
    <title>Fieldslib</title>
    <para>
      TODO: out of place
    </para>
    <para>
      One common idiom when using records is to provide field accessor
      functions for a particular record.
    </para>
    <programlisting language="ocaml">
type t = { topic: string;
           content: string;
           source: Source.t;
         }

let topic   t = t.topic
let content t = t.content
let source  t = t.source
</programlisting>
    <para>
      Similarly, sometimes you simultaneously want an accessor to a
      field of a record and a textual representation of the name of that
      field. This might come up if you were validating a field and
      needed the string representation to generate an error message, or
      if you wanted to scaffold a form in a GUI automatically based on
      the fields of a record. Fieldslib provides a module
      <literal>Field</literal> for this purpose. Here's some code for
      creating <literal>Field.t</literal>'s for all the fields of our
      type <literal>t</literal>.
    </para>
    <programlisting language="ocaml">
# module Fields = struct
    let topic =
      { Field.
        name   = &quot;topic&quot;;
        setter = None;
        getter = (fun t -&gt; t.topic);
        fset   = (fun t topic -&gt; { t with topic });
      }
    let content =
      { Field.
        name   = &quot;content&quot;;
        setter = None;
        getter = (fun t -&gt; t.content);
        fset   = (fun t content -&gt; { t with content });
      }
    let source =
      { Field.
        name   = &quot;source&quot;;
        setter = None;
        getter = (fun t -&gt; t.source);
        fset   = (fun t source -&gt; { t with source });
      }
  end ;;
module Fields :
  sig
    val topic : (t, string list) Core.Std.Field.t
    val content : (t, string) Core.Std.Field.t
    val source : (t, Source.t) Core.Std.Field.t
  end
</programlisting>
    <para>
      There are several syntax extensions distributed with Core,
      including:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="strong">Sexplib</emphasis>: provides
          serialization for s-expressions.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">Bin_prot</emphasis>: provides
          serialization to an efficient binary format.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">Fieldslib</emphasis>: generates
          first-class values that represent fields of a record, as well
          as accessor functions and setters for mutable record fields.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">Variantslib</emphasis>: like Fieldslib
          for variants, producing first-class variants and other helper
          functions for interacting with variant types.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">Pa_compare</emphasis>: generates
          efficient, type-specialized comparison functions.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">Pa_typehash</emphasis>: generates a
          hash value for a type definition, <emphasis>i.e.</emphasis>,
          an integer that is highly unlikely to be the same for two
          distinct types.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      We'll discuss each of these syntax extensions in detail, starting
      with Sexplib.
    </para>
  </sect1>
</chapter></part><part label="III"><title>The Runtime System</title><partintro><para>Part III is all about understanding the compiler toolchain and runtime system in OCaml.  
     It's a remarkably simple system in comparison to other language runtimes (such as Java or 
     the .NET CLR).</para><para>You'll need to read this to build very high performance systems that have to minimise 
      resource usage or interface to C libraries. This is also where we talk about profiling and 
      debugging techniques using tools such as GNU gdb.</para></partintro><chapter id="foreign-function-interface">
  <title>Foreign Function Interface</title>
  <para>
    OCaml has several options available to interact with non-OCaml code.
    The compiler can link to external system libraries via C code, and
    also produce standalone native object files that can be embedded
    within other non-OCaml applications.
  </para>
  <sect1 id="the-ctypes-foreign-function-library">
    <title>The Ctypes foreign function library</title>
    <para>
      The simplest foreign function interface in OCaml doesn't even
      require you to write any C code. The <literal>ctypes</literal>
      library lets you define the C interface in pure OCaml, and the
      library takes care of dynamically loading the C symbols and
      invoking the function call with the appropriate arguments.
    </para>
    <para>
      Let's dive straight into an example to show you how the library
      looks. We'll use a binding to the <literal>ncurses</literal>
      terminal toolkit, as it's widely available on most systems and
      doesn't have any complex dependencies.
    </para>
    <note>
    <title>
    Installing the Ctypes library
    </title>
    <para>
      Ctypes is available via OPAM as usual. You'll need to install the
      <ulink url="https://github.com/atgreen/libffi"><literal>libffi</literal></ulink>
      library before starting the OPAM installtion . It's a fairly
      popular library and should be available in your OS package
      manager.
    </para>
    <para>
      A special note for Mac user: the version of
      <literal>libffi</literal> installed by default in MacOS X 10.8 is
      too old for some of the features that Ctypes needs. Use Homebrew
      to <literal>brew install libffi</literal> to get the latest
      version before installing the OCaml library.
    </para>
    <programlisting>
$ brew install libffi     # for MacOS X users
$ opam install ctypes
</programlisting>
    <para>
      It will then be available via the <literal>ctypes</literal>
      OCamlfind package. You'll also need the <literal>ncurses</literal>
      library for the first example. This comes pre-installed on MacOS X
      and Debian Linux provides it as the <literal>ncurses-dev</literal>
      package.
    </para>
    </note>
  </sect1>
  <sect1 id="example-an-ncurses-terminal-interface">
    <title>Example: an ncurses terminal interface</title>
    <para>
      Ncurses is a library to help build terminal-independent text
      interfaces in a reasonably efficient way. It's used in console
      mail clients like <literal>mutt</literal> and
      <literal>pine</literal>, and console web browsers such as
      <literal>lynx</literal>.
    </para>
    <para>
      The full C interface is quite large and explained in the online
      <ulink url="http://www.gnu.org/software/ncurses/">documentation</ulink>.
      We'll use the excerpt below since it's all we need for a basic
      binding in OCaml. The header file is usually installed in
      <literal>/usr/include/ncurses.h</literal>.
    </para>
    <programlisting language="c">
// &lt;ncurses.h&gt;
typedef struct _win_st WINDOW;

WINDOW *initscr   (void);
WINDOW *newwin    (int, int, int, int);
void    endwin    (void);
void    refresh   (void);
void    wrefresh  (WINDOW *);
void    mvwaddstr (WINDOW *, int, int, char *);
</programlisting>
    <para>
      The Ncurses functions either operate on the current
      pseudo-terminal or on a window that has been created via the
      library. The <literal>WINDOW</literal> typdef represents the
      library state and is considered abstract to users of the library.
      OCaml code just needs to store the pointer somewhere and pass it
      back to Ncurses. library calls that then dereference its contents.
    </para>
    <para>
      There are two library calls that create <literal>WINDOW</literal>
      pointers. The <literal>initscr</literal> function initialises the
      library and returns the global window, and
      <literal>newwin</literal> allows further windows to be created.
      The <literal>WINDOW</literal> pointer can also be passed to
      terminal drawing functions such as <literal>mvwaddrstr</literal>
      (there are over 200 library calls in <literal>ncurses</literal>,
      so we are just binding a select few for this example). The
      terminal is updated when <literal>refresh</literal> or
      <literal>wrefresh</literal> are called. All other drawing calls
      just manipulate library data structures without actually changing
      the screen layout.
    </para>
    <para>
      The <literal>ctypes</literal> library provides an OCaml interface
      that lets you declare these C functions as OCaml values. The
      library takes care of converting the OCaml arguments into the C
      calling convention, invoking the foreign call within the
      <literal>ncurses</literal> library, and finally returning the
      result as an OCaml value.
    </para>
    <programlisting language="ocaml">
(* ncurses.ml 1/3 *)
open Ctypes

type window = unit ptr
let window : window typ = ptr void
</programlisting>
    <para>
      We first define a <literal>window</literal> type to represent the
      C <literal>WINDOW</literal> pointer. The
      <literal>unit ptr</literal> type represents a
      <literal>void *</literal> pointer in C, but we'll constrain the
      signature later on to avoid mixing up different void pointers.
    </para>
    <para>
      We also define a value representing a pointer to the
      <literal>window</literal> type, which can be used later in the
      Ctypes function definitions. The next step is to to build a
      foreign function call to <literal>initscr</literal>.
    </para>
    <programlisting language="ocaml">
(* ncurses.ml 2/3 *)
let initscr =
  foreign &quot;initscr&quot; (void @-&gt; (returning window))
</programlisting>
    <para>
      The <literal>foreign</literal> function is defined takes two
      parameters:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          the C function call name, which is looked up using the
          <emphasis>dlsym(3)</emphasis> linker function.
        </para>
      </listitem>
      <listitem>
        <para>
          a value that defines all the C function arguments and return
          type. Basic C types such as <literal>void</literal> are
          defined as values in <literal>Ctypes</literal> and we defined
          <literal>window</literal> in our own code. The
          <literal>@-&gt;</literal> operator adds an argument to the C
          parameter list, while the <literal>returning</literal>
          function terminates the parameter list with the return type.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The remainder of the Ncurses binding simply expands on these
      definitions.
    </para>
    <programlisting language="ocaml">
(* ncurses.ml 3/3 *)
let endwin =
  foreign &quot;endwin&quot; (void @-&gt; (returning void))

let refresh =
  foreign &quot;refresh&quot; (void @-&gt; (returning void))

let wrefresh =
  foreign &quot;wrefresh&quot; (window @-&gt; (returning void))

let newwin =
  foreign &quot;newwin&quot; 
    (int @-&gt; int @-&gt; int @-&gt; int @-&gt; (returning window))

let mvwaddch =
  foreign &quot;mvwaddch&quot; 
    (window @-&gt; int @-&gt; int @-&gt; char @-&gt; (returning void))

let addstr =
  foreign &quot;addstr&quot; (string @-&gt; (returning void))

let mvwaddstr =
  foreign &quot;mvwaddstr&quot;
    (window @-&gt; int @-&gt; int @-&gt; string @-&gt; (returning void))

let box =
  foreign &quot;box&quot; (window @-&gt; int @-&gt; int @-&gt; (returning void))

let cbreak =
  foreign &quot;cbreak&quot; (void @-&gt; (returning void))
</programlisting>
    <para>
      These definitions are all straightforward mappings from the C
      headers from earlier in the chapter. They use the basic C types
      defined in <literal>Ctypes</literal> such as
      <literal>void</literal> or <literal>int</literal>. The
      <literal>string</literal> value maps from OCaml strings (which
      have a specific length) onto C character buffers (whose length is
      defined by a null characters).
    </para>
    <para>
      The module signature for <literal>ncurses.mli</literal> looks much
      like a normal OCaml signature. You can infer it from
      <literal>ncurses.ml</literal> by running:
    </para>
    <programlisting>
$ ocamlfind ocamlc -i -package ctypes.foreign ncurses.mli 
</programlisting>
    <para>
      We've tweaked the automatic signature to make the
      <literal>type window</literal> abstract, and the result is below:
    </para>
    <programlisting language="ocaml">
type window

val window    : window Ctypes.typ
val initscr   : unit   -&gt; window
val endwin    : unit   -&gt; unit
val refresh   : unit   -&gt; unit
val wrefresh  : window -&gt; unit
val newwin    : int    -&gt; int -&gt; int -&gt; int -&gt; window
val addch     : char   -&gt; unit
val mvwaddch  : window -&gt; int -&gt; int -&gt; char -&gt; unit
val addstr    : string -&gt; unit
val mvwaddstr : window -&gt; int -&gt; int -&gt; string -&gt; unit
val box       : window -&gt; int -&gt; int -&gt; unit
val cbreak    : unit   -&gt; unit
</programlisting>
    <para>
      The <literal>window</literal> type is left abstract in the
      signature so that it can only be constructed via the
      <literal>Ncurses.initscr</literal> function. This makes the
      Ncurses binding safer to use externally, since window pointers
      cannot be mixed up with other <literal>void</literal> pointers
      obtained by other libraries.
    </para>
    <para>
      Here's what a &quot;hello world&quot; that uses the library looks
      like:
    </para>
    <programlisting language="ocaml">
(* hello.ml *)
open Ncurses

let () =
  let main_window = initscr () in
  cbreak ();
  let small_window = newwin 10 10 5 5 in
  mvwaddstr main_window 1 2 &quot;Hello&quot;;
  mvwaddstr small_window 2 2 &quot;World&quot;;
  box small_window 0 0;
  refresh ();
  Unix.sleep 1;
  wrefresh small_window;
  Unix.sleep 5;
  endwin ()
</programlisting>
    <para>
      This code can be compiled by linking against the
      <literal>ctypes</literal> and <literal>ctypes.foreign</literal>
      OCamlfind packages.
    </para>
    <programlisting>
$ ocamlfind ocamlopt -linkpkg -package ctypes.foreign -cclib -lncurses \
    ncurses.mli ncurses.ml hello.ml -o hello
</programlisting>
    <para>
      Running <literal>./hello</literal> should now display a Hello
      World in your terminal!
    </para>
    <para>
      The command-line above includes
      <literal>-cclib -lncurses</literal> to make the OCaml compiler
      link the output to the <literal>ncurses</literal> C library, which
      in turns makes the C symbols available to the program when it
      starts. You should get an error when you run the binary if you
      omit that link directive.
    </para>
    <programlisting>
$ ocamlfind ocamlopt -linkpkg -package ctypes -package unix \
  ncurses.mli ncurses.ml hello.ml -o hello_broken
$ ./hello_broken 
Fatal error: exception Dl.DL_error(&quot;dlsym(RTLD_DEFAULT, initscr): symbol not found&quot;)
</programlisting>
  </sect1>
  <sect1 id="defining-basic-c-formats-from-ocaml">
    <title>Defining basic C formats from OCaml</title>
    <para>
      <literal>Ctypes</literal> wouldn't be very interesting if it were
      limited to only defining basic C types. You can build up more
      complex C structures and unions using it as well.
    </para>
    <sect2 id="defining-basic-scalar-types">
      <title>Defining basic scalar types</title>
      <para>
        Let's go over over some of the basic Ctypes definitions first.
      </para>
      <programlisting language="ocaml">
(* Ctypes 1/4 *)
type 'a typ
</programlisting>
      <para>
        This is the type of values representing C types. There are two
        types associated with each <literal>typ</literal> value: the C
        type used to store and pass values and the corresponding OCaml
        type.
      </para>
      <para>
        The <literal>'a</literal> type parameter indicates the OCaml
        type, so a value of type <literal>t typ</literal> is used to
        read and write OCaml values of type <literal>t</literal>. There
        are various uses of <literal>typ</literal> values within Ctypes.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            constructing function types for binding native functions
            using the <literal>Foreign</literal> module, as shown
            earlier.
          </para>
        </listitem>
        <listitem>
          <para>
            constructing pointers for reading and writing locations in
            C-managed storage using <literal>ptr</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            describing the fields of structured types built with
            <literal>structure</literal> and <literal>union</literal>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Pointers are at the heart of C, so they are necessarily part of
        Ctypes, which provides support for pointer arithmetic, pointer
        conversions, reading and writing through pointers, and passing
        and returning pointers to and from functions. Ctypes also
        provides support for structures and unions.
      </para>
      <informaltable>
        <tgroup cols="2">
          <colspec align="left"/>
          <colspec align="left"/>
          <thead>
            <row>
              <entry>
                Type
              </entry>
              <entry>
                Purpose
              </entry>
            </row>
          </thead>
          <tbody>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        <literal>'a ptr</literal> The type of pointer values, used to
        read and write values of type
        '<literal>a' at particular addresses.</literal>'a
        array<literal>C array</literal>'a
        structure<literal>C</literal>struct<literal>types</literal>'a
        union<literal>C</literal>union<literal>types '</literal>a
        abstract` The type of abstract values, used represent values
        whose type varies from platform to platform.
      </para>
      <para>
        Abstract types are typically used to interface with
        platform-dependent definitions often found in system headers.
        For example, the type <literal>pthread_t</literal> is a pointer
        on some platforms, an integer on other platforms, and a
        <literal>struct</literal> on a third set of platforms. One way
        to deal with this is to have build-time code which interrogates
        the C type in some way to determine an appropriate
        representation. Another way is to use
        <literal>abstract</literal> and leave the representation opaque.
      </para>
      <caution>
      <title>
      Abstract values can't be passed by value
      </title>
      <para>
        Although <literal>pthread_t</literal> is a convenient example
        since the type used to implement it varies significantly across
        platforms, it's not actually a good match for
        <literal>abstract</literal> since values of type
        <literal>pthread_t</literal> are passed and returned by value
        and so can't be fully abstract.
      </para>
      </caution>
      <para>
        Ctypes also defines constructors for the familiar C scalar
        types.
      </para>
      <programlisting language="ocaml">
(* Ctypes.Ffi.C 2/4 *)
val void  : unit typ
val char : char typ
val schar : int typ
val short : int typ
val int   : int typ
val long  : long typ
val llong  : llong typ
val nativeint : nativeint typ

val int8_t : int typ
val int16_t : int typ
val int32_t : int32 typ
val int64_t : int64 typ
val uchar : uchar typ
val uchar : uchar typ
val uint8_t : uint8 typ
val uint16_t : uint16 typ
val uint32_t : uint32 typ
val uint64_t : uint64 typ
val size_t : size_t typ
val ushort : ushort typ
val uint : uint typ
val ulong : ulong typ
val ullong : ullong typ

val float : float typ
val double : float typ
</programlisting>
      <para>
        These return an <literal>'a typ</literal> where the
        <literal>'a</literal> component is the OCaml representation of
        the C type. Some of these mappings are due to OCaml's in-memory
        representation of values, which we explain later in
        <xref linkend="memory-representation-of-values"/>.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Void values appear in OCaml as the <literal>unit</literal>
            type, so using <literal>void</literal> in an argument or
            result type specification produces a function which accepts
            or returns unit. Dereferencing a pointer to
            <literal>void</literal> is an error, as in C, and will raise
            the <literal>IncompleteType</literal> exception.
          </para>
        </listitem>
        <listitem>
          <para>
            The C <literal>size_t</literal> type is an alias for one of
            the unsigned integer types. The actual size and alignment
            requirements for <literal>size_t</literal> varys between
            platforms. Ctypes provides an OCaml
            <literal>size_t</literal> type that is aliased to the
            appropriate integer type.
          </para>
        </listitem>
        <listitem>
          <para>
            OCaml only supports double-precision floating point numbers,
            so the C <literal>float</literal> and
            <literal>double</literal> functions both map to the OCaml
            <literal>float</literal> type.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
    <sect2 id="using-views-to-map-character-buffers">
      <title>Using views to map character buffers</title>
      <para>
        Views create new C type descriptions that have special behaviour
        when used to read or write C values. For instance, the
        <literal>string</literal> view wraps the C type
        <literal>char *</literal> (written as
        <literal>ptr char</literal> in OCaml), and converts between the
        C and OCaml string representations each time the value is
        written or read.
      </para>
      <para>
        The <literal>view</literal> function is predictably used to
        create views, with the following signature.
      </para>
      <programlisting language="ocaml">
val view : read:('a -&gt; 'b) -&gt; write:('b -&gt; 'a) -&gt; 'a typ -&gt; 'b typ
val string_of_char_ptr : char ptr -&gt; string
val char_ptr_of_string : string -&gt; char ptr
val string : string typ
</programlisting>
      <para>
        The definition of <literal>string</literal> uses views as
        follows.
      </para>
      <programlisting language="ocaml">
let string = 
  view 
    ~read:string_of_char_ptr 
    ~write:char_ptr_of_string 
    (char ptr)
</programlisting>
      <para>
        Views can often make slightly awkward C types more natural to
        map into OCaml types.
      </para>
    </sect2>
    <sect2 id="pointers-and-arrays">
      <title>Pointers and arrays</title>
      <programlisting language="ocaml">
(* Ctypes 3/4 *)
val abstract : size:int -&gt; alignment:int -&gt; 'a abstract typ
val array : int -&gt; 'a t -&gt; 'a array typ
val ptr : 'a t -&gt; 'a ptr typ
</programlisting>
      <para>
        Arrays and pointers can be built from basic types by using the
        corresponding <literal>array</literal> and
        <literal>ptr</literal> functions. The
        <literal>abstract</literal> function accepts size and alignment
        requirements and ensures that these are satisfied when this type
        is used in a function call.
      </para>
      <para>
        Notice that the result types of these functions all share the
        same <literal>Ctypes.typ</literal> type that the scalar type
        definitionss. This means that they can be used interchangeably,
        for example to create an <literal>float array typ</literal> to
        represent a buffer of floating-point numbers.
      </para>
    </sect2>
    <sect2 id="assembling-function-declarations">
      <title>Assembling function declarations</title>
      <para>
        The next step is to arrange sets of C types into function
        definitions that match the C function calls. A value of type
        <literal>'a fn</literal> is used to bind to C functions and to
        describe the type of OCaml functions passed to C.
      </para>
      <programlisting language="ocaml">
(* Ctypes.Ffi.C 4/4 *)
type 'a fn
val ( @-&gt; ) : 'a typ -&gt; 'b fn -&gt; ('a -&gt; 'b) fn
val returning : 'a typ -&gt; 'a fn
val funptr : ?name:string -&gt; ('a -&gt; 'b) fn -&gt; ('a -&gt; 'b) typ
</programlisting>
      <para>
        A function is declared by composing sequences of
        <literal>'a typ</literal> values using the
        <literal>@-&gt;</literal> operator, and closing it with
        <literal>returning</literal> to define the return type.
      </para>
      <para>
        The ctypes library, like C itself, distinguishes
        <emphasis>functions</emphasis> and <emphasis>function
        pointers</emphasis>. Functions are not first class: it isn't
        possible to use them as arguments or return values of calls, or
        store them in addressable memory. Function pointers are first
        class, and so have none of these restrictions. Function pointers
        are defined using <literal>funptr</literal> and can be passed
        around as any other <literal>typ</literal> value in argument
        lists.
      </para>
    </sect2>
    <sect2 id="arrays-structures-and-unions">
      <title>Arrays, structures and unions</title>
      <para>
        Arrays in C are contiguous blocks of the same value. Any of the
        basic types defined earlier can be allocated as blocks via the
        <literal>Ctypes.Array</literal> module.
      </para>
      <programlisting language="ocaml">
module Array : sig
  type 'a t = 'a array

  val get : 'a t -&gt; int -&gt; 'a
  val set : 'a t -&gt; int -&gt; 'a -&gt; unit
  val of_list : 'a typ -&gt; 'a list -&gt; 'a t
  val to_list : 'a t -&gt; 'a list
  val length : 'a t -&gt; int
  val start : 'a t -&gt; 'a ptr
  val from_ptr : 'a ptr -&gt; int -&gt; 'a t
  val make : 'a typ -&gt; ?initial:'a -&gt; int -&gt; 'a t
end
</programlisting>
      <para>
        The array functions are similar to the standard library
        <literal>Array</literal> module, except that they represent flat
        C arrays instead of OCaml ones. The conversion between arrays
        and lists still requires copying the values, and can be
        expensive for large data structures. Notice that you can also
        convert an array into a <literal>ptr</literal> pointer to the
        head of buffer, which can be useful if you need to pass the
        pointer and size arguments separately to a C function.
      </para>
      <para>
        Structures in C can contain a mixture of types, and, like OCaml
        records, their order is significant. The
        <literal>Ctypes.Struct</literal> module defines combinators to
        make this definition as easy as using the scalar types.
      </para>
      <para>
        Let's look at an example by binding some time-related UNIX
        functions that use C structures in their interface.
      </para>
      <sect3 id="example-binding-unix-date-functions">
        <title>Example: binding UNIX date functions</title>
        <para>
          The UNIX standard C library defines several useful time and
          date functions in <literal>&lt;time.h&gt;</literal> (usually
          found in <literal>/usr/include</literal> on a Linux or MacOS X
          system). The <literal>localtime</literal> function has the
          following signature and return value:
        </para>
        <programlisting language="c">
/* /usr/include/time.h */

struct tm {
  int     tm_sec;         /* seconds after the minute [0-60] */
  int     tm_min;         /* minutes after the hour [0-59] */
  int     tm_hour;        /* hours since midnight [0-23] */
  int     tm_mday;        /* day of the month [1-31] */
  int     tm_mon;         /* months since January [0-11] */
  int     tm_year;        /* years since 1900 */
  int     tm_wday;        /* days since Sunday [0-6] */
  int     tm_yday;        /* days since January 1 [0-365] */
  int     tm_isdst;       /* Daylight Savings Time flag */
};

time_t time(time_t *);
struct tm *localtime(const time_t *);
</programlisting>
        <para>
          This example is more complicated than ncurses for a couple of
          reasons. We need to allocate some external memory to store a
          <literal>time_t</literal> value, and pass that memory into the
          <literal>time</literal> library call to obtain the current
          timezone. This <literal>time_t</literal> value is passed to
          the <literal>localtime</literal> library call, which then
          returns a pointer to the <literal>struct tm</literal>.
        </para>
        <para>
          The <literal>time_t</literal> and many other standard POSIX
          types are already provided by the
          <literal>Ffi.PosixTypes</literal> module. Let's start by
          defining the OCaml mapping to <literal>struct tm</literal>:
        </para>
        <programlisting language="ocaml">
(* ffi_date.ml *)
open Ctypes
open PosixTypes

type tm
let tm = structure &quot;tm&quot;
let tm_sec   = tm *:* int (* seconds *)
let tm_min   = tm *:* int (* minutes *)
let tm_hour  = tm *:* int (* hours *)
let tm_mday  = tm *:* int (* day of the month *)
let tm_mon   = tm *:* int (* month *)
let tm_year  = tm *:* int (* year *)
let tm_wday  = tm *:* int (* day of the week *)
let tm_yday  = tm *:* int (* day in the year *)
let tm_isdst = tm *:* int (* daylight saving time *)
let () = seal (tm : tm structure typ)
</programlisting>
        <para>
          This code looks like a fairly mechanical translation from the
          C structure definition thanks to the magic of the Ctypes
          <literal>*:*</literal> combinator.
        </para>
        <para>
          The <literal>tm</literal> structure is initialised via the
          <literal>structure</literal> allocator and its fields are
          added sequentially. Every invocation of <literal>*:*</literal>
          mutates <literal>tm</literal> to record its type and offset
          within the structure. The structure is finalized via
          <literal>seal</literal> after all the fields have been added.
          A sealed structure has a concrete size and alignment and can
          now be used in other type definition.
        </para>
        <para>
          The OCaml definitions of <literal>time</literal> and
          <literal>localtime</literal> are now straightforward calls to
          <literal>foreign</literal>, just like our earlier
          <literal>ncurses</literal> example.
        </para>
        <programlisting language="ocaml">
open Foreign

let time =
  foreign &quot;time&quot; (ptr time_t @-&gt; returning_checking_errno time_t)

let asctime =
  foreign &quot;asctime&quot; (ptr tm @-&gt; returning string)

let localtime =
  foreign &quot;localtime&quot; (ptr time_t @-&gt; returning (ptr tm))
</programlisting>
        <para>
          The OCaml signature for this definition looks like this:
        </para>
        <programlisting language="ocaml">
(* ffi_date.mli *)

open Ctypes
open PosixTypes

type tm
val tm_sec : (int, tm structure) field
val tm_min : (int, tm structure) field
val tm_hour : (int, tm structure) field
val tm_mday : (int, tm structure) field
val tm_mon : (int, tm structure) field
val tm_year : (int, tm structure) field
val tm_wday : (int, tm structure) field
val tm_yday : (int, tm structure) field
val tm_isdst : (int, tm structure) field

val time : time_t ptr -&gt; time_t
val asctime : tm structure ptr -&gt; string
val localtime : time_t ptr -&gt; tm structure ptr
</programlisting>
        <para>
          The structure fields are exposed as separate values to provide
          a way to extract their values from a buffer at runtime. Let's
          see how to tie these functions together.
        </para>
        <programlisting language="ocaml">
let () = begin
  let timep = allocate_n ~count:1 time_t in
  let time = time timep in
  assert (time = !@timep);
  let tm = localtime timep in
  Printf.printf &quot;tm.tm_mon  = %d\n&quot; (getf !@tm tm_mon);
  Printf.printf &quot;tm.tm_year = %d\n&quot; (getf !@tm tm_year);
  print_endline (asctime tm)
end
</programlisting>
        <para>
          The <literal>allocate_n</literal> is analagous to a type-safe
          version of the POSIX <literal>calloc</literal> function. The
          freshly allocated <literal>timep</literal> buffer is
          automatically garbage collected as usual when it's no longer
          referenced within the OCaml code.
        </para>
        <para>
          The <literal>timep</literal> pointer is passed into the
          <literal>time</literal> library call which modifies it
          in-place (and, due to a quirky historical interface, also
          returns a pointer to the same buffer). This duplicated return
          value gives us an excuse to try out the <literal>!@</literal>
          operator, which dereferences the structure pointer and
          provides access to the structure value.
        </para>
        <para>
          The same <literal>timep</literal> pointer is subsequently
          passed to <literal>localtime</literal>, which returns a
          pointer to a <literal>tm</literal> structure. We dereference a
          couple of its fields and print them from OCaml, and then pass
          it to <literal>asctime</literal> to print a nice
          human-readable time.
        </para>
        <sidebar>
        <title>
        Why do we need to use <literal>returning</literal>?
        </title>
        <para>
          The alert reader may be curious why all these function
          definitions have to be terminated by
          <literal>returning</literal>.
        </para>
        <programlisting language="ocaml">
val time: ptr time_t @-&gt; returning time_t
val difftime: time_t @-&gt; time_t @-&gt; returning double
</programlisting>
        <para>
          The <literal>returning</literal> function may appear
          superfluous here. Why couldn't we simply give the types as
          follows?
        </para>
        <programlisting language="ocaml">
val time: ptr time_t @-&gt; time_t
val difftime: time_t @-&gt; time_t @-&gt; double
</programlisting>
        <para>
          The reason involves higher types and two differences between
          the way that functions are treated in OCaml and C. Functions
          are first-class values in OCaml, but not in C. For example, in
          C, it is possible to return a function pointer from a
          function, but not to return an actual function.
        </para>
        <para>
          Secondly, OCaml functions are typically defined in a curried
          style. The signature of a two-argument function is written as
          follows:
        </para>
        <programlisting language="ocaml">
val curried : int -&gt; int -&gt; int
</programlisting>
        <para>
          but this really means
        </para>
        <programlisting language="ocaml">
val curried : int -&gt; (int -&gt; int)
</programlisting>
        <para>
          and the arguments can be supplied one at a time to create a
          closure. In contrast, C functions receive their arguments all
          at once. The equivalent C function type is the following:
        </para>
        <programlisting language="c">
int uncurried_C(int, int);
</programlisting>
        <para>
          and the arguments must always be supplied together:
        </para>
        <programlisting language="c">
uncurried_C(3, 4);
</programlisting>
        <para>
          A C function that's written in curried style looks very
          different:
        </para>
        <programlisting language="c">
/* A function that accepts an int, and returns a function pointer that
   accepts a second int and returns an int. */
typedef int (function_t)(int);
function_t *curried_C(int);

/* supply both arguments */
curried_C(3)(4);

/* supply one argument at a time */
function_t *f = curried_C(3); f(4);
</programlisting>
        <para>
          The OCaml type of <literal>uncurried_C</literal> when bound by
          Ctypes is <literal>int -&gt; int -&gt; int</literal>: a
          two-argument function. The OCaml type of
          <literal>curried_C</literal> when bound by
          <literal>ctypes</literal> is
          <literal>int -&gt; (int -&gt; int)</literal>: a one-argument
          function that returns a one-argument function.
        </para>
        <para>
          In OCaml, of course, these types are absolutely equivalent.
          Since the OCaml types are the same but the C semantics are
          quite different, we need some kind of marker to distinguish
          the cases. This is the purpose of <literal>returning</literal>
          in function definitions.
        </para>
        </sidebar>
        <para>
          Unions in C are named structures that can be mapped onto the
          same underlying memory. They are also fully supported in in
          Ctypes, but we won't go into more detail here.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 id="callbacks-between-c-and-ocaml">
    <title>Callbacks between C and OCaml</title>
    <para>
    </para>
  </sect1>
</chapter><chapter id="memory-representation-of-values">
  <title>Memory Representation of Values</title>
  <para>
    The FFI interface we described in
    <xref linkend="foreign-function-interface"/> hides the
    precise details of how values are exchanged across C libraries and
    the OCaml runtime. There is a simple reason for this: using this
    interface directly is a delicate operation that requires
    understanding a few different moving parts before you can get it
    right. You first need to know the mapping between OCaml types and
    their runtime memory representation. You also need to ensure that
    your code is interfacing correctly with OCaml runtime's memory
    management.
  </para>
  <para>
    However, knowledge of the OCaml internals is useful beyond just
    writing foreign function interfaces. As you build and maintain more
    complex OCaml applications, you'll need to interface with various
    external system tools that operate on compiled OCaml binaries. For
    example, profiling tools report output based on the runtime memory
    layout and debuggers execute binaries without any knowledge of the
    static OCaml types. To use these tools effectively, you'll need to
    do some translation between the OCaml and C worlds.
  </para>
  <para>
    Luckily, the OCaml toolchain is very predictable. The compiler
    minimizes the amount of optimization magic that it performs, and
    relies instead on its straightforward execution model for good
    performance. With some experience, you can know rather precisely
    where a block of performance-critical OCaml code is spending its
    time.
  </para>
  <note>
  <title>
  Why do OCaml types disappear at runtime?
  </title>
  <para>
    The OCaml compiler runs through several phases during the
    compilation process. The first phase is syntax checking, during
    which source files are parsed into Abstract Syntax Trees (ASTs). The
    next stage is a <emphasis>type checking</emphasis> pass over the
    AST. In a validly typed program, a function cannot be applied with
    an unexpected type. For example, the
    <literal>print_endline</literal> function must receive a single
    <literal>string</literal> argument, and an <literal>int</literal>
    will result in a type error.
  </para>
  <para>
    Since OCaml verifies these properties at compile time, it doesn't
    need to keep track of as much information at runtime. Thus, later
    stages of the compiler can discard and simplify the type
    declarations to a much more minimal subset that's actually required
    to distinguish polymorphic values at runtime. This is a major
    performance win versus something like a Java or .NET method call,
    where the runtime must look up the concrete instance of the object
    and dispatch the method call. Those languages amortize some of the
    cost via &quot;Just-in-Time&quot; dynamic patching, but OCaml
    prefers runtime simplicity instead.
  </para>
  <para>
    TODO xref to pipeline chapter.
  </para>
  </note>
  <para>
    This chapter covers the precise mapping from OCaml types to runtime
    values and walks you through them via the toplevel. We'll cover how
    these values are managed by the runtime later on in
    <xref linkend="understanding-the-garbage-collector"/>.
  </para>
  <sect1 id="ocaml-blocks-and-values">
    <title>OCaml blocks and values</title>
    <para>
      A running OCaml program uses blocks of memory (i.e. contiguous
      sequences of words in RAM) to represent values such as tuples,
      records, closures or arrays. An OCaml program implicitly allocates
      a block of memory when such a value is created.
    </para>
    <programlisting language="ocaml">
# let x = { foo = 13; bar = 14 } ;;
</programlisting>
    <para>
      An expression such as the record above requires a new block of
      memory with two words of available space. One word holds the
      <literal>foo</literal> field and the second word holds the
      <literal>bar</literal> field. The OCaml compiler translates such
      an expression into an explicit allocation for the block from
      OCaml's runtime system.
    </para>
    <para>
      OCaml uses a uniform memory representation for every OCaml
      variable known as a <literal>value</literal>. An OCaml value is a
      single memory word that is either an immediate integer or a
      pointer to some other memory. The OCaml runtime tracks all values
      so that it can free them when they are no longer needed. It thus
      needs to understand the difference an integer and a pointer since
      it scans pointers to find further values, but doesn't follow
      integers that don't point to anything meaningful beyond their
      immediate value.
    </para>
    <sect2 id="distinguishing-integer-and-pointers-at-runtime">
      <title>Distinguishing integer and pointers at runtime</title>
      <para>
        Values use a single tag bit the word to distinguish integers and
        pointers at runtime. The value is an integer if the lowest bit
        of the block word is non-zero. Several OCaml types map onto this
        integer representation, including <literal>bool</literal>,
        <literal>int</literal>, the empty list, <literal>unit</literal>,
        and variants without constructors.
      </para>
      <para>
        Integers are unboxed runtime values in OCaml, which means that
        they can be stored directly without having to allocate a wrapper
        block that will take up more memory. They can also be passed
        directly to other function calls in registers, and are generally
        the cheapest and fastest values to use in OCaml.
      </para>
      <para>
        The value is treated as a memory pointer if the lowest bit of
        the <literal>value</literal> is zero. A pointer value is stored
        unmodified since pointers are guaranteed to be word-aligned with
        the bottom bits always being zero. The next problem is
        distinguishing between pointers to OCaml values (which should be
        followed by the garbage collector) and pointers into the system
        heap to C values (which shouldn't be followed).
      </para>
      <para>
        The mechanism for this is simple since the runtime system keeps
        track of the heap blocks it has allocated for OCaml values. If
        the pointer is inside a heap chunk that is marked as being
        managed by the OCaml runtime, it is assumed to point to an OCaml
        value. If it points outside the OCaml runtime area, it is is
        treated as an opaque C pointer to some other system resource.
      </para>
      <note>
      <title>
      Some history about OCaml's word-aligned pointers
      </title>
      <para>
        The alert reader may be wondering how OCaml can guarantee that
        all of its pointers are word-aligned. In the old days when RISC
        chips such as Sparc, MIPS and Alpha were commonplace, unaligned
        memory accesses were forbidden by the instruction set
        architecture and would result in a CPU exception that terminated
        the program. Thus, all pointers were historically rounded off to
        the architecture word-size (usually 32- or 64-bits).
      </para>
      <para>
        Modern CISC processors such as the Intel x86 do support
        unaligned memory accesses, but the chip still runs faster if
        accesses are word-aligned. OCaml therefore simply mandates that
        all pointers be word-aligned, which guarantees that the bottom
        few bits of any valid pointer will be zero. Setting the bottom
        bit to a non-zero value is a simple way to mark an integer, at
        the cost of losing that single bit of precision.
      </para>
      <para>
        An even more alert reader will be wondering about the
        performance implications are for integer arithmetic using this
        tagged representation. Since the bottom bit is set, any
        operation on the integer has to shift the bottom bit right to
        recover the &quot;native&quot; value. The native code OCaml
        compiler generates efficient x86 assembly code in this case. It
        takes advantage of modern processor instructions to hide the
        extra shifts as much as possible. Addition and substraction are
        a single instruction, and multiplication is only a few more.
      </para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="blocks-and-values">
    <title>Blocks and values</title>
    <para>
      An OCaml <emphasis>block</emphasis> is the basic unit of
      allocation on the heap. A block consists of a one-word header
      (either 32- or 64-bits) followed by variable-length data that is
      either opaque bytes or an array of <emphasis>fields</emphasis>.
      The header has a multi-purpose tag byte that defines whether to
      interprete the subsequent data as opaque bytes or OCaml fields.
    </para>
    <para>
      The garbage collector never inspects opaque bytes. If the tag
      indicates an array of OCaml fields are present, their contents are
      all treated as more valid OCaml values. The garbage collector
      always inspects fields and follows them as part of the collection
      process described earlier.
    </para>
    <programlisting>
+------------------------+-------+----------+----------+----------+----
| size of block in words |  col  | tag byte | value[0] | value[1] | ...
+------------------------+-------+----------+----------+----------+----
 &lt;-either 22 or 54 bits-&gt; &lt;2 bit&gt; &lt;--8 bit--&gt;
</programlisting>
    <para>
      The <literal>size</literal> field records the length of the block
      in memory words. This is 22 bits on 32-bit platforms, which is the
      reason why OCaml strings are limited to 16MB on that architecture.
      If you need bigger strings, either switch to a 64-bit host, or use
      the <literal>Bigarray</literal> module.
    </para>
    <para>
      The 2-bit <literal>color</literal> field is used by the garbage
      collector to keep track of its state during mark-and-sweep
      collection. We'll come back to this field in
      <xref linkend="understanding-the-garbage-collector"/>.
      This tag isn't exposed to OCaml source code in any case.
    </para>
    <para>
      A block's tag byte is multi-purpose, and indicates whether the
      data array represents opaque bytes or fields. If a block's tag is
      greater than or equal to <literal>No_scan_tag</literal> (251),
      then the block's data are all opaque bytes, and are not scanned by
      the collector. The most common such block is the
      <literal>string</literal> type, which we describe more below.
    </para>
    <para>
      The exact representation of values inside a block depends on their
      static OCaml type. All OCaml types are distilled down into
      <literal>values</literal>, and summarised in the table below.
    </para>
    <informaltable>
      <tgroup cols="2">
        <colspec align="left"/>
        <colspec align="left"/>
        <thead>
          <row>
            <entry>
              OCaml Value
            </entry>
            <entry>
              Representation
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <literal>int</literal> or <literal>char</literal>
            </entry>
            <entry>
              directly as a value, shifted left by 1 bit, with the least
              significant bit set to 1
            </entry>
          </row>
          <row>
            <entry>
              <literal>unit</literal>, <literal>[]</literal>,
              <literal>false</literal>
            </entry>
            <entry>
              as OCaml <literal>int</literal> 0.
            </entry>
          </row>
          <row>
            <entry>
              <literal>true</literal>
            </entry>
            <entry>
              as OCaml <literal>int</literal> 1.
            </entry>
          </row>
          <row>
            <entry>
              <literal>Foo | Bar</literal>
            </entry>
            <entry>
              as ascending OCaml <literal>int</literal>s, starting from
              0.
            </entry>
          </row>
          <row>
            <entry>
              <literal>Foo | Bar of int</literal>
            </entry>
            <entry>
              variants with parameters are boxed, while variants with no
              parameters are unboxed.
            </entry>
          </row>
          <row>
            <entry>
              polymorphic variants
            </entry>
            <entry>
              variable space usage depending on the number of
              parameters.
            </entry>
          </row>
          <row>
            <entry>
              floating point number
            </entry>
            <entry>
              as a block with a single field containing the
              double-precision float.
            </entry>
          </row>
          <row>
            <entry>
              string
            </entry>
            <entry>
              word-aligned byte arrays that are also directly compatible
              with C strings.
            </entry>
          </row>
          <row>
            <entry>
              <literal>[1; 2; 3]</literal>
            </entry>
            <entry>
              as <literal>1::2::3::[]</literal> where
              <literal>[]</literal> is an int, and
              <literal>h::t</literal> a block with tag 0 and two
              parameters.
            </entry>
          </row>
          <row>
            <entry>
              tuples, records and arrays
            </entry>
            <entry>
              an array of values. Arrays can be variable size, but
              structs and tuples are fixed size.
            </entry>
          </row>
          <row>
            <entry>
              records or arrays, all float
            </entry>
            <entry>
              special tag for unboxed arrays of floats, or records that
              only have <literal>float</literal> fields.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <sect2 id="integers-characters-and-other-basic-types">
      <title>Integers, characters and other basic types</title>
      <para>
        Many basic types are efficiently stored as unboxed integers at
        runtime. The native <literal>int</literal> type is the most
        obvious, although it drops a single bit of precision due to the
        tag bit. Other atomic types such as <literal>unit</literal> and
        empty list <literal>[]</literal> value are stored as constant
        integers. Boolean values have a value of <literal>0</literal>
        and <literal>1</literal> for <literal>true</literal> and
        <literal>false</literal> respectively.
      </para>
      <para>
        These basic types such as empty lists and
        <literal>unit</literal> are very efficient to use since integers
        are never allocated on the heap. They can be passed directly in
        registers and not appear on the stack if you don't have too many
        parameters to your functions. Modern architectures as as
        <literal>x86_64</literal> have a lot of spare registers to
        further improve the efficiency of using unboxed integers.
      </para>
    </sect2>
  </sect1>
  <sect1 id="tuples-records-and-arrays">
    <title>Tuples, records and arrays</title>
    <programlisting>
+---------+----------+----------- - - - - 
| header  | value[0] | value[1] | ....
+---------+----------+----------+- - - - -
</programlisting>
    <para>
      Tuples, records and arrays are all represented identically at
      runtime as a block with tag <literal>0</literal>. Tuples and
      records have constant sizes determined at compile-time, whereas
      arrays can be of variable length. While arrays are restricted to
      containing a single type of element in the OCaml type system, this
      is not required by the memory representation.
    </para>
    <para>
      You can check the difference between a block and a direct integer
      yourself using the <literal>Obj</literal> module, which exposes
      the internal representation of values to OCaml code.
    </para>
    <programlisting language="ocaml">
# Obj.is_block (Obj.repr (1,2,3)) ;;
- : bool = true
# Obj.is_block (Obj.repr 1) ;;
- : bool = false
</programlisting>
    <para>
      The <literal>Obj.repr</literal> function retrieves the runtime
      representation of any OCaml value. <literal>Obj.is_block</literal>
      checks the bottom bit to determine if the value is a block header
      or an unboxed integer.
    </para>
    <sect2 id="floating-point-numbers-and-arrays">
      <title>Floating point numbers and arrays</title>
      <para>
        Floating point numbers in OCaml are always stored as full
        double-precision values. Individual floating point values are
        stored as a block with a single field that contains the number.
        This block has the <literal>Double_tag</literal> set which
        signals to the collector that the floating point value is not to
        be scanned.
      </para>
      <programlisting language="ocaml">
# Obj.tag (Obj.repr 1.0) = Obj.double_tag ;;
- : int = 253
# Obj.double_tag ;;
- : int = 253
</programlisting>
      <para>
        Since each floating-point value is boxed in a separate memory
        block, it can be inefficient to handle large arrays of floats in
        comparison to unboxed integers. OCaml therefore special-cases
        records or arrays that contain <emphasis>only</emphasis>
        <literal>float</literal> types. These are stored in a block that
        contains the floats packed directly in the data section, with
        the <literal>Double_array_tag</literal> set to signal to the
        collector that the contents are not OCaml values.
      </para>
      <programlisting>
+---------+----------+----------- - - - - 
| header  | float[0] | float[1] | ....
+---------+----------+----------+- - - - -
</programlisting>
      <para>
        You can test this for yourself using the
        <literal>Obj.tag</literal> function to check that the allocated
        block has the expected runtime tag, and
        <literal>Obj.double_field</literal> to retrieve a float from
        within the block.
      </para>
      <programlisting language="ocaml">
# open Obj ;;
# tag (repr [| 1.0; 2.0; 3.0 |]) ;;
- : int = 254
# tag (repr (1.0, 2.0, 3.0) ) ;;
- : int = 0 
# double_field (repr [| 1.1; 2.2; 3.3 |] ) 1 ;;
- : float = 2.2
# Obj.double_field (Obj.repr 1.234) 0;;
- : float = 1.234
</programlisting>
      <para>
        Notice that float tuples are <emphasis>not</emphasis> optimized
        in the same way as float records or arrays, and so they have the
        usual tuple tag value of <literal>0</literal>. Only records and
        arrays can have the array optimization, and only if every single
        field is a float.
      </para>
    </sect2>
  </sect1>
  <sect1 id="variants-and-lists">
    <title>Variants and lists</title>
    <para>
      Basic variant types with no extra parameters for any of their
      branches are simply stored as an OCaml integer, starting with
      <literal>0</literal> for the first option and in ascending order.
    </para>
    <programlisting language="ocaml">
# open Obj ;;
# type t = Apple | Orange | Pear ;;
type t = Apple | Orange | Pear
# ((magic (repr Apple)) : int) ;;
- : int = 0
# ((magic (repr Pear)) : int) ;;
- : int = 2
# is_block (repr Apple) ;;
- : bool = false
</programlisting>
    <para>
      <literal>Obj.magic</literal> unsafely forces a type cast between
      any two OCaml types; in this example the <literal>int</literal>
      type hint retrieves the runtime integer value. The
      <literal>Obj.is_block</literal> confirms that the value isn't a
      more complex block, but just an OCaml <literal>int</literal>.
    </para>
    <para>
      Variants that have parameters arguments are a little more complex.
      They are stored as blocks, with the value
      <emphasis>tags</emphasis> ascending from 0 (counting from leftmost
      variants with parameters). The parameters are stored as words in
      the block.
    </para>
    <programlisting language="ocaml">
# type t = Apple | Orange of int | Pear of string | Kiwi ;;
type t = Apple | Orange of int | Pear of string | Kiwi
# is_block (repr (Orange 1234)) ;;
- : bool = true
# tag (repr (Orange 1234)) ;; 
- : int = 0
# tag (repr (Pear &quot;xyz&quot;)) ;;
- : int = 1
# (magic (field (repr (Orange 1234)) 0) : int) ;;
- : int = 1234
(magic (field (repr (Pear &quot;xyz&quot;)) 0) : string) ;;
- : string = &quot;xyz&quot;
</programlisting>
    <para>
      In the above example, the <literal>Apple</literal> and
      <literal>Kiwi</literal> values are still stored as normal OCaml
      integers with values <literal>0</literal> and <literal>1</literal>
      respectively. The <literal>Orange</literal> and
      <literal>Pear</literal> values both have parameters, and are
      stored as blocks whose tags ascend from <literal>0</literal> (and
      so <literal>Pear</literal> has a tag of <literal>1</literal>, as
      the use of <literal>Obj.tag</literal> verifies). Finally, the
      parameters are fields which contain OCaml values within the block,
      and <literal>Obj.field</literal> can be used to retrieve them.
    </para>
    <para>
      Lists are stored with a representation that is exactly the same as
      if the list was written as a variant type with
      <literal>Head</literal> and <literal>Cons</literal>. The empty
      list <literal>[]</literal> is an integer <literal>0</literal>, and
      subsequent blocks have tag <literal>0</literal> and two
      parameters: a block with the current value, and a pointer to the
      rest of the list.
    </para>
    <warning>
    <title>
    <literal>Obj</literal> module considered harmful
    </title>
    <para>
      The <literal>Obj</literal> module is an undocumented module that
      exposes the internals of the OCaml compiler and runtime. It is
      very useful for examining and understanding how your code will
      behave at runtime, but should <emphasis>never</emphasis> be used
      for production code unless you understand the implications. The
      module bypasses the OCaml type system, making memory corruption
      and segmentation faults possible.
    </para>
    <para>
      Some theorem provers such as Coq do output code which uses
      <literal>Obj</literal> internally, but the external module
      signatures never expose it. Unless you too have a machine proof of
      correctness to accompany your use of <literal>Obj</literal>, stay
      away from it except for debugging!
    </para>
    </warning>
    <para>
      Due to this encoding, there is a limit around 240 variants with
      parameters that applies to each type definition, but the only
      limit on the number of variants without parameters is the size of
      the native integer (either 31- or 63-bits). This limit arises
      because of the size of the tag byte, and that some of the high
      numbered tags are reserved.
    </para>
  </sect1>
  <sect1 id="polymorphic-variants-1">
    <title>Polymorphic variants</title>
    <para>
      Polymorphic variants are more flexible than normal variants when
      writing code, but are slightly less efficient at runtime. This is
      because there isn't as much static compile-time information
      available to optimise their memory layout.
    </para>
    <para>
      A polymorphic variant without any parameters is stored as an
      unboxed integer and so only takes up one word of memory, just like
      a normal variant. This integer value is determined by applying a
      hash function to the <emphasis>name</emphasis> of the variant. The
      hash function isn't exposed directly by the compiler, but the
      <literal>type_conv</literal> library from Core provides an
      alternative implementation.
    </para>
    <programlisting language="ocaml">
# #require &quot;type_conv&quot; ;;
# Pa_type_conv.hash_variant &quot;Foo&quot; ;;
- : int = 3505894
# (Obj.magic (Obj.repr `Foo) : int) ;;
- : int = 3505894
</programlisting>
    <para>
      The hash function is designed to give the same results on 32-bit
      and 64-bit architectures, so the memory representation is stable
      across different CPUs and host types.
    </para>
    <para>
      Polymorphic variants use more memory space than normal variants
      when parameters are included in the datatype constructors. Normal
      variants use the tag byte to encode the variant value and save the
      fields for the contents, but this single byte is insufficient to
      encode the hashed value for polymorphic variants. They must
      allocate a new block (with tag <literal>0</literal>) and store the
      value in there instead. Polymorphic variants with constructors
      thus use one word of memory more than normal variant constructors.
    </para>
    <para>
      Another inefficiency over normal variants is when a polymorphic
      variant constructor has more than one parameter. Normal variants
      hold parameters as a single flat block with multiple fields for
      each entry, but polymorphic variants must adopt a more flexible
      uniform memory representation since they may be re-used in a
      different context across compilation units. They allocate a tuple
      block for the parameters that is pointed to from the argument
      field of the variant. There are thus three additional words for
      such variants, along with an extra memory indirection due to the
      tuple.
    </para>
    <para>
      The extra space usage is generally not significant in a typical
      application, and polymorphic variants offer a great deal more
      flexibility than normal variants. However, if you're writing code
      that demands high performance or must run within tight memory
      bounds, the runtime layout is at least very predictable. The OCaml
      compiler never switches memory representation due to optimization
      passes. This lets you predict the precise runtime layout by
      referring to these guidelines and your source code.
    </para>
  </sect1>
  <sect1 id="string-values">
    <title>String values</title>
    <para>
      Strings are standard OCaml blocks with the header size defining
      the size of the string in machine words. The
      <literal>String_tag</literal> (252) is higher than the
      <literal>No_scan_tag</literal>, indicating that the contents of
      the block are opaque to the collector. The block contents are the
      contents of the string, with padding bytes to align the block on a
      word boundary.
    </para>
    <programlisting language="ocaml">
+---------------+----------------+--------+-----------+
| header        | 'a' 'b' 'c' 'd' 'e' 'f' | '\O' '\1' |
+---------------+----------------+--------+-----------+
                L data                    L padding
</programlisting>
    <para>
      On a 32-bit machine, the padding is calculated based on the modulo
      of the string length and word size to ensure the result is
      word-aligned. A 64-bit machine extends the potential padding up to
      7 bytes instead of 3.
    </para>
    <informaltable>
      <tgroup cols="2">
        <colspec align="left"/>
        <colspec align="left"/>
        <thead>
          <row>
            <entry>
              String length mod 4
            </entry>
            <entry>
              Padding
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              0
            </entry>
            <entry>
              <literal>00 00 00 03</literal>
            </entry>
          </row>
          <row>
            <entry>
              1
            </entry>
            <entry>
              <literal>00 00 02</literal>
            </entry>
          </row>
          <row>
            <entry>
              2
            </entry>
            <entry>
              <literal>00 01</literal>
            </entry>
          </row>
          <row>
            <entry>
              3
            </entry>
            <entry>
              <literal>00</literal>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      This string representation is a clever way to ensure that the
      contents are always zero-terminated by the padding word, and still
      compute its length efficiently without scanning the whole string.
      The following formula is used:
    </para>
    <programlisting>
number_of_words_in_block * sizeof(word) - last_byte_of_block - 1
</programlisting>
    <para>
      The guaranteed <literal>NULL</literal>-termination comes in handy
      when passing a string to C, but is not relied upon to compute the
      length from OCaml code. OCaml strings can thus contain
      <literal>NULL</literal> bytes at any point within the string. Care
      should be taken that any C library functions that receive these
      buffers can cope with arbitrary <literal>NULL</literal> values
      within the buffer contents.
    </para>
  </sect1>
  <sect1 id="custom-heap-blocks">
    <title>Custom heap blocks</title>
    <para>
      OCaml supports <emphasis>custom</emphasis> heap blocks via a
      <literal>Custom_tag</literal> that let the runtime perform
      user-defined operations over OCaml values. A custom block lives in
      the OCaml heap like an ordinary block and can be of whatever size
      the user desires. The <literal>Custom_tag</literal> (255) is
      higher than <literal>No_scan_tag</literal> and so isn't scanned by
      the garbage collector.
    </para>
    <para>
      The first word of the data within the custom block is a C pointer
      to a <literal>struct</literal> of custom operations. The custom
      block cannot have pointers to OCaml blocks and is opaque to the
      garbage collector.
    </para>
    <programlisting language="c">
struct custom_operations {
  char *identifier;
  void (*finalize)(value v);
  int (*compare)(value v1, value v2);
  intnat (*hash)(value v);
  void (*serialize)(value v,
                    /*out*/ uintnat * wsize_32 /*size in bytes*/,
                    /*out*/ uintnat * wsize_64 /*size in bytes*/);
  uintnat (*deserialize)(void * dst);
  int (*compare_ext)(value v1, value v2);
};
</programlisting>
    <para>
      The custom operations specify how the runtime should perform
      polymorphic comparison, hashing and binary marshalling. They also
      optionally contain a <emphasis>finalizer</emphasis> that the
      runtime calls just before the block is garbage collected. This
      finalizer has nothing to do with ordinary OCaml finalizers (as
      created by <literal>Gc.finalise</literal> and explained in
      <xref linkend="understanding-the-garbage-collector"/>).
      They are instead used to call C cleanup functions such as
      <literal>free</literal>.
    </para>
    <sect2 id="managing-external-memory-with-bigarray">
      <title>Managing external memory with Bigarray</title>
      <para>
        A common use of custom blocks is to manage external system
        memory directly from within OCaml. The Bigarray interface was
        originally intended to exchange data with Fortran code, and maps
        a block of system memory as a multi-dimensional array that can
        be accessed from OCaml. Bigarray operations work directly on the
        external memory without requiring it to be copied into the OCaml
        heap (which is a potentially expensive operation for large
        arrays).
      </para>
      <para>
        Bigarray sees a lot of use beyond just scientific computing, and
        several Core libraries use it for general-purpose I/O:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            The <literal>Iobuf</literal> module maps I/O buffers as a
            1-dimensional array of bytes. It provides a sliding window
            interface that lets consumer processes read from the buffer
            while it's being filled by producers. This lets OCaml use
            I/O buffers that have been externally allocated by the
            operating system without any extra data copying.
          </para>
        </listitem>
        <listitem>
          <para>
            The <literal>Bigstring</literal> module provides a
            <literal>String</literal>-like interface that uses
            <literal>Bigarray</literal> internally. The
            <literal>Bigbuffer</literal> collects these into extensible
            string buffers that can operate entirely on external system
            memory.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The
        <ulink url="https://bitbucket.org/mmottl/lacaml">Lacaml</ulink>
        library isn't part of Core, but provides the recommended
        interfaces to the widely used BLAS and LAPACK mathematical
        Fortran libraries. These allow developers to write
        high-performance numerical code for applications that require
        linear algebra. It supports large vectors and matrices, but with
        static typing safety of OCaml to make it easier to write safe
        algorithms.
      </para>
    </sect2>
  </sect1>
</chapter><chapter id="understanding-the-garbage-collector">
  <title>Understanding the Garbage Collector</title>
  <para>
    We've described the runtime format of individual OCaml variables
    earlier in
    <xref linkend="memory-representation-of-values"/>. When
    you execute your program, OCaml manages the lifecycle of these
    variables by regularly scanning allocated values and freeing them
    when they're no longer needed. This in turn means that your
    applications don't need to manually implement memory management and
    greatly reduces the likelihood of memory leaks creeping into your
    code.
  </para>
  <para>
    The OCaml runtime is a C library that provides routines that can be
    called from running OCaml programs. The runtime manages a
    <emphasis>heap</emphasis>, which is a collection of memory regions
    that it obtains from the operating system. The runtime uses this
    memory to hold <emphasis>heap blocks</emphasis> that it fills up
    with OCaml values in response to allocation requests by the OCaml
    program.
  </para>
  <sect1 id="mark-and-sweep-garbage-collection">
    <title>Mark and sweep garbage collection</title>
    <para>
      When there isn't enough memory available to satisfy an allocation
      request from the pool of allocated heap blocks, the runtime system
      invokes the <emphasis>garbage collector</emphasis> (or GC). An
      OCaml program can't explicitly free a value when it is done with
      it. Instead, the GC regularly determines which values are
      <emphasis>live</emphasis> and which values are
      <emphasis>dead</emphasis>, i.e. no longer in use. Dead values are
      collected and their memory made available for re-use by the
      application.
    </para>
    <para>
      The garbage collector doesn't keep constant track of values as
      they are allocated and used. Instead, it regularly scans them by
      starting from a set of <emphasis>root</emphasis> values that the
      application always has access to (such as the stack). The GC
      maintains a directed graph in which heap blocks are nodes, and
      there is an edge from heap block <literal>b1</literal> to heap
      block <literal>b2</literal> if some field of <literal>b1</literal>
      points to <literal>b2</literal>. All blocks reachable from the
      roots by following edges in the graph must be retained, and
      unreachable blocks can be reused by the application. This strategy
      is commonly known as <emphasis>mark and sweep</emphasis> garbage
      collection.
    </para>
  </sect1>
  <sect1 id="generational-garbage-collection">
    <title>Generational garbage collection</title>
    <para>
      The usual OCaml programming style involves allocating many small
      variables that are used for a short period of time and then never
      accessed again. OCaml takes advantage of this fact to improve
      performance by using a <emphasis>generational</emphasis> garbage
      collector.
    </para>
    <para>
      A generational GC maintains separate memory regions to hold blocks
      based on how long the blocks have been live. OCaml's heap is split
      in two such regions:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          a small fixed-size <emphasis>minor heap</emphasis> where most
          most blocks are initially allocated.
        </para>
      </listitem>
      <listitem>
        <para>
          a larger variable-sized <emphasis>major heap</emphasis> for
          blocks that have been live longer.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      A typical functional programming style means that young blocks
      tend to die young and old blocks tend to stay around for longer
      than young ones. This is often referred to as the
      <emphasis>generational hypothesis</emphasis>.
    </para>
    <para>
      OCaml uses different memory layouts and garbage collection
      algorithms for the major and minor heaps to account for this
      generational difference. We'll explain how they differ in more
      detail next.
    </para>
    <sidebar>
    <title>
    The <literal>Gc</literal> module and
    <literal>OCAMLRUNPARAM</literal>
    </title>
    <para>
      OCaml provides several mechanisms to query and alter the behaviour
      of the runtime system. The <literal>Gc</literal> module provides
      this functionality from within OCaml code, and we'll frequently
      refer to it in the rest of the chapter. As with several other
      standard library modules, Core alters the <literal>Gc</literal>
      interface from the standard OCaml library. We'll assume that
      you've opened <literal>Core.Std</literal> in our explanations.
    </para>
    <para>
      You can also control the behaviour of OCaml programs by setting
      the <literal>OCAMLRUNPARAM</literal> environment variable before
      launching your application. This lets you set garbage collector
      parameters without recompiling, for example to benchmark the
      effects of different settings. The format of
      <literal>OCAMLRUNPARAM</literal> is documented in the
      <ulink url="http://caml.inria.fr/pub/docs/manual-ocaml/manual024.html">OCaml
      manual</ulink>.
    </para>
    </sidebar>
  </sect1>
  <sect1 id="the-fast-minor-heap">
    <title>The fast minor heap</title>
    <para>
      The minor heap is where most of your short-lived values are held.
      It consists of one contiguous chunk of virtual memory containing a
      sequence of OCaml blocks. If there is space, allocating a new
      block is a fast constant-time operation that requires just a
      couple of CPU instructions.
    </para>
    <para>
      To garbage collect the minor heap, OCaml uses <emphasis>copying
      collection</emphasis> to move all live blocks in the minor heap to
      the major heap. This takes work proportional to the number of live
      blocks in the minor heap, which is typically small according to
      the generational hypothesis.
    </para>
    <sect2 id="allocating-on-the-minor-heap">
      <title>Allocating on the minor heap</title>
      <para>
        The minor heap is a contiguous chunk of virtual memory that is
        usually a few megabytes in size so that it can be scanned
        quickly. The runtime stores the the minor heap in two pointers
        (<literal>caml_young_start</literal> and
        <literal>caml_young_end</literal>) that delimit the start and
        end of the heap region.
      </para>
      <programlisting>
                &lt;---- size ----&gt;
 base --- start ---------------- end
          limit      ptr &lt;------
                          blocks
</programlisting>
      <para>
        In a fresh minor heap, the <literal>limit</literal> equals the
        <literal>start</literal> and the current <literal>ptr</literal>
        will equal the <literal>end</literal>. <literal>ptr</literal>
        decreases as blocks are allocated until it reaches
        <literal>limit</literal>, at which point a minor garbage
        collection is triggered. To allocate a block in the minor heap,
        <literal>ptr</literal> is decremented by the size of the block
        (including the header) and the header area is immediately set to
        a valid value. If there isn't enough space left for the block
        without decrementing past the <literal>limit</literal>, a minor
        garbage collection is triggered.
      </para>
      <para>
        You may wonder why <literal>limit</literal> is required at all,
        since it always seems to equal <literal>start</literal>. It's
        because the easiest way for the runtime to schedule a minor heap
        collection is by setting <literal>limit</literal> to equal
        <literal>end</literal>. The next allocation will never have
        enough space after this is done and will always trigger a
        garbage collection.
      </para>
      <note>
      <title>
      Setting the size of the minor heap
      </title>
      <para>
        The minor heap size defaults to 8MB on 64-bit platforms, unless
        overridden by the <literal>s=&lt;words&gt;</literal> argument to
        <literal>OCAMLRUNPARAM</literal>. You can change it after the
        program has started by calling the <literal>Gc.set</literal>
        function.
      </para>
      <programlisting language="ocaml">
# open Gc;;
# let c = Gc.get ();;    
val c : Gc.control =
  {minor_heap_size = 262144; major_heap_increment = 126976;
   space_overhead = 80; verbose = 0; max_overhead = 500;
   stack_limit = 1048576; allocation_policy = 0}
# Gc.tune ~minor_heap_size:(262144 * 2) () ;;
- : unit = ()
</programlisting>
      <para>
        Changing the GC size dynamically will trigger an immediate minor
        heap collection. Note that Core increases the default minor heap
        size from the standard OCaml installation quite significantly,
        and you'll want to reduce this if running in very
        memory-constrained environments.
      </para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="the-long-lived-major-heap">
    <title>The long-lived major heap</title>
    <para>
      The major heap is where the bulk of the longer-lived and larger
      values in your program are stored. It consists of any number of
      non-contiguous chunks of virtual memory, each containing live
      blocks interspersed with regions of free memory. The runtime
      system maintains a free-list data structure that indexes all the
      free memory that it has allocated, and uses it to satisfy
      allocation requests for OCaml blocks.
    </para>
    <para>
      The major heap is typically much larger than the minor heap and
      can scale to gigabytes in size. It is cleaned via a mark-and-sweep
      garbage collection algorithm that operates in several phases:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The <emphasis>mark</emphasis> phase scans the block graph and
          marks all live blocks by setting a bit in the tag of the block
          header (known as the <emphasis>color</emphasis> tag).
        </para>
      </listitem>
      <listitem>
        <para>
          The <emphasis>sweep</emphasis> phase sequentially scans the
          heap chunks and identifies dead blocks that weren't marked
          earlier.
        </para>
      </listitem>
      <listitem>
        <para>
          The <emphasis>compact</emphasis> phase relocates live blocks
          into a freshly allocated heap to eliminate gaps in the free
          list. This prevents the fragmentation of heap blocks in
          long-running programs.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      A major garbage collection must <emphasis>stop the
      world</emphasis> (that is, halt the application) to ensure that
      blocks can be moved around without this being observed by the live
      application. The mark-and-sweep phases run incrementally over
      slices of the heap to avoid pausing the application for long
      periods of time. Only the compaction phase touches all the memory
      in one go, and is a relatively rare operation.
    </para>
    <sect2 id="allocating-on-the-major-heap">
      <title>Allocating on the major heap</title>
      <para>
        The major heap consists of a singly-linked list of contiguous
        memory chunks sorted in increasing order of virtual address.
        Each chunk is a single memory region allocated via
        <emphasis>malloc(3)</emphasis> and consists of a header and data
        area which contains OCaml heap chunks. A heap chunk header
        contains:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            the <emphasis>malloc</emphasis>'ed virtual address of the
            memory region containing the hunk.
          </para>
        </listitem>
        <listitem>
          <para>
            the size in bytes of the data area.
          </para>
        </listitem>
        <listitem>
          <para>
            an allocation size in bytes used during heap compaction to
            merge small blocks to defragment the heap.
          </para>
        </listitem>
        <listitem>
          <para>
            a link to the next heap chunk in the list.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Each chunk's data area starts on a page boundary and its size is
        a multiple of the page size (4KB). It contains a contiguous
        sequence of heap blocks which can be as small as one or two 4KB
        pages, but are usually allocated in 1MB chunks (or 512KB on
        32-bit architectures).
      </para>
      <note>
      <title>
      Controlling major heap growth
      </title>
      <para>
        The <literal>Gc</literal> module uses the
        <literal>major_heap_increment</literal> value to control the
        major heap growth. This defines the number of words to add to
        the major heap per expansion, and is the only memory allocation
        operation that the operating system observes from the OCaml
        runtime after initial startup (since the minor is fixed in
        size).
      </para>
      <para>
        If you anticipate allocating some large OCaml values, then
        setting the heap increment to a larger value will let the
        operating system return a contiguous block of memory. This is
        preferable to lots of smaller heap chunks that may be spread
        across different regions of virtual memory, and require more
        housekeeping in the OCaml runtime to keep track of them.
      </para>
      <programlisting language="ocaml">
# open Core.Std;;
# Gc.tune ~major_heap_increment:(1000448 * 4) ();;
</programlisting>
      </note>
      <para>
        Allocating an OCaml value on the major heap first checks the
        free list of blocks for a suitable region to place it. If there
        isn't enough room on the free list, the runtime expands the
        major heap by allocating a fresh heap chunk that will be large
        enough. That chunk is then added to the free list and the free
        list is checked again (and this time will definitely succeed).
      </para>
      <para>
        Remember that most allocations to the major heap will go via the
        minor heap, and only be promoted if they are still used by the
        program after a minor collection. The one exception to this is
        for values larger than 256 words (that is, 2kB on 64-bit
        platforms). These will be allocated directly on the major heap
        since an allocation on the minor heap would likely trigger an
        immediate collection and copy it to the major heap anyway.
      </para>
    </sect2>
    <sect2 id="memory-allocation-strategies">
      <title>Memory allocation strategies</title>
      <para>
        The major heap does its best to manage memory allocation as
        efficiently as possible, and relies on heap compaction ot ensure
        that memory stays contiguous and unfragmented. The default
        allocation policy normally works fine for most applications, but
        it's worth bearing in mind that there are other options too.
      </para>
      <para>
        The free list of blocks is always checked first when allocating
        a new block in the major heap. The default free list search is
        called <emphasis>next-fit allocation</emphasis>, with an
        alternative <emphasis>first-fit</emphasis> algorithm also
        available.
      </para>
      <sect3 id="next-fit-allocation">
        <title>Next-fit allocation</title>
        <para>
          Next-fit allocation keeps a pointer to the block in the free
          list that was most recently used to satisfy a request. When a
          new request comes in, the allocator searches from the next
          block until the end of the free list, and then from the
          beginning of the free list up to that block.
        </para>
        <para>
          Next-fit allocation is the default allocation strategy. It's
          quite a cheap allocation mechanism since the same heap chunk
          can be re-used across allocation requests until it runs out.
          This in turn means that there is good memory locality to use
          CPU caches better.
        </para>
      </sect3>
      <sect3 id="first-fit-allocation">
        <title>First-fit allocation</title>
        <para>
          If your programs allocates values of many varied sizes, you
          may sometimes find that your free list becomes fragmented. In
          this situation, the GC is forced to perform an expensive
          compaction despite there being free chunks, since none of the
          chunks alone are big enough to satisfy the request.
        </para>
        <para>
          First-fit allocation focusses on reducing memory
          fragmentation, but at the expense of slower block allocation.
          Every allocation scans the free list from the beginning for a
          suitable free chunk, instead of re-using the most recent heap
          chunk as the next-fit allocator does.
        </para>
        <para>
          For some workloads, the reduction in the frequency in heap
          compaction will outweigh the extra allocation cost.
        </para>
        <note>
        <title>
        Controlling the heap allocation policy
        </title>
        <para>
          You can set the heap allocation policy via the
          <literal>Gc.allocation_policy</literal> field. A value of
          <literal>0</literal> (the default) sets it to next-fit, and
          <literal>1</literal> to the first-fit allocator.
        </para>
        <para>
          The same behaviour can be controlled at runtime by setting
          <literal>a=0</literal> or <literal>a=1</literal> in
          <literal>OCAMLRUNPARAM</literal>.
        </para>
        </note>
      </sect3>
    </sect2>
    <sect2 id="marking-and-scanning-the-heap">
      <title>Marking and scanning the heap</title>
      <para>
        The marking process can take a long time to run over the
        complete major heap, and has to pause the main application while
        it's active. It therefore runs incrementally by marking the heap
        in <emphasis>slices</emphasis>. Each value in the heap has a
        2-bit <emphasis>color</emphasis> field in its header that is
        used to store information about whether the value has been
        marked, so that the GC can resume easily between slices.
      </para>
      <informaltable>
        <tgroup cols="2">
          <colspec align="left"/>
          <colspec align="left"/>
          <thead>
            <row>
              <entry>
                Tag Color
              </entry>
              <entry>
                Block Status
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                blue
              </entry>
              <entry>
                on the free list and not currently in use
              </entry>
            </row>
            <row>
              <entry>
                white
              </entry>
              <entry>
                not reached yet, but possibly reachable
              </entry>
            </row>
            <row>
              <entry>
                gray
              </entry>
              <entry>
                reachable, but its fields have not been scanned
              </entry>
            </row>
            <row>
              <entry>
                black
              </entry>
              <entry>
                reachable, and its fields have been scanned
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The marking process starts with a set of
        <emphasis>root</emphasis> values that are always live (such as
        the application stack). All values on the heap are initially
        marked as white values that are possibly reachable, but haven't
        been scanned yet. It recursively follows all the fields in the
        roots via a depth-first search, and pushes newly encountered
        white blocks onto an intermediate stack of <emphasis>gray
        values</emphasis> while it follows their fields. When a gray
        value's fields have all been followed it is popped off the stack
        and colored black.
      </para>
      <para>
        This process is repeated until the gray value stack is empty and
        there are no further values to mark. There's one important edge
        case in this process, though. The gray value stack can only grow
        to a certain size, after which the GC can no longer recurse into
        intermediate values since it has nowhere to store them while it
        follows their fields. If this happens, the heap is marked as
        <emphasis>impure</emphasis> and a more expensive check is
        initiated once the existing gray values have been processed.
      </para>
      <para>
        To mark an impure heap. the GC first marks it as pure and walks
        through the entire heap block-by-block in increasing order of
        memory address. If it finds a gray block, it adds it to the gray
        list and recursively marks it using the usual strategy for a
        pure heap. Once the scan of the complete heap is finished, the
        mark phase checks again whether the heap has again become
        impure, and repeats the scan if it is . These full-heap scans
        will continue until a successful scan completes without
        overflowing the gray list.
      </para>
      <note>
      <title>
      Controlling major heap collections
      </title>
      <para>
        You can trigger a single slice of the major GC via the
        <literal>major_slice</literal> call. This performs a minor
        collection first, and then a single slice. The size of the slice
        is normally automatically computed by the GC to an appropriate
        value, and returns this value so that you can modify it in
        future calls if necessary.
      </para>
      <programlisting language="ocaml">
# open Core.Std;;
# Gc.major_slice 0 ;;
- : int = 232340
# Gc.full_major ();;
- : unit = ()
</programlisting>
      <para>
        The <literal>space_overhead</literal> setting controls how
        aggressive the GC is about setting the slice size to a large
        size. This represents the proportion of memory used for live
        data that will be &quot;wasted&quot; because the GC doesn't
        immediately collect unreachable blocks. Core defaults this to
        <literal>100</literal> to reflect a typical system that isn't
        overly memory-constrained. Set this even higher if you have lots
        of memory, or lower to cause the GC to work harder and collect
        blocks faster at the expense of using more CPU time.
      </para>
      </note>
    </sect2>
    <sect2 id="inter-generational-pointers">
      <title>Inter-generational pointers</title>
      <para>
        One complexity of generational collection arises from the fact
        that minor heap sweeps are much more frequent than major heap
        collections. In order to know which blocks in the minor heap are
        live, the collector must track which minor-heap blocks are
        directly pointed to by major-heap blocks. Without this
        information, each minor collection would also require scanning
        the much larger major heap.
      </para>
      <para>
        OCaml maintains a set of such <emphasis>inter-generational
        pointers</emphasis> to avoid this dependency between a major and
        minor heap collection. The compiler introduces a write barrier
        to update this so-called <emphasis>remembered set</emphasis>
        whenever a major-heap block is modified to point at a minor-heap
        block.
      </para>
      <sect3 id="the-mutable-write-barrier">
        <title>The mutable write barrier</title>
        <para>
          The write barrier can have profound implications for the
          structure of your code. It's one of the reasons why using
          immutable data structures and allocating a fresh copy with
          changes can sometimes be faster than mutating a record
          in-place.
        </para>
        <para>
          The OCaml compiler keeps track of any mutable types and adds a
          call to the runtime <literal>caml_modify</literal> function
          before making the change. This checks the location of target
          write and the value its being changed to, and ensures that the
          remembered set is consistent. Although the write barrier is
          reasonably efficient, it can sometimes be slower than simply
          allocating a fresh value on the fast minor heap and doing some
          extra minor collections.
        </para>
        <para>
          Let's see this for ourselves with a simple test program.
        </para>
        <programlisting language="ocaml">
(* barrier_bench.ml: benchmark mutable vs immutable writes *)
open Core.Std
open Core_bench.Std

type t1 = { mutable iters1: int; mutable count1: float }
type t2 = { iters2: int; count2: float }

let rec test_mutable t1 =
  match t1.iters1 with
  |0 -&gt; ()
  |n -&gt;
    t1.iters1 &lt;- t1.iters1 - 1;
    t1.count1 &lt;- t1.count1 +. 1.0;
    test_mutable t1

let rec test_immutable t2 =
  match t2.iters2 with
  |0 -&gt; ()
  |n -&gt;
    let iters2 = n - 1 in
    let count2 = t2.count2 +. 1.0 in
    test_immutable { iters2; count2 }

let () =
  let iters = 1000000 in
  let tests = [
    Bench.Test.create ~name:&quot;mutable&quot; 
      (fun () -&gt; test_mutable { iters1=iters; count1=0.0 });
    Bench.Test.create ~name:&quot;immutable&quot;
      (fun () -&gt; test_immutable { iters2=iters; count2=0.0 })
  ] in
  Bench.make_command tests |&gt; Command.run
</programlisting>
        <para>
          This program defines a type <literal>t1</literal> that is
          mutable and <literal>t2</literal> that is immutable. The
          benchmark loop iterates over both fields and increments a
          counter. Compile and execute this with some extra options to
          show the amount of garbage collection occurring.
        </para>
        <programlisting>
$ ocamlbuild -use-ocamlfind -package core -package core_bench -tag thread barrier_bench.native
$ ./barrier_bench.native name allocated
Estimated testing time 20s (change using -quota SECS).
┌───────────┬───────────┬─────────────────────┬───────────┬────────┬──────────┬────────────┐
│ Name      │ Time (ns) │           Time 95ci │     Minor │  Major │ Promoted │ Percentage │
├───────────┼───────────┼─────────────────────┼───────────┼────────┼──────────┼────────────┤
│ mutable   │ 7_954_262 │ 7_827_275-8_135_261 │ 2_000_004 │ -51.42 │   -51.42 │     100.00 │
│ immutable │ 3_694_618 │ 3_396_611-4_037_053 │ 5_000_005 │ -28.43 │   -28.43 │      46.45 │
└───────────┴───────────┴─────────────────────┴───────────┴────────┴──────────┴────────────┘
</programlisting>
        <para>
          There is a stark space/time tradeoff here. The mutable version
          takes significantly longer to complete than the immutable one,
          but allocates many fewer minor heap words than the immutable
          version. Minor allocation in OCaml is very fast and so it is
          often better to use immutable data structures in preference to
          the more conventional mutable versions. On the other hand, if
          you only rarely mutable a value, it can be faster to take the
          write barrier hit and not allocate at all.
        </para>
        <para>
          The only way to know for sure is to benchmark your program
          under real-world scenarios using
          <literal>Core_bench</literal>, and experiment with the
          tradeoffs. The command-line benchmark binaries have a number
          of useful options that affect garbage collection behaviour.
        </para>
        <programlisting>
Benchmark for mutable, immutable

  barrier_bench.native [COLUMN ...]

Columns that can be specified are:
    name       - Name of the test.
    cycles     - Number of CPU cycles (RDTSC) taken.
    cycles95ci - 95% confidence interval and error for cycles.
    ~cycles    - Cycles taken excluding major GC costs.
    time       - Number of nano secs taken.
    time95ci   - 95% confidence interval and error for time (ns).
    ~time      - Time (ns) taken excluding major GC costs.
    allocated  - Allocation of major, minor and promoted words.
    percentage - Relative execution time as a percentage.
    gc         - Show major and minor collections.
    speedup    - Relative execution cost as a speedup.
    samples    - Number of samples collected for profiling.

The following columns will be displayed by default:
    +name time time95ci percentage

To specify that a column should be displayed only if it has a non-trivial value,
prefix the column name with a '+'.

=== flags ===

  [-clear-columns]     Don't display default columns. Only show user specified
                       ones.
  [-display STYLE]     Table style (short, tall, line or blank). Default short.
  [-geometric SCALE]   Use geometric sampling. (default 1.01)
  [-linear INCREMENT]  Use linear sampling to explore number of runs, example 1.
  [-no-compactions]    Disable GC compactions.
  [-quota SECS]        Time quota allowed per test (default 10s).
  [-save]              Save benchmark data to &lt;test name&gt;.txt files.
  [-stabilize-gc]      Stabilize GC between each sample capture.
  [-v]                 High verbosity level.
  [-width WIDTH]       width limit on column display (default 150).
  [-build-info]        print info about this build and exit
  [-version]           print the version of this build and exit
  [-help]              print this help text and exit
                       (alias: -?)
</programlisting>
        <para>
          The <literal>-no-compactions</literal> and
          <literal>-stabilize-gc</literal> options can help force a
          situation where your application has fragmented memory. This
          can simulate the behaviour of a long-running application
          without you having to actually wait that long to recreate the
          behaviour in a performance unit test.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 id="attaching-finalizer-functions-to-values">
    <title>Attaching finalizer functions to values</title>
    <para>
      OCaml's automatic memory management guarantees that a value will
      eventually be freed when it's no longer in use, either via the
      garbage collector sweeping it or the program terminating. It's
      sometimes useful to run extra code just before a value is freed by
      the garbage collector, for example to check that a file descriptor
      has been closed, or that a log message is recorded.
    </para>
    <note>
    <title>
    What values can be finalized?
    </title>
    <para>
      Various values cannot have finalizers attached since they aren't
      heap-allocated. Some examples of values that are not
      heap-allocated are integers, constant constructors, booleans, the
      empty array, the empty list and the unit value. The exact list of
      what is heap-allocated or not is implementation-dependent, which
      is why Core provides the <literal>Heap_block</literal> module to
      explicitly check before attaching the finalizer.
    </para>
    <para>
      Some constant values can be heap-allocated but never deallocated
      during the lifetime of the program, for example a list of integer
      constants. <literal>Heap_block</literal> explicitly checks to see
      if the value is in the major or minor heap, and rejects most
      constant values. Compiler optimisations may also duplicate some
      immutable values such as floating-point values in arrays. These
      may be finalised while another duplicate copy is being used by the
      program.
    </para>
    <para>
      For this reason, attach finalizers only to values that you are
      explicitly sure are heap-allocated and aren't immutable. A common
      use is to attach them to file descriptors to ensure it is closed.
      However, the finalizer normally shouldn't be the primary way of
      closing the file descriptor, since it depends on the garbage
      collector running in order to collect the value. For a busy
      system, you can easily run out of a scarce resource such as file
      descriptors before the GC catches up.
    </para>
    </note>
    <para>
      Core provides a <literal>Heap_block</literal> module that
      dynamically checks if a given value is suitable for finalizing.
      This block is then passed to Async's
      <literal>Gc.add_finalizer</literal> function that schedules the
      finalizer safely with respect to all the other concurrent program
      threads.
    </para>
    <para>
      Let's explore this with a small example that finalizes values of
      different types, some of which are heap-allocated and others which
      are compile-time constants.
    </para>
    <programlisting language="ocaml">
(* finalizer.ml : explore finalizers for different types *)
open Core.Std
open Async.Std

let attach_finalizer n v =
  match Heap_block.create v with
  | None -&gt; printf &quot;%20s: FAIL\n%!&quot; n
  | Some hb -&gt;
      let final _ = printf &quot;%20s: OK\n%!&quot; n in
      Gc.add_finalizer hb final

type t = { foo: bool }

let () =
  let alloced_float = Unix.gettimeofday () in
  let alloced_bool = alloced_float &gt; 0.0 in
  let alloced_string = String.create 4 in
  attach_finalizer &quot;immediate int&quot; 1;
  attach_finalizer &quot;immediate float&quot; 1.0;
  attach_finalizer &quot;immediate variant&quot; (`Foo &quot;hello&quot;);
  attach_finalizer &quot;immediate string&quot; &quot;hello world&quot;;
  attach_finalizer &quot;immediate record&quot; { foo=false };
  attach_finalizer &quot;allocated float&quot; alloced_float;
  attach_finalizer &quot;allocated bool&quot; alloced_bool;
  attach_finalizer &quot;allocated variant&quot; (`Foo alloced_bool);
  attach_finalizer &quot;allocated string&quot; alloced_string;
  attach_finalizer &quot;allocated record&quot; { foo=alloced_bool };
  Gc.compact ();
  never_returns (Scheduler.go ())
</programlisting>
    <para>
      Building and running this should show the following output.
    </para>
    <programlisting>
$ ocamlfind ocamlopt -package core -package async -thread \
  -o finalizer -linkpkg finalizer.ml
$ ./finalizer
       immediate int: FAIL
     immediate float: FAIL
   immediate variant: FAIL
    immediate string: FAIL
    immediate record: FAIL
      allocated bool: FAIL
    allocated record: OK
    allocated string: OK
   allocated variant: OK
     allocated float: OK
</programlisting>
    <para>
      The GC calls the finalization functions in the order of the
      deallocation. If several values become unreachable during the same
      GC cycle, the finalisation functions will be called in the reverse
      order of the corresponding calls to
      <literal>add_finalizer</literal>. Each call to
      <literal>add_finalizer</literal> adds to the set of functions that
      are run when the value becomes unreachable. You can have many
      finalizers all pointing to the same heap block if you wish.
    </para>
    <para>
      After a garbage collection determines that a heap block
      <literal>b</literal> is unreachable, it removes from the set of
      finalizers all the functions associated with <literal>b</literal>,
      and serially applies each of those functions to
      <literal>b</literal>. Thus, every finalizer function attached to
      <literal>b</literal> will run at most most once. However, program
      termination will not cause all the finalizers to be run before the
      runtime exits.
    </para>
    <para>
      The finalizer can use all features of OCaml, including assignments
      that make the value reachable again and thus prevent it from being
      garbage collected. It can also loop forever, which will cause
      other finalizers to be interleaved with it.
    </para>
  </sect1>
</chapter><chapter id="the-compilation-pipeline">
  <title>The Compilation Pipeline</title>
  <para>
    Compiling source code into executable programs is a fairly complex
    process that involves quite a few tools -- preprocessors, compilers,
    runtime libraries, linkers and assemblers. It's important how to
    understand how these fit together to help with your day-to-day
    workflow of developing, debugging and deploying applications.
  </para>
  <para>
    OCaml has a strong emphasis on static type safety and rejects source
    code that doesn't meet its requirements as early as possible. The
    compiler does this by running the source code through a series of
    checks and transformations. Each stage performs its job (e.g. type
    checking, optimization or code generation) and discards some
    information from the previous stage. The final native code output is
    low-level assembly code that doesn't know anything about the OCaml
    modules or objects that the compiler started with.
  </para>
  <para>
    You don't have to do all this manually, of course. The compiler
    frontends (<literal>ocamlc</literal> and
    <literal>ocamlopt</literal>) are invoked via the command-line and
    chain the stages together for you. Sometimes though, you'll need to
    dive into the toolchain to hunt down a bug or investigate a
    performance problem. This chapter explains the compiler pipeline in
    more depth so you understand how to harness the command-line tools
    effectively.
  </para>
  <para>
    It's even possible to compile OCaml to run efficiently on foreign
    environments such as Javascript or the Java Virtual Machine. These
    aren't supported by the core OCaml distribution, but are available
    on OPAM. We'll mention these as we go through the chapter so you can
    experiment with them too.
  </para>
  <para>
    In this chapter, we'll cover the following topics:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        the compilation pipeline and what each stage represents.
      </para>
    </listitem>
    <listitem>
      <para>
        source preprocessing via Camlp4 and the intermediate forms.
      </para>
    </listitem>
    <listitem>
      <para>
        the untyped intermediate lambda code where pattern matching is
        optimized.
      </para>
    </listitem>
    <listitem>
      <para>
        the bytecode <literal>ocamlc</literal> compiler and
        <literal>ocamlrun</literal> interpreter.
      </para>
    </listitem>
    <listitem>
      <para>
        the native code <literal>ocamlopt</literal> code generator, and
        debugging and profiling native code.
      </para>
    </listitem>
  </itemizedlist>
  <sect1 id="an-overview-of-the-toolchain">
    <title>An overview of the toolchain</title>
    <para>
      The OCaml tools accept textual source code as input with filename
      extensions of <literal>.ml</literal> and <literal>.mli</literal>
      for modules and signatures respectively. We explained the basics
      of the build process earlier in
      <xref linkend="files-modules-and-programs"/>, so we'll
      assume you've built a few OCaml programs already by this point.
    </para>
    <para>
      Each source file represents a <emphasis>compilation
      unit</emphasis> that is built separately. The compiler generates
      intermediate files with different filename extensions to use as it
      advances through the compilation stages. The linker takes a
      collection of compiled units and produces a standalone executable
      or library archive that can be re-used by other applications.
    </para>
    <para>
      The overall compilation pipeline looks like this:
    </para>
    <programlisting>
    Source code
        |
        | parsing and preprocessing
        v
    Parsetree (untyped AST)
        |
        | syntax extensions
        v
    Camlp4 transformation (untyped AST)
        |
        | type inference and checking
        v
    Typedtree (type-annotated AST)
        |
        | pattern-matching compilation
        | elimination of modules and classes
        v
     Lambda
      /   \
     /     \ closure conversion, inlining, uncurrying,
    v       \  data representation strategy
 Bytecode    \
    |         +-----+
    |              Cmm
    |js_of_ocaml    |
    |               | code generation
    |               v
 Javascript      Assembly code
</programlisting>
    <para>
      Notice that the pipeline branches towards the end. OCaml has
      multiple compiler frontends that re-use the early stages of
      compilation, but produce very different final outputs. The
      <emphasis>bytecode interpreter</emphasis> is portable and can even
      be transformed into Javascript. The <emphasis>native code
      compiler</emphasis> generates specialized executable binaries
      suitable for high-performance applications.
    </para>
    <sidebar>
    <title>
    Obtaining the compiler source code
    </title>
    <para>
      Although it's not necessary to understand the examples, you may
      find it useful to have a copy of the OCaml source tree checked out
      while you read through this chapter. The source code is available
      from multiple places:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Stable releases as zip and tar archives from the
          <ulink url="http://caml.inria.fr/download.en.html">OCaml
          download site</ulink>.
        </para>
      </listitem>
      <listitem>
        <para>
          A Subversion anonymous mirror of the main development sources
          available on the
          <ulink url="http://caml.inria.fr/ocaml/anonsvn.en.html">development
          resources</ulink> page online.
        </para>
      </listitem>
      <listitem>
        <para>
          A Git mirror of the Subversion repository with all the history
          and development branches included, browsable online at
          <ulink url="https://github.com/ocaml/ocaml">Github</ulink>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The source tree is split up into sub-directories. The core
      compiler consists of:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>config/</literal>: configuration directives to tailor
          OCaml for your operating system and architecture.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>bytecomp/</literal> and <literal>byterun/</literal>:
          byte-code compiler and runtime, including the garbage
          collector.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>asmcomp/</literal> and <literal>asmrun/</literal>:
          native-code compiler and runtime. The native runtime symlinks
          many modules from the <literal>byterun</literal> directory to
          share code, most notably the garbage collector.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>parsing/</literal>: the OCaml lexer, parser and
          libraries for manipulating them.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>typing/</literal>: the static type checking
          implementation and type definitions.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>camlp4/</literal>: the source code macro
          preprocessor.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>driver/</literal>: command-line interfaces for the
          compiler tools.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      There are a number of tools and scripts also built alongside the
      core compiler:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>debugger/</literal>: the interactive byte-code
          debugger.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>toplevel/</literal>: interactive top-level console.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>emacs/</literal>: a <emphasis>caml-mode</emphasis>
          for the Emacs editor.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>stdlib/</literal>: the compiler standard library,
          including the <literal>Pervasives</literal> module.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ocamlbuild/</literal>: build system that automates
          common OCaml compilation modes.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>otherlibs/</literal>: optional libraries such as the
          Unix and graphics modules.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>tools/</literal>: command-line utilities such as
          <literal>ocamldep</literal> that are installed with the
          compiler.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>testsuite/</literal>: regression tests for the core
          compiler.
        </para>
      </listitem>
    </itemizedlist>
    </sidebar>
    <para>
      We'll go through each of the compilation stages now and explain
      how that'll be useful to you during day-to-day OCaml development.
    </para>
  </sect1>
  <sect1 id="parsing-source-code">
    <title>Parsing source code</title>
    <para>
      When a source file is passed to the OCaml compiler, its first task
      is to parse the text into a more structured Abstract Syntax Tree
      (AST). The parsing logic is implemented in OCaml itself using the
      techniques described earlier in
      <xref linkend="parsing-with-ocamllex-and-menhir"/>. The
      lexer and parser rules can be found in the
      <literal>parsing</literal> directory in the source distribution.
    </para>
    <sect2 id="syntax-errors">
      <title>Syntax errors</title>
      <para>
        The OCaml parser's goal is to output a well-formed AST data
        structure to the next phase of compilation, and so it rejects
        source code which doesn't match basic syntactic requirements.
        The compiler emits a <emphasis>syntax error</emphasis> in this
        situation, with a pointer to the filename and line and character
        number that's as close to the error as possible.
      </para>
      <para>
        Here's an example syntax error that we obtain by performing a
        module assignment as a statement instead of as a let-binding.
      </para>
      <programlisting language="ocaml">
(* broken_module.ml *)
let _ =
  module MyString = String;
  ()
</programlisting>
      <para>
        The above code results in a syntax error when compiled.
      </para>
      <programlisting>
$ ocamlc -c broken_module.ml 
File &quot;broken_module.ml&quot;, line 3, characters 2-8:
Error: Syntax error
</programlisting>
      <para>
        The correct version of this source code creates the
        <literal>MyString</literal> module correctly via a local open,
        and compiles successfully.
      </para>
      <programlisting language="ocaml">
(* fixed_module.ml *)
let _ =
  let module MyString = String in
  ()
</programlisting>
      <para>
        The syntax error points to the line and character number of the
        first token that couldn't be parsed. In the broken example the
        <literal>module</literal> keyword isn't a valid token at that
        point in parsing, so the error location information is correct.
      </para>
    </sect2>
    <sect2 id="automatically-indenting-source-code">
      <title>Automatically indenting source code</title>
      <para>
        Sadly, syntax errors do get more inaccurate sometimes depending
        on the nature of your mistake. Try to spot the deliberate error
        in the following function definitions.
      </para>
      <programlisting language="ocaml">
(* follow_on_function.ml *)
let concat_and_print x y =
  let v = x ^ y in
  print_endline v;
  v;

let add_and_print x y =
  let v = x + y in
  print_endline (string_of_int v);
  v

let _ =
  let _ = add_and_print 1 2 in
  let _ = concat_and_print &quot;a&quot; &quot;b&quot; in
  ()
</programlisting>
      <para>
        When you compile this file you'll get a syntax error.
      </para>
      <programlisting>
$ ocamlc -c follow_on_function.ml
File &quot;follow_on_function.ml&quot;, line 12, characters 0-3:
Error: Syntax error
</programlisting>
      <para>
        The line number in the error points to the end of the
        <literal>add_and_print</literal> function, but the actual error
        is at the end of the <emphasis>first</emphasis> function
        definition. There's an extra semicolon at the end of the first
        definition that causes the second definition to become part of
        the first <literal>let</literal> binding. This eventually
        results in a parsing error at the very end of the second
        function.
      </para>
      <para>
        This class of bug (due to a single errant character) can be hard
        to spot in a large body of code. Luckily, there's a great tool
        in OPAM called ocp-indent that applies structured indenting
        rules to your source code on a line-by-line basis. This not only
        beautifies your code layout, but it also makes this syntax error
        much easier to locate.
      </para>
      <para>
        Let's run our erronous file through ocp-indent and see how it
        processes it.
      </para>
      <programlisting>
$ opam install ocp-indent
$ ocp-indent follow_on_function.ml
(* follow_on_function.ml *)
let concat_and_print x y =
  let v = x ^ y in
  print_endline v;
  v;

  let add_and_print x y =
    let v = x + y in
    print_endline (string_of_int v);
    v

let _ =
  let _ = add_and_print 1 2 in
  let _ = concat_and_print &quot;a&quot; &quot;b&quot; in
  ()
</programlisting>
      <para>
        The <literal>add_and_print</literal> definition has been
        indented as if it were part of the first
        <literal>concat_and_print</literal> definition, and the errant
        semicolon is now much easier to spot. We just need to remove
        that semicolon and re-run ocp-indent to verify that the syntax
        is correct.
      </para>
      <programlisting>
$ ocp-indent follow_on_function_fixed.ml 
(* follow_on_function_fixed.ml *)
let concat_and_print x y =
  let v = x ^ y in
  print_endline v;
  v

let add_and_print x y =
  let v = x + y in
  print_endline (string_of_int v);
  v

let _ =
  let _ = add_and_print 1 2 in
  let _ = concat_and_print &quot;a&quot; &quot;b&quot; in
  ()

$ ocamlc -i follow_on_function_fixed.ml 
val concat_and_print : string -&gt; string -&gt; string
val add_and_print : int -&gt; int -&gt; int
</programlisting>
      <para>
        The
        <ulink url="https://github.com/OCamlPro/ocp-indent">ocp-indent
        homepage</ulink> documents how to integrate it with your
        favourite editor. All the Core libraries are formatted using it
        to ensure consistency, and it's a good idea to do this before
        publishing your own source code online.
      </para>
    </sect2>
    <sect2 id="generating-documentation-from-interfaces">
      <title>Generating documentation from interfaces</title>
      <para>
        Whitespace and source code comments are removed during parsing
        and aren't significant in determining the semantics of the
        program. However, other tools in the OCaml distribution can
        interpret comments for their own ends.
      </para>
      <para>
        The OCamldoc tool uses specially formatted comments in the
        source code to generate documentation bundles. These comments
        are combined with the function definitions and signatures and
        output as structured documentation in a variety of formats. It
        can generate HTML pages, LaTeX and PDF documents, UNIX manual
        pages and even module dependency graphs that can be viewed using
        <ulink url="http://www.graphviz.org">Graphviz</ulink>.
      </para>
      <para>
        Here's a sample of some source code that's been annotated with
        OCamldoc comments.
      </para>
      <programlisting language="ocaml">
(** example.ml: The first special comment of the file is the comment 
    associated with the whole module. *)

(** Comment for exception My_exception. *)
exception My_exception of (int -&gt; int) * int

(** Comment for type [weather]  *)
type weather =
| Rain of int (** The comment for construtor Rain *)
| Sun         (** The comment for constructor Sun *)

(** Find the current weather for a country
   @author Anil Madhavapeddy
   @param location The country to get the weather for.
*)
let what_is_the_weather_in location =
  match location with
  | `Cambridge  -&gt; Rain 100
  | `New_york   -&gt; Rain 20
  | `California -&gt; Sun
</programlisting>
      <para>
        The OCamldoc comments are distinguished by beginning with the
        double asterix. There are formatting conventions for the
        contents of the comment to mark metadata. For instance, the
        <literal>@tag</literal> fields mark specific properties such as
        the author of that section of code.
      </para>
      <para>
        Try compiling the HTML documentation and UNIX man pages by
        running <literal>ocamldoc</literal> over the source file.
      </para>
      <programlisting>
$ mkdir -p html man/man3
$ ocamldoc -html -d html example.ml
$ ocamldoc -man -d man/man3 example.ml
$ man -M man Example
</programlisting>
      <para>
        You should now have HTML files inside the
        <literal>html/</literal> directory and also be able to view the
        UNIX manual pages held in <literal>man/man3</literal>. There are
        quite a few comment formats and options to control the output
        for the various backends. Refer to the
        <ulink url="http://caml.inria.fr/pub/docs/manual-ocaml/manual029.html">OCaml
        manual</ulink> for the complete list.
      </para>
      <tip>
      <title>
      Using custom OCamldoc generators
      </title>
      <para>
        The default HTML output stylesheets from OCamldoc are pretty
        spartan and distinctly Web 1.0. The tool supports plugging in
        custom documentation generators, and there are several available
        that provide prettier or more detailed output.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <ulink url="http://argot.x9c.fr/">Argot</ulink> is an
            enchanced HTML generator that supports code folding and
            searching by name or type definition.
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="https://gitorious.org/ocamldoc-generators/ocamldoc-generators">ocamldoc-generators</ulink>
            add support for Bibtex references within comments and
            generating literate documentation that embeds the code
            alongside the comments.
          </para>
        </listitem>
        <listitem>
          <para>
            JSON output is available via <literal>odoc_json</literal>
            (TODO: pull out of Xen).
          </para>
        </listitem>
      </itemizedlist>
      </tip>
    </sect2>
  </sect1>
  <sect1 id="preprocessing-source-code">
    <title>Preprocessing source code</title>
    <para>
      One powerful feature in OCaml is a facility to extend the standard
      language grammar without having to modify the compiler. You can
      roughly think of it as a type-safe version to the
      <literal>cpp</literal> preprocessor used in C/C++ to control
      conditional compilation directives.
    </para>
    <para>
      The OCaml distribution includes a system called Camlp4 for writing
      extensible parsers. This provides some OCaml libraries that are
      used to define grammars and also dynamically loadable syntax
      extensions of such grammars. Camlp4 modules register new language
      keywords and later transform these keywords (or indeed, any
      portion of the input program) into conventional OCaml code that
      can be understood by the rest of the compiler.
    </para>
    <para>
      We've already seen several Core libraries that use Camlp4:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>Fieldslib</literal> generates first-class values that
          represent fields of a record.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Sexplib</literal> to convert types to textual
          s-expressions.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>Bin_prot</literal> for efficient binary conversion
          and parsing.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      These libraries all extend the language in quite a minimal way by
      adding a <literal>with</literal> keyword to type declarations to
      signify that extra code should be generated from that declaration.
      For example, here's a trivial use of Sexplib and Fieldslib.
    </para>
    <programlisting language="ocaml">
(* type_conv_example.ml *)
open Sexplib.Std

type t = {
  foo: int;
  bar: string
} with sexp, fields
</programlisting>
    <para>
      Compiling this code will normally give you a syntax error if you
      do so without Camlp4 since the <literal>with</literal> keyword
      isn't normally allowed after a type definition.
    </para>
    <programlisting>
$ ocamlfind ocamlc -c type_conv_example.ml
File &quot;type_conv_example.ml&quot;, line 7, characters 2-6:
Error: Syntax error
</programlisting>
    <para>
      Now add in the syntax extension packages for
      <literal>fieldslib</literal> and <literal>sexplib</literal>, and
      everything will compile again.
    </para>
    <programlisting>
$ ocamlfind ocamlc -c -syntax camlp4o -package sexplib.syntax \
  -package fieldslib.syntax type_conv_example.ml
</programlisting>
    <para>
      We've specified a couple of additional flags here. The
      <literal>-syntax</literal> flag directs
      <literal>ocamlfind</literal> to add the <literal>-pp</literal>
      flag to the compiler command-line. This flag instructs the
      compiler to run the preprocessor during its parsing phase.
    </para>
    <para>
      The <literal>-package</literal> flag imports other OCaml
      libraries. The <literal>.syntax</literal> suffix in the package
      name is a convention that indicates these libraries are
      preprocessors that should be run during parsing. The syntax
      extension modules are dynamically loaded into the
      <literal>camlp4o</literal> command which rewrites the input source
      code into conventional OCaml code that has no trace of the new
      keywords. The compiler then compiles this transformed code with no
      knowledge of the preprocessor's actions.
    </para>
    <para>
      Both Fieldslib and Sexplib need this new <literal>with</literal>
      keyword, but they both can't register the same extension. Instead,
      a library called Type_conv provides the common extension framework
      for them to use. Type_conv registers the <literal>with</literal>
      grammar extension to Camlp4, and the OCamlfind packaging ensures
      that it's loaded before Variantslib or Sexplib.
    </para>
    <para>
      The two extensions generate boilerplate OCaml code based on the
      type definition. This avoids the inevitable performance hit of
      doing the code generation dynamically. It also doesn't require a
      Just-In-Time (JIT) runtime that can be a source of unpredictable
      dynamic behaviour. Instead, all code is simply generated at
      compile-time via Camlp4.
    </para>
    <sect2 id="using-camlp4-interactively">
      <title>Using Camlp4 interactively</title>
      <para>
        The syntax extensions accept an input AST and output a modified
        one. If you're not familiar with the Camlp4 module in question,
        how do you figure out what changes it's made to your code? The
        obvious way is to read the documentation that accompanies the
        extension.
      </para>
      <para>
        Another approach is to use the top-level to explore the
        extension's behaviour or run Camlp4 manually yourself to see the
        transformation in action. We'll show you how to do both of these
        now.
      </para>
      <sect3 id="using-camlp4-from-the-interactive-top-level">
        <title>Using Camlp4 from the interactive top-level</title>
        <para>
          The <literal>utop</literal> top-level can run the phrases that
          you type through <literal>camlp4</literal> automatically. You
          should have at least these lines in your
          <literal>~/.ocamlinit</literal> file in your home directory
          (see <xref linkend="installation"/> for more
          information).
        </para>
        <programlisting>
#use &quot;topfind&quot;
#camlp4o
</programlisting>
        <para>
          The first directive loads the <literal>ocamlfind</literal>
          top-level interface that lets you require
          <literal>ocamlfind</literal> packages (including all their
          dependent packages). The second directive instructs the
          top-level to filter all phrases via Camlp4. You can now run
          <literal>utop</literal> and load the syntax extensions in.
          We'll use the <literal>comparelib</literal> syntax extension
          for our experiments.
        </para>
        <para>
          OCaml provides a built-in polymorphic comparison operator that
          inspects the runtime representation of two values to see if
          they're equal. As we noted in
          <xref linkend="maps-and-hashtables"/>, the
          polymorphic comparison is less efficient than defining
          explicit comparison functions between values. However, it
          quickly become tedious to manually define comparison functions
          for complex type definitions.
        </para>
        <para>
          Let's see how <literal>comparelib</literal> solves this
          problem by running it in <literal>utop</literal>.
        </para>
        <programlisting language="ocaml">
# #require &quot;comparelib.syntax&quot; ;;

# type t = { foo: string; bar : t } ;;
type t = { foo : string; bar : t; }

# type t = { foo: string; bar: t } with compare ;;
type t = { foo : string; bar : t; }
val compare : t -&gt; t -&gt; int = &lt;fun&gt;
val compare_t : t -&gt; t -&gt; int = &lt;fun&gt;
</programlisting>
        <para>
          The first definition of <literal>t</literal> is a standard
          OCaml phrase and results in the expected output. The second
          one includes the <literal>with compare</literal> directive.
          This is intercepted by <literal>comparelib</literal> and
          transformed into the original type definition with two new
          functions also incuded.
        </para>
      </sect3>
    </sect2>
    <sect2 id="running-camlp4-from-the-command-line">
      <title>Running Camlp4 from the command-line</title>
      <para>
        The top-level is a quick way to examine the signatures generated
        from the extensions, but how can we see what these new functions
        actually do? You can't do this from <literal>utop</literal>
        directly since it embeds the Camlp4 invocation as an automated
        part of its operation.
      </para>
      <para>
        Let's turn to the command-line to obtain the result of the
        <literal>comparelib</literal> transformation instead. Create a
        file that contains the type declaration from earlier:
      </para>
      <programlisting language="ocaml">
(* comparelib_test.ml *)
type t = { 
  foo: string; 
  bar: t
} with compare
</programlisting>
      <para>
        We need to run the Camlp4 binary with the library paths to
        Comparelib and Type_conv. Let's use a small shell script to wrap
        this invocation.
      </para>
      <programlisting language="bash">
#!/bin/sh
# camlp4_dump

OCAMLFIND=&quot;ocamlfind query -predicates syntax,preprocessor -r&quot;
INCLUDE=`$OCAMLFIND -i-format comparelib.syntax`
ARCHIVES=`$OCAMLFIND -a-format comparelib.syntax`
camlp4o -printer o $INCLUDE $ARCHIVES $1
</programlisting>
      <para>
        The script uses the <literal>ocamlfind</literal> package manager
        to list the include and library paths needed by
        <literal>comparelib</literal>. It then invokes the
        <literal>camlp4o</literal> preprocessor with these paths and
        outputs the resulting AST to the standard output.
      </para>
      <programlisting>
$ sh camlp4_dump comparelib_test.ml
type t = { foo : string; bar : t }

let _ = fun (_ : t) -&gt; ()
  
let rec compare : t -&gt; t -&gt; int =
  fun a__001_ b__002_ -&gt;
    if Pervasives.( == ) a__001_ b__002_
    then 0
    else
      (let ret =
         (Pervasives.compare : string -&gt; string -&gt; int) a__001_.foo
           b__002_.foo
       in
         if Pervasives.( &lt;&gt; ) ret 0
         then ret
         else compare a__001_.bar b__002_.bar)
  
let _ = compare
let compare_t = compare
let _ = compare_t
</programlisting>
      <para>
        The output contains the original type definition accompanied by
        some automatically generated code that implements an explicit
        comparison function for each field in the record. If you're
        using the extension in your compiler command-line, this
        generated code is then compiled as if you had typed it in
        yourself.
      </para>
      <para>
        Another useful feature of <literal>type_conv</literal> is that
        it can generate module signatures too. Copy the earlier type
        definition into a <literal>comparelib_test.mli</literal> and
        rerun the Camlp4 dumper script.
      </para>
      <programlisting>
$ ./camlp4_dump.sh test_comparelib.mli 
type t = { foo : string; bar : t }

val compare : t -&gt; t -&gt; int
</programlisting>
      <para>
        The external signature generated by
        <literal>comparelib</literal> is much simpler than the actual
        code. Running Camlp4 directly on the original source code lets
        you see these all these transformations precisely.
      </para>
      <caution>
      <title>
      Don't overdo the syntax extensions
      </title>
      <para>
        Syntax extensions are a powerful extension mechanism that can
        completely alter your source code's layout and style. Core
        includes a very conservative set of extensions that take care to
        minimise the syntax changes. There are a number of third-party
        libraries that are much more ambitious -- some introduce
        whitespace-sensitive indentation while others build entirely new
        embedded languages using OCaml as a host language.
      </para>
      <para>
        While it's tempting to compress all your boiler-plate code into
        Camlp4 extensions, it can make your source code much harder for
        other people to quickly read and understand. Core mainly focuses
        on type-driven code generation using the
        <literal>type_conv</literal> extension and doesn't fundamentally
        change the OCaml syntax.
      </para>
      <para>
        Another thing to consider before deploying your own syntax
        extension is compatibility with other extensions. Two separate
        extensions can create a grammar clash that leads to odd syntax
        errors and hard-to-reproduce bugs. That's why most of Core's
        syntax extensions go through <literal>type_conv</literal>, which
        acts as a single point for extending the grammar via the
        <literal>with</literal> keyword.
      </para>
      </caution>
    </sect2>
    <sect2 id="further-reading-on-camlp4">
      <title>Further reading on Camlp4</title>
      <para>
        We've deliberately only shown you how to use Camlp4 extensions
        here, and not how to build your own. The full details of
        building new extensions are fairly daunting and could be the
        subject of an entirely new book.
      </para>
      <para>
        The best resources to get started are:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            the online
            <ulink url="http://brion.inria.fr/gallium/index.php/Camlp4">Camlp4
            wiki</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
            using OPAM to install existing Camlp4 extensions and
            inspecting their source code.
          </para>
        </listitem>
        <listitem>
          <para>
            a series of
            <ulink url="http://ambassadortothecomputers.blogspot.co.uk/p/reading-camlp4.html">blog
            posts</ulink> by Jake Donham describe the internals of
            Camlp4 and its syntax extension mechanism.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
  <sect1 id="static-type-checking">
    <title>Static type checking</title>
    <para>
      After obtaining a valid abstract syntax tree, the compiler has to
      verify that the code obeys the rules of the OCaml type system.
      Code that is syntactically correct but misuses values is rejected
      with an explanation of the problem.
    </para>
    <para>
      Although type checking is done in a single pass in OCaml, it
      actually consists of three distinct steps that happen
      simultaneously:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          an <emphasis>automatic type inference</emphasis> algorithm
          that calculates types for a module without requiring manual
          type annotations.
        </para>
      </listitem>
      <listitem>
        <para>
          a <emphasis>module system</emphasis> that combines software
          components with explicit knowledge of their type signatures.
        </para>
      </listitem>
      <listitem>
        <para>
          performing <emphasis>explicit subtyping</emphasis> checks for
          objects and polymorphic variants.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Automatic type inference lets you write succinct code for a
      particular task and have the compiler ensure that your use of
      variables is locally consistent.
    </para>
    <para>
      Type inference doesn't scale to very large code bases that depend
      on separate compilation of files. A small change in one module may
      ripple through thousands of other files and libraries and require
      all of them to be recompiled. The module system solves this by
      providing the facility to combine and manipulate explicit type
      signatures for modules within a large project, and also to reuse
      them via functors and first-class modules.
    </para>
    <para>
      Subtyping in OCaml objects is always an explicit operation (via
      the <literal>:&gt;</literal> operator). This means that it doesn't
      complicate the core type inference engine and can be tested as a
      separate concern.
    </para>
    <sect2 id="displaying-inferred-types-from-the-compiler">
      <title>Displaying inferred types from the compiler</title>
      <para>
        We've already seen how you can explore type inference directly
        from the top-level. It's also possible to generate type
        signatures for an entire file by asking the compiler to do the
        work for you. Create a file with a single type definition and
        value.
      </para>
      <programlisting language="ocaml">
(* typedef.ml *)
type t = Foo | Bar
let v = Foo
</programlisting>
      <para>
        Now run the compiler with the <literal>-i</literal> flag to
        infer the type signature for that file. This runs the type
        checker but doesn't compile the code any further after
        displaying the interface to the standard output.
      </para>
      <programlisting>
$ ocamlc -i typedef.ml
type t = Foo | Bar
val v : t
</programlisting>
      <para>
        The output is the default signature for the module which
        represents the input file. It's often useful to redirect this
        output to an <literal>mli</literal> file to give you a starting
        signature to edit the external interface without having to type
        it all in by hand.
      </para>
      <para>
        The compiler stores a compiled version of the interface as a
        <literal>cmi</literal> file. This interface is either obtained
        from compiling an <literal>mli</literal> signature file for a
        module, or by the inferred type if there is only an
        <literal>ml</literal> implementation present.
      </para>
      <para>
        The compiler makes sure that your <literal>ml</literal> and
        <literal>mli</literal> files have compatible signatures. The
        type checker throws an immediate error if this isn't the case.
      </para>
      <programlisting>
$ echo type t = Foo &gt; test.ml
$ echo type t = Bar &gt; test.mli
$ ocamlc -c test.mli test.ml
File &quot;test.ml&quot;, line 1:
Error: The implementation test.ml does not match the interface test.cmi:
       Type declarations do not match:
         type t = Foo
       is not included in
         type t = Bar
       File &quot;test.ml&quot;, line 1, characters 5-12: Actual declaration
       Their first fields have different names, Foo and Bar.
</programlisting>
      <note>
      <title>
      Which comes first: the <literal>ml</literal> or the
      <literal>mli</literal>?
      </title>
      <para>
        There are two schools of thought on which order OCaml code
        should be written in. It's very easy to begin writing code by
        starting with an <literal>ml</literal> file and using the type
        inference to guide you as you build up your functions. The
        <literal>mli</literal> file can then be generated as described
        above, and the exported functions documented.
      </para>
      <para>
        If you're writing code that spans multiple files, it's sometimes
        easier to start by writing all the <literal>mli</literal>
        signatures and checking that they type check against each other.
        Once the signatures are in place, you can write the
        implementations with the confidence that they'll all glue
        together correctly with no cyclic dependencies between the
        modules.
      </para>
      <para>
        As with any such stylistic debate, you should experiment with
        which system works best for you. Everyone agrees on one thing
        though: no matter what order you write them, production code
        should always explicitly define an <literal>mli</literal> file
        for every <literal>ml</literal> file in the project.
      </para>
      <para>
        Signature files provide a place to write succinct documentation
        and to abstract internal details that shouldn't be exported.
        Maintaining separate signature files also speeds up incremental
        compilation in larger code-bases, since recompiling a
        <literal>mli</literal> signature is much faster than a full
        compilation of the implementation to native code.
      </para>
      </note>
    </sect2>
    <sect2 id="type-inference-1">
      <title>Type inference</title>
      <para>
        Type inference is the process of determining the appropriate
        types for expressions based on their use. It's a feature that's
        partially present in many other languages such as Haskell and
        Scala, but OCaml embeds it as a fundamental feature throughout
        the core language.
      </para>
      <para>
        OCaml type inference is based on the Hindley-Milner algorithm,
        which is notable for its ability to infer the most general type
        for an expression without requiring any explicit type
        annotations. The algorithm can deduce multiple types for an
        expression, and has the notion of a <emphasis>principal
        type</emphasis> that is the most general choice from the
        possible inferences. Manual type annotations can specialize the
        type explicitly, but the automatic inference selects the most
        general type unless told otherwise.
      </para>
      <para>
        OCaml does has some language extensions which strain the limits
        of principal type inference, but by and large most programs you
        write will never <emphasis>require</emphasis> annotations
        (although they sometimes help the compiler produce better error
        messages).
      </para>
      <sect3 id="adding-type-annotations-to-find-errors">
        <title>Adding type annotations to find errors</title>
        <para>
          It's often said that the hardest part of writing OCaml code is
          getting past the type checker -- but once the code does
          compile, it works correctly the first time!
        </para>
        <para>
          There are a couple of tricks to make it easier to quickly
          locate type errors in your code. The first is to introduce
          manual type annotations to narrow down the source of your
          error more accurately. These annotations shouldn't actually
          change your types and can removed once your code is correct,
          but act as anchors to locate errors while you're still writing
          your code.
        </para>
        <para>
          Manual type annotations are particulary useful if you use lots
          of polymorphic variants or objects. Type inference with row
          polymorphism can generate some very large signatures, and
          errors tend to propagate more widely than if you are using
          more explicitly typed variants or classes.
        </para>
        <para>
          For instance, consider this broken example that expresses some
          simple algebraic operations over integers.
        </para>
        <programlisting language="ocaml">
(* broken_poly.ml *)

let rec algebra =
  function
  | `Add (x,y) -&gt; (algebra x) + (algebra y)
  | `Sub (x,y) -&gt; (algebra x) - (algebra y)
  | `Mul (x,y) -&gt; (algebra x) * (algebra y)
  | `Num x     -&gt; x

let _ =
  algebra (
    `Add (
      (`Num 0),
      (`Sub (
          (`Num 1),
          (`Mul (
              (`Nu 3),(`Num 2)
            ))
        ))
    ))
</programlisting>
        <para>
          There's a single character typo in the code so that it uses
          <literal>Nu</literal> instead of <literal>Num</literal>. The
          resulting type error is impressive.
        </para>
        <programlisting>
$ ocamlc -c broken_poly.ml 
File &quot;broken_poly.ml&quot;, line 11, characters 10-154:
Error: This expression has type
         [&gt; `Add of
              ([&lt; `Add of 'a * 'a
                | `Mul of 'a * 'a
                | `Num of int
                | `Sub of 'a * 'a
                &gt; `Num ]
               as 'a) *
              [&gt; `Sub of 'a * [&gt; `Mul of [&gt; `Nu of int ] * [&gt; `Num of int ] ] ] ]
       but an expression was expected of type 'a
       The second variant type does not allow tag(s) `Nu
</programlisting>
        <para>
          The type error is perfectly accurate, but rather verbose and
          with a line number that doesn't point to the exact location of
          the incorrect variant name. The best the compiler can do is to
          point you in the general direction of the
          <literal>algebra</literal> function application.
        </para>
        <para>
          This is because the type checker doesn't have enough
          information to match the inferred type of the
          <literal>algebra</literal> definition to its application a few
          lines down. It calculates types for both expressions
          separately, and when they don't match up, outputs the
          difference as best it can.
        </para>
        <para>
          Let's see what happens with an explicit type annotation to
          help the compiler out.
        </para>
        <programlisting language="ocaml">
(* broken_poly_with_annot.ml *)

type t = [
  | `Add of t * t
  | `Sub of t * t
  | `Mul of t * t
  | `Num of int
]

let rec algebra (x:t) =
  match x with
  | `Add (x,y) -&gt; (algebra x) + (algebra y)
  | `Sub (x,y) -&gt; (algebra x) - (algebra y)
  | `Mul (x,y) -&gt; (algebra x) * (algebra y)
  | `Num x     -&gt; x

let _ =
  algebra (
    `Add (
      (`Num 0),
      (`Sub (
          (`Num 1),
          (`Mul (
              (`Nu 3),(`Num 2)
            ))
        ))
    ))
</programlisting>
        <para>
          This code contains exactly the same error as before, but we've
          added a closed type definition of the polymorphic variants,
          and a type annotation to the <literal>algebra</literal>
          definition. The compiler error we get is much more useful now.
        </para>
        <programlisting>
$ ocamlc -i broken_poly_with_annot.ml 
File &quot;broken_poly_with_annot.ml&quot;, line 24, characters 14-21:
Error: This expression has type [&gt; `Nu of int ]
       but an expression was expected of type t
       The second variant type does not allow tag(s) `Nu
</programlisting>
        <para>
          This error points directly to the correct line number that
          contains the typo. Once you fix the problem, you can remove
          the manual annotations if you prefer more succinct code. You
          can also leave the annotations there of course, to help with
          future refactoring and debugging.
        </para>
      </sect3>
      <sect3 id="enforcing-principal-typing">
        <title>Enforcing principal typing</title>
        <para>
          The compiler also has a stricter <emphasis>principal type
          checking</emphasis> mode that is activated via the
          <literal>-principal</literal> flag. This warns about risky
          uses of type information to ensure that the type inference has
          one principal result. A type is considered risky if the
          success or failure of type inference depends on the order in
          which sub-expressions are typed.
        </para>
        <para>
          The principality check only affects a few language features:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              polymorphic methods for objects.
            </para>
          </listitem>
          <listitem>
            <para>
              permuting the order of labeled arguments in a function
              from their type definition.
            </para>
          </listitem>
          <listitem>
            <para>
              discarding optional labelled arguments.
            </para>
          </listitem>
          <listitem>
            <para>
              generalized algebraic data types (GADTs) present from
              OCaml 4.0 onwards.
            </para>
          </listitem>
          <listitem>
            <para>
              automatic disambiguation of record field and constructor
              names (since OCaml 4.1)
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Here's an example of principality warnings when used with
          record disambiguation.
        </para>
        <programlisting language="ocaml">
(* non_principal.ml *)
type s = { foo: int; bar: unit }
type t = { foo: int }

let f x =
  x.bar;
  x.foo
</programlisting>
        <para>
          Inferring the signature with <literal>-principal</literal>
          will show you a new warning.
        </para>
        <programlisting>
$ ocamlc -i -principal non_principal.ml 
File &quot;non_principal.ml&quot;, line 7, characters 4-7:
Warning 18: this type-based field disambiguation is not principal.
type s = { foo : int; bar : unit; }
type t = { foo : int; }
val f : s -&gt; int
</programlisting>
        <para>
          This example isn't principal since the inferred type for
          <literal>x.foo</literal> is guided by the inferred type of
          <literal>x.bar</literal>, whereas principal typing requires
          that each sub-expression's type can be calculated
          independently. If the <literal>x.bar</literal> use is removed
          from the definition of <literal>f</literal>, its argument
          would be of type <literal>t</literal> and not
          <literal>type s</literal>.
        </para>
        <para>
          You can fix this either by permuting the order of the type
          declarations, or by adding an explicit type annotation.
        </para>
        <programlisting language="ocaml">
(* principal.ml *)
type s = { foo: int; bar: unit }
type t = { foo: int }

let f (x:s) =
  x.bar;
  x.foo
</programlisting>
        <para>
          There is now no ambiguity about the inferred types, since
          we've explicitly given the argument a type and the order of
          inference of the sub-expressions no longer matters.
        </para>
        <programlisting>
$ ocamlc -i -principal principal.ml 
type s = { foo : int; bar : unit; }
type t = { foo : int; }
val f : s -&gt; int
</programlisting>
        <para>
          Ideally, all code should systematically use
          <literal>-principal</literal>. It reduces variance in type
          inference and enforces the notion of a single known type.
          However, there are drawbacks to this mode: type inference is
          slower and the <literal>cmi</literal> files become larger.
          This is generally only a problem if you use objects
          extensively, which usually have larger type signature to cover
          all their methods.
        </para>
        <para>
          As a result, the suggested approach is to only compile with
          <literal>-principal</literal> occasionally to check if your
          code is compliant. If compiling in principal mode works, it is
          guaranteed that the program will passing type checking in
          non-principal mode too.
        </para>
        <para>
          Bear in mind that the <literal>cmi</literal> files generated
          in principal mode differ from the default mode. Try to ensure
          that you compile your whole project with it activated. Getting
          the files mixed up won't let you violate type safety, but can
          result in the type checker failing unexpectedly very
          occasionally. In this case, just recompile with a clean source
          tree.
        </para>
      </sect3>
    </sect2>
    <sect2 id="modules-and-separate-compilation">
      <title>Modules and separate compilation</title>
      <para>
        The OCaml module system enables smaller components to be reused
        effectively in large projects while still retaining all the
        benefits of static type safety. We covered the basics of using
        modules earlier in
        <xref linkend="files-modules-and-programs"/>. The
        module language that operates over these signatures also extends
        to functors and first-class modules, described in
        <xref linkend="functors"/> and
        <xref linkend="first-class-modules"/> respectively.
      </para>
      <para>
        This section discusses how the compiler implements them in more
        detail. Modules are essential for larger projects that consist
        of many source files (also known as <emphasis>compilation
        units</emphasis>). It's impractical to recompile every single
        source file when changing just one or two files, and the module
        system minimizes such recompilation while still encouraging code
        reuse.
      </para>
      <sect3 id="the-mapping-between-files-and-modules">
        <title>The mapping between files and modules</title>
        <para>
          Individual compilation units provide a convenient way to break
          up a big module hierarchy into a collection of files. The
          relationship between files and modules can be explained
          directly in terms of the module system.
        </para>
        <para>
          Create a file called <literal>alice.ml</literal> with the
          following contents.
        </para>
        <programlisting language="ocaml">
(* alice.ml *)
let friends = [ Bob.name ]
</programlisting>
        <para>
          and a corresponding signature file.
        </para>
        <programlisting language="ocaml">
(* alice.mli *)
val friends : Bob.t list
</programlisting>
        <para>
          These two files are exactly analogous to including the
          following code directly in another module that references
          <literal>Alice</literal>.
        </para>
        <programlisting language="ocaml">
module Alice : sig
  val friends : Bob.t list
end = struct
  let friends = [ Bob.name ]
end
</programlisting>
      </sect3>
      <sect3 id="defining-a-module-search-path">
        <title>Defining a module search path</title>
        <para>
          In the example above, <literal>Alice</literal> also has a
          reference to another module <literal>Bob</literal>. For the
          overall type of <literal>Alice</literal> to be valid, the
          compiler also needs to check that the <literal>Bob</literal>
          module contains at least a <literal>Bob.name</literal> value
          and defines a <literal>Bob.t</literal> type.
        </para>
        <para>
          The type checker resolves such module references into concrete
          structures and signatures in order to unify types across
          module boundaries. It does this by searching a list of
          directories for a compiled interface file matching that
          module's name. For example, it will look for
          <literal>alice.cmi</literal> and <literal>bob.cmi</literal> on
          the search path, and use the first ones it encounters as the
          interfaces for <literal>Alice</literal> and
          <literal>Bob</literal>.
        </para>
        <para>
          The module search path is set by adding <literal>-I</literal>
          flags to the compiler command-line with the directory
          containing the <literal>cmi</literal> files as the argument.
          Manually specifying these flags gets complex when you have
          lots of libraries, and is the reason why the OCamlfind
          frontend to the compiler exists. OCamlfind automates the
          process of turning third-party package names and build
          descriptions into command-line flags that are passed to the
          compiler command-line.
        </para>
        <para>
          By default, only the current directory and the OCaml standard
          library will be searched for <literal>cmi</literal> files. The
          <literal>Pervasives</literal> module from the standard library
          will also be opened by default in every compilation unit. The
          standard library location is obtained by running
          <literal>ocamlc -where</literal>, and can be overridden by
          setting the <literal>CAMLLIB</literal> environment variable.
          Needless to say, don't override the default path unless you
          have a good reason to (such as setting up a cross-compilation
          environment).
        </para>
        <sidebar>
        <title>
        Inspecting compilation units with
        <literal>ocamlobjinfo</literal>
        </title>
        <para>
          For separate compilation to be sound, we need to ensure that
          all the <literal>cmi</literal> files used to type-check a
          module are the same across compilation runs. If they vary,
          this raises the possibility of two modules checking different
          type signature for a common module with the same name. This in
          turn lets the program completely violate the static type
          system and can lead to memory corruption and crashes.
        </para>
        <para>
          OCaml guards against this by recording a CRC checksum in every
          <literal>cmi</literal>. Let's examine our earlier
          <literal>typedef.ml</literal> more closely.
        </para>
        <programlisting>
$ ocamlc -c typedef.ml
$ ocamlobjinfo typedef.cmi
File typedef.cmi
Unit name: Typedef
Interfaces imported:
    559f8708a08ddf66822f08be4e9c3372    Typedef
    65014ccc4d9329a2666360e6af2d7352    Pervasives
</programlisting>
        <para>
          <literal>ocamlobjinfo</literal> examines the compiled
          interface and displays what other compilation units it depends
          on. In this case, we don't use any external modules other than
          <literal>Pervasives</literal>. Every module depends on
          <literal>Pervasives</literal> by default, unless you use the
          <literal>-nopervasives</literal> flag (this is an advanced
          use-case, and you shouldn't normally need it).
        </para>
        <para>
          The long alphanumeric identifier beside each module name is a
          hash calculated from all the types and values exported from
          that compilation unit. It's used during type-checking and
          linking to ensure that all of the compilation units have been
          compiled consistently against each other. A difference in the
          hashes means that a compilation unit with the same module name
          may have conflicting type signatures in different modules. The
          compiler will reject such programs with an error similar to
          this:
        </para>
        <programlisting>
File &quot;foo.ml&quot;, line 1, characters 0-1:
Error: The files /home/build/bar.cmi
       and /usr/lib/ocaml/map.cmi make inconsistent assumptions
       over interface Map
</programlisting>
        <para>
          This hash check is very conservative, but ensures that
          separate compilation remains type-safe all the way up to the
          final link phase. Your build system should ensure that you
          never see the error messages above, but if you do run into it,
          just clean out your intermediate files and recompile from
          scratch.
        </para>
        </sidebar>
      </sect3>
    </sect2>
    <sect2 id="examining-the-typed-syntax-tree">
      <title>Examining the typed syntax tree</title>
      <caution>
      <title>
      Note to reviewers: uses for the typed syntax tree?
      </title>
      <para>
        We've added this section on the <literal>-dtypedtree</literal>
        and <literal>-dparsetree</literal> for completeness, but will
        probably remove them from the final book since we can't think of
        any concrete examples where inspecting this would be useful for
        the average developer. It's primarily useful to track down
        internal type checker or camlp4 extension errors.
      </para>
      <para>
        But if you can think of a good use-case to justify keeping this
        in the final book, then please leave a comment here!
      </para>
      </caution>
      <para>
        The compiler has a couple of advanced flags that can dump the
        raw output of the internal AST representation. You can't depend
        on these flags to give the same output across compiler
        revisions, but they are a useful learning tool.
      </para>
      <para>
        First, let's look at the untyped AST from our
        <literal>typedef.ml</literal>.
      </para>
      <programlisting>
$ ocamlc -dparsetree typedef.ml
[
  structure_item (typedef.ml[1,0+0]..[1,0+18])
    Pstr_type [
      &quot;t&quot; (typedef.ml[1,0+5]..[1,0+6])
        type_declaration (typedef.ml[1,0+5]..[1,0+18])
          ptype_params = []
          ptype_cstrs = []
          ptype_kind =
            Ptype_variant
              [
                (typedef.ml[1,0+9]..[1,0+12])
                  &quot;Foo&quot; (typedef.ml[1,0+9]..[1,0+12])
                  [] None
                (typedef.ml[1,0+15]..[1,0+18])
                  &quot;Bar&quot; (typedef.ml[1,0+15]..[1,0+18])
                  [] None
              ]
          ptype_private = Public
          ptype_manifest = None
    ]
  structure_item (typedef.ml[2,19+0]..[2,19+11])
    Pstr_value Nonrec [
      &lt;def&gt;
        pattern (typedef.ml[2,19+4]..[2,19+5])
          Ppat_var &quot;v&quot; (typedef.ml[2,19+4]..[2,19+5])
        expression (typedef.ml[2,19+8]..[2,19+11])
          Pexp_construct &quot;Foo&quot; (typedef.ml[2,19+8]..[2,19+11])
          None false
    ]
]
</programlisting>
      <para>
        This is rather a lot of output for a simple two-line program,
        but also reveals a lot about how the compiler works. Each
        portion of the tree is decorated with the precise location
        information (including the filename and character location of
        the token). This code hasn't been type checked yet, and so the
        raw tokens are all included. After type checking, the structure
        is much simpler.
      </para>
      <programlisting>
$ ocamlc -dtypedtree typedef.m
[
  structure_item (typedef.ml[1,0+0]..typedef.ml[1,0+18])
    Pstr_type [
      t/1008
        type_declaration (typedef.ml[1,0+5]..typedef.ml[1,0+18])
          ptype_params = []
          ptype_cstrs = []
          ptype_kind =
            Ptype_variant
              [
                &quot;Foo/1009&quot; []
                &quot;Bar/1010&quot; []
              ]
          ptype_private = Public
          ptype_manifest = None
    ]
  structure_item (typedef.ml[2,19+0]..typedef.ml[2,19+11])
    Pstr_value Nonrec [
      &lt;def&gt;
        pattern (typedef.ml[2,19+4]..typedef.ml[2,19+5])
          Ppat_var &quot;v/1011&quot;
        expression (typedef.ml[2,19+8]..typedef.ml[2,19+11])
          Pexp_construct &quot;Foo&quot; [] false
    ]
]
</programlisting>
      <para>
        The typed AST is more explicit than the untyped syntax tree. For
        instance, the type declaration has been given a unique name
        (<literal>t/1008</literal>), as has the <literal>v</literal>
        value (<literal>v/1011</literal>).
      </para>
      <para>
        You'll never need to use this information in day-to-day
        development, but it's always instructive to examine how the type
        checker folds in the source code into a more compact form like
        this.
      </para>
    </sect2>
  </sect1>
  <sect1 id="the-untyped-lambda-form">
    <title>The untyped lambda form</title>
    <para>
      Once OCaml has passed the type checking stage, it can stop
      emitting syntax and type errors and begin the process of compiling
      the well-formed modules into executable code.
    </para>
    <para>
      The next stage eliminates all the static type information into a
      simpler intermediate <emphasis>lambda form</emphasis>. The lambda
      form discards higher-level constructs such as modules and objects
      and replaces them with simpler values such as records and function
      pointers. Pattern matches are also analyzed and compiled into
      highly optimized automata.
    </para>
    <para>
      The lambda form is the key stage that discards the OCaml type
      information and maps the source code to the runtime memory model
      described in
      <xref linkend="memory-representation-of-values"/>. This
      stage also performs some optimizations, most notably converting
      pattern match statements into more optimized but low-level
      statements.
    </para>
    <sect2 id="pattern-matching-optimization">
      <title>Pattern matching optimization</title>
      <para>
        The compiler dumps the lambda form in an s-expression syntax if
        you add the <literal>-dlambda</literal> directive to the
        command-line. Let's use this to learn more about how the OCaml
        pattern matching engine works by building three different
        pattern matches and comparing their lambda forms.
      </para>
      <para>
        Let's start by creating a straightforward exhaustive pattern
        match using normal variants.
      </para>
      <programlisting language="ocaml">
(* pattern_monomorphic_exhaustive.ml *)
type t = | Alice | Bob | Charlie | David

let test v =
  match v with
  | Alice   -&gt; 100
  | Bob     -&gt; 101
  | Charlie -&gt; 102
  | David   -&gt; 103
</programlisting>
      <para>
        The lambda output for this code looks like this.
      </para>
      <programlisting>
$ ocamlc -dlambda -c pattern_monomorphic_exhaustive.ml
(setglobal Pattern_monomorphic_exhaustive!
  (let
    (test/1013
       (function v/1014
         (switch* v/1014
          case int 0: 100
          case int 1: 101
          case int 2: 102
          case int 3: 103)))
    (makeblock 0 test/1013)))
</programlisting>
      <para>
        It's not important to understand every detail of this internal
        form, but some interesting points emerge from reading it.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            There are no mention of modules or types any more. Global
            values are created via <literal>setglobal</literal> and
            OCaml values are constructed by
            <literal>makeblock</literal>. The blocks are the runtime
            values you should remember from
            <xref linkend="memory-representation-of-values"/>.
          </para>
        </listitem>
        <listitem>
          <para>
            The pattern match has turned into a switch case that jumps
            to the right case depending on the header tag of
            <literal>v</literal>. Recall that variants without
            parameters are stored in memory as integers in the order
            which they appear. The pattern matching engine knows this
            and has transformed the pattern into an efficient jump
            table.
          </para>
        </listitem>
        <listitem>
          <para>
            Values are addressed by a unique name that distinguished
            shadowed values by appending a number (e.g.
            <literal>v/1014</literal>). The type safety checks in the
            earlier phase ensure that these low-level accesses never
            violate runtime memory safety, so this layer doesn't do any
            dynamic checks. Unwise use of unsafe features such as the
            <literal>Obj.magic</literal> module can still easily induce
            crashes at this level.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The first pattern match is <emphasis>exhaustive</emphasis>, so
        there are no unknown match cases that the compiler needs to
        check for (e.g. a value greater than 3). What happens if we
        modify the code to use an incomplete pattern match instead?
      </para>
      <programlisting language="ocaml">
(* pattern_monomorphic_incomplete.ml *)
type t = | Alice | Bob | Charlie | David

let test v =
  match v with
  | Alice   -&gt; 100
  | Bob     -&gt; 101
  | _       -&gt; 102
</programlisting>
      <para>
        The lambda output for this code is now quite different.
      </para>
      <programlisting>
$ ocamlc -dlambda -c pattern_monomorphic_incomplete.ml 
(setglobal Pattern_monomorphic_incomplete!
  (let
    (test/1013
       (function v/1014 (if (!= v/1014 1) (if (!= v/1014 0) 102 100) 101)))
    (makeblock 0 test/1013)))
</programlisting>
      <para>
        The compiler has reverted to testing the value as a set of
        nested conditionals. The lambda code above first checks to see
        if the value is <literal>Alice</literal>, then if it's
        <literal>Bob</literal> and finally falls back to the default
        <literal>102</literal> return value for everything else.
      </para>
      <para>
        Exhaustive pattern matching is thus a better coding style at
        several levels. It rewards you with more useful compile-time
        warnings when you modify type definitions
        <emphasis>and</emphasis> generates more efficient runtime code
        too.
      </para>
      <para>
        Finally, let's look at the same code, but with polymorphic
        variants instead of normal variants.
      </para>
      <programlisting language="ocaml">
(* pattern_polymorphic.ml *)
let test v =
  match v with
  | `Alice   -&gt; 100
  | `Bob     -&gt; 101
  | `Charlie -&gt; 102
  | `David   -&gt; 103
</programlisting>
      <para>
        The lambda form for this reveals the most inefficient result
        yet.
      </para>
      <programlisting>
$ ocamlc -dlambda -c pattern_polymorphic.ml 
(setglobal Pattern_polymorphic!
  (let
    (test/1008
       (function v/1009
         (if (&gt;= v/1009 482771474) (if (&gt;= v/1009 884917024) 100 102)
           (if (&gt;= v/1009 3306965) 101 103))))
    (makeblock 0 test/1008)))
</programlisting>
      <para>
        We mentioned earlier in <xref linkend="variants"/>
        that pattern matching over polymorphic variants is slightly less
        efficient, and it should be clearer why this is the case now.
        Polymorphic variants have a runtime value that's calculated by
        hashing the variant name, and so the compiler has to test each
        of these possible hash values in sequence.
      </para>
    </sect2>
    <sect2 id="benchmarking-pattern-matching">
      <title>Benchmarking pattern matching</title>
      <para>
        Let's benchmark these three pattern matching techniques to
        quantify their runtime costs more accurately. The
        <literal>Core_bench</literal> module runs the tests thousands of
        times and also calculates statistical variance of the results.
        You'll need to <literal>opam install core_bench</literal> to get
        the library.
      </para>
      <programlisting language="ocaml">
(* pattern.ml: benchmark different pattern matching styles *)
open Core.Std
open Core_bench.Std

type t = | Alice | Bob | Charlie | David

let polymorphic_pattern () =
  let test v =
    match v with
    | `Alice   -&gt; 100
    | `Bob     -&gt; 101
    | `Charlie -&gt; 102
    | `David   -&gt; 103
  in
  List.iter ~f:(fun v -&gt; ignore(test v))
    [`Alice; `Bob; `Charlie; `David]
 
let monomorphic_pattern_exhaustive () =
  let test v =
    match v with
    | Alice   -&gt; 100
    | Bob     -&gt; 101
    | Charlie -&gt; 102
    | David   -&gt; 103
  in
  List.iter ~f:(fun v -&gt; ignore(test v))
    [ Alice; Bob; Charlie; David ]

 let monomorphic_pattern_incomplete () =
  let test v =
    match v with
    | Alice   -&gt; 100
    | Bob     -&gt; 101
    | _       -&gt; 102
  in
  List.iter ~f:(fun v -&gt; ignore(test v))
    [ Alice; Bob; Charlie; David ]
 
let tests = [
    &quot;Polymorphic pattern&quot;, polymorphic_pattern;
    &quot;Monomorphic incomplete pattern&quot;, monomorphic_pattern_incomplete;
    &quot;Monomorphic exhaustive pattern&quot;, monomorphic_pattern_exhaustive
]

let () =
  List.map tests ~f:(fun (name,test) -&gt; Bench.Test.create ~name test)
  |&gt; Bench.make_command
  |&gt; Command.run
</programlisting>
      <para>
        Building and executing this example will run for around 30
        seconds by default, and you'll see the results summarised in a
        neat table.
      </para>
      <programlisting>
$ ocamlbuild -use-ocamlfind -package core -package core_bench -tag thread pattern.native
Estimated testing time 30s (change using -quota SECS).
+────────────────────────────────+───────────+─────────────+────────────+
│ Name                           │ Time (ns) │   Time 95ci │ Percentage │
+────────────────────────────────+───────────+─────────────+────────────+
│ Polymorphic pattern            │     22.38 │ 22.34-22.43 │     100.00 │
│ Monomorphic incomplete pattern │     20.98 │ 20.95-21.02 │      93.77 │
│ Monomorphic exhaustive pattern │     19.53 │ 19.49-19.58 │      87.25 │
+────────────────────────────────+───────────┴─────────────+────────────+
</programlisting>
      <para>
        These results confirm our earlier performance hypothesis
        obtained from inspecting the lambda code. The shortest running
        time comes from the exhaustive pattern match and polymorphic
        variant pattern matching is the slowest. There isn't a hugely
        significant difference in these examples, but you can use the
        same techniques to peer into the innards of your own source code
        and narrow down any performance hotspots.
      </para>
      <para>
        The lambda form is primarily a stepping stone to the bytecode
        executable format that we'll cover next. It's often easier to
        look at the textual output from this stage than to wade through
        the native assembly code from compiled executables.
      </para>
      <note>
      <title>
      Learning more about pattern matching compilation
      </title>
      <para>
        Pattern matching is an important part of OCaml programming.
        You'll often encounter deeply nested pattern matches over
        complex data structures in real code. A good paper that
        describes the fundamental algorithms implemented in OCaml is
        <ulink url="http://dl.acm.org/citation.cfm?id=507641">&quot;Optimizing
        pattern matching&quot;</ulink> by Fabrice Le Fessant and Luc
        Maranget.
      </para>
      <para>
        The paper describes the backtracking algorithm used in classical
        pattern matching compilation, and also several OCaml-specific
        optimizations such as the use of exhaustiveness information and
        control flow optimizations via static exceptions.
      </para>
      <para>
        It's not essential that you understand all of this just to use
        pattern matching of course, but it'll give you insight as to why
        pattern matching is such a lightweight language construct to use
        in OCaml code.
      </para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="generating-portable-bytecode">
    <title>Generating portable bytecode</title>
    <para>
      After the lambda form has been generated, we are very close to
      having executable code. The OCaml tool-chain branches into two
      separate compilers at this point. We'll describe the the bytecode
      compiler first, which consists of two pieces:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>ocamlc</literal> compiles files into a bytecode that
          is a close mapping to the lambda form.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ocamlrun</literal> is a portable interpreter that
          executes the bytecode.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The big advantage of using bytecode is simplicity, portability and
      compilation speed. The mapping from the lambda form to bytecode is
      straightforward, and this results in predictable (but slow)
      execution speed.
    </para>
    <para>
      The interpreter uses the OCaml stack and an accumulator to store
      values. It only has seven registers in total: the program counter,
      stack pointer, accumulator, exception and argument pointers, and
      environment and global data.
    </para>
    <para>
      You can display the bytecode instructions in textual form via
      <literal>-dinstr</literal>. Try this on one of our earlier pattern
      matching examples.
    </para>
    <programlisting>
$ ocamlc -dinstr pattern_monomorphic_exhaustive.ml 
    branch L2
L1: acc 0
    switch 6 5 4 3/
L6: const 100
    return 1
L5: const 101
    return 1
L4: const 102
    return 1
L3: const 103
    return 1
L2: closure L1, 0
    push
    acc 0
    makeblock 1, 0
    pop 1
    setglobal Pattern_monomorphic_exhaustive!
</programlisting>
    <para>
      The bytecode above has been simplified from the lambda form into a
      set of simple instructions that are executed in serial by the
      interpreter.
    </para>
    <para>
      There are around 140 instructions in total, but most are just
      minor variants of commonly encountered operations (e.g. function
      application at a specific arity). You can find full details
      <ulink url="http://cadmium.x9c.fr/distrib/caml-instructions.pdf">online</ulink>.
    </para>
    <note>
    <title>
    Where did the bytecode instruction set come from?
    </title>
    <para>
      The bytecode interpreter is much slower than compiled native code,
      but is still remarkably performant for an interpreter without a
      JIT compiler. Its efficiency can be traced back to Xavier Leroy's
      ground-breaking work in 1990 on
      <ulink url="http://hal.inria.fr/docs/00/07/00/49/PS/RT-0117.ps">&quot;The
      ZINC experiment: An Economical Implementation of the ML
      Language&quot;</ulink>.
    </para>
    <para>
      This paper laid the theoretical basis for the implementation of an
      instruction set for a strictly evaluated functional language such
      as OCaml. The bytecode interpreter in modern OCaml is still based
      on the ZINC model. The native code compiler uses a different model
      since it uses CPU registers for function calls instead of always
      passing arguments on the stack as the bytecode interpreter does.
    </para>
    <para>
      Understanding the reasoning behind the different implementations
      of the bytecode interpreter and the native compiler is a very
      useful exercise for any budding language hacker.
    </para>
    </note>
    <sect2 id="compiling-and-linking-bytecode">
      <title>Compiling and linking bytecode</title>
      <para>
        The <literal>ocamlc</literal> command compiles individual
        <literal>ml</literal> files into bytecode files that have a
        <literal>cmo</literal> extension. The compiled bytecode files
        are matched with the associated <literal>cmi</literal> interface
        which contains the type signature exported to other compilation
        units.
      </para>
      <para>
        A typical OCaml library consists of multiple source files and
        hence multiple <literal>cmo</literal> files that all need to
        passed on the command line to use the library. The compiler can
        combine these into a more convenient archive file by using the
        <literal>-a</literal> flag. Bytecode archives are denoted by the
        <literal>cma</literal> extension.
      </para>
      <para>
        The individual objects in the library are linked as regular
        <literal>cmo</literal> files in the order specified when the
        library file was built. If an object file within the library
        isn't referenced elsewhere in the program, then it isn't
        included in the final binary unless the
        <literal>-linkall</literal> flag forces its inclusion. This
        behaviour is analogous to how C handles object files and
        archives (<literal>.o</literal> and <literal>.a</literal>
        respectively).
      </para>
      <para>
        The bytecode files are then linked together with the OCaml
        standard library to produce an executable program. The order in
        which <literal>.cmo</literal> arguments are presented on the
        command line defines the order in which compilation units are
        initialized at runtime. Remember that OCaml has no single
        <literal>main</literal> function like C, so this link is order
        is more important than in C.
      </para>
    </sect2>
    <sect2 id="executing-bytecode">
      <title>Executing bytecode</title>
      <para>
        The bytecode runtime comprises three parts: the bytecode
        interpreter, garbage collector, and a set of C functions that
        implement the primitive operations. The bytecode contains
        instructions to call these C functions when required.
      </para>
      <para>
        The OCaml linker produces bytecode targeted the standard OCaml
        runtime by default, and so needs to know about any C functions
        that are referenced from other libraries that aren't loaded by
        default.
      </para>
      <para>
        Information about these extra libraries can be specified while
        linking a bytecode archive.
      </para>
      <programlisting>
$ ocamlc -a -o mylib.cma a.cmo b.cmo -dllib -lmylib
</programlisting>
      <para>
        The <literal>dllib</literal> flag embeds the arguments in the
        archive file. Any subsequent packages linking this archive will
        also include the extra C linking directive. This in turn lets
        the interpreter dynamically load the external library symbols
        when it executes the bytecode.
      </para>
      <para>
        You can also generate a complete standalone executable that
        bundles the <literal>ocamlrun</literal> interpreter with the
        bytecode in a single binary. This is known as a <emphasis>custom
        runtime</emphasis> mode and is built as follows.
      </para>
      <programlisting>
$ ocamlc -a -o mylib.cma -custom a.cmo b.cmo -cclib -lmylib
</programlisting>
      <para>
        The custom mode is the most similar mode to native code
        compilation, as both generate standalone executables. There are
        quite a few other options available for compiling bytecode
        (notably with shared libraries or building custom runtimes).
        Full details can be found in the
        <ulink url="http://caml.inria.fr/pub/docs/manual-ocaml/manual022.html">manual</ulink>.
      </para>
    </sect2>
    <sect2 id="embedding-ocaml-bytecode-in-c">
      <title>Embedding OCaml bytecode in C</title>
      <para>
        A consequence of using the bytecode compiler is that the final
        link phase must be performed by <literal>ocamlc</literal>.
        However, you might sometimes want to embed your OCaml code
        inside an existing C application. OCaml also supports this mode
        of operation via the <literal>-output-obj</literal> directive.
      </para>
      <para>
        This mode causes <literal>ocamlc</literal> to output a C object
        file that containing the bytecode for the OCaml part of the
        program, as well as a <literal>caml_startup</literal> function.
        All of the OCaml modules are linked into this object file as
        bytecode, just as they would be for an executable.
      </para>
      <para>
        This object file can then be linked with C code using the
        standard C compiler, and only needs the bytecode runtime library
        (which is installed as <literal>libcamlrun.a</literal>).
        Creating an executable just requires you to link the runtime
        library with the bytecode object file. Here's an example to show
        how it all fits together.
      </para>
      <para>
        Create two OCaml source files that contain a single print line.
      </para>
      <programlisting>
$ cat embed_me1.ml 
let () = print_endline &quot;hello embedded world 1&quot;
$ cat embed_me2.ml 
let () = print_endline &quot;hello embedded world 2&quot;
</programlisting>
      <para>
        Next, create a C file which will be your main entry point.
      </para>
      <programlisting language="c">
/* main.c */
#include &lt;stdio.h&gt;
#include &lt;caml/alloc.h&gt;
#include &lt;caml/mlvalues.h&gt;
#include &lt;caml/memory.h&gt;
#include &lt;caml/callback.h&gt;

int 
main (int argc, char **argv)
{
  puts(&quot;Before calling OCaml&quot;);
  caml_startup (argv);
  puts(&quot;After calling OCaml&quot;);
  return 0;
}
</programlisting>
      <para>
        Now compile the OCaml files into a standalone object file.
      </para>
      <programlisting>
$ ocamlc -output-obj -o embed_out.o embed_me1.ml embed_me2.ml
</programlisting>
      <para>
        After this point, you no longer need the OCaml compiler, as
        <literal>embed_out.o</literal> has all of the OCaml code
        compiled and linked into a single object file. Compile an output
        binary using gcc to test this out.
      </para>
      <programlisting>
$ gcc -Wall -I `ocamlc -where` -L `ocamlc -where` -lcamlrun -ltermcap \
  -o final_out embed_out.o main.c
$ ./final_out 
Before calling OCaml
hello embedded world 1
hello embedded world 2
After calling OCaml
</programlisting>
      <para>
        Once inconvenience with <literal>gcc</literal> is that you need
        to specify the location of the OCaml library directory. The
        OCaml compiler can actually handle C object and sources
        directly. It passes these through to the system C compiler but
        adds its standard directory and runtime on the way. You can thus
        compile the previous object file much more simply with
        <literal>ocamlc</literal>.
      </para>
      <programlisting>
$ ocamlc -o final_out2 embed_out.o main.c
$ ./final_out2
Before calling OCaml
hello embedded world 1
hello embedded world 2
After calling OCaml
</programlisting>
      <para>
        You can inspect the commands that <literal>ocamlc</literal> is
        invoking by adding <literal>-verbose</literal> to the command
        line. You can even obtain the C source code to the
        <literal>-output-obj</literal> result by specifying a
        <literal>.c</literal> output file extension instead of the
        <literal>.o</literal> we used earlier.
      </para>
      <programlisting>
$ ocamlc -output-obj -o embed_out.c embed_me1.ml embed_me2.ml
$ cat embed_out.c
</programlisting>
      <para>
        Embedding OCaml code like this lets you write OCaml that
        interfaces with any environment that works with a C compiler.
        You can even cross back from the C code into OCaml by using the
        <literal>Callback</literal> module to register named entry
        points in the OCaml code. This is explained in detail in the
        <ulink url="http://caml.inria.fr/pub/docs/manual-ocaml/manual033.html#toc149">interfacing
        with C</ulink> section of the OCaml manual.
      </para>
    </sect2>
  </sect1>
  <sect1 id="compiling-fast-native-code">
    <title>Compiling fast native code</title>
    <para>
      The native code compiler is ultimately the tool that most
      production OCaml code goes through. It compiles the lambda form
      into fast native code executables, with cross-module inlining and
      additional optimization passes that the bytecode interpreter
      doesn't perform. Care is taken to ensure compatibility with the
      bytecode runtime, so the same code should run identically when
      compiled with either toolchain.
    </para>
    <para>
      The <literal>ocamlopt</literal> command is the frontend to the
      native code compiler, and has a very similar interface to
      <literal>ocamlc</literal>. It also accepts <literal>ml</literal>
      and <literal>mli</literal> files, but compiles them to:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          A <literal>.o</literal> file containing native object code.
        </para>
      </listitem>
      <listitem>
        <para>
          A <literal>.cmx</literal> file containing extra information
          for linking and cross-module optimization.
        </para>
      </listitem>
      <listitem>
        <para>
          A <literal>.cmi</literal> compiled interface file that is the
          same as the bytecode compiler.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      When the compiler links modules together into an executable, it
      uses the contents of the <literal>cmx</literal> files to perform
      cross-module inlining across compilation units. This can be a
      significant speedup for standard library functions that are
      frequently used outside of their module.
    </para>
    <para>
      Collections of <literal>.cmx</literal> and <literal>.o</literal>
      files can also be be linked into a <literal>.cmxa</literal>
      archive by passing the <literal>-a</literal> flag to the compiler.
      However, unlike the bytecode version, you must keep the individual
      <literal>cmx</literal> files in the compiler search path so that
      they are available for cross-module inlining. If you don't do
      this, the compilation will still succeed, but you will have missed
      out on an important optimization and have slower binaries.
    </para>
    <sect2 id="inspecting-assembly-output">
      <title>Inspecting assembly output</title>
      <para>
        The native code compiler generates assembly language that is
        then passed to the system assembler for compiling into object
        files. You can get <literal>ocamlopt</literal> to output the
        assembly by passing the <literal>-S</literal> flag to the
        compiler command-line.
      </para>
      <para>
        The assembly code is highly architecture specific, so the
        discussion below assumes an Intel or AMD 64-bit platform. We've
        generated the example code using <literal>-inline 20</literal>
        and <literal>-nodynlink</literal> since it's best to generate
        assembly code with the full optimizations that the compiler
        supports. Even though these optimizations make the code a bit
        harder to read, it will give you a more accurate picture of what
        executes on the CPU. Don't forget that you can use the lambda
        code from earlier to get a slightly higher level picture of the
        code if you get lost in the more verbose assembly.
      </para>
      <sect3 id="the-impact-of-polymorphic-comparison">
        <title>The impact of polymorphic comparison</title>
        <para>
          We warned you earlier in
          <xref linkend="maps-and-hashtables"/> that using
          polymorphic comparison is both convenient and perilous. Let's
          look at precisely what the difference is at the assembly
          language level now.
        </para>
        <para>
          First create a comparison function where we've explicitly
          annotated the types, so the compiler knows that only integers
          are being compared.
        </para>
        <programlisting language="ocaml">
(* compare_mono.ml *)
let cmp (a:int) (b:int) =
  if a &gt; b then a else b
</programlisting>
        <para>
          Now compile this into assembly and read the resulting
          <literal>compare_mono.S</literal> file.
        </para>
        <programlisting>
$ ocamlopt -inline 20 -nodynlink -S compare_mono.ml
$ cat compare_mono.S
</programlisting>
        <para>
          If you've never seen assembly language before then the
          contents may be rather scary. While you'll need to learn x86
          assembly to fully understand it, we'll try to give you some
          basic instructions to spot patterns in this section. The
          excerpt of the implementation of the <literal>cmp</literal>
          function can be found below.
        </para>
        <programlisting>
_camlCompare_mono__cmp_1008:
    .cfi_startproc
.L101:
    cmpq    %rbx, %rax
    jle .L100
    ret
    .align  2
.L100:
    movq    %rbx, %rax
    ret
    .cfi_endproc
</programlisting>
        <para>
          The <literal>_camlCompare_mono__cmp_1008</literal> is an
          assembly label that has been computed from the module name
          (<literal>Compare_mono</literal>) and the function name
          (<literal>cmp_1008</literal>). The numeric suffix for the
          function name comes straight from the lambda form (which you
          can inspect using <literal>-dlambda</literal>, but in this
          case isn't necessary).
        </para>
        <para>
          The arguments to <literal>cmp</literal> are passed in the
          <literal>%rbx</literal> and <literal>%rax</literal> registers,
          and compared using the <literal>jle</literal> &quot;jump if
          less than or equal&quot; instruction. This requires both the
          arguments to be immediate integers to work. Now let's see what
          happens if our OCaml code omits the type annotations and is a
          polymorphic comparison instead.
        </para>
        <programlisting language="ocaml">
(* compare_poly.ml *)
let cmp a b =
  if a &gt; b then a else b
</programlisting>
        <para>
          Compiling this code with <literal>-S</literal> results in a
          significantly more complex assembly output for the same
          function.
        </para>
        <programlisting>
_camlCompare_poly__cmp_1008:
        .cfi_startproc
        subq    $24, %rsp
        .cfi_adjust_cfa_offset  24
.L101:
        movq    %rax, 8(%rsp)
        movq    %rbx, 0(%rsp)
        movq    %rax, %rdi
        movq    %rbx, %rsi
        leaq    _caml_greaterthan(%rip), %rax
        call    _caml_c_call
.L102:
        leaq    _caml_young_ptr(%rip), %r11
        movq    (%r11), %r15
        cmpq    $1, %rax
        je      .L100
        movq    8(%rsp), %rax
        addq    $24, %rsp
        .cfi_adjust_cfa_offset  -24
        ret
        .cfi_adjust_cfa_offset  24
        .align  2
.L100:
        movq    0(%rsp), %rax
        addq    $24, %rsp
        .cfi_adjust_cfa_offset  -24
        ret
        .cfi_adjust_cfa_offset  24
        .cfi_endproc
</programlisting>
        <para>
          The <literal>.cfi</literal> directives are assembler hints
          that contain Call Frame Information that lets the GNU debugger
          provide more sensible backtraces, and have no effect on
          runtime performance. Notice that the rest of the
          implementation is no longer a simple register comparison.
          Instead, the arguments are pushed on the stack (the
          <literal>%rsp</literal> register) and a C function call is
          invoked by placing a pointer to
          <literal>caml_greaterthan</literal> in <literal>%rax</literal>
          and jumping to <literal>caml_c_call</literal>.
        </para>
        <para>
          OCaml on 64-bit Intel architectures caches the location of the
          minor heap in the <literal>%r11</literal> register since it's
          so frequently referenced in OCaml functions. This register
          isn't guaranteed to be preserved when calling into C code
          (which can clobber <literal>%r11</literal> for its own
          purposes), and so <literal>%r11</literal> is restored after
          returning from the <literal>caml_greaterthan</literal> call.
          Finally the return value of the comparison is popped from the
          stack and returned.
        </para>
        <tip>
        <title>
        Reading the implementation of the C primitives
        </title>
        <para>
          If you have a copy of the OCaml source tree handy, it's worth
          reading through the definition of
          <literal>caml_greaterthan()</literal>. The built-in primitives
          for polymorphic comparison can be found in
          <literal>caml/byterun/compare.c</literal>.
        </para>
        <para>
          The key function is <literal>compare_val()</literal>, which
          directly examines the runtime representation of two OCaml
          values to decide which is greater. This requires the header
          tag to be examined, and recursive structures must be tested
          step-by-step.
        </para>
        <para>
          Avoiding running all of this code is why you should try to
          write explicit comparison functions in OCaml instead.
        </para>
        </tip>
      </sect3>
      <sect3 id="benchmarking-polymorphic-comparison">
        <title>Benchmarking polymorphic comparison</title>
        <para>
          You don't have to fully understand the intricacies of assembly
          language to see that this polymorphic comparison is much
          heavier than the simple monomorphic integer comparison from
          earlier. Let's confirm this hypothesis again by writing a
          quick <literal>Core_bench</literal> test with both functions.
        </para>
        <programlisting language="ocaml">
$ cat bench_poly_and_mono.ml 
open Core.Std
open Core_bench.Std

let polymorphic_compare () =
  let cmp a b = if a &gt; b then a else b in
  for i = 0 to 1000 do
    ignore(cmp 0 i)
  done

let monomorphic_compare () =
  let cmp (a:int) (b:int) =
    if a &gt; b then a else b in
  for i = 0 to 1000 do
    ignore(cmp 0 i)
  done

let tests = [
    &quot;Polymorphic comparison&quot;, polymorphic_compare;
    &quot;Monomorphic comparison&quot;, monomorphic_compare ]

let () =
  List.map tests ~f:(fun (name,test) -&gt; Bench.Test.create ~name test)
  |&gt; Bench.make_command
  |&gt; Command.run
</programlisting>
        <para>
          Running this shows quite a significant runtime difference
          between the two.
        </para>
        <programlisting>
$ ./bench_poly_and_mono.native 
Estimated testing time 20s (change using -quota SECS).
┌────────────────────────┬───────────┬───────────────┬────────────┐
│ Name                   │ Time (ns) │     Time 95ci │ Percentage │
├────────────────────────┼───────────┼───────────────┼────────────┤
│ Polymorphic comparison │    10_087 │ 10_080-10_096 │     100.00 │
│ Monomorphic comparison │    585.51 │ 584.60-586.57 │       5.80 │
└────────────────────────┴───────────┴───────────────┴────────────┘
</programlisting>
        <para>
          We see that the polymorphic comparison is close to 20 times
          slower! These results shouldn't be taken too seriously as this
          is a very narrow test, which like all such microbenchmarks
          aren't representative of more complex codebases. However, if
          you're building numerical code that runs many iterations in a
          tight inner loop, it's worth manually peering at the produced
          assembly code to see if you can hand-optimize it.
        </para>
      </sect3>
    </sect2>
    <sect2 id="debugging-native-code-binaries">
      <title>Debugging native code binaries</title>
      <para>
        The native code compiler builds executables that can be debugged
        using conventional system debuggers such as GNU
        <literal>gdb</literal>. You need to compile your libraries with
        the <literal>-g</literal> option to add the debug information to
        the output, just as you need to with C compilers.
      </para>
      <para>
        Extra debugging information is inserted into the output assembly
        when the library is compiled in debug mode. These include the
        CFI stubs you will have noticed in the profiling output earlier
        (<literal>.cfi_start_proc</literal> and
        <literal>.cfi_end_proc</literal> to delimit an OCaml function
        call, for example).
      </para>
      <sect3 id="understanding-name-mangling">
        <title>Understanding name mangling</title>
        <para>
          So how do you refer to OCaml functions into an interactive
          debugger like <literal>gdb</literal>? The first thing you need
          to know is how function names compile down into C symbols; a
          procedure generally called <emphasis>name mangling</emphasis>.
        </para>
        <para>
          Each OCaml source file is compiled into a native object file
          that must export a unique set of symbols to comply with the C
          binary interface. This means that any OCaml values that may be
          used by another compilation unit need to be mapped into a
          symbol name. This mapping fhas to account for OCaml language
          features such as nested modules, anonymous functions and
          variable names that shadow each other.
        </para>
        <para>
          The conversion follows some straightforward rules for named
          variables and functions:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              The symbol is prefixed by <literal>caml</literal> and the
              local module name, with dots replaced by underscores.
            </para>
          </listitem>
          <listitem>
            <para>
              This is followed by a double <literal>__</literal> suffix
              and the variable name.
            </para>
          </listitem>
          <listitem>
            <para>
              The variable name is also suffixed by a
              <literal>_</literal> and a number. This is the result of
              the lambda compilation that replaces each variable name
              with a unique value within the module. You can determine
              this number by examining the <literal>-dlambda</literal>
              output from <literal>ocamlopt</literal>.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Anonymous functions are hard to predict without inspecting
          intermediate compiler output. If you need to debug them it's
          usually easier to modify the source code to let-bind the
          anonymous function to a variable name.
        </para>
      </sect3>
      <sect3 id="interactive-breakpoints-with-the-gnu-debugger">
        <title>Interactive breakpoints with the GNU debugger</title>
        <para>
          Let's see name mangling in action with some interactive
          debugging in the GNU <literal>gdb</literal> debugger.
        </para>
        <caution>
        <title>
        Beware <literal>gdb</literal> on MacOS X
        </title>
        <para>
          The examples here assume that you are running
          <literal>gdb</literal> on either Linux or FreeBSD. MacOS X
          does have <literal>gdb</literal> installed, but it's a rather
          quirky experience that doesn't reliably interpret the
          debugging information contained in the native binaries. This
          can result in function names showing up as raw symbols such as
          <literal>.L101</literal> instead of their more human-readable
          form.
        </para>
        <para>
          For OCaml 4.1, we'd recommend you do native code debugging on
          an alternate platform such as Linux, or manually look at the
          assembly code output to map the symbol names onto their
          precise OCaml functions.
        </para>
        </caution>
        <para>
          Let's write a mutually recursive function that selects
          alternating values from a list. This isn't tail recursive and
          so our stack size will grow as we single-step through the
          execution.
        </para>
        <programlisting language="ocaml">
(* alternate_list.ml : select every other value from an input list *)
open Core.Std

let rec take =
  function
  |[] -&gt; []
  |hd::tl -&gt; hd :: (skip tl)
and skip =
  function
  |[] -&gt; []
  |hd::tl -&gt; take tl

let () =
  take [1;2;3;4;5;6;7;8;9]
  |&gt; List.map ~f:string_of_int
  |&gt; String.concat ~sep:&quot;,&quot;
  |&gt; print_endline
</programlisting>
        <para>
          Compile and run this with debugging symbols. You should see
          the following output:
        </para>
        <programlisting>
$ ocamlfind ocamlopt -g -package core -thread -linkpkg -o alternate alternate_list.ml
$ ./alternate
1,3,5,7,9
</programlisting>
        <para>
          Now we can run this interactively within
          <literal>gdb</literal>.
        </para>
        <programlisting>
$ gdb ./alternate
GNU gdb (GDB) 7.4.1-debian
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;
and &quot;show warranty&quot; for details.
This GDB was configured as &quot;x86_64-linux-gnu&quot;.
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;...
Reading symbols from /home/avsm/alternate...done.
(gdb)
</programlisting>
        <para>
          The <literal>gdb</literal> prompt lets you enter debug
          directives. Let's set the program to break just before the
          first call to <literal>take</literal>.
        </para>
        <programlisting>
(gdb) break camlAlternate_list__take_69242 
Breakpoint 1 at 0x5658d0: file alternate_list.ml, line 5.
</programlisting>
        <para>
          We used the C symbol name by following the name mangling rules
          defined earlier. A convenient way to figure out the full name
          is by tab-completion. Just type in a portion of the name and
          press the <literal>&lt;tab&gt;</literal> key to see a list of
          possible completions.
        </para>
        <para>
          Once you've set the breakpoint, start the program executing.
        </para>
        <programlisting>
(gdb) run
Starting program: /home/avsm/alternate
[Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.

Breakpoint 1, camlAlternate_list__take_69242 () at alternate_list.ml:5
4     function
</programlisting>
        <para>
          The binary has run until the first take invocation and
          stopped, waiting for further instructions. GDB has lots of
          features, so let's continue the program and check the
          stacktrace after a couple of recursions.
        </para>
        <programlisting>
(gdb) cont
Continuing.

Breakpoint 1, camlAlternate_list__take_69242 () at alternate_list.ml:5
4     function
(gdb) cont
Continuing.

Breakpoint 1, camlAlternate_list__take_69242 () at alternate_list.ml:5
4     function
(gdb) bt
#0  camlAlternate_list__take_69242 () at alternate_list.ml:4
#1  0x00000000005658e7 in camlAlternate_list__take_69242 () at alternate_list.ml:6
#2  0x00000000005658e7 in camlAlternate_list__take_69242 () at alternate_list.ml:6
#3  0x00000000005659f7 in camlAlternate_list__entry () at alternate_list.ml:14
#4  0x0000000000560029 in caml_program ()
#5  0x000000000080984a in caml_start_program ()
#6  0x00000000008099a0 in ?? ()
#7  0x0000000000000000 in ?? ()
(gdb) clear camlAlternate_list__take_69242
Deleted breakpoint 1 
(gdb) cont
Continuing.
1,3,5,7,9
[Inferior 1 (process 3546) exited normally]
</programlisting>
        <para>
          The <literal>cont</literal> command resumes execution after a
          breakpoint has paused it, <literal>bt</literal> displays a
          stack backtrace, and <literal>clear</literal> deletes the
          breakpoint so that the application can execute until
          completion. GDB has a host of other features we won't cover
          here, but you view more guidelines via Mark Shinwell's talk on
          <ulink url="http://www.youtube.com/watch?v=NF2WpWnB-nk&lt;">&quot;Real-world
          debugging in OCaml&quot;</ulink>.
        </para>
        <para>
          One very useful feature of OCaml native code is that C and
          OCaml both share the same stack. This means that GDB
          backtraces can give you a combined view of what's going on in
          your program <emphasis>and</emphasis> runtime library. This
          includes any calls to C libraries or even callbacks into OCaml
          from the C layer if you're in an embedded environment.
        </para>
      </sect3>
    </sect2>
    <sect2 id="profiling-native-code">
      <title>Profiling native code</title>
      <para>
        The recording and analysis of where your application spends its
        execution time is known as <emphasis>performance
        profiling</emphasis>. OCaml native code binaries can be profiled
        just like any other C binary, by using the name mangling
        described earlier to map between OCaml variable names and the
        profiler output.
      </para>
      <para>
        Most profiling tools benefit from having some instrumentation
        included in the binary. OCaml supports two such tools:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            GNU Gprof to measure execution time and call graphs.
          </para>
        </listitem>
        <listitem>
          <para>
            The <ulink url="https://perf.wiki.kernel.org/">Perf</ulink>
            profiling framework in modern versions of Linux.
          </para>
        </listitem>
      </itemizedlist>
      <sect3 id="gprof">
        <title>Gprof</title>
        <para>
          Gprof produces an execution profile of an OCaml program by
          recording a call graph of which functions call each other, and
          recording the time these calls take during the program
          execution.
        </para>
        <para>
          Getting precise information out of Gprof requires passing the
          <literal>-p</literal> flag to the native code compiler when
          compiling <emphasis>and</emphasis> linking the binary. This
          generates extra code that records profile information to a
          file called <literal>gmon.out</literal> when the program is
          executed. This profile information then can then be examined
          using Gprof.
        </para>
      </sect3>
      <sect3 id="perf">
        <title>Perf</title>
        <para>
          Perf is a more modern alternative to Gprof that doesn't
          require you to instrument the binary. Instead, it uses
          hardware counters and debug information within the binary to
          record information accurately.
        </para>
        <para>
          Run Perf on a compiled binary to record information first.
          We'll use our write barrier benchmark from earlier which
          measures memory allocation versus in-place modification.
        </para>
        <programlisting>
$ perf record -g ./barrier.native 
Estimated testing time 20s (change using -quota SECS).
┌───────────┬───────────┬─────────────────────┬────────────┐
│ Name      │ Time (ns) │           Time 95ci │ Percentage │
├───────────┼───────────┼─────────────────────┼────────────┤
│ mutable   │ 7_306_219 │ 7_250_234-7_372_469 │      96.83 │
│ immutable │ 7_545_126 │ 7_537_837-7_551_193 │     100.00 │
└───────────┴───────────┴─────────────────────┴────────────┘
[ perf record: Woken up 11 times to write data ]
[ perf record: Captured and wrote 2.722 MB perf.data (~118926 samples) ]
</programlisting>
        <para>
          When this completes, you can interactively explore the
          results.
        </para>
        <programlisting>
$ perf report -g
+  48.86%  barrier.native  barrier.native     [.] camlBarrier__test_immutable_69282
+  30.22%  barrier.native  barrier.native     [.] camlBarrier__test_mutable_69279
+  20.22%  barrier.native  barrier.native     [.] caml_modify
</programlisting>
        <para>
          This trace broadly reflects the results of the benchmark
          itself. The mutable benchmark consists of the combination of
          the call to <literal>test_mutable</literal> and the
          <literal>caml_modify</literal> write barrier function in the
          runtime. This adds up to slightly over half the execution time
          of the application.
        </para>
        <para>
          Perf has a growing collection of other commands that let you
          archive these runs and compare them against each other. You
          can read more on the
          <ulink url="http://perf.wiki.kernel.org">homepage</ulink>.
        </para>
        <tip>
        <title>
        Using the frame-pointer to get more accurate traces
        </title>
        <para>
          Although Perf doesn't require adding in explicit probes to the
          binary, it does need to understand how to unwind function
          calls so that the kernel can accurately record the function
          backtrace for every event.
        </para>
        <para>
          OCaml stack frames are too complex for Perf to understand
          directly, and so it needs the compiler to fall back to using
          the same conventions as C for function calls. On 64-bit Intel
          systems, this means that a special register known as the
          <emphasis>frame pointer</emphasis> is used to record function
          call history.
        </para>
        <para>
          Using the frame pointer in this fashion means a slowdown
          (typically around 3-5%) since it's no longer available for
          general-purpose use. OCaml 4.1 thus makes the frame pointer an
          optional feature that can be used to improve the resolution of
          Perf traces.
        </para>
        <para>
          OPAM provides a compiler switch that compiles OCaml with the
          frame pointer activated.
        </para>
        <programlisting>
$ opam switch 4.01.0dev+fp
</programlisting>
        <para>
          Using the frame pointer changes the OCaml calling convention,
          but OPAM takes care of recompiling all your libraries with the
          new interface. You can read more about this on the OCamlPro
          <ulink url="http://www.ocamlpro.com/blog/2012/08/08/profile-native-code.html">blog</ulink>.
        </para>
        </tip>
      </sect3>
    </sect2>
    <sect2 id="embedding-native-code-in-c">
      <title>Embedding native code in C</title>
      <para>
        The native code compiler normally links a complete executable,
        but can also output a standalone native object file just as the
        bytecode compiler can. This object file has no further
        dependencies on OCaml except for the runtime library.
      </para>
      <para>
        The native code runtime is a different library from the bytecode
        one and is installed as <literal>libasmrun.a</literal> in the
        OCaml standard library directory.
      </para>
      <para>
        Try this custom linking by using the same source files from the
        bytecode embedding example earlier in this chapter.
      </para>
      <programlisting>
$ ocamlopt -output-obj -o embed_native.o embed_me1.ml embed_me2.ml
$ gcc -Wall -I `ocamlc -where` -L `ocamlc -where` -lasmrun -ltermcap \
  -o final_out_native embed_native.o main.c
./final_out_native
Before calling OCaml
hello embedded world 1
hello embedded world 2
After calling OCaml
</programlisting>
      <para>
        The <literal>embed_native.o</literal> is a standalone object
        file that has no further references to OCaml code beyond the
        runtime library, just as with the bytecode runtime.
      </para>
      <tip>
      <title>
      Activating the debug runtime
      </title>
      <para>
        Despite your best efforts, it is easy to introduce a bug into
        some components such as C bindings that cause heap invariants to
        be violated. OCaml includes a <literal>libasmrund.a</literal>
        variant of the runtime library that is compiled with extra
        debugging checks that perform extra memory integrity checks
        during every garbage collection cycle. Running these extra
        checks will abort the program nearer the point of corruption and
        help isolate the bug in the C code.
      </para>
      <para>
        To use the debug library, just link your program with the
        <literal>-runtime-variant d</literal> flag.
      </para>
      <programlisting>
$ ocamlopt -runtime-variant d -verbose -o hello hello.ml hello_stubs.c
$ ./hello 
### OCaml runtime: debug mode ###
Initial minor heap size: 2048k bytes
Initial major heap size: 992k bytes
Initial space overhead: 80%
Initial max overhead: 500%
Initial heap increment: 992k bytes
Initial allocation policy: 0
Hello OCaml World!
</programlisting>
      <para>
        If you get an error that <literal>libasmrund.a</literal> is not
        found, then this is probably because you're using OCaml 4.00 and
        not 4.01. It's only installed by default in the very latest
        version, which you should be using via the
        <literal>4.01.0dev+trunk</literal> OPAM switch.
      </para>
      </tip>

    </sect2>
  </sect1>
</chapter></part><appendix id="installation">
  <title>Installation</title>
  <para>
    The easiest way to use OCaml is via the binary packages available
    for many operating systems. For day-to-day code development however,
    it's much easier to use a source-code manager that lets you modify
    individual libraries and automatically recompile all the
    dependencies.
  </para>
  <para>
    An important difference between OCaml and scripting languages such
    as Python or Ruby is the static type safety that means that you
    can't just mix-and-match compiled libraries. Interfaces are checked
    when libraries are compiled, so when an interface is changed, all
    the dependent libraries must also be recompiled. Source-based
    package managers automate this process for you and make development
    life much easier.
  </para>
  <para>
    To work through Real World OCaml, you'll need three major components
    installed:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        The OCaml compiler itself.
      </para>
    </listitem>
    <listitem>
      <para>
        The OPAM source package manager, through which we'll install
        several extra libraries.
      </para>
    </listitem>
    <listitem>
      <para>
        The <literal>utop</literal> interactive toplevel, a modern
        interactive toplevel with command history and tab completion.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Let's get started with how to install OCaml on various operating
    systems, and we'll get OPAM and <literal>utop</literal> running
    after that.
  </para>
  <sect1 id="getting-ocaml">
    <title>Getting OCaml</title>
    <para>
      The OCaml compiler is available as a binary distribution on many
      operating systems. This is the simplest and preferred installation
      route, but we'll also describe how to do a manual installation as
      a last resort.
    </para>
    <sect2 id="mac-os-x">
      <title>Mac OS X</title>
      <para>
        The
        <ulink url="http://github.com/mxcl/homebrew">Homebrew</ulink>
        package manager has an OCaml installer, which is usually updated
        pretty quickly to the latest stable release. Make sure that you
        have the latest XCode (and Command Line Tools for XCode)
        installed from the App Store before starting the OCaml
        installation.
      </para>
      <programlisting>
$ brew install ocaml
$ brew install pcre
</programlisting>
      <para>
        The Perl-compatible Regular Expression library (PCRE) is used by
        the Core suite. It's not strictly needed to use OCaml, but is a
        commonly used library that we're installing now to save time
        later.
      </para>
      <para>
        Another popular package manager on Mac OS X is
        <ulink url="http://macports.org">MacPorts</ulink>, which also
        has an OCaml port. As with Homebrew, make sure you have XCode
        installed and have followed the rest of the MacPorts
        installation instructions, and then type in:
      </para>
      <programlisting>
$ sudo port install ocaml
$ sudo port install ocaml-pcre
</programlisting>
    </sect2>
    <sect2 id="debian-linux">
      <title>Debian Linux</title>
      <para>
        On Debian Linux, you should install OCaml via binary packages.
        You'll need at least OCaml version 3.12.1 to bootstrap OPAM,
        which means using Debian Wheezy or greater. Don't worry about
        getting the absolute latest version of the compiler, as you just
        need one new enough to compile the OPAM package manager, after
        which you'll use OPAM to manage your compiler installation.
      </para>
      <programlisting>
$ sudo apt-get install ocaml ocaml-native-compilers camlp4-extra
$ sudo apt-get install git libpcre3-dev curl build-essential m4
</programlisting>
      <para>
        Notice that we've installed a few more packages than just the
        OCaml compiler here. The second command line installs enough
        system packages to let you build your own OCaml packages. You
        may find that some OCaml libraries require more system libraries
        (for example, <literal>libssl-dev</literal>), but we'll
        highlight these in the book when we introduce the library.
      </para>
    </sect2>
    <sect2 id="fedora-and-red-hat">
      <title>Fedora and Red Hat</title>
      <para>
        OCaml has been included in the basic distribution since Fedora
        8. To install the latest compiler, just run:
      </para>
      <programlisting>
# yum install ocaml
# yum install pcre-devel
</programlisting>
      <para>
        The PCRE package is used by Core and is just included here for
        convenience later.
      </para>
    </sect2>
    <sect2 id="arch-linux">
      <title>Arch Linux</title>
      <para>
        Arch Linux provides OCaml 4.00.1 (or later) in the standard
        repositories, so the easiest method of installation is using
        <literal>pacman</literal>:
      </para>
      <programlisting>
$ pacman -Sy ocaml
</programlisting>
    </sect2>
    <sect2 id="windows">
      <title>Windows</title>
      <para>
        Windows is not currently supported by the examples in Real World
        OCaml, although it is being worked on. Until that's ready, we
        recommend using a virtual machine running Debian Linux on your
        local machine.
      </para>
    </sect2>
    <sect2 id="building-from-source">
      <title>Building from source</title>
      <para>
        To install OCaml from source code, first make sure that you have
        a C compilation environment (usually either
        <literal>gcc</literal> or <literal>llvm</literal> installed).
      </para>
      <programlisting>
$ curl -OL https://github.com/ocaml/ocaml/archive/trunk.tar.gz
$ tar -zxvf trunk.tar.gz
$ cd ocaml-trunk
$ ./configure
$ make world world.opt
$ sudo make install
</programlisting>
      <para>
        The final step requires administrator privilege to install in
        your system directory. You can also install it in your home
        directory by passing the <literal>prefix</literal> option to the
        configuration script:
      </para>
      <programlisting>
$ ./configure -prefix $HOME/my-ocaml
</programlisting>
      <para>
        Once the installation is completed into this custom location,
        you will need to add <literal>$HOME/my-ocaml/bin</literal> to
        your <literal>PATH</literal>, normally by editing the
        <literal>~/.bash_profile</literal> file. You shouldn't really to
        do this unless you have special reasons, so try to install
        binary packages before trying a source installation.
      </para>
      <note>
      <title>
      Note to reviewers
      </title>
      <para>
        We instruct you install the unreleased trunk version of OCaml in
        these instructions, as we take advantage of some recent
        additions to the language that simplify explanations in the
        book. The 4.01 release will happen before the book is released,
        but you may run into &quot;bleeding edge&quot; bugs with the
        trunk release. Leave a comment here if you do and we'll address
        them.
      </para>
      </note>
    </sect2>
  </sect1>
  <sect1 id="getting-opam">
    <title>Getting OPAM</title>
    <para>
      OPAM manages multiple simultaneous OCaml compiler and library
      installations, tracks library versions across upgrades, and
      recompiles dependencies automatically if they get out of date.
      It's used throughout Real World OCaml as the mechanism to retrieve
      and use third-party libraries.
    </para>
    <para>
      Before installing OPAM, make sure that you have the OCaml compiler
      installed as described above. Once installed, the entire OPAM
      database is held in your home directory (normally
      <literal>$HOME/.opam</literal>). If something goes wrong, just
      delete this <literal>.opam</literal> directory and start over from
      a clean slate. If youre using a beta version of OPAM, please
      upgrade it to at least version 1.0.0 or greater before proceeding.
    </para>
    <sect2 id="mac-os-x-1">
      <title>Mac OS X</title>
      <para>
        Source installation of OPAM will take a minute or so on a modern
        machine. There is a Homebrew package for the latest OPAM:
      </para>
      <programlisting>
$ brew update
$ brew install opam
</programlisting>
      <para>
        And on MacPorts, install it like this:
      </para>
      <programlisting>
$ sudo port install opam
</programlisting>
    </sect2>
    <sect2 id="debian-linux-1">
      <title>Debian Linux</title>
      <para>
        There are experimental binary packages available for Debian
        Wheezy/amd64. You should be able to use these on 64-bit Ubuntu
        and other derivative distributions such as Linux Mint also. Just
        add the following line to your
        <literal>/etc/apt/sources.list</literal>:
      </para>
      <programlisting>
deb http://www.recoil.org/~avsm/ wheezy main
</programlisting>
      <para>
        When this is done, update your packages and install OPAM. You
        can ignore the warning about unsigned packages, which will
        disappear when OPAM is upstreamed into Debian mainline.
      </para>
      <programlisting>
# apt-get update
# apt-get install opam
</programlisting>
    </sect2>
    <sect2 id="fedora-and-red-hat-1">
      <title>Fedora and Red Hat</title>
      <para>
        There is currently no RPM available for Fedora or Red Hat, so
        please install OPAM via the source code instructions for the
        moment.
      </para>
    </sect2>
    <sect2 id="arch-linux-1">
      <title>Arch Linux</title>
      <para>
        OPAM is available in the Arch User Repository (AUR) in two
        packages. You'll need both <literal>ocaml</literal> and the
        <literal>base-devel</literal> packages installed first:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>opam</literal> contains the most recent stable
            release, and is the recommended package.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>opam-git</literal> builds the package from the
            latest upstream source, and should only be used if you are
            looking for a specific bleeding-edge feature.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Run these commands to install the stable OPAM package:
      </para>
      <programlisting>
$ sudo pacman -Sy base-devel
$ wget https://aur.archlinux.org/packages/op/opam/opam.tar.gz
$ tar -xvf opam.tar.gz &amp;&amp; cd opam
$ makepkg
$ sudo pacman -U opam-_version_.pkg.tar.gz
</programlisting>
    </sect2>
    <sect2 id="source-installation">
      <title>Source Installation</title>
      <para>
        If the binary packages aren't available for your system, you'll
        need to install the latest OPAM release from source. The
        distribution only requires the OCaml compiler to be installed,
        so this should be straightforward. Download the latest version
        from the
        <ulink url="https://github.com/OCamlPro/opam/tags">homepage</ulink>.
      </para>
      <programlisting>
$ curl -OL https://github.com/OCamlPro/opam/archive/latest.tar.gz
$ tar -zxvf latest.tar.gz
$ cd opam-latest
$ ./configure &amp;&amp; make
$ sudo make install
</programlisting>
      <note>
      <title>
      Note to reviewers
      </title>
      <para>
        The OPAM instructions will be simplified when integrated
        upstream into Debian and Fedora, which is ongoing. Until then,
        we're leaving source-code installation instructions here. Please
        leave a comment with any amended instructions you encounter.
      </para>
      </note>

    </sect2>
  </sect1>
  <sect1 id="configuring-the-opam-package-manager">
    <title>Configuring the OPAM package manager</title>
    <para>
      The entire OPAM package database is held in the
      <literal>.opam</literal> directory in your home directory,
      including compiler installations. On Linux and Mac OS X, this will
      be the <literal>~/.opam</literal> directory. You shouldn't switch
      to an admin user to install packages as nothing will be installed
      outside of this directory. If you run into problems, just delete
      the whole <literal>~/.opam</literal> directory and follow the
      installations instructions from the <literal>opam init</literal>
      stage again.
    </para>
    <para>
      Let's begin by initialising the OPAM package database. This will
      require an active Internet connection, and ask you a few
      interactive questions at the end. It's safe to answer yes to these
      unless you want to manually control the configuration steps
      yourself as an advanced user.
    </para>
    <programlisting>
$ opam init
&lt;...&gt;
=-=-=-= Configuring OPAM =-=-=-=
Do you want to update your configuration to use OPAM ? [Y/n] y
[1/4] Do you want to update your shell configuration file ? [default: ~/.profile] y
[2/4] Do you want to update your ~/.ocamlinit ? [Y/n] y
[3/4] Do you want to install the auto-complete scripts ? [Y/n] y
[4/4] Do you want to install the `opam-switch-eval` script ? [Y/n] y
User configuration:
  ~/.ocamlinit is already up-to-date.
  ~/.profile is already up-to-date.
Gloabal configuration:
  Updating &lt;root&gt;/opam-init/init.sh
    auto-completion : [true]
    opam-switch-eval: [true]
  Updating &lt;root&gt;/opam-init/init.zsh
    auto-completion : [true]
    opam-switch-eval: [true]
  Updating &lt;root&gt;/opam-init/init.csh
    auto-completion : [true]
    opam-switch-eval: [true]
</programlisting>
    <para>
      You only need to run this command once, and it will create the
      <literal>~/.opam</literal> directory and sync with the latest
      package list from the online OPAM database.
    </para>
    <para>
      When the <literal>init</literal> command finishes, you'll see some
      instructions about environment variables. OPAM never installs
      files into your system directories (which would require
      administrator privileges). Instead, it puts them into your home
      directory by default, and can output a set of shell commands which
      configures your shell with the right <literal>PATH</literal>
      variables so that packages will just work. This requires just one
      command:
    </para>
    <programlisting>
$ eval `opam config -env`
</programlisting>
    <para>
      This evaluates the results of running
      <literal>opam config env</literal> in your current shell, and sets
      the variables so that subsequent commands will use them. This only
      works with your current shell, and it can be automated for all
      future shells by adding the line to your login scripts. On Mac OS
      X or Debian, this is usually the
      <literal>~/.bash_profile</literal> file if you're using the
      default shell. If you've switched to another shell, it might be
      <literal>~/.zshrc</literal> instead. OPAM isn't unusual in this
      approach; the SSH <literal>ssh-agent</literal> also works
      similarly, so if you're having any problems just hunt around in
      your configuration scripts to see how that's being invoked.
    </para>
    <para>
      If you answered <literal>yes</literal> to the auto-complete
      scripts question during <literal>opam init</literal>, this should
      have all been set up for you. You can verify this worked by
      listing the available packages:
    </para>
    <programlisting>
$ opam list
</programlisting>
    <note>
    <title>
    Note to reviewers
    </title>
    <para>
      OPAM 1.0.0 places the login commands into your
      <literal>~/.profile</literal> directory, which isn't always
      executed if your shell is <literal>bash</literal>. This has been
      fixed in subsequent versions, but for now you'll need to manually
      copy the contents of <literal>~/.profile</literal> over to
      <literal>~/.bash_profile</literal> via:
    </para>
    <programlisting>
$ cat ~/.profile &gt;&gt; ~/.bash_profile
</programlisting>
    </note>
    <para>
      The most important package we need to install is Core, which is
      the replacement standard library that all of the examples in this
      book use. Before doing this, let's make sure you have exactly the
      right compiler version you need. We've made some minor
      modifications to the way the OCaml compiler displays type
      signatures, and the next command will install a patched
      <literal>4.01.0</literal> compiler with this functionality
      enabled.
    </para>
    <programlisting>
$ opam switch 4.01.0dev+trunk
</programlisting>
    <para>
      This step will take about 5-10 minutes on a modern machine, and
      will download and install (within the <literal>~/.opam</literal>
      directory) a custom OCaml compiler. OPAM supports multiple such
      installations, and you'll find this very useful if you ever decide
      to hack on the internals of the compiler itself, or you want to
      experiment with the latest release without sacrificing your
      current installation. You only need to install this compiler once,
      and future updates will be much faster as they only recompile
      libraries within the compiler installation.
    </para>
    <para>
      The new compiler will be installed into
      <literal>~/.opam/4.01.0dev+trunk</literal> and any libraries you
      install for it will be tracked separately from your system
      installation. You can have any number of compilers installed
      simultaneously, but only one can be active at any time. Browse
      through the available compilers by running
      <literal>opam switch list</literal>.
    </para>
    <para>
      Finally, we're ready to install the Core libraries. Run this:
    </para>
    <programlisting>
$ opam install core core_extended async
</programlisting>
    <para>
      This will take about five or ten minutes to build, and will
      install a series of packages. OPAM figures out the dependencies
      you need automatically, but the three packages that really matter
      are:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>core</literal> is the main, well-supported Core
          distribution from Jane Street.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>core_extended</literal> contains a number of
          experimental, but useful, extension libraries that are under
          review for inclusion in Core. We use some of these in places,
          but much less than Core itself.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>async</literal> is the network programming library
          that we use in Part II to communicate with other hosts. You
          can skip this for the initial installation until you get to
          Part II, if you prefer.
        </para>
      </listitem>
    </itemizedlist>
    <sect2 id="editing-environment">
      <title>Editing Environment</title>
      <para>
        There's one last tool you need before getting started on the
        examples. The default <literal>ocaml</literal> command gives us
        an interactive command-line to experiment with code without
        compiling it. However, it's quite a spartan experience and so we
        use a more modern alternative.
      </para>
      <programlisting>
$ opam install utop
</programlisting>
      <para>
        The <literal>utop</literal> package is an interactive
        command-line interface to OCaml that has tab-completion,
        persistent history and integration with Emacs so that you can
        run it within your editing environment.
      </para>
      <para>
        Remember from earlier that OPAM never installs files directly
        into your system directories, and this applies to
        <literal>utop</literal> too. You'll find the binary in
        <literal>~/.opam/4.01.0dev+trunk/bin</literal>. However, just
        typing in <literal>utop</literal> from your shell should just
        work, due to the <literal>opam config env</literal> step that
        configures your shell. Don't forget to automate this as
        described earlier, as it makes life much easier when developing
        OCaml code!
      </para>
    </sect2>
    <sect2 id="command-line">
      <title>Command Line</title>
      <para>
        The <literal>utop</literal> tool provides a convenient
        interactive toplevel, with full command history, command macros
        and module name completion. When you first run
        <literal>utop</literal>, you'll find yourself at an interactive
        prompt with a bar at the bottom of the screen. The bottom bar
        dynamically updates as you write text, and contains the possible
        names of modules or variables that are valid at that point in
        the phrase you are entering. You can press the
        <literal>&lt;tab&gt;</literal> key to complete the phrase with
        the first choice.
      </para>
      <para>
        The <literal>~/.ocamlinit</literal> file in your home directory
        initialises <literal>utop</literal> with common libraries and
        syntax extensions so you don't need to type them in every time.
        Now that you have Core installed, you should update it to load
        it every time you start <literal>utop</literal>, by adding this
        to it:
      </para>
      <programlisting language="ocaml">
#use &quot;topfind&quot;
#camlp4o
#require &quot;core.top&quot;
#require &quot;core_extended&quot;
#require &quot;async&quot;
#require &quot;sexplib.syntax&quot;
#require &quot;fieldslib.syntax&quot;
#require &quot;variantslib.syntax&quot;
#require &quot;comparelib.syntax&quot;
#require &quot;bin_prot.syntax&quot;
open Core.Std
</programlisting>
      <para>
        When you run <literal>utop</literal> with this initialization
        file, it should start up with Core opened and ready to use.
      </para>
    </sect2>
    <sect2 id="editors">
      <title>Editors</title>
      <sect3 id="emacs">
        <title>Emacs</title>
        <para>
          TODO: Emacs users have tuareg and
          <ulink url="http://www.typerex.org/">Typerex</ulink>.
        </para>
        <para>
          To use <literal>utop</literal> directly in Emacs, add the
          following line to your <literal>~/.emacs</literal> file:
        </para>
        <programlisting language="scheme">
(autoload 'utop &quot;utop&quot; &quot;Toplevel for OCaml&quot; t)
</programlisting>
        <para>
          You also need to make the <literal>utop.el</literal> file
          available to your Emacs installation. The OPAM version of
          <literal>utop</literal> installs it into the
          <literal>~/.opam</literal> hierarchy, for example in
          <literal>~/.opam/system/share/emacs/site-lisp/utop.el</literal>.
          You may need to replace <literal>system</literal> with your
          current compiler switch, such as
          <literal>4.01.0dev+trunk</literal>.
        </para>
        <para>
          Once this successfully loads in Emacs, you can run utop by
          executing the command <literal>utop</literal> in Emacs. There
          are more details instructions at the
          <ulink url="https://github.com/diml/utop#integration-with-emacs">utop
          homepage</ulink>.
        </para>
      </sect3>
      <sect3 id="vim">
        <title>Vim</title>
        <para>
          TODO: Vim users can use the built-in style, and
          <ulink url="http://github.com/avsm/ocaml-annot">ocaml-annot</ulink>
          may also be useful.
        </para>
      </sect3>
      <sect3 id="eclipse">
        <title>Eclipse</title>
        <para>
          Eclipse is a popular IDE usually used for Java development.
          The OCaml Development Tools (ODT) project provides equivalent
          IDE features for editing and compiling OCaml code, such as
          automatic compilation and name completion.
        </para>
        <para>
          ODT is distributed as a set of plugins for the Eclipse IDE
          environment from the
          <ulink url="http://ocamldt.free.fr">homepage</ulink>. You just
          have to copy these plugins into your Eclipse distribution in
          order to access the new OCaml facilities.
        </para>
      </sect3>
    </sect2>
  </sect1>
</appendix><appendix id="packaging">
  <title>Packaging</title>
  <para>
    The OCaml toolchain is structured much like a C compiler, with
    several tools that generate intermediate files and finally link
    against a runtime. The final outputs don't have to be just
    executables. Many people embed OCaml code as object files that are
    called from other applications, or even compile it to Javascript and
    other esoteric targets. Let's start by covering some of the standard
    OCaml tools, and then move on to some of the higher level methods
    for packaging and publishing your code online.
  </para>
  <sect1 id="the-ocaml-toolchain">
    <title>The OCaml toolchain</title>
    <para>
      There are two distinct compilers for OCaml code included in the
      standard distribution. The first outputs bytecode that is
      interpreted at runtime, and the second generates fast, efficient
      native code directly. Both of these share the front-end
      type-checking logic, and only diverge when it comes to code
      generation.
    </para>
    <sect2 id="the-ocamlc-bytecode-compiler">
      <title>The <literal>ocamlc</literal> bytecode compiler</title>
      <para>
        The simplest code generator is the <literal>ocamlc</literal>
        compiler, which outputs bytecode that is interpreted via the
        <literal>ocamlrun</literal> runtime. The OCaml bytecode virtual
        machine is a stack machine (much like the Java Virtual Machine),
        with the exception of a single register that stores the most
        recent result. This provides a simple runtime model that is easy
        to implement or embed within other systems, but executes rather
        slowly due to being interpreted.
      </para>
      <para>
        Here are some of the intermediate files generated by
        <literal>ocamlc</literal>:
      </para>
      <informaltable>
        <tgroup cols="2">
          <colspec align="left"/>
          <colspec align="left"/>
          <thead>
            <row>
              <entry>
                Extension
              </entry>
              <entry>
                Purpose
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                .ml
              </entry>
              <entry>
                Source files for compilation unit module
                implementations.
              </entry>
            </row>
            <row>
              <entry>
                .mli
              </entry>
              <entry>
                Source files for compilation unit module interfaces. If
                missing, generated from the <literal>.ml</literal> file.
              </entry>
            </row>
            <row>
              <entry>
                .cmi
              </entry>
              <entry>
                Compiled module interface from a corresponding
                <literal>.mli</literal> source file.
              </entry>
            </row>
            <row>
              <entry>
                .cmo
              </entry>
              <entry>
                Compiled bytecode object file of the module
                implementation.
              </entry>
            </row>
            <row>
              <entry>
                .cma
              </entry>
              <entry>
                Library of bytecode object files packed into a single
                file.
              </entry>
            </row>
            <row>
              <entry>
                .o
              </entry>
              <entry>
                C source files are compiled into native object files by
                the system <literal>cc</literal>.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        To obtain a bytecode executable, you need to compile a set of
        <literal>cmo</literal> object files, and then link them into an
        executable
      </para>
    </sect2>
    <sect2 id="the-ocamlopt-native-code-compiler">
      <title>The <literal>ocamlopt</literal> native code
      compiler</title>
      <informaltable>
        <tgroup cols="2">
          <colspec align="left"/>
          <colspec align="left"/>
          <thead>
            <row>
              <entry>
                Extension
              </entry>
              <entry>
                Purpose
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                .cmi
              </entry>
              <entry>
                Compiled module interface from a corresponding
                <literal>.mli</literal> source file.
                (<emphasis>avsm</emphasis>: this is not compatible with
                the ocamlc version iirc)
              </entry>
            </row>
            <row>
              <entry>
                .o
              </entry>
              <entry>
                Compiled native object file of the module
                implementation.
              </entry>
            </row>
            <row>
              <entry>
                .cmx
              </entry>
              <entry>
                Contains extra information for linking and cross-module
                optimization of the object file.
              </entry>
            </row>
            <row>
              <entry>
                .cmxa/.a
              </entry>
              <entry>
                Library of <literal>cmx</literal> and
                <literal>o</literal> units, stored in the
                <literal>cmxa</literal> and <literal>a</literal> files
                respectively.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="the-ocaml-toplevel-loop">
      <title>The <literal>ocaml</literal> toplevel loop</title>
      <para>
      </para>
    </sect2>
  </sect1>
  <sect1 id="the-findlib-compiler-frontend">
    <title>The Findlib compiler frontend</title>
    <para>
    </para>
  </sect1>
  <sect1 id="packaging-applications-with-oasis">
    <title>Packaging applications with OASIS</title>
    <sect2 id="ocamlbuild">
      <title>ocamlbuild</title>
      <para>
      </para>
    </sect2>
  </sect1>
  <sect1 id="distributing-applications-with-opam">
    <title>Distributing applications with OPAM</title>
    <para>
    </para>
  </sect1>
</appendix></book>