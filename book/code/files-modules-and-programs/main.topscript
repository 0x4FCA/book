#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}]
[@@@part "0.5"];;
open Core_kernel.Std;;
module M = struct let foo = 3 end;;
foo;;
open M;;
foo;;

[%%expect{|
Line _, characters 0-3:
Error: Unbound value foo
|}]
[@@@part "1"];;
let average x y =
  let open Int64 in
  x + y / of_int 2;;

[%%expect{|
|}]
[@@@part "2"];;
let average x y =
  Int64.(x + y / of_int 2);;

[%%expect{|
|}]
[@@@part "3"];;
module Interval = struct
  type t = | Interval of int * int
           | Empty

  let create low high =
    if high < low then Empty else Interval (low,high)
end;;

[%%expect]
[@@@part "4"];;
module Extended_interval = struct
  include Interval

  let contains t x =
    match t with
    | Empty -> false
    | Interval (low,high) -> x >= low && x <= high
end;;

Extended_interval.contains (Extended_interval.create 3 10) 4;;

[%%expect]
[@@@part "5"];;
module Extended_interval = struct
  open Interval

  let contains t x =
    match t with
    | Empty -> false
    | Interval (low,high) -> x >= low && x <= high
end;;

Extended_interval.contains (Extended_interval.create 3 10) 4;;
[%%expect{|
Line _, characters 28-52:
Error: Unbound value Extended_interval.create
|}]