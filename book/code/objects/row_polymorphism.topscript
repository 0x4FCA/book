#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
open Core_kernel.Std;;
type shape = < area : float > ;;

type square = < area : float; width : int > ;;

let square w = object
  method area = Float.of_int (w * w)
  method width = w
end ;;

type circle = < area : float; radius : int > ;;

let circle r = object
  method area = 3.14 *. (Float.of_int r) ** 2.0
  method radius = r
end ;;

[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}];;
[@@@part "1"];;
let remove_large l =
  List.filter ~f:(fun s -> s#area <= 100.) l ;;


[%%expect{|
|}];;
[@@@part "2"];;
let squares : < area : float; width : int > list = 
  [square 5; square 15; square 10] ;;

remove_large squares ;;


[%%expect{|
|}];;
[@@@part "3"];;
let remove_large (l: < area : float > list) = 
  List.filter ~f:(fun s -> s#area <= 100.) l ;;

remove_large (squares :> < area : float > list ) ;;


[%%expect{|
|}];;
[@@@part "4"];;
let hlist: < area: float; ..> list = [square 10; circle 30] ;;





[%%expect{|
Line _, characters 49-58:
Error: This expression has type < area : float; radius : int >
       but an expression was expected of type < area : float; width : int >
       The second object type has no method radius
|}];;
[@@@part "5"];;
let shape_ref: < area: float; ..> ref = ref (square 40) ;;

shape_ref := circle 20 ;;





[%%expect{|
Line _, characters 13-22:
Error: This expression has type < area : float; radius : int >
       but an expression was expected of type < area : float; width : int >
       The second object type has no method radius
|}];;
[@@@part "6"];;
let hlist: shape list = [(square 10 :> shape); (circle 30 :> shape)] ;;

let shape_ref: shape ref = ref (square 40 :> shape) ;;

shape_ref := (circle 20 :> shape) ;;

[%%expect{|
|}];;
