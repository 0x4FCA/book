#use "topfind";;
[%%expect{|
- : unit = ()
- : unit = ()
|}];;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
[@@@part "1"];;
open Core_kernel.Std;;
let s = object
  val mutable v = [0; 2]

  method pop =
    match v with
    | hd :: tl -> 
      v <- tl;
      Some hd
    | [] -> None

  method push hd = 
    v <- hd :: v
end ;;
[%%expect{|
val s : < pop : int option; push : int -> unit > = <obj>
|}];;
[@@@part "2"];;
s#pop ;;
[%%expect{|
- : int option = Some 0
|}];;
s#push 4 ;;
[%%expect{|
- : unit = ()
|}];;
s#pop ;;
[%%expect{|
- : int option = Some 4
|}];;
[@@@part "3"];;
let stack init = object
  val mutable v = init

  method pop =
    match v with
    | hd :: tl -> 
      v <- tl;
      Some hd
    | [] -> None

  method push hd = 
    v <- hd :: v
end ;;
[%%expect{|
val stack : 'a list -> < pop : 'a option; push : 'a -> unit > = <fun>
|}];;
let s = stack [3; 2; 1] ;;
[%%expect{|
val s : < pop : int option; push : int -> unit > = <obj>
|}];;
s#pop ;;
[%%expect{|
- : int option = Some 3
|}];;
[@@@part "4"];;
let print_pop st = Option.iter ~f:(printf "Popped: %d\n") st#pop ;;
[%%expect{|
val print_pop : < pop : int Core_kernel.Std.Option.t; .. > -> unit = <fun>
|}];;
print_pop (stack [5;4;3;2;1]) ;;
[%%expect{|
- : unit = ()
Popped: 5
|}];;
let t = object
  method pop = Some (Float.to_int (Time_ns.to_float (Time_ns.now ())))
end ;;
[%%expect{|
Characters 52-68:
Error: Unbound value Time_ns.to_float
|}];;
print_pop t ;;
[%%expect{|
Characters 11-12:
Error: Unbound value t
|}];;
