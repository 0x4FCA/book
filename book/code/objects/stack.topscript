;;

#part 1
open Core_kernel.Std;;
let s = object
    val mutable v = [0; 2]

    method pop =
      match v with
      | hd :: tl -> 
        v <- tl;
        Some hd
      | [] -> None

    method push hd = 
      v <- hd :: v
  end ;;


#part 2
s#pop ;;

s#push 4 ;;

s#pop ;;


#part 3
let stack init = object
    val mutable v = init

    method pop =
      match v with
      | hd :: tl -> 
        v <- tl;
        Some hd
      | [] -> None

    method push hd = 
      v <- hd :: v
  end ;;

let s = stack [3; 2; 1] ;;

s#pop ;;


#part 4
let print_pop st = Option.iter ~f:(printf "Popped: %d\n") st#pop ;;

print_pop (stack [5;4;3;2;1]) ;;


let t = object
    method pop = Some (Float.to_int (Time_ns.to_float (Time_ns.now ())))
  end ;;

print_pop t ;;


