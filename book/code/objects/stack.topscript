#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;

[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}];;
[@@@part "1"];;
open Core_kernel.Std;;
let s = object
  val mutable v = [0; 2]

  method pop =
    match v with
    | hd :: tl -> 
      v <- tl;
      Some hd
    | [] -> None

  method push hd = 
    v <- hd :: v
end ;;


[%%expect{|
|}];;
[@@@part "2"];;
s#pop ;;

s#push 4 ;;

s#pop ;;


[%%expect];;
[@@@part "3"];;
let stack init = object
  val mutable v = init

  method pop =
    match v with
    | hd :: tl -> 
      v <- tl;
      Some hd
    | [] -> None

  method push hd = 
    v <- hd :: v
end ;;

let s = stack [3; 2; 1] ;;

s#pop ;;


[%%expect];;
[@@@part "4"];;
let print_pop st = Option.iter ~f:(printf "Popped: %d\n") st#pop ;;

print_pop (stack [5;4;3;2;1]) ;;


let t = object
  method pop = Some (Float.to_int (Time_ns.to_float (Time_ns.now ())))
end ;;

print_pop t ;;


[%%expect{|
Line _, characters 35-51:
Error: Unbound value Time_ns.to_float
Line _, characters 10-11:
Error: Unbound value t
Popped: 5
|}];;
