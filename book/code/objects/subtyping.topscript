#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
open Core_kernel.Std;;
let stack init = object
  val mutable v = init

  method pop =
    match v with
    | hd :: tl -> 
      v <- tl;
      Some hd
    | [] -> None

  method push hd = 
    v <- hd :: v
end ;;

type shape = < area : float > ;;

type square = < area : float; width : int > ;;

let square w = object
  method area = Float.of_int (w * w)
  method width = w
end ;;

type circle = < area : float; radius : int > ;;

let circle r = object
  method area = 3.14 *. (Float.of_int r) ** 2.0
  method radius = r
end ;;

type 'a stack = < pop: 'a option; push: 'a -> unit > ;;

let square_stack: square stack = stack [square 30; square 10] ;;

let circle_stack: circle stack = stack [circle 20; circle 40] ;;

[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}]
[@@@part "1"];;
let shape w : shape = square w ;;




let shape w : shape = (square w :> shape) ;;


[%%expect{|
Line _, characters 22-30:
Error: This expression has type < area : float; width : int >
       but an expression was expected of type shape
       The second object type has no method width
|}]
[@@@part "2"];;
let coin = object
  method shape = circle 5
  method color = "silver"
end ;;

let map = object
  method shape = square 10
end ;;


[%%expect{|
|}]
[@@@part "3"];;
type item = < shape : shape > ;;

let items = [ (coin :> item) ; (map :> item) ] ;;


[%%expect{|
|}]
[@@@part "4"];;
type num = [ `Int of int | `Float of float ] ;;

type const = [ num | `String of string ] ;;

let n : num = `Int 3 ;;

let c : const = (n :> const) ;;


[%%expect]
[@@@part "5"];;
let squares: square list = [ square 10; square 20 ] ;;

let shapes: shape list = (squares :> shape list) ;;


[%%expect{|
|}]
[@@@part "6"];;
let square_array: square array = [| square 10; square 20 |] ;;

let shape_array: shape array = (square_array :> shape array) ;;






[%%expect{|
Line _, characters 31-60:
Error: Type square array is not a subtype of shape array
       Type square = < area : float; width : int >
       is not compatible with type shape = < area : float >
       The second object type has no method width
|}]
[@@@part "7"];;
let shape_to_string: shape -> string = 
  fun s -> sprintf "Shape(%F)" s#area ;;

let square_to_string: square -> string = 
  (shape_to_string :> square -> string) ;;


[%%expect{|
|}]
[@@@part "8"];;
module Either = struct
  type ('a, 'b) t = 
    | Left of 'a
    | Right of 'b
  let left x = Left x
  let right x = Right x
end ;;






(Either.left (square 40) :> (shape, shape) Either.t) ;;


[%%expect{|
|}]
[@@@part "9"];;
module AbstractEither : sig 
  type ('a, 'b) t
  val left: 'a -> ('a, 'b) t
  val right: 'b -> ('a, 'b) t
end = Either ;;






(AbstractEither.left (square 40) :> (shape, shape) AbstractEither.t) ;;









[%%expect{|
Line _, characters 1-32:
Error: This expression cannot be coerced to type
         (shape, shape) AbstractEither.t;
       it has type (< area : float; width : int >, 'a) AbstractEither.t
       but is here used with type (shape, shape) AbstractEither.t
       Type < area : float; width : int > is not compatible with type
         shape = < area : float >
       The second object type has no method width
|}]
[@@@part "10"];;
module VarEither : sig 
  type (+'a, +'b) t
  val left: 'a -> ('a, 'b) t
  val right: 'b -> ('a, 'b) t
end = Either ;;






(VarEither.left (square 40) :> (shape, shape) VarEither.t) ;;


[%%expect{|
|}]
[@@@part "11"];;
let total_area (shape_stacks: shape stack list) =
  let stack_area acc st = 
    let rec loop acc =
      match st#pop with
      | Some s -> loop (acc +. s#area)
      | None -> acc
    in
    loop acc
  in
  List.fold ~init:0.0 ~f:stack_area shape_stacks ;;


[%%expect{|
|}]
[@@@part "12"];;
total_area [(square_stack :> shape stack); (circle_stack :> shape stack)] ;;







[%%expect{|
Line _, characters 12-41:
Error: Type square stack = < pop : square option; push : square -> unit >
       is not a subtype of
         shape stack = < pop : shape option; push : shape -> unit >
       Type shape = < area : float > is not a subtype of
         square = < area : float; width : int >
|}]
[@@@part "13"];;
type 'a readonly_stack = < pop : 'a option > ;;

let total_area (shape_stacks: shape readonly_stack list) =
  let stack_area acc st = 
    let rec loop acc =
      match st#pop with
      | Some s -> loop (acc +. s#area)
      | None -> acc
    in
    loop acc
  in
  List.fold ~init:0.0 ~f:stack_area shape_stacks ;;

total_area [(square_stack :> shape readonly_stack); (circle_stack :> 
                                                       shape readonly_stack)] ;;

[%%expect{|
|}]