#use "topfind";;
[%%expect ocaml {|
- : unit = ()
- : unit = ()
|}];;
#thread;;
#camlp4o;;
#require "core";;
#require "ppx_jane";;
#install_printer Core.Sexp.pp_hum;;
#install_printer Core.Error.pp;;
open Core_kernel;;
[@@@part "0.5"];;
type no_converter = int * int ;;
[%%expect ocaml {|type no_converter = int * int|}];;
type t = { a: no_converter; b: string } [@@deriving sexp] ;;
[%%expect{|
Characters 14-26:
Error: Unbound value no_converter_of_sexp
|}];;
[@@@part "1"];;
type t = { a: no_converter sexp_opaque; b: string } [@@deriving sexp] ;;
[%%expect ocaml {|
type t = { a : no_converter; b : string; }
val t_of_sexp : Core_kernel.Sexp.t -> t = <fun>
val sexp_of_t : t -> Core_kernel.Sexp.t = <fun>
|}];;
[@@@part "2"];;
sexp_of_t { a = (3,4); b = "foo" } ;;
[%%expect ocaml {|
- : Sexp.t =
Sexplib.Sexp.List
 [Sexplib.Sexp.List [Sexplib.Sexp.Atom "a"; Sexplib.Sexp.Atom "<opaque>"];
  Sexplib.Sexp.List [Sexplib.Sexp.Atom "b"; Sexplib.Sexp.Atom "foo"]]
|}];;
[@@@part "3"];;
t_of_sexp (Sexp.of_string "((a whatever) (b foo))") ;;
[%%expect{|
Exception:
Base__Sexp.Of_sexp_error
 (Failure "opaque_of_sexp: cannot convert opaque values",
 Base__Sexp.Atom "whatever").
|}];;
[@@@part "4"];;
type t = { a: no_converter sexp_opaque list; b: string } [@@deriving sexp] ;;
[%%expect ocaml {|
type t = { a : no_converter list; b : string; }
val t_of_sexp : Sexp.t -> t = <fun>
val sexp_of_t : t -> Sexp.t = <fun>
|}];;
t_of_sexp (Sexp.of_string "((a ()) (b foo))") ;;
[%%expect ocaml {|- : t = {a = []; b = "foo"}|}];;
[@@@part "5"];;
type t = { a: no_converter sexp_opaque; b: string } [@@deriving sexp_of] ;;
[%%expect ocaml {|
type t = { a : no_converter; b : string; }
val sexp_of_t : t -> Sexp.t = <fun>
|}];;
type t = { a: no_converter sexp_opaque; b: string } [@@deriving of_sexp] ;;
[%%expect ocaml {|
type t = { a : no_converter; b : string; }
val t_of_sexp : Sexp.t -> t = <fun>
|}];;
