#use "topfind";;
[%%expect ocaml {|
- : unit = ()
- : unit = ()
|}];;
#thread;;
#camlp4o;;
#require "core";;
#require "ppx_jane";;
#install_printer Core.Sexp.pp_hum;;
#install_printer Core.Error.pp;;
open Core_kernel;;
[@@@part "0.5"];;
type t = { a: int option; b: string } [@@deriving sexp] ;;
[%%expect ocaml {|
type t = { a : int option; b : string; }
val t_of_sexp : Core_kernel.Sexp.t -> t = <fun>
val sexp_of_t : t -> Core_kernel.Sexp.t = <fun>
|}];;
sexp_of_t { a = None; b = "hello" } ;;
[%%expect ocaml {|
- : Sexp.t =
Sexplib.Sexp.List
 [Sexplib.Sexp.List [Sexplib.Sexp.Atom "a"; Sexplib.Sexp.List []];
  Sexplib.Sexp.List [Sexplib.Sexp.Atom "b"; Sexplib.Sexp.Atom "hello"]]
|}];;
sexp_of_t { a = Some 3; b = "hello" } ;;
[%%expect ocaml {|
- : Sexp.t =
Sexplib.Sexp.List
 [Sexplib.Sexp.List
   [Sexplib.Sexp.Atom "a"; Sexplib.Sexp.List [Sexplib.Sexp.Atom "3"]];
  Sexplib.Sexp.List [Sexplib.Sexp.Atom "b"; Sexplib.Sexp.Atom "hello"]]
|}];;
[@@@part "1"];;
type t = { a: int sexp_option; b: string } [@@deriving sexp] ;;
[%%expect ocaml {|
type t = { a : int option; b : string; }
val t_of_sexp : Sexp.t -> t = <fun>
val sexp_of_t : t -> Sexp.t = <fun>
|}];;
sexp_of_t { a = Some 3; b = "hello" } ;;
[%%expect ocaml {|
- : Sexp.t =
Sexplib.Sexp.List
 [Sexplib.Sexp.List [Sexplib.Sexp.Atom "a"; Sexplib.Sexp.Atom "3"];
  Sexplib.Sexp.List [Sexplib.Sexp.Atom "b"; Sexplib.Sexp.Atom "hello"]]
|}];;
sexp_of_t { a = None; b = "hello" } ;;
[%%expect ocaml {|
- : Sexp.t =
Sexplib.Sexp.List
 [Sexplib.Sexp.List [Sexplib.Sexp.Atom "b"; Sexplib.Sexp.Atom "hello"]]
|}];;
