#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}]
[@@@part "0.5"];;
open Core_kernel.Std;;

[%%expect{|
|}]
[@@@part "1"];;
3 + 4;;
8 / 3;;
3.5 +. 6.;;
30_000_000 / 300_000;;
sqrt 9.;;

[%%expect]
[@@@part "2"];;
let x = 3 + 4;;
let y = x + x;;

[%%expect]
[@@@part "3"];;
let x7 = 3 + 4;;
let x_plus_y = x + y;;
let x' = x + 1;;
let _x' = x' + x';;
_x';;

[%%expect]
[@@@part "4"];;
let Seven = 3 + 4;;
(*let 7x = 7;;*)
(*let x-plus-y = x + y;;*)

[%%expect{|
Line _, characters 4-9:
Error: Unbound constructor Seven
|}]
[@@@part "5"];;
let square x = x * x ;;
square 2;;
square (square 2);;

[%%expect]
[@@@part "6"];;
let ratio x y =
  Float.of_int x /. Float.of_int y
;;
ratio 4 7;;

[%%expect{|
|}]
[@@@part "7"];;
let sum_if_true test first second =
  (if test first then first else 0)
  + (if test second then second else 0)
;;

[%%expect]
[@@@part "8"];;
let even x =
  x mod 2 = 0 ;;
sum_if_true even 3 4;;
sum_if_true even 2 4;;

[%%expect]
[@@@part "9"];;
let sum_if_true (test : int -> bool) (x : int) (y : int) : int =
  (if test x then x else 0)
  + (if test y then y else 0)
;;

[%%expect]
[@@@part "10"];;
let first_if_true test x y =
  if test x then x else y
;;

[%%expect]
[@@@part "11"];;
let long_string s = String.length s > 6;;
first_if_true long_string "short" "loooooong";;

[%%expect]
[@@@part "12"];;
let big_number x = x > 3;;
first_if_true big_number 4 3;;

[%%expect]
[@@@part "13"];;
first_if_true big_number "short" "loooooong";;

[%%expect{|
Line _, characters 25-32:
Error: This expression has type string but an expression was expected of type
         int
|}]
[@@@part "14"];;
let add_potato x =
  x + "potato";;

[%%expect{|
Line _, characters 6-14:
Error: This expression has type string but an expression was expected of type
         int
|}]
[@@@part "15"];;
let is_a_multiple x y =
  x mod y = 0 ;;
is_a_multiple 8 2;;
is_a_multiple 8 0;;

[%%expect{|
Exception: Division_by_zero.
|}]
[@@@part "16"];;
let a_tuple = (3,"three");;
let another_tuple = (3,"four",5.);;

[%%expect]
[@@@part "17"];;
let (x,y) = a_tuple;;

[%%expect]
[@@@part "18"];;
x + String.length y;;

[%%expect]
[@@@part "19"];;
let distance (x1,y1) (x2,y2) =
  sqrt ((x1 -. x2) ** 2. +. (y1 -. y2) ** 2.)
;;

[%%expect]
[@@@part "20"];;
let languages = ["OCaml";"Perl";"C"];;

[%%expect]
[@@@part "21"];;
let numbers = [3;"four";5];;

[%%expect{|
Line _, characters 17-23:
Error: This expression has type string but an expression was expected of type
         int
|}]
[@@@part "22"];;
List.length languages;;

[%%expect]
[@@@part "23"];;
List.map languages ~f:String.length;;

[%%expect{|
|}]
[@@@part "24"];;
List.map ~f:String.length languages;;

[%%expect{|
|}]
[@@@part "25"];;
"French" :: "Spanish" :: languages;;

[%%expect]
[@@@part "26"];;
languages;;

[%%expect]
[@@@part "27"];;
["OCaml", "Perl", "C"];;

[%%expect]
[@@@part "28"];;
1,2,3;;

[%%expect]
[@@@part "29"];;
[1; 2; 3];;
1 :: (2 :: (3 :: []));;
1 :: 2 :: 3 :: [];;

[%%expect]
[@@@part "30"];;
[1;2;3] @ [4;5;6];;

[%%expect]
[@@@part "31"];;
let my_favorite_language (my_favorite :: the_rest) =
  my_favorite
;;

[%%expect{|
Line _, characters 25-66:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
Line _, characters 41-49:
Warning 27: unused variable the_rest.
Line _:
Error: Some fatal warnings were triggered (2 occurrences)
|}]
[@@@part "32"];;
my_favorite_language ["English";"Spanish";"French"];;
my_favorite_language [];;

[%%expect{|
Line _, characters 0-20:
Error: Unbound value my_favorite_language
Line _, characters 0-20:
Error: Unbound value my_favorite_language
|}]
[@@@part "33"];;
let my_favorite_language languages =
  match languages with
  | first :: the_rest -> first
  | [] -> "OCaml" (* A good default! *)
;;
my_favorite_language ["English";"Spanish";"French"];;
my_favorite_language [];;

[%%expect{|
Line _, characters 13-21:
Warning 27: unused variable the_rest.
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
Line _, characters 0-20:
Error: Unbound value my_favorite_language
Line _, characters 0-20:
Error: Unbound value my_favorite_language
|}]
[@@@part "34"];;
let rec sum l =
  match l with
  | [] -> 0                   (* base case *)
  | hd :: tl -> hd + sum tl   (* inductive case *)
;;
sum [1;2;3];;

[%%expect]
[@@@part "35"];;
let rec destutter list =
  match list with
  | [] -> []
  | hd1 :: hd2 :: tl ->
    if hd1 = hd2 then destutter (hd2 :: tl)
    else hd1 :: destutter (hd2 :: tl)
;;

[%%expect{|
Line _, characters 2-136:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
_::[]
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}]
[@@@part "36"];;
let rec destutter list =
  match list with
  | [] -> []
  | [hd] -> [hd]
  | hd1 :: hd2 :: tl ->
    if hd1 = hd2 then destutter (hd2 :: tl)
    else hd1 :: destutter (hd2 :: tl)
;;
destutter ["hey";"hey";"hey";"man!"];;

[%%expect]
[@@@part "37"];;
let divide x y =
  if y = 0 then None else Some (x/y) ;;

[%%expect]
[@@@part "38"];;
let downcase_extension filename =
  match String.rsplit2 filename ~on:'.' with
  | None -> filename
  | Some (base,ext) -> 
    base ^ "." ^ String.lowercase ext
;;
List.map ~f:downcase_extension
  [ "Hello_World.TXT"; "Hello_World.TXT"; "Hello_World" ]
;;

[%%expect{|
|}]
[@@@part "41"];;
type point2d = { x : float; y : float };;

[%%expect]
[@@@part "42"];;
let p = { x = 3.; y = -4. };;

[%%expect]
[@@@part "43"];;
let magnitude { x = x_pos; y = y_pos } =
  sqrt (x_pos ** 2. +. y_pos ** 2.);;

[%%expect]
[@@@part "44"];;
let magnitude { x; y } = sqrt (x ** 2. +. y ** 2.);;

[%%expect]
[@@@part "45"];;
let distance v1 v2 =
  magnitude { x = v1.x -. v2.x; y = v1.y -. v2.y };;

[%%expect]
[@@@part "46"];;
type circle_desc  = { center: point2d; radius: float };;
type rect_desc    = { lower_left: point2d; width: float; height: float };;
type segment_desc = { endpoint1: point2d; endpoint2: point2d } ;;

[%%expect]
[@@@part "47"];;
type scene_element =
  | Circle  of circle_desc
  | Rect    of rect_desc
  | Segment of segment_desc
;;

[%%expect]
[@@@part "48"];;
let is_inside_scene_element point scene_element =
  match scene_element with
  | Circle { center; radius } ->
    distance center point < radius
  | Rect { lower_left; width; height } ->
    point.x    > lower_left.x && point.x < lower_left.x +. width
    && point.y > lower_left.y && point.y < lower_left.y +. height
  | Segment { endpoint1; endpoint2 } -> false
;;
let is_inside_scene point scene =
  List.exists scene
    ~f:(fun el -> is_inside_scene_element point el)
;;
is_inside_scene {x=3.;y=7.}
  [ Circle {center = {x=4.;y= 4.}; radius = 0.5 } ];;
is_inside_scene {x=3.;y=7.}
  [ Circle {center = {x=4.;y= 4.}; radius = 5.0 } ];;

[%%expect{|
Line _, characters 14-23:
Warning 27: unused variable endpoint1.
Line _, characters 25-34:
Warning 27: unused variable endpoint2.
Line _:
Error: Some fatal warnings were triggered (2 occurrences)
Line _, characters 18-41:
Error: Unbound value is_inside_scene_element
Line _, characters 0-15:
Error: Unbound value is_inside_scene
Line _, characters 0-15:
Error: Unbound value is_inside_scene
|}]
[@@@part "49"];;
let numbers = [| 1; 2; 3; 4 |];;
numbers.(2) <- 4;;
numbers;;

[%%expect]
[@@@part "50"];;
type running_sum =
  { mutable sum: float;
    mutable sum_sq: float; (* sum of squares *)
    mutable samples: int;
  }
;;

[%%expect]
[@@@part "51"];;
let mean rsum = rsum.sum /. float rsum.samples
let stdev rsum =
  sqrt (rsum.sum_sq /. float rsum.samples
        -. (rsum.sum /. float rsum.samples) ** 2.) ;;

[%%expect]
[@@@part "52"];;
let create () = { sum = 0.; sum_sq = 0.; samples = 0 }
let update rsum x =
  rsum.samples <- rsum.samples + 1;
  rsum.sum     <- rsum.sum     +. x;
  rsum.sum_sq  <- rsum.sum_sq  +. x *. x
;;

[%%expect]
[@@@part "53"];;
let rsum = create ();;
List.iter [1.;3.;2.;-7.;4.;5.] ~f:(fun x -> update rsum x);;
mean rsum;;
stdev rsum;;

[%%expect{|
|}]
[@@@part "54"];;
let x = { contents = 0 };;
x.contents <- x.contents + 1;;
x;;

[%%expect]
[@@@part "55"];;
let x = ref 0  (* create a ref, i.e., { contents = 0 } *) ;;
!x             (* get the contents of a ref, i.e., x.contents *) ;;
x := !x + 1    (* assignment, i.e., x.contents <- ... *) ;;
!x ;;

[%%expect]
[@@@part "56"];;
type 'a ref = { mutable contents : 'a };;
let ref x = { contents = x };;
let (!) r = r.contents;;
let (:=) r x = r.contents <- x;;

[%%expect]
[@@@part "57"];;
let sum list =
  let sum = ref 0 in
  List.iter list ~f:(fun x -> sum := !sum + x);
  !sum
;;

[%%expect{|
|}]
[@@@part "58"];;
let permute array =
  let length = Array.length array in
  for i = 0 to length - 2 do
    (* pick a j to swap with *)
    let j = i + Random.int (length - i) in
    (* Swap i and j *)
    let tmp = array.(i) in
    array.(i) <- array.(j);
    array.(j) <- tmp
  done
;;

[%%expect]
[@@@part "59"];;
let ar = Array.init 20 ~f:(fun i -> i);;
permute ar;;
ar;;

[%%expect{|
|}]
[@@@part "60"];;
let find_first_negative_entry array =
  let pos = ref 0 in
  while !pos < Array.length array && array.(!pos) >= 0 do
    pos := !pos + 1
  done;
  if !pos = Array.length array then None else Some !pos
;;
find_first_negative_entry [|1;2;0;3|];;
find_first_negative_entry [|1;-2;0;3|];;

[%%expect]
[@@@part "61"];;
let find_first_negative_entry array =
  let pos = ref 0 in
  while
    let pos_is_good = !pos < Array.length array in
    let element_is_non_negative = array.(!pos) >= 0 in
    pos_is_good && element_is_non_negative
  do
    pos := !pos + 1
  done;
  if !pos = Array.length array then None else Some !pos
;;
find_first_negative_entry [|1;2;0;3|];;

[%%expect{|
Exception: Invalid_argument "index out of bounds".
|}]