#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}];;
[@@@part "0.5"];;
open Core_kernel.Std;;
let x = 3;;
let y = 4;;
let z = x + y;;


[%%expect{|
|}];;
[@@@part "1"];;
let languages = "OCaml,Perl,C++,C";;

let dashed_languages =
  let language_list = String.split languages ~on:',' in
  String.concat ~sep:"-" language_list
;;


[%%expect{|
|}];;
[@@@part "2"];;
language_list;;



[%%expect{|
Line _, characters 0-13:
Error: Unbound value language_list
|}];;
[@@@part "3"];;
let languages = "OCaml,Perl,C++,C";;

let dashed_languages =
  let languages = String.split languages ~on:',' in
  String.concat ~sep:"-" languages
;;


[%%expect{|
|}];;
[@@@part "4"];;
languages;;


[%%expect];;
[@@@part "5"];;
let area_of_ring inner_radius outer_radius =
  let pi = acos (-1.) in
  let area_of_circle r = pi *. r *. r in
  area_of_circle outer_radius -. area_of_circle inner_radius
;;

area_of_ring 1. 3.;;


[%%expect];;
[@@@part "6"];;
let area_of_ring inner_radius outer_radius =
  let pi = acos (-1.) in
  let area_of_circle r = pi *. r *. r in
  let pi = 0. in
  area_of_circle outer_radius -. area_of_circle inner_radius
;;




[%%expect{|
Line _, characters 6-8:
Warning 26: unused variable pi.
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}];;
[@@@part "7"];;
let (ints,strings) = List.unzip [(1,"one"); (2,"two"); (3,"three")];;



[%%expect{|
|}];;
[@@@part "8"];;
let upcase_first_entry line =
  let (first :: rest) = String.split ~on:',' line in
  String.concat ~sep:"," (String.uppercase first :: rest)
;;

[%%expect{|
Line _, characters 6-21:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}];;
[@@@part "9"];;
let upcase_first_entry line =
  match String.split ~on:',' line with
  | [] -> assert false (* String.split returns at least one element *)
  | first :: rest -> String.concat ~sep:"," (String.uppercase first :: rest)
;;

[%%expect{|
|}];;
[@@@part "10"];;
(fun x -> x + 1);;


[%%expect];;
[@@@part "11"];;
(fun x -> x + 1) 7;;


[%%expect];;
[@@@part "12"];;
List.map ~f:(fun x -> x + 1) [1;2;3];;


[%%expect{|
|}];;
[@@@part "13"];;
let transforms = [ String.uppercase; String.lowercase ];;
List.map ~f:(fun g -> g "Hello World") transforms;;


[%%expect{|
|}];;
[@@@part "14"];;
let plusone = (fun x -> x + 1);;

plusone 3;;


[%%expect];;
[@@@part "15"];;
let plusone x = x + 1;;


[%%expect];;
[@@@part "16"];;
(fun x -> x + 1) 7;;

let x = 7 in x + 1;;


[%%expect];;
[@@@part "17"];;
let abs_diff x y = abs (x - y);;

abs_diff 3 4;;


[%%expect];;
[@@@part "18"];;
let abs_diff =
  (fun x -> (fun y -> abs (x - y)));;


[%%expect];;
[@@@part "19"];;
let dist_from_3 = abs_diff 3;;

dist_from_3 8;;

dist_from_3 (-1);;


[%%expect];;
[@@@part "20"];;
let abs_diff = (fun x y -> abs (x - y));;


[%%expect];;
[@@@part "21"];;
let abs_diff (x,y) = abs (x - y);;

abs_diff (3,4);;


[%%expect];;
[@@@part "22"];;
let rec find_first_stutter list =
  match list with
  | [] | [_] ->
    (* only zero or one elements, so no repeats *)
    None
  | x :: y :: tl ->
    if x = y then Some x else find_first_stutter (y::tl)
;;


[%%expect];;
[@@@part "23"];;
let rec is_even x =
  if x = 0 then true else is_odd (x - 1)
and is_odd x =
  if x = 0 then false else is_even (x - 1)
;;


List.map ~f:is_even [0;1;2;3;4;5];;

List.map ~f:is_odd [0;1;2;3;4;5];;


[%%expect{|
|}];;
[@@@part "24"];;
Int.max 3 4  (* prefix *);;

3 + 4        (* infix  *);;


[%%expect{|
|}];;
[@@@part "25"];;
(+) 3 4;;

List.map ~f:((+) 3) [4;5;6];;


[%%expect{|
|}];;
[@@@part "26"];;
let (+!) (x1,y1) (x2,y2) = (x1 + x2, y1 + y2);;

(3,2) +! (-2,4);;


[%%expect];;
[@@@part "27"];;
let (***) x y = (x ** y) ** y;;




[%%expect{|
Line _, characters 17-18:
Error: This expression has type int but an expression was expected of type
         float
|}];;
[@@@part "28"];;
let ( *** ) x y = (x ** y) ** y;;


[%%expect];;
[@@@part "29"];;
Int.max 3 (-4);;

Int.max 3 -4;;




[%%expect{|
Line _, characters 0-9:
Error: This expression has type int -> int
       but an expression was expected of type int
|}];;
[@@@part "30"];;
(Int.max 3) - 4;;




[%%expect{|
Line _, characters 0-11:
Error: This expression has type int -> int
       but an expression was expected of type int
|}];;
[@@@part "31"];;
let (|>) x f = f x ;;


[%%expect];;
[@@@part "32"];;
let path = "/usr/bin:/usr/local/bin:/bin:/sbin";;

String.split ~on:':' path
|> List.dedup ~compare:String.compare
|> List.iter ~f:print_endline
;;






[%%expect{|
/bin
/sbin
/usr/bin
/usr/local/bin
|}];;
[@@@part "33"];;
let split_path = String.split ~on:':' path in
let deduped_path = List.dedup ~compare:String.compare split_path in
List.iter ~f:print_endline deduped_path
;;






[%%expect{|
/bin
/sbin
/usr/bin
/usr/local/bin
|}];;
[@@@part "34"];;
List.iter ~f:print_endline ["Two"; "lines"];;




[%%expect{|
Two
lines
|}];;
[@@@part "35"];;
List.iter ~f:print_endline;;


[%%expect{|
|}];;
[@@@part "36"];;
let (^>) x f = f x;;

Sys.getenv "PATH"
^> String.split ~on:':' path
^> List.dedup ~compare:String.compare
^> List.iter ~f:print_endline
;;

[%%expect{|
Line _, characters 3-29:
Error: This expression has type string list -> unit
       but an expression was expected of type
         (string list -> string list) -> 'a
       Type string list is not compatible with type
         string list -> string list
|}];;
[@@@part "37"];;
let some_or_zero = function
  | Some x -> x
  | None -> 0
;;

List.map ~f:some_or_zero [Some 3; None; Some 4];;


[%%expect{|
|}];;
[@@@part "38"];;
let some_or_zero num_opt =
  match num_opt with
  | Some x -> x
  | None -> 0
;;


[%%expect];;
[@@@part "39"];;
let some_or_default default = function
  | Some x -> x
  | None -> default
;;

some_or_default 3 (Some 5);;

List.map ~f:(some_or_default 100) [Some 3; None; Some 4];;


[%%expect{|
|}];;
[@@@part "40"];;
let ratio ~num ~denom = float num /. float denom;;


[%%expect];;
[@@@part "41"];;
ratio ~num:3 ~denom:10;;

ratio ~denom:10 ~num:3;;


[%%expect];;
[@@@part "42"];;
let num = 3 in
let denom = 4 in
ratio ~num ~denom;;


[%%expect];;
[@@@part "43"];;
String.split ~on:':' path
|> List.dedup ~compare:String.compare
|> List.iter ~f:print_endline
;;






[%%expect{|
/bin
/sbin
/usr/bin
/usr/local/bin
|}];;
[@@@part "44"];;
let apply_to_tuple f (first,second) = f ~first ~second;;


[%%expect];;
[@@@part "45"];;
let apply_to_tuple_2 f (first,second) = f ~second ~first;;


[%%expect];;
[@@@part "46"];;
let divide ~first ~second = first / second;;


[%%expect];;
[@@@part "47"];;
apply_to_tuple_2 divide (3,4);;




[%%expect{|
Line _, characters 17-23:
Error: This expression has type first:int -> second:int -> int
       but an expression was expected of type second:'a -> first:'b -> 'c
|}];;
[@@@part "48"];;
let apply_to_tuple f (first,second) = f ~first ~second;;

apply_to_tuple divide (3,4);;


[%%expect];;
[@@@part "49"];;
let concat ?sep x y =
  let sep = match sep with None -> "" | Some x -> x in
  x ^ sep ^ y
;;

concat "foo" "bar"             (* without the optional argument *);;

concat ~sep:":" "foo" "bar"    (* with the optional argument    *);;


[%%expect];;
[@@@part "50"];;
let concat ?(sep="") x y = x ^ sep ^ y ;;


[%%expect];;
[@@@part "51"];;
concat ~sep:":" "foo" "bar" (* provide the optional argument *);;

concat ?sep:(Some ":") "foo" "bar" (* pass an explicit [Some] *);;


[%%expect];;
[@@@part "52"];;
concat "foo" "bar" (* don't provide the optional argument *);;

concat ?sep:None "foo" "bar" (* explicitly pass `None` *);;


[%%expect];;
[@@@part "53"];;
let uppercase_concat ?(sep="") a b = concat ~sep (String.uppercase a) b ;;

uppercase_concat "foo" "bar";;

uppercase_concat "foo" "bar" ~sep:":";;


[%%expect];;
[@@@part "54"];;
let uppercase_concat ?sep a b = concat ?sep (String.uppercase a) b ;;


[%%expect];;
[@@@part "55"];;
let numeric_deriv ~delta ~x ~y ~f =
  let x' = x +. delta in
  let y' = y +. delta in
  let base = f ~x ~y in
  let dx = (f ~x:x' ~y -. base) /. delta in
  let dy = (f ~x ~y:y' -. base) /. delta in
  (dx,dy)
;;





[%%expect];;
[@@@part "56"];;
let numeric_deriv ~delta ~x ~y ~f =
  let x' = x +. delta in
  let y' = y +. delta in
  let base = f ~x ~y in
  let dx = (f ~y ~x:x' -. base) /. delta in
  let dy = (f ~x ~y:y' -. base) /. delta in
  (dx,dy)
;;





[%%expect{|
Line _, characters 12-13:
Error: This function is applied to arguments
in an order different from other calls.
This is only allowed when the real type is known.
|}];;
[@@@part "57"];;
let numeric_deriv ~delta ~x ~y ~(f: x:float -> y:float -> float) =
  let x' = x +. delta in
  let y' = y +. delta in
  let base = f ~x ~y in
  let dx = (f ~y ~x:x' -. base) /. delta in
  let dy = (f ~x ~y:y' -. base) /. delta in
  (dx,dy)
;;





[%%expect];;
[@@@part "58"];;
let colon_concat = concat ~sep:":";;

colon_concat "a" "b";;


[%%expect];;
[@@@part "59"];;
let prepend_pound = concat "# ";;

prepend_pound "a BASH comment";;


[%%expect];;
[@@@part "60"];;
prepend_pound "a BASH comment" ~sep:":";;




[%%expect{|
Line _, characters 0-13:
Error: This function has type string -> string
       It is applied to too many arguments; maybe you forgot a `;'.
|}];;
[@@@part "61"];;
let concat x ?(sep="") y = x ^ sep ^ y ;;


[%%expect];;
[@@@part "62"];;
let prepend_pound = concat "# ";;

prepend_pound "a BASH comment";;

prepend_pound "a BASH comment" ~sep:"--- ";;


[%%expect];;
[@@@part "63"];;
concat "a" "b" ~sep:"=";;


[%%expect];;
[@@@part "64"];;
let concat x y ?(sep="") = x ^ sep ^ y ;;




[%%expect{|
Line _, characters 15-38:
Warning 16: this optional argument cannot be erased.
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}];;
[@@@part "65"];;
concat "a" "b";;

