#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}];;
[@@@part "0.5"];;
open Core_kernel.Std;;
[1;2;3];;

[%%expect{|
|}];;
[@@@part "1"];;
1 :: (2 :: (3 :: [])) ;;
1 :: 2 :: 3 :: [] ;;

[%%expect];;
[@@@part "2"];;
let empty = [];;
3 :: empty;;
"three" :: empty;;

[%%expect];;
[@@@part "3"];;
let l = 1 :: 2 :: 3 :: [];;
let m = 0 :: l;;
l;;

[%%expect];;
[@@@part "4"];;
let rec sum l =
  match l with
  | [] -> 0
  | hd :: tl -> hd + sum tl
;;

sum [1;2;3];;

sum [];;


[%%expect];;
[@@@part "5"];;
let rec drop_value l to_drop =
  match l with
  | [] -> []
  | to_drop :: tl -> drop_value tl to_drop
  | hd :: tl -> hd :: drop_value tl to_drop
;;




[%%expect{|
Line _, characters 4-12:
Warning 11: this match case is unused.
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}];;
[@@@part "6"];;
drop_value [1;2;3] 2;;


[%%expect{|
Line _, characters 0-10:
Error: Unbound value drop_value
|}];;
[@@@part "7"];;
let rec drop_value l to_drop =
  match l with
  | [] -> []
  | hd :: tl ->
    let new_tl = drop_value tl to_drop in
    if hd = to_drop then new_tl else hd :: new_tl
;;

drop_value [1;2;3] 2;;


[%%expect];;
[@@@part "8"];;
let rec drop_zero l =
  match l with
  | [] -> []
  | 0  :: tl -> drop_zero tl
  | hd :: tl -> hd :: drop_zero tl
;;

drop_zero [1;2;0;3];;


[%%expect];;
[@@@part "9"];;
let plus_one_match x =
  match x with
  | 0 -> 1
  | 1 -> 2
  | 2 -> 3
  | _ -> x + 1
;;

let plus_one_if x =
  if      x = 0 then 1
  else if x = 1 then 2
  else if x = 2 then 3
  else x + 1
;;

[%%expect];;
[@@@part "10"];;
#require "core_bench";;
open Core_bench.Std;;
[ Bench.Test.create ~name:"plus_one_match" (fun () ->
    ignore (plus_one_match 10))
; Bench.Test.create ~name:"plus_one_if" (fun () ->
    ignore (plus_one_if 10)) ]
|> Bench.bench
;;

[%%expect{|
Estimated testing time 20s (2 benchmarks x 10s). Change using -quota SECS.
┌────────────────┬──────────┐
│ Name           │ Time/Run │
├────────────────┼──────────┤
│ plus_one_match │  66.58ns │
│ plus_one_if    │  77.04ns │
└────────────────┴──────────┘
|}];;
[@@@part "11"];;
let rec sum_if l =
  if List.is_empty l then 0
  else List.hd_exn l + sum_if (List.tl_exn l)
;;

[%%expect{|
|}];;
[@@@part "12"];;
let numbers = List.range 0 1000 in
[ Bench.Test.create ~name:"sum_if" (fun () -> ignore (sum_if numbers))
; Bench.Test.create ~name:"sum"    (fun () -> ignore (sum numbers)) ]
|> Bench.bench
;;

[%%expect{|
Estimated testing time 20s (2 benchmarks x 10s). Change using -quota SECS.
┌────────┬──────────┐
│ Name   │ Time/Run │
├────────┼──────────┤
│ sum_if │ 126.80us │
│ sum    │  28.36us │
└────────┴──────────┘
|}];;
[@@@part "13"];;
let rec drop_zero l =
  match l with
  | [] -> []
  | 0  :: tl -> drop_zero tl
;;

[%%expect{|
Line _, characters 2-56:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
1::_
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}];;
[@@@part "14"];;
List.map ~f:String.length ["Hello"; "World!"];;

[%%expect{|
|}];;
[@@@part "15"];;
List.map2_exn ~f:Int.max [1;2;3] [3;2;1];;

[%%expect{|
|}];;
[@@@part "16"];;
List.map2_exn ~f:Int.max [1;2;3] [3;2;1;0];;

[%%expect{|
Exception: Invalid_argument "length mismatch in rev_map2_exn: 3 <> 4 ".
|}];;
[@@@part "17"];;
List.fold;;

[%%expect{|
|}];;
[@@@part "18"];;
List.fold ~init:0 ~f:(+) [1;2;3;4];;

[%%expect{|
|}];;
[@@@part "19"];;
List.fold ~init:[] ~f:(fun list x -> x :: list) [1;2;3;4];;

[%%expect{|
|}];;
[@@@part "20"];;
let max_widths header rows =
  let lengths l = List.map ~f:String.length l in
  List.fold rows
    ~init:(lengths header)
    ~f:(fun acc row ->
      List.map2_exn ~f:Int.max acc (lengths row))
;;

[%%expect{|
|}];;
[@@@part "21"];;
let render_separator widths =
  let pieces = List.map widths
                 ~f:(fun w -> String.make (w + 2) '-')
  in
  "|" ^ String.concat ~sep:"+" pieces ^ "|"
;;
render_separator [3;6;2];;

[%%expect{|
|}];;
[@@@part "22"];;
let s = "." ^ "."  ^ "."  ^ "."  ^ "."  ^ "."  ^ ".";;

[%%expect];;
[@@@part "23"];;
let s = String.concat [".";".";".";".";".";".";"."];;

[%%expect{|
|}];;
[@@@part "24"];;
let pad s length =
  " " ^ s ^ String.make (length - String.length s + 1) ' '
;;
pad "hello" 10;;

[%%expect];;
[@@@part "25"];;
let render_row row widths =
  let padded = List.map2_exn row widths ~f:pad in
  "|" ^ String.concat ~sep:"|" padded ^ "|"
;;
render_row ["Hello";"World"] [10;15];;


[%%expect{|
|}];;
[@@@part "26"];;
let render_table header rows =
  let widths = max_widths header rows in
  String.concat ~sep:"\n"
    (render_row header widths
     :: render_separator widths
     :: List.map rows ~f:(fun row -> render_row row widths)
    )
;;


[%%expect{|
|}];;
[@@@part "27"];;
List.reduce;;

[%%expect{|
|}];;
[@@@part "28"];;
List.reduce ~f:(+) [1;2;3;4;5];;

List.reduce ~f:(+) [];;

[%%expect{|
|}];;
[@@@part "29"];;
List.filter ~f:(fun x -> x mod 2 = 0) [1;2;3;4;5];;

[%%expect{|
|}];;
[@@@part "30"];;
List.filter_map (Sys.ls_dir ".") ~f:(fun fname ->
  match String.rsplit2 ~on:'.' fname with
  | None  | Some ("",_) -> None
  | Some (_,ext) ->
    Some ext)
|> List.dedup
;;

[%%expect{|
Line _, characters 17-27:
Error: Unbound value Sys.ls_dir
|}];;
[@@@part "31"];;
let is_ocaml_source s =
  match String.rsplit2 s ~on:'.' with
  | Some (_,("ml"|"mli")) -> true
  | _ -> false
;;

let (ml_files,other_files) =
  List.partition_tf (Sys.ls_dir ".")  ~f:is_ocaml_source;;

[%%expect{|
Line _, characters 21-31:
Error: Unbound value Sys.ls_dir
|}];;
[@@@part "32"];;
List.append [1;2;3] [4;5;6];;

[%%expect];;
[@@@part "33"];;
[1;2;3] @ [4;5;6];;

[%%expect];;
[@@@part "34"];;
List.concat [[1;2];[3;4;5];[6];[]];;

[%%expect];;
[@@@part "35"];;
let rec ls_rec s =
  if Sys.is_file_exn ~follow_symlinks:true s
  then [s]
  else
    Sys.ls_dir s
    |> List.map ~f:(fun sub -> ls_rec (s ^/ sub))
    |> List.concat
;;

[%%expect{|
Line _, characters 5-20:
Error: Unbound value Sys.is_file_exn
|}];;
[@@@part "36"];;
let rec ls_rec s =
  if Sys.is_file_exn ~follow_symlinks:true s
  then [s]
  else
    Sys.ls_dir s
    |> List.concat_map ~f:(fun sub -> ls_rec (s ^/ sub))
;;

[%%expect{|
Line _, characters 5-20:
Error: Unbound value Sys.is_file_exn
|}];;
[@@@part "37"];;
let rec length = function
  | [] -> 0
  | _ :: tl -> 1 + length tl
;;

length [1;2;3];;


[%%expect];;
[@@@part "38"];;
let make_list n = List.init n ~f:(fun x -> x);;

length (make_list 10);;

length (make_list 10_000_000);;


[%%expect{|
Stack overflow during evaluation (looping recursion?).
|}];;
[@@@part "39"];;
let rec length_plus_n l n =
  match l with
  | [] -> n
  | _ :: tl -> length_plus_n tl (n + 1)
;;

let length l = length_plus_n l 0 ;;

length [1;2;3;4];;


[%%expect];;
[@@@part "40"];;
length (make_list 10_000_000);;


[%%expect{|
|}];;
[@@@part "41"];;
let rec destutter list =
  match list with
  | [] -> []
  | [hd] -> [hd]
  | hd :: hd' :: tl ->
    if hd = hd' then destutter (hd' :: tl)
    else hd :: destutter (hd' :: tl)
;;


[%%expect];;
[@@@part "42"];;
let rec destutter = function
  | [] as l -> l
  | [_] as l -> l
  | hd :: (hd' :: _ as tl) ->
    if hd = hd' then destutter tl
    else hd :: destutter tl
;;


[%%expect];;
[@@@part "43"];;
let rec destutter = function
  | [] | [_] as l -> l
  | hd :: (hd' :: _ as tl) ->
    if hd = hd' then destutter tl
    else hd :: destutter tl
;;


[%%expect];;
[@@@part "44"];;
let rec destutter = function
  | [] | [_] as l -> l
  | hd :: (hd' :: _ as tl) when hd = hd' -> destutter tl
  | hd :: tl -> hd :: destutter tl
;;


[%%expect];;
[@@@part "45"];;
3 = 4;;

[3;4;5] = [3;4;5];;

[Some 3; None] = [None; Some 3];;


[%%expect];;
[@@@part "46"];;
(=);;


[%%expect];;
[@@@part "47"];;
(fun x -> x + 1) = (fun x -> x + 1);;


[%%expect{|
Exception: Invalid_argument "equal: functional value".
|}];;
[@@@part "48"];;
let rec count_some list =
  match list with
  | [] -> 0
  | x :: tl when Option.is_none x -> count_some tl
  | x :: tl when Option.is_some x -> 1 + count_some tl
;;







[%%expect{|
Line _, characters 2-135:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
_::_
(However, some guarded clause may match this value.)
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}];;
[@@@part "49"];;
count_some [Some 3; None; Some 4];;


[%%expect{|
Line _, characters 0-10:
Error: Unbound value count_some
|}];;
[@@@part "50"];;
let rec count_some list =
  match list with
  | [] -> 0
  | x :: tl when Option.is_none x -> count_some tl
  | x :: tl when Option.is_some x -> 1 + count_some tl
  | x :: tl -> -1 (* unreachable *)
;;


[%%expect{|
Line _, characters 4-5:
Warning 27: unused variable x.
Line _, characters 9-11:
Warning 27: unused variable tl.
Line _:
Error: Some fatal warnings were triggered (2 occurrences)
|}];;
[@@@part "51"];;
let rec count_some list =
  match list with
  | [] -> 0
  | x :: tl when Option.is_none x -> count_some tl
  | _ :: tl -> 1 + count_some tl
;;


[%%expect{|
|}];;
[@@@part "52"];;
let rec count_some list =
  match list with
  | [] -> 0
  | None   :: tl -> count_some tl
  | Some _ :: tl -> 1 + count_some tl
;;


[%%expect];;
[@@@part "53"];;
let count_some l = List.count ~f:Option.is_some l;;


[%%expect{|
|}];;
[@@@part "69"];;
printf "%s\n"
  (render_table
     ["language";"architect";"first release"]
     [ ["Lisp" ;"John McCarthy" ;"1958"] ;
       ["C"    ;"Dennis Ritchie";"1969"] ;
       ["ML"   ;"Robin Milner"  ;"1973"] ;
       ["OCaml";"Xavier Leroy"  ;"1996"] ;
     ]);;







[%%expect{|
| language | architect      | first release |
|----------+----------------+---------------|
| Lisp     | John McCarthy  | 1958          |
| C        | Dennis Ritchie | 1969          |
| ML       | Robin Milner   | 1973          |
| OCaml    | Xavier Leroy   | 1996          |
|}];;
