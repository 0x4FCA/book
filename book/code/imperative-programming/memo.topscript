#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
open Core_kernel.Std;;
[@@@part "1"]
let memoize f =
  let memo_table = Hashtbl.Poly.create () in
  (fun x ->
     Hashtbl.find_or_add memo_table x ~default:(fun () -> f x))
;;

[@@@part "2"]
let rec edit_distance s t =
  match String.length s, String.length t with
  | (0,x) | (x,0) -> x
  | (len_s,len_t) ->
    let s' = String.drop_suffix s 1 in
    let t' = String.drop_suffix t 1 in
    let cost_to_drop_both =
      if s.[len_s - 1] = t.[len_t - 1] then 0 else 1
    in
    List.reduce_exn ~f:Int.min
      [ edit_distance s' t  + 1
      ; edit_distance s  t' + 1
      ; edit_distance s' t' + cost_to_drop_both
      ]
;;

edit_distance "OCaml" "ocaml";;


[@@@part "3"]
#require "mtime.os.top";;

let time f =
  let counter = Mtime.counter () in
  let x = f () in
  let elapsed = Mtime.count counter in
  printf "Time: %F ms\n" (Mtime.to_ms elapsed);
  x 
;;

[@@@part "4"]
time (fun () -> edit_distance "OCaml" "ocaml");;


time (fun () -> edit_distance "OCaml 4.01" "ocaml 4.01");;

[@@@part "5"]

let memo_rec f_norec x =
  let fref = ref (fun _ -> assert false) in
  let f = memoize (fun x -> f_norec !fref x) in
  fref := f;
  f x
;;

[@@@part "6"]
let edit_distance = memo_rec (fun edit_distance (s,t) ->
  match String.length s, String.length t with
  | (0,x) | (x,0) -> x
  | (len_s,len_t) ->
    let s' = String.drop_suffix s 1 in
    let t' = String.drop_suffix t 1 in
    let cost_to_drop_both =
      if s.[len_s - 1] = t.[len_t - 1] then 0 else 1
    in
    List.reduce_exn ~f:Int.min
      [ edit_distance (s',t ) + 1
      ; edit_distance (s ,t') + 1
      ; edit_distance (s',t') + cost_to_drop_both
      ]) ;;


[@@@part "7"]
time (fun () -> edit_distance ("OCaml 4.01","ocaml 4.01"));;


