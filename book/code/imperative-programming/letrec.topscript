#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
open Core_kernel.Std;;

#require "mtime.os.top";;

let time f =
  let counter = Mtime.counter () in
  let x = f () in
  let elapsed = Mtime.count counter in
  printf "Time: %F ms\n" (Mtime.to_ms elapsed);
  x 
;;

let memoize f =
  let memo_table = Hashtbl.Poly.create () in
  (fun x ->
     Hashtbl.find_or_add memo_table x ~default:(fun () -> f x))
;;

let fib_norec fib i =
  if i <= 1 then i
  else fib (i - 1) + fib (i - 2) ;;


[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}]
[@@@part "1"];;

let memo_rec f_norec =
  let rec f = memoize (fun x -> f_norec f x) in
  f
;;

[%%expect{|
Line _, characters 14-44:
Error: This kind of expression is not allowed as right-hand side of `let rec'
|}]
[@@@part "2"];;
let rec x = lazy (force x + 1);;

[%%expect{|
|}]
[@@@part "3"];;
force x;;

[%%expect{|
Exception: CamlinternalLazy.Undefined.
|}]
[@@@part "5"];;
let lazy_memo_rec f_norec x =
  let rec f = lazy (memoize (fun x -> f_norec (force f) x)) in
  (force f) x
;;

time (fun () -> lazy_memo_rec fib_norec 40);;


[%%expect{|
Time: 0.078588 ms
|}]