#use "topfind";;
[%%expect{|
- : unit = ()
- : unit = ()
|}];;
#thread;;
#camlp4o;;
#require "core";;
#require "ppx_jane";;
open Core;;
[@@@part "17"];;
module Log_entry = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      important: bool;
      message: string;
    }
end
module Heartbeat = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      status_message: string;
    }
end
module Logon = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      user: string;
      credentials: string;
    }
end
;;
[%%expect{|
module Log_entry :
  sig
    type t = {
      session_id : string;
      time : Time_ns.t;
      important : bool;
      message : string;
    }
  end
module Heartbeat :
  sig
    type t = {
      session_id : string;
      time : Time_ns.t;
      status_message : string;
    }
  end
module Logon :
  sig
    type t = {
      session_id : string;
      time : Time_ns.t;
      user : string;
      credentials : string;
    }
  end
|}];;
[@@@part "18"];;
let create_log_entry ~session_id ~important message =
  { Log_entry.time = Time_ns.now (); 
    Log_entry.session_id; 
    Log_entry.important; 
    Log_entry.message
  }
;;
[%%expect{|
val create_log_entry :
  session_id:string -> important:bool -> string -> Log_entry.t = <fun>
|}];;
[@@@part "19"];;
let create_log_entry ~session_id ~important message =
  { Log_entry.
    time = Time_ns.now (); session_id; important; message }
;;
[%%expect{|
val create_log_entry :
  session_id:string -> important:bool -> string -> Log_entry.t = <fun>
|}];;
[@@@part "19.1"];;
let create_log_entry ~session_id ~important message : Log_entry.t =
  { time = Time_ns.now (); session_id; important; message }
;;
[%%expect{|
Characters 70-127:
Warning 40: this record of type Log_entry.t contains fields that are 
not visible in the current scope: time session_id important message.
They will not be selected if the type becomes unknown.
val create_log_entry :
  session_id:string -> important:bool -> string -> Log_entry.t = <fun>
|}];;
[@@@part "19.2"];;
#warnings "-40";;
let create_log_entry ~session_id ~important message : Log_entry.t =
  { time = Time_ns.now (); session_id; important; message }
;;
[%%expect{|
val create_log_entry :
  session_id:string -> important:bool -> string -> Log_entry.t = <fun>
|}];;
[@@@part "20"];;
let message_to_string { Log_entry.important; message; _ } =
  if important then String.uppercase message else message
;;
[%%expect{|val message_to_string : Log_entry.t -> string = <fun>|}];;
[@@@part "21"];;
let is_important t = t.Log_entry.important;;
[%%expect{|val is_important : Log_entry.t -> bool = <fun>|}];;
[@@@part "21.1"];;
let create_log_entry ~session_id ~important message : Log_entry.t =
  { time = Time_ns.now (); session_id; important; message }
let message_to_string ({ important; message; _ } : Log_entry.t) =
  if important then String.uppercase message else message
let is_important (t:Log_entry.t) = t.important ;;
[%%expect{|
val create_log_entry :
  session_id:string -> important:bool -> string -> Log_entry.t = <fun>
val message_to_string : Log_entry.t -> string = <fun>
val is_important : Log_entry.t -> bool = <fun>
|}];;
[@@@part "22"];;
type client_info =
  { addr: Unix.Inet_addr.t;
    port: int;
    user: string;
    credentials: string;
    last_heartbeat_time: Time_ns.t;
  };;
[%%expect{|
type client_info = {
  addr : Unix.inet_addr;
  port : int;
  user : string;
  credentials : string;
  last_heartbeat_time : Time_ns.t;
}
|}];;
let register_heartbeat t hb =
  { addr = t.addr;
    port = t.port;
    user = t.user;
    credentials = t.credentials;
    last_heartbeat_time = hb.Heartbeat.time;
  };;
[%%expect{|val register_heartbeat : client_info -> Heartbeat.t -> client_info = <fun>|}];;
[@@@part "23"];;
let register_heartbeat t hb =
  { t with last_heartbeat_time = hb.Heartbeat.time };;
[%%expect{|val register_heartbeat : client_info -> Heartbeat.t -> client_info = <fun>|}];;
[@@@part "24"];;
type client_info =
  { addr: Unix.Inet_addr.t;
    port: int;
    user: string;
    credentials: string;
    last_heartbeat_time: Time_ns.t;
    last_heartbeat_status: string;
  };;
[%%expect{|
type client_info = {
  addr : Unix.inet_addr;
  port : int;
  user : string;
  credentials : string;
  last_heartbeat_time : Time_ns.t;
  last_heartbeat_status : string;
}
|}];;
[@@@part "25"];;
let register_heartbeat t hb =
  { t with last_heartbeat_time   = hb.Heartbeat.time;
           last_heartbeat_status = hb.Heartbeat.status_message;
  };;
[%%expect{|val register_heartbeat : client_info -> Heartbeat.t -> client_info = <fun>|}];;
[@@@part "26"];;
type client_info =
  { addr: Unix.Inet_addr.t;
    port: int;
    user: string;
    credentials: string;
    mutable last_heartbeat_time: Time_ns.t;
    mutable last_heartbeat_status: string;
  };;
[%%expect{|
type client_info = {
  addr : Unix.inet_addr;
  port : int;
  user : string;
  credentials : string;
  mutable last_heartbeat_time : Time_ns.t;
  mutable last_heartbeat_status : string;
}
|}];;
[@@@part "27"];;
let register_heartbeat t hb =
  t.last_heartbeat_time   <- hb.Heartbeat.time;
  t.last_heartbeat_status <- hb.Heartbeat.status_message
;;
[%%expect{|val register_heartbeat : client_info -> Heartbeat.t -> unit = <fun>|}];;
[@@@part "28"];;
let get_users logons =
  List.dedup (List.map logons ~f:(fun x -> x.Logon.user));;
[%%expect{|val get_users : Logon.t list -> string list = <fun>|}];;
[@@@part "29"];;
module Logon = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      user: string;
     credentials: string;
    }
  [@@deriving fields]
end;;
[%%expect{|
module Logon :
  sig
    type t = {
      session_id : string;
      time : Time_ns.t;
      user : string;
      credentials : string;
    }
    val credentials : t -> string
    val user : t -> string
    val time : t -> Time_ns.t
    val session_id : t -> string
    module Fields :
      sig
        val names : string list
        val credentials :
          ([< `Read | `Set_and_create ], t, string)
          Fieldslib.Field.t_with_perm
        val user :
          ([< `Read | `Set_and_create ], t, string)
          Fieldslib.Field.t_with_perm
        val time :
          ([< `Read | `Set_and_create ], t, Time_ns.t)
          Fieldslib.Field.t_with_perm
        val session_id :
          ([< `Read | `Set_and_create ], t, string)
          Fieldslib.Field.t_with_perm
        val make_creator :
          session_id:(([< `Read | `Set_and_create ], t, string)
                      Fieldslib.Field.t_with_perm ->
                      'a -> ('b -> string) * 'c) ->
          time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                Fieldslib.Field.t_with_perm -> 'c -> ('b -> Time_ns.t) * 'd) ->
          user:(([< `Read | `Set_and_create ], t, string)
                Fieldslib.Field.t_with_perm -> 'd -> ('b -> string) * 'e) ->
          credentials:(([< `Read | `Set_and_create ], t, string)
                       Fieldslib.Field.t_with_perm ->
                       'e -> ('b -> string) * 'f) ->
          'a -> ('b -> t) * 'f
        val create :
          session_id:string ->
          time:Time_ns.t -> user:string -> credentials:string -> t
        val map :
          session_id:(([< `Read | `Set_and_create ], t, string)
                      Fieldslib.Field.t_with_perm -> string) ->
          time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                Fieldslib.Field.t_with_perm -> Time_ns.t) ->
          user:(([< `Read | `Set_and_create ], t, string)
                Fieldslib.Field.t_with_perm -> string) ->
          credentials:(([< `Read | `Set_and_create ], t, string)
                       Fieldslib.Field.t_with_perm -> string) ->
          t
        val iter :
          session_id:(([< `Read | `Set_and_create ], t, string)
                      Fieldslib.Field.t_with_perm -> unit) ->
          time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                Fieldslib.Field.t_with_perm -> unit) ->
          user:(([< `Read | `Set_and_create ], t, string)
                Fieldslib.Field.t_with_perm -> unit) ->
          credentials:(([< `Read | `Set_and_create ], t, string)
                       Fieldslib.Field.t_with_perm -> unit) ->
          unit
        val fold :
          init:'a ->
          session_id:('a ->
                      ([< `Read | `Set_and_create ], t, string)
                      Fieldslib.Field.t_with_perm -> 'b) ->
          time:('b ->
                ([< `Read | `Set_and_create ], t, Time_ns.t)
                Fieldslib.Field.t_with_perm -> 'c) ->
          user:('c ->
                ([< `Read | `Set_and_create ], t, string)
                Fieldslib.Field.t_with_perm -> 'd) ->
          credentials:('d ->
                       ([< `Read | `Set_and_create ], t, string)
                       Fieldslib.Field.t_with_perm -> 'e) ->
          'e
        val map_poly :
          ([< `Read | `Set_and_create ], t, 'a) Fieldslib.Field.user ->
          'a list
        val for_all :
          session_id:(([< `Read | `Set_and_create ], t, string)
                      Fieldslib.Field.t_with_perm -> bool) ->
          time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                Fieldslib.Field.t_with_perm -> bool) ->
          user:(([< `Read | `Set_and_create ], t, string)
                Fieldslib.Field.t_with_perm -> bool) ->
          credentials:(([< `Read | `Set_and_create ], t, string)
                       Fieldslib.Field.t_with_perm -> bool) ->
          bool
        val exists :
          session_id:(([< `Read | `Set_and_create ], t, string)
                      Fieldslib.Field.t_with_perm -> bool) ->
          time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                Fieldslib.Field.t_with_perm -> bool) ->
          user:(([< `Read | `Set_and_create ], t, string)
                Fieldslib.Field.t_with_perm -> bool) ->
          credentials:(([< `Read | `Set_and_create ], t, string)
                       Fieldslib.Field.t_with_perm -> bool) ->
          bool
        val to_list :
          session_id:(([< `Read | `Set_and_create ], t, string)
                      Fieldslib.Field.t_with_perm -> 'a) ->
          time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                Fieldslib.Field.t_with_perm -> 'a) ->
          user:(([< `Read | `Set_and_create ], t, string)
                Fieldslib.Field.t_with_perm -> 'a) ->
          credentials:(([< `Read | `Set_and_create ], t, string)
                       Fieldslib.Field.t_with_perm -> 'a) ->
          'a list
        module Direct :
          sig
            val iter :
              t ->
              session_id:(([< `Read | `Set_and_create ], t, string)
                          Fieldslib.Field.t_with_perm -> t -> string -> 'a) ->
              time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                    Fieldslib.Field.t_with_perm -> t -> Time_ns.t -> 'b) ->
              user:(([< `Read | `Set_and_create ], t, string)
                    Fieldslib.Field.t_with_perm -> t -> string -> 'c) ->
              credentials:(([< `Read | `Set_and_create ], t, string)
                           Fieldslib.Field.t_with_perm -> t -> string -> 'd) ->
              'd
            val fold :
              t ->
              init:'a ->
              session_id:('a ->
                          ([< `Read | `Set_and_create ], t, string)
                          Fieldslib.Field.t_with_perm -> t -> string -> 'b) ->
              time:('b ->
                    ([< `Read | `Set_and_create ], t, Time_ns.t)
                    Fieldslib.Field.t_with_perm -> t -> Time_ns.t -> 'c) ->
              user:('c ->
                    ([< `Read | `Set_and_create ], t, string)
                    Fieldslib.Field.t_with_perm -> t -> string -> 'd) ->
              credentials:('d ->
                           ([< `Read | `Set_and_create ], t, string)
                           Fieldslib.Field.t_with_perm -> t -> string -> 'e) ->
              'e
            val for_all :
              t ->
              session_id:(([< `Read | `Set_and_create ], t, string)
                          Fieldslib.Field.t_with_perm -> t -> string -> bool) ->
              time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                    Fieldslib.Field.t_with_perm -> t -> Time_ns.t -> bool) ->
              user:(([< `Read | `Set_and_create ], t, string)
                    Fieldslib.Field.t_with_perm -> t -> string -> bool) ->
              credentials:(([< `Read | `Set_and_create ], t, string)
                           Fieldslib.Field.t_with_perm -> t -> string -> bool) ->
              bool
            val exists :
              t ->
              session_id:(([< `Read | `Set_and_create ], t, string)
                          Fieldslib.Field.t_with_perm -> t -> string -> bool) ->
              time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                    Fieldslib.Field.t_with_perm -> t -> Time_ns.t -> bool) ->
              user:(([< `Read | `Set_and_create ], t, string)
                    Fieldslib.Field.t_with_perm -> t -> string -> bool) ->
              credentials:(([< `Read | `Set_and_create ], t, string)
                           Fieldslib.Field.t_with_perm -> t -> string -> bool) ->
              bool
            val to_list :
              t ->
              session_id:(([< `Read | `Set_and_create ], t, string)
                          Fieldslib.Field.t_with_perm -> t -> string -> 'a) ->
              time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                    Fieldslib.Field.t_with_perm -> t -> Time_ns.t -> 'a) ->
              user:(([< `Read | `Set_and_create ], t, string)
                    Fieldslib.Field.t_with_perm -> t -> string -> 'a) ->
              credentials:(([< `Read | `Set_and_create ], t, string)
                           Fieldslib.Field.t_with_perm -> t -> string -> 'a) ->
              'a list
            val map :
              t ->
              session_id:(([< `Read | `Set_and_create ], t, string)
                          Fieldslib.Field.t_with_perm ->
                          t -> string -> string) ->
              time:(([< `Read | `Set_and_create ], t, Time_ns.t)
                    Fieldslib.Field.t_with_perm ->
                    t -> Time_ns.t -> Time_ns.t) ->
              user:(([< `Read | `Set_and_create ], t, string)
                    Fieldslib.Field.t_with_perm -> t -> string -> string) ->
              credentials:(([< `Read | `Set_and_create ], t, string)
                           Fieldslib.Field.t_with_perm ->
                           t -> string -> string) ->
              t
            val set_all_mutable_fields : 'a -> unit
          end
      end
  end
|}];;
[@@@part "30"];;
let get_users logons = List.dedup (List.map logons ~f:Logon.user);;
[%%expect{|val get_users : Logon.t list -> string list = <fun>|}];;
[@@@part "31"];;
Field.get Logon.Fields.user;;
[%%expect{|
Characters 0-9:
Error: The module Field is an alias for module Core_kernel__.Import.Field, which is missing
|}];;
[@@@part "32"];;
Field.get;;
[%%expect{|
Characters 0-9:
Error: The module Field is an alias for module Core_kernel__.Import.Field, which is missing
|}];;
[@@@part "33"];;
let show_field field to_string record =
  let name = Field.name field in
  let field_string = to_string (Field.get field record) in
  name ^ ": " ^ field_string
;;
[%%expect{|
Characters 53-63:
Error: The module Field is an alias for module Core_kernel__.Import.Field, which is missing
|}];;
[@@@part "34"];;
let logon = { Logon.
              session_id = "26685";
              time = Time_ns.now ();
              user = "yminsky";
              credentials = "Xy2d9W"; }
;;
[%%expect{|
val logon : Logon.t =
  {Logon.session_id = "26685"; time = <abstr>; user = "yminsky";
   credentials = "Xy2d9W"}
|}];;
show_field Logon.Fields.user Fn.id logon;;
[%%expect{|
Characters 0-10:
Error: Unbound value show_field
|}];;
show_field Logon.Fields.time Time_ns.to_string logon;;
[%%expect{|
Characters 0-10:
Error: Unbound value show_field
|}];;
[@@@part "35"];;
Logon.Fields.iter;;
[%%expect{|
- : session_id:(([< `Read | `Set_and_create ], Logon.t, string)
                Fieldslib.Field.t_with_perm -> unit) ->
    time:(([< `Read | `Set_and_create ], Logon.t, Time_ns.t)
          Fieldslib.Field.t_with_perm -> unit) ->
    user:(([< `Read | `Set_and_create ], Logon.t, string)
          Fieldslib.Field.t_with_perm -> unit) ->
    credentials:(([< `Read | `Set_and_create ], Logon.t, string)
                 Fieldslib.Field.t_with_perm -> unit) ->
    unit
= <fun>
|}];;
[@@@part "36"];;
let print_logon logon =
  let print to_string field =
    printf "%s\n" (show_field field to_string logon)
  in
  Logon.Fields.iter
    ~session_id:(print Fn.id)
    ~time:(print Time_ns.to_string)
    ~user:(print Fn.id)
    ~credentials:(print Fn.id)
;;
[%%expect{|
Characters 73-83:
Error: Unbound value show_field
|}];;
print_logon logon;;
[%%expect{|
Characters 0-11:
Error: Unbound value print_logon
|}];;
