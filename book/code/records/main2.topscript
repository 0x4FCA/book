#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
open Core.Std;;

[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}];;
[@@@part "17"];;
module Log_entry = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      important: bool;
      message: string;
    }
end
module Heartbeat = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      status_message: string;
    }
end
module Logon = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      user: string;
      credentials: string;
    }
end
;;

[%%expect{|
|}];;
[@@@part "18"];;
let create_log_entry ~session_id ~important message =
  { Log_entry.time = Time_ns.now (); 
    Log_entry.session_id; 
    Log_entry.important; 
    Log_entry.message
  }
;;

[%%expect{|
|}];;
[@@@part "19"];;
let create_log_entry ~session_id ~important message =
  { Log_entry.
    time = Time_ns.now (); session_id; important; message }
;;

[%%expect{|
|}];;
[@@@part "20"];;
let message_to_string { Log_entry.important; message; _ } =
  if important then String.uppercase message else message
;;

[%%expect{|
|}];;
[@@@part "21"];;
let is_important t = t.Log_entry.important;;

[%%expect{|
|}];;
[@@@part "21.1"];;

let create_log_entry ~session_id ~important message : Log_entry.t =
  { time = Time_ns.now (); session_id; important; message }
let message_to_string ({ important; message; _ } : Log_entry.t) =
  if important then String.uppercase message else message
let is_important (t:Log_entry.t) = t.important ;;

[%%expect{|
|}];;
[@@@part "22"];;
type client_info =
  { addr: Unix.Inet_addr.t;
    port: int;
    user: string;
    credentials: string;
    last_heartbeat_time: Time_ns.t;
  };;

let register_heartbeat t hb =
  { addr = t.addr;
    port = t.port;
    user = t.user;
    credentials = t.credentials;
    last_heartbeat_time = hb.Heartbeat.time;
  };;

[%%expect{|
|}];;
[@@@part "23"];;
let register_heartbeat t hb =
  { t with last_heartbeat_time = hb.Heartbeat.time };;

[%%expect{|
|}];;
[@@@part "24"];;
type client_info =
  { addr: Unix.Inet_addr.t;
    port: int;
    user: string;
    credentials: string;
    last_heartbeat_time: Time_ns.t;
    last_heartbeat_status: string;
  };;

[%%expect{|
|}];;
[@@@part "25"];;
let register_heartbeat t hb =
  { t with last_heartbeat_time   = hb.Heartbeat.time;
           last_heartbeat_status = hb.Heartbeat.status_message;
  };;

[%%expect{|
|}];;
[@@@part "26"];;
type client_info =
  { addr: Unix.Inet_addr.t;
    port: int;
    user: string;
    credentials: string;
    mutable last_heartbeat_time: Time_ns.t;
    mutable last_heartbeat_status: string;
  };;

[%%expect{|
|}];;
[@@@part "27"];;
let register_heartbeat t hb =
  t.last_heartbeat_time   <- hb.Heartbeat.time;
  t.last_heartbeat_status <- hb.Heartbeat.status_message
;;

[%%expect{|
|}];;
[@@@part "28"];;
let get_users logons =
  List.dedup (List.map logons ~f:(fun x -> x.Logon.user));;

[%%expect{|
|}];;
[@@@part "29"];;
module Logon = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      user: string;
      credentials: string;
    }
  [@@deriving fields]
end;;

[%%expect{|
Line _, characters 5-13:
Attribute `deriving' was not used
|}];;
[@@@part "30"];;
let get_users logons = List.dedup (List.map logons ~f:Logon.user);;

[%%expect{|
Line _, characters 54-64:
Error: Unbound value Logon.user
|}];;
[@@@part "31"];;
Field.get Logon.Fields.user;;

[%%expect{|
Line _, characters 10-27:
Error: Unbound module Logon.Fields
|}];;
[@@@part "32"];;
Field.get;;

[%%expect{|
|}];;
[@@@part "33"];;
let show_field field to_string record =
  let name = Field.name field in
  let field_string = to_string (Field.get field record) in
  name ^ ": " ^ field_string
;;

[%%expect{|
|}];;
[@@@part "34"];;
let logon = { Logon.
              session_id = "26685";
              time = Time_ns.now ();
              user = "yminsky";
              credentials = "Xy2d9W"; }
;;

show_field Logon.Fields.user Fn.id logon;;

show_field Logon.Fields.time Time_ns.to_string logon;;

[%%expect{|
Line _, characters 11-28:
Error: Unbound module Logon.Fields
Line _, characters 11-28:
Error: Unbound module Logon.Fields
|}];;
[@@@part "35"];;
Logon.Fields.iter;;

[%%expect{|
Line _, characters 0-17:
Error: Unbound module Logon.Fields
|}];;
[@@@part "36"];;
let print_logon logon =
  let print to_string field =
    printf "%s\n" (show_field field to_string logon)
  in
  Logon.Fields.iter
    ~session_id:(print Fn.id)
    ~time:(print Time_ns.to_string)
    ~user:(print Fn.id)
    ~credentials:(print Fn.id)
;;

print_logon logon;;

[%%expect{|
Line _, characters 2-19:
Error: Unbound module Logon.Fields
Line _, characters 0-11:
Error: Unbound value print_logon
|}];;
