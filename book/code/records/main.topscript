open Core.Std;;

type host_info =
    { hostname   : string;
      os_name    : string;
      cpu_arch   : string;
      timestamp  : Time.t;
    };;

#part 1
#require "core_extended";;
open Core_extended.Std;;
let my_host =
    let sh = Shell.sh_one_exn in
    { hostname   = sh "hostname";
      os_name    = sh "uname -s";
      cpu_arch   = sh "uname -p";
      timestamp  = Time.now ();
    };;

#part 2
my_host.cpu_arch;;

#part 3
type 'a timestamped = { item: 'a; time: Time.t };;

#part 4
let first_timestamped list =
    List.reduce list ~f:(fun a b -> if a.time < b.time then a else b)
  ;;


#part 5
let host_info_to_string { hostname = h; os_name = os;
                            cpu_arch = c; timestamp = ts;
                          } =
       sprintf "%s (%s / %s, on %s)" h os c (Time.to_string ts);;

host_info_to_string my_host;;


#part 6
type host_info =
    { hostname   : string;
      os_name    : string;
      cpu_arch   : string;
      os_release : string;
      timestamp  : Time.t;
    } ;;

#part 7
#warnings "+9";;
let host_info_to_string { hostname = h; os_name = os;
                            cpu_arch = c; timestamp = ts;
                          } =
    sprintf "%s (%s / %s, on %s)" h os c (Time.to_sec_string ts);;

#part 8
let host_info_to_string { hostname = h; os_name = os;
                            cpu_arch = c; timestamp = ts; _
                          } =
    sprintf "%s (%s / %s, on %s)" h os c (Time.to_sec_string ts);;

#part 9
let host_info_to_string { hostname; os_name; cpu_arch; timestamp; _ } =
     sprintf "%s (%s / %s) <%s>" hostname os_name cpu_arch
       (Time.to_string timestamp);;

#part 10
let my_host =
    let sh cmd = Shell.sh_one_exn cmd in
    let hostname   = sh "hostname" in
    let os_name    = sh "uname -s" in
    let cpu_arch   = sh "uname -p" in
    let os_release = sh "uname -r" in
    let timestamp  = Time.now () in
    { hostname; os_name; cpu_arch; os_release; timestamp };;

#part 11
let create_host_info ~hostname ~os_name ~cpu_arch ~os_release =
    { os_name; cpu_arch; os_release;
      hostname = String.lowercase hostname;
      timestamp = Time.now () };;

#part 12
let create_host_info
    ~hostname:hostname ~os_name:os_name
    ~cpu_arch:cpu_arch ~os_release:os_release =
    { os_name = os_name;
      cpu_arch = cpu_arch;
      os_release = os_release;
      hostname = String.lowercase hostname;
      timestamp = Time.now () };;

#part 13
type log_entry =
    { session_id: string;
      time: Time.t;
      important: bool;
      message: string;
    };;
  type heartbeat =
    { session_id: string;
      time: Time.t;
      status_message: string;
    };;
  type logon =
    { session_id: string;
      time: Time.t;
      user: string;
      credentials: string;
    }
;;

#part 14
let get_session_id t = t.session_id;;

#part 15
let get_heartbeat_session_id (t:heartbeat) = t.session_id;;

#part 16
let status_and_session t = (t.status_message, t.session_id);;

let session_and_status t = (t.session_id, t.status_message);;

let session_and_status (t:heartbeat) = (t.session_id, t.status_message);;

