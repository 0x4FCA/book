open Core_kernel.Std;;

type service_info =
    { service_name : string;
      port         : int;
      protocol     : string;
    }
  ;;

#part 1
#require "re.pcre";;
let service_info_of_string line =
    let matches = 
      Re.exec (Re_pcre.regexp "([a-zA-Z]+)[ \t]+([0-9]+)/([a-zA-Z]+)") line
    in
    { service_name = Re.get matches 1;
      port = Int.of_string (Re.get matches 2);
      protocol = Re.get matches 3;
    }
  ;;

#part 1.1
let ssh = service_info_of_string
  "ssh 22/udp # SSH Remote Login Protocol";;

#part 2
ssh.port;;

#part 3
type 'a with_line_num = { item: 'a; line_num: int };;

#part 4
let parse_with_line_nums parse file_contents =
    let lines = String.split ~on:'\n' file_contents in
    List.mapi lines ~f:(fun line_num line ->
      { item = parse line;
        line_num = line_num + 1;
      })
  ;;

#part 4.1

parse_with_line_nums service_info_of_string
    "rtmp              1/ddp    #Routing Table Maintenance Protocol\n\
     tcpmux            1/udp     # TCP Port Service Multiplexer\n\
     tcpmux            1/tcp     # TCP Port Service Multiplexer"
;;


#part 5
let host_info_to_string { hostname = h; os_name = os; cpu_arch = c } =
       sprintf "%s (%s / %s)" h os c
  ;;

host_info_to_string my_host;;


#part 6
type host_info =
    { hostname   : string;
      os_name    : string;
      cpu_arch   : string;
      os_release : string;
    } ;;

#part 7
#warnings "+9";;
let host_info_to_string { hostname = h; os_name = os; cpu_arch = c } =
    sprintf "%s (%s / %s)" h os c
  ;;

#part 8
let host_info_to_string { hostname = h; os_name = os; cpu_arch = c } =
    sprintf "%s (%s / %s)" h os c
  ;;

#part 9
let host_info_to_string { hostname; os_name; cpu_arch; _ } =
     sprintf "%s (%s / %s)" hostname os_name cpu_arch
  ;;

#part 10
let my_host =
    let sh cmd = Shell.sh_one_exn cmd in
    let hostname   = sh "hostname" in
    let os_name    = sh "uname -s" in
    let cpu_arch   = sh "uname -p" in
    let os_release = sh "uname -r" in
    { hostname; os_name; cpu_arch; os_release; timestamp };;

#part 11
let create_host_info ~hostname ~os_name ~cpu_arch ~os_release =
    { os_name; cpu_arch; os_release;
      hostname = String.lowercase hostname;
      timestamp = Time.now () };;

#part 12
let create_host_info
    ~hostname:hostname ~os_name:os_name
    ~cpu_arch:cpu_arch ~os_release:os_release =
    { os_name = os_name;
      cpu_arch = cpu_arch;
      os_release = os_release;
      hostname = String.lowercase hostname;
      timestamp = Time.now () };;

#part 13
type log_entry =
    { session_id: string;
      time: Time.t;
      important: bool;
      message: string;
    };;
  type heartbeat =
    { session_id: string;
      time: Time.t;
      status_message: string;
    };;
  type logon =
    { session_id: string;
      time: Time.t;
      user: string;
      credentials: string;
    }
;;

#part 14
let get_session_id t = t.session_id;;

#part 15
let get_heartbeat_session_id (t:heartbeat) = t.session_id;;

#part 16
let status_and_session t = (t.status_message, t.session_id);;

let session_and_status t = (t.session_id, t.status_message);;

let session_and_status (t:heartbeat) = (t.session_id, t.status_message);;

