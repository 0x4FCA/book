#use "topfind";;
[%%expect{|
- : unit = ()
- : unit = ()
|}];;
#thread;;
#require "core";;
#require "ppx_jane";;
[@@@part "1"];;
open Core;;
In_channel.read_all;;
[%%expect{|- : string -> string = <fun>|}];;

Out_channel.write_all "test.txt" ~data:"This is only a test.";;
[%%expect{|- : unit = ()|}];;

In_channel.read_all "test.txt";;

[%%expect{|- : string = "This is only a test."|}];;
[@@@part "3"];;
#require "async";;
open Async;;
Reader.file_contents;;


[%%expect{|- : string -> string Deferred.t = <fun>|}];;
[@@@part "4"];;
let contents = Reader.file_contents "test.txt";;
[%%expect{|val contents : string Deferred.t = <abstr>|}];;

Deferred.peek contents;;


[%%expect{|- : string option = None|}];;
[@@@part "5"];;
contents;;

[%%expect{|- : string = "This is only a test."|}];;
[@@@part "6"];;
Deferred.peek contents;;


[%%expect{|- : string option = Some "This is only a test."|}];;
[@@@part "7"];;
Deferred.bind ;;


[%%expect{|- : 'a Deferred.t -> f:('a -> 'b Deferred.t) -> 'b Deferred.t = <fun>|}];;
[@@@part "8"];;
let uppercase_file filename =
  Deferred.bind (Reader.file_contents filename)
    (fun text ->
       Writer.save filename ~contents:(String.uppercase text))
;;
[%%expect{|val uppercase_file : string -> unit Deferred.t = <fun>|}];;

uppercase_file "test.txt";;
[%%expect{|- : unit = ()|}];;

Reader.file_contents "test.txt";;


[%%expect{|- : string = "THIS IS ONLY A TEST."|}];;
[@@@part "9"];;
let uppercase_file filename =
  Reader.file_contents filename
  >>= fun text ->
  Writer.save filename ~contents:(String.uppercase text)
;;


[%%expect{|val uppercase_file : string -> unit Deferred.t = <fun>|}];;
[@@@part "10"];;
let count_lines filename =
  Reader.file_contents filename
  >>= fun text ->
  List.length (String.split text ~on:'\n')
;;




[%%expect{|
Characters 79-119:
Error: This expression has type int but an expression was expected of type
         'a Deferred.t
|}];;
[@@@part "11"];;
return;;
[%%expect{|- : 'a -> 'a Deferred.t = <fun>|}];;

let three = return 3;;
[%%expect{|val three : int Deferred.t = <abstr>|}];;

three;;


[%%expect{|- : int = 3|}];;
[@@@part "12"];;
let count_lines filename =
  Reader.file_contents filename
  >>= fun text ->
  return (List.length (String.split text ~on:'\n'))
;;
[%%expect{|val count_lines : string -> int Deferred.t = <fun>|}];;

[@@@part "12.1"];;
let count_lines filename =
  let%bind text = Reader.file_contents filename in
  return (List.length (String.split text ~on:'\n'))
;;

[%%expect{|val count_lines : string -> int Deferred.t = <fun>|}];;
[@@@part "13"];;
Deferred.map;;


[%%expect{|- : 'a Deferred.t -> f:('a -> 'b) -> 'b Deferred.t = <fun>|}];;
[@@@part "14"];;
let count_lines filename =
  Reader.file_contents filename
  >>| fun text ->
  List.length (String.split text ~on:'\n')
;;
[%%expect{|val count_lines : string -> int Deferred.t = <fun>|}];;

count_lines "/etc/hosts";;


[%%expect{|- : int = 10|}];;
[@@@part "14.1"];;
let count_lines filename =
  let%map text = Reader.file_contents filename in
  List.length (String.split text ~on:'\n')
;;
[%%expect{|val count_lines : string -> int Deferred.t = <fun>|}];;

[@@@part "15"];;
let ivar = Ivar.create ();;
[%%expect{|
val ivar : '_a Ivar.t =
  {Async_kernel__.Types.Ivar.cell = Async_kernel__Types.Cell.Empty}
|}];;

let def = Ivar.read ivar;;
[%%expect{|val def : '_a Deferred.t = <abstr>|}];;

Deferred.peek def;;
[%%expect{|- : '_a option = None|}];;

Ivar.fill ivar "Hello";;
[%%expect{|- : unit = ()|}];;

Deferred.peek def;;


[%%expect{|- : string option = Some "Hello"|}];;

[@@@part "16"];;
module type Delayer_intf = sig
  type t
  val create : Time.Span.t -> t
  val schedule : t -> (unit -> 'a Deferred.t) -> 'a Deferred.t
end;;

[%%expect{|
module type Delayer_intf =
  sig
    type t
    val create : Time.Span.t -> t
    val schedule : t -> (unit -> 'a Deferred.t) -> 'a Deferred.t
  end
|}];;
[@@@part "17"];;
upon;;


[%%expect{|- : 'a Deferred.t -> ('a -> unit) -> unit = <fun>|}];;
[@@@part "18"];;
module Delayer : Delayer_intf = struct
  type t = { delay: Time.Span.t;
             jobs: (unit -> unit) Queue.t;
           }

  let create delay =
    { delay; jobs = Queue.create () }

  let schedule t thunk =
    let ivar = Ivar.create () in
    Queue.enqueue t.jobs (fun () ->
      upon (thunk ()) (fun x -> Ivar.fill ivar x));
    upon (after t.delay) (fun () ->
      let job = Queue.dequeue_exn t.jobs in
      job ());
    Ivar.read ivar
end;;


[%%expect{|module Delayer : Delayer_intf|}];;

[@@@part "18.1"];;
let my_bind d ~f =
  let i = Ivar.create () in
  upon d (fun x -> upon (f x) (fun y -> Ivar.fill i y));
  Ivar.read i
;;
[%%expect{|
val my_bind : 'a Deferred.t -> f:('a -> 'b Deferred.t) -> 'b Deferred.t =
  <fun>
|}];;

[@@@part "19"];;
let rec loop_forever () = loop_forever ();;
[%%expect{|val loop_forever : unit -> 'a = <fun>|}];;

let always_fail () = assert false;;


[%%expect{|val always_fail : unit -> 'a = <fun>|}];;
[@@@part "20"];;
let do_stuff n =
  let x = 3 in
  if n > 0 then loop_forever ();
  x + n
;;


[%%expect{|val do_stuff : int -> int = <fun>|}];;
[@@@part "21"];;
let rec loop_forever () : never_returns = loop_forever ();;


[%%expect{|val loop_forever : unit -> never_returns = <fun>|}];;
[@@@part "22"];;
let do_stuff n =
  let x = 3 in
  if n > 0 then loop_forever ();
  x + n
;;




[%%expect{|
Characters 48-63:
Error: This expression has type never_returns = (unit, int) Base.Type_equal.t
       but an expression was expected of type unit
|}];;
[@@@part "23"];;
never_returns;;
[%%expect{|- : never_returns -> 'a = <fun>|}];;

let do_stuff n =
  let x = 3 in
  if n > 0 then never_returns (loop_forever ());
  x + n
;;


[%%expect{|val do_stuff : int -> int = <fun>|}];;
[@@@part "24"];;
let (r,w) = Pipe.create ();;



[%%expect{|
val r : '_a Pipe.Reader.t = <abstr>
val w : '_a Pipe.Writer.t = <abstr>
|}];;
[@@@part "25"];;
let (r,w) = Pipe.create ();;
[%%expect{|
val r : '_a Pipe.Reader.t = <abstr>
val w : '_a Pipe.Writer.t = <abstr>
|}];;


let write_complete = Pipe.write w "Hello World!";;
[%%expect{|val write_complete : unit Deferred.t = <abstr>|}];;

Pipe.read r;;
[%%expect{|- : [ `Eof | `Ok of string ] = `Ok "Hello World!"|}];;

write_complete;;


[%%expect{|- : unit = ()|}];;
[@@@part "26"];;
Pipe.transfer;;



[%%expect{|
- : 'a Pipe.Reader.t -> 'b Pipe.Writer.t -> f:('a -> 'b) -> unit Deferred.t =
<fun>
|}];;
[@@@part "27"];;
Command.async_basic;;





[%%expect{|
Characters 0-19:
Warning 3: deprecated: Async.Command.async_basic
[since 2015-10] Use async instead
Characters 0-19:
Warning 3: deprecated: Async.Command.async_basic
[since 2015-10] Use async instead
- : ('a, unit Deferred.t) Async_extra.Command.basic_command
    Command.with_options
= <fun>
|}];;
[@@@part "28"];;
#require "cohttp.async";;
Cohttp_async.Client.get;;





[%%expect{|
- : ?interrupt:unit Deferred.t ->
    ?ssl_config:Conduit_async.Ssl.config ->
    ?headers:Cohttp.Header.t ->
    Uri.t -> (Cohttp_async.Response.t * Cohttp_async.Body.t) Deferred.t
= <fun>
|}];;
[@@@part "29"];;
Deferred.all;;


[%%expect{|- : 'a Conduit_async.io list -> 'a list Conduit_async.io = <fun>|}];;
[@@@part "30"];;
Deferred.all_unit;;


[%%expect{|- : unit Conduit_async.io list -> unit Conduit_async.io = <fun>|}];;
[@@@part "31"];;
let maybe_raise =
  let should_fail = ref false in
  fun () ->
    let will_fail = !should_fail in
    should_fail := not will_fail;
    after (Time.Span.of_sec 0.5)
    >>= fun () ->
    if will_fail then raise Exit else return ()
;;
[%%expect{|val maybe_raise : unit -> unit Conduit_async.io = <fun>|}];;

maybe_raise ();;
[%%expect{|- : unit = ()|}];;

maybe_raise ();;









[%%expect{|Exception: Async_kernel__Monitor.Error_ _.|}];;
[@@@part "32"];;
let handle_error () =
  try
    maybe_raise ()
    >>| fun () -> "success"
  with _ -> return "failure"
;;
[%%expect{|val handle_error : unit -> string Conduit_async.io = <fun>|}];;

handle_error ();;
[%%expect{|- : string = "success"|}];;

handle_error ();;









[%%expect{|Exception: Async_kernel__Monitor.Error_ _.|}];;
[@@@part "33"];;
let handle_error () =
  try_with (fun () -> maybe_raise ())
  >>| function
  | Ok ()   -> "success"
  | Error _ -> "failure"
;;
[%%expect{|val handle_error : unit -> string Conduit_async.io = <fun>|}];;

handle_error ();;
[%%expect{|- : string = "success"|}];;

handle_error ();;


[%%expect{|- : string = "failure"|}];;
[@@@part "34"];;
let blow_up () =
  let monitor = Monitor.create ~name:"blow up monitor" () in
  within' ~monitor maybe_raise
;;
[%%expect{|val blow_up : unit -> unit Conduit_async.io = <fun>|}];;

blow_up ();;
[%%expect{|- : unit = ()|}];;

blow_up ();;


[%%expect{|Exception: Async_kernel__Monitor.Error_ _.|}];;
[@@@part "35"];;
[@@@part "36"];;
[@@@part "37"];;
swallow_some_errors Not_found;;


[%%expect{|
Characters 0-19:
Error: Unbound value swallow_some_errors
|}];;
[@@@part "38"];;
swallow_some_errors Ignore_me;;


[%%expect{|
Characters 0-19:
Error: Unbound value swallow_some_errors
|}];;
[@@@part "39"];;
let string_and_float = Deferred.both
                         (after (sec 0.5)  >>| fun () -> "A")
                         (after (sec 0.25) >>| fun () -> 32.33);;
[%%expect{|val string_and_float : (string * float) Conduit_async.io = <abstr>|}];;

string_and_float;;


[%%expect{|- : string * float = ("A", 32.33)|}];;
[@@@part "40"];;
Deferred.any [ (after (sec 0.5) >>| fun () -> "half a second")
             ; (after (sec 10.) >>| fun () -> "ten seconds") ] ;;


[%%expect{|- : string = "half a second"|}];;
[@@@part "41"];;
choice;;
[%%expect{|- : 'a Conduit_async.io -> ('a -> 'b) -> 'b Deferred.choice = <fun>|}];;

choose;;


[%%expect{|- : 'a Deferred.choice list -> 'a Conduit_async.io = <fun>|}];;
[@@@part "42"];;
let def = In_thread.run (fun () -> List.range 1 10);;
[%%expect{|val def : int list Conduit_async.io = <abstr>|}];;

def;;


[%%expect{|- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9]|}];;
[@@@part "43"];;
let log_delays thunk =
  let start = Time.now () in
  let print_time () =
    let diff = Time.diff (Time.now ()) start in
    printf "%s, " (Time.Span.to_string diff)
  in
  let d = thunk () in
  Clock.every (sec 0.1) ~stop:d print_time;
  d >>| fun () -> print_time (); printf "\n"
;;


[%%expect{|
val log_delays : (unit -> unit Conduit_async.io) -> unit Conduit_async.io =
  <fun>
|}];;
[@@@part "44"];;
log_delays (fun () -> after (sec 0.5));;

[%%expect{|
- : unit = ()
0.0348091ms, 102.198ms, 205.28ms, 310.125ms, 414.026ms, |}];;
[@@@part "45"];;
let busy_loop () =
  let x = ref None in
  for i = 1 to 100_000_000 do x := Some i done
;;
[%%expect{|
val busy_loop : unit -> unit = <fun>
502.224ms, 
|}];;

log_delays (fun () -> return (busy_loop ()));;


[%%expect{|- : unit = ()|}];;
[@@@part "46"];;
log_delays (fun () -> In_thread.run busy_loop);;

[%%expect{|
- : unit = ()
1.32979s, 
0.0619888ms, 190.536ms, 298.064ms, 509.639ms, 668.697ms, 879.493ms, 1.14413s, 1.25242s, 1.35789s, |}];;
[@@@part "47"];;
let noalloc_busy_loop () =
  for i = 0 to 100_000_000 do () done
;;
[%%expect{|val noalloc_busy_loop : unit -> unit = <fun>|}];;

log_delays (fun () -> In_thread.run noalloc_busy_loop);;
[%%expect{|
- : unit = ()
1.38298s, 
0.0350475ms, 186.982ms, 399.162ms, 666.814ms, |}];;
