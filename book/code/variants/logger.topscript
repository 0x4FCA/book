#use "topfind";;
[%%expect{|
- : unit = ()
- : unit = ()
|}];;
#thread;;
#camlp4o;;
#require "core";;
#require "ppx_jane";;
open Core_kernel;;
module Time_ns = Core_kernel.Time_ns;;
[%%expect{|module Time_ns = Core_kernel.Time_ns|}];;
[@@@part "1"];;
module Log_entry = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      important: bool;
      message: string;
    }
end
;;
[%%expect{|
module Log_entry :
  sig
    type t = {
      session_id : string;
      time : Time_ns.t;
      important : bool;
      message : string;
    }
  end
|}];;
[@@@part "1.5"];;
module Heartbeat = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      status_message: string;
    }
end;;
[%%expect{|
module Heartbeat :
  sig
    type t = {
      session_id : string;
      time : Time_ns.t;
      status_message : string;
    }
  end
|}];;
module Logon = struct
  type t =
    { session_id: string;
      time: Time_ns.t;
      user: string;
      credentials: string;
    }
end;;
[%%expect{|
module Logon :
  sig
    type t = {
      session_id : string;
      time : Time_ns.t;
      user : string;
      credentials : string;
    }
  end
|}];;
[@@@part "2"];;
type client_message = | Logon of Logon.t
                      | Heartbeat of Heartbeat.t
                      | Log_entry of Log_entry.t
;;
[%%expect{|
type client_message =
    Logon of Logon.t
  | Heartbeat of Heartbeat.t
  | Log_entry of Log_entry.t
|}];;
[@@@part "3"];;
let messages_for_user user messages =
  let (user_messages,_) =
    List.fold messages ~init:([],String.Set.empty)
      ~f:(fun ((messages,user_sessions) as acc) message ->
        match message with
        | Logon m ->
          if m.Logon.user = user then
            (message::messages, Set.add user_sessions m.Logon.session_id)
          else acc
        | Heartbeat _ | Log_entry _ ->
          let session_id = match message with
            | Logon     m -> m.Logon.session_id
            | Heartbeat m -> m.Heartbeat.session_id
            | Log_entry m -> m.Log_entry.session_id
          in
          if Set.mem user_sessions session_id then
            (message::messages,user_sessions)
          else acc
      )
  in
  List.rev user_messages
;;
[%%expect{|
val messages_for_user : string -> client_message list -> client_message list =
  <fun>
|}];;
[@@@part "4"];;
module Log_entry = struct
  type t = { important: bool;
             message: string;
           }
end;;
[%%expect{|module Log_entry : sig type t = { important : bool; message : string; } end|}];;
module Heartbeat = struct
  type t = { status_message: string; }
end;;
[%%expect{|module Heartbeat : sig type t = { status_message : string; } end|}];;
module Logon = struct
  type t = { user: string;
             credentials: string;
           }
end ;;
[%%expect{|module Logon : sig type t = { user : string; credentials : string; } end|}];;
[@@@part "5"];;
type details =
  | Logon of Logon.t
  | Heartbeat of Heartbeat.t
  | Log_entry of Log_entry.t
;;
[%%expect{|
type details =
    Logon of Logon.t
  | Heartbeat of Heartbeat.t
  | Log_entry of Log_entry.t
|}];;
[@@@part "6"];;
module Common = struct
  type t = { session_id: string;
             time: Time_ns.t;
           }
end ;;
[%%expect{|module Common : sig type t = { session_id : string; time : Time_ns.t; } end|}];;
[@@@part "7"];;
let messages_for_user user messages =
  let (user_messages,_) =
    List.fold messages ~init:([],String.Set.empty)
      ~f:(fun ((messages,user_sessions) as acc) ((common,details) as message) ->
        let session_id = common.Common.session_id in
        match details with
        | Logon m ->
          if m.Logon.user = user then
            (message::messages, Set.add user_sessions session_id)
          else acc
        | Heartbeat _ | Log_entry _ ->
          if Set.mem user_sessions session_id then
            (message::messages,user_sessions)
          else acc
      )
  in
  List.rev user_messages
;;
[%%expect{|
val messages_for_user :
  string -> (Common.t * details) list -> (Common.t * details) list = <fun>
|}];;
[@@@part "7.9"];;
type server_state;;
[%%expect{|type server_state|}];;
let handle_log_entry (_:server_state) ((_:Common.t),_) = ();;
[%%expect{|val handle_log_entry : server_state -> Common.t * 'a -> unit = <fun>|}];;
let handle_logon _ (_,_) = ();;
[%%expect{|val handle_logon : 'a -> 'b * 'c -> unit = <fun>|}];;
let handle_heartbeat _ (_,_) = ();;
[%%expect{|val handle_heartbeat : 'a -> 'b * 'c -> unit = <fun>|}];;
[@@@part "8"];;
let handle_message server_state (common,details) =
  match details with
  | Log_entry m -> handle_log_entry server_state (common,m)
  | Logon     m -> handle_logon     server_state (common,m)
  | Heartbeat m -> handle_heartbeat server_state (common,m)
;;
[%%expect{|val handle_message : server_state -> Common.t * details -> unit = <fun>|}];;
