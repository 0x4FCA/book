#use "topfind";;
[%%expect ocaml {|- : unit = ()|};
{|
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

|};
ocaml {|- : unit = ()|}];;
#thread;;
[%%expect{|
/Users/yminsky/.opam/4.04.1/lib/ocaml/threads: added to search path
/Users/yminsky/.opam/4.04.1/lib/ocaml/threads/threads.cma: loaded
|}];;
#camlp4o;;
[%%expect{|
/Users/yminsky/.opam/4.04.1/lib/ocaml/dynlink.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ocaml/camlp4: added to search path
/Users/yminsky/.opam/4.04.1/lib/ocaml/camlp4/camlp4o.cma: loaded
|}];;
#require "core";;
[%%expect{|
/Users/yminsky/.opam/4.04.1/lib/base/caml: added to search path
/Users/yminsky/.opam/4.04.1/lib/base/caml/caml.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/base/shadow_stdlib: added to search path
/Users/yminsky/.opam/4.04.1/lib/base/shadow_stdlib/shadow_stdlib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/sexplib/0: added to search path
/Users/yminsky/.opam/4.04.1/lib/base: added to search path
/Users/yminsky/.opam/4.04.1/lib/base/base.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/fieldslib: added to search path
/Users/yminsky/.opam/4.04.1/lib/fieldslib/fieldslib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_compare/runtime-lib: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_compare/runtime-lib/ppx_compare_lib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/sexplib: added to search path
/Users/yminsky/.opam/4.04.1/lib/variantslib: added to search path
/Users/yminsky/.opam/4.04.1/lib/variantslib/variantslib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/bin_prot/shape: added to search path
/Users/yminsky/.opam/4.04.1/lib/bin_prot/shape/bin_shape_lib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/bin_prot: added to search path
/Users/yminsky/.opam/4.04.1/lib/bin_prot/bin_prot.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_hash/runtime-lib: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_hash/runtime-lib/ppx_hash_lib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_inline_test/config: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_inline_test/config/inline_test_config.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_inline_test/runtime-lib: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_inline_test/runtime-lib/ppx_inline_test_lib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/core_kernel/base_for_tests: added to search path
/Users/yminsky/.opam/4.04.1/lib/core_kernel/base_for_tests/base_for_tests.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/jane-street-headers: added to search path
/Users/yminsky/.opam/4.04.1/lib/jane-street-headers/jane_street_headers.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ocaml/nums.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/num-top: added to search path
/Users/yminsky/.opam/4.04.1/lib/num-top/num_top.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/num: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_assert/runtime-lib: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_assert/runtime-lib/ppx_assert_lib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_bench/runtime-lib: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_bench/runtime-lib/ppx_bench_lib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_expect/common: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_expect/common/expect_test_common.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_expect/config: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_expect/config/expect_test_config.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/ppx_expect/collector: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_expect/collector/expect_test_collector.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/stdio: added to search path
/Users/yminsky/.opam/4.04.1/lib/stdio/stdio.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/typerep: added to search path
/Users/yminsky/.opam/4.04.1/lib/typerep/typerep_lib.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/core_kernel: added to search path
/Users/yminsky/.opam/4.04.1/lib/core_kernel/core_kernel.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/sexplib/unix: added to search path
/Users/yminsky/.opam/4.04.1/lib/sexplib/unix/sexplib_unix.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/spawn: added to search path
/Users/yminsky/.opam/4.04.1/lib/spawn/spawn.cma: loaded
/Users/yminsky/.opam/4.04.1/lib/core: added to search path
/Users/yminsky/.opam/4.04.1/lib/core/core.cma: loaded
|}];;
#require "ppx_jane";;
[%%expect{|
/Users/yminsky/.opam/4.04.1/lib/ppx_jane: added to search path
/Users/yminsky/.opam/4.04.1/lib/ppx_jane/./ppx.exe --as-ppx: activated
|}];;
open Core_kernel;;
[@@@part "0.5"];;
type 'a expr =
  | Base  of 'a
  | Const of bool
  | And   of 'a expr list
  | Or    of 'a expr list
  | Not   of 'a expr
;;
[%%expect ocaml {|
type 'a expr =
    Base of 'a
  | Const of bool
  | And of 'a expr list
  | Or of 'a expr list
  | Not of 'a expr
|}];;
[@@@part "1"];;
type mail_field = To | From | CC | Date | Subject;;
[%%expect ocaml {|type mail_field = To | From | CC | Date | Subject|}];;
type mail_predicate = { field: mail_field;
                        contains: string }
;;
[%%expect ocaml {|type mail_predicate = { field : mail_field; contains : string; }|}];;
[@@@part "2"];;
let test field contains = Base { field; contains };;
[%%expect ocaml {|val test : mail_field -> string -> mail_predicate expr = <fun>|}];;
And [ Or [ test To "doligez"; test CC "doligez" ];
      test Subject "runtime";
    ]
;;
[%%expect ocaml {|
- : mail_predicate expr =
And
 [Or
   [Base {field = To; contains = "doligez"};
    Base {field = CC; contains = "doligez"}];
  Base {field = Subject; contains = "runtime"}]
|}];;
[@@@part "3"];;
let rec eval expr base_eval =
  (* a shortcut, so we don't need to repeatedly pass [base_eval]
     explicitly to [eval] *)
  let eval' expr = eval expr base_eval in
  match expr with
  | Base  base  -> base_eval base
  | Const bool  -> bool
  | And   exprs -> List.for_all exprs ~f:eval'
  | Or    exprs -> List.exists  exprs ~f:eval'
  | Not   expr  -> not (eval' expr)
;;
[%%expect ocaml {|val eval : 'a expr -> ('a -> bool) -> bool = <fun>|}];;
[@@@part "4"];;
let and_ l =
  if List.mem l (Const false) then Const false
  else
    match List.filter l ~f:((<>) (Const true)) with
    | [] -> Const true
    | [ x ] -> x
    | l -> And l
;;
[%%expect{|
Characters 18-42:
Error: This expression has type equal:('a expr -> 'a expr -> bool) -> bool
       but an expression was expected of type bool
|}];;
let or_ l =
  if List.mem l (Const true) then Const true
  else
    match List.filter l ~f:((<>) (Const false)) with
    | [] -> Const false
    | [x] -> x
    | l -> Or l
;;
[%%expect{|
Characters 17-40:
Error: This expression has type equal:('a expr -> 'a expr -> bool) -> bool
       but an expression was expected of type bool
|}];;
let not_ = function
  | Const b -> Const (not b)
  | e -> Not e
;;
[%%expect ocaml {|val not_ : 'a expr -> 'a expr = <fun>|}];;
[@@@part "5"];;
let rec simplify = function
  | Base _ | Const _ as x -> x
  | And l -> and_ (List.map ~f:simplify l)
  | Or l  -> or_  (List.map ~f:simplify l)
  | Not e -> not_ (simplify e)
;;
[%%expect{|
Characters 72-76:
Error: Unbound value and_
|}];;
[@@@part "6"];;
simplify (Not (And [ Or [Base "it's snowing"; Const true];
                     Base "it's raining"]));;
[%%expect{|
Characters 0-8:
Error: Unbound value simplify
|}];;
[@@@part "7"];;
simplify (Not (And [ Or [Base "it's snowing"; Const true];
                     Not (Not (Base "it's raining"))]));;
[%%expect{|
Characters 0-8:
Error: Unbound value simplify
|}];;
[@@@part "8"];;
let not_ = function
  | Const b -> Const (not b)
  | (Base _ | And _ | Or _ | Not _) as e -> Not e
;;
[%%expect ocaml {|val not_ : 'a expr -> 'a expr = <fun>|}];;
[@@@part "9"];;
let not_ = function
  | Const b -> Const (not b)
  | Not e -> e
  | (Base _ | And _ | Or _ ) as e -> Not e
;;
[%%expect ocaml {|val not_ : 'a expr -> 'a expr = <fun>|}];;
