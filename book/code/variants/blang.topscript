#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;

open Core_kernel.Std;;
[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}]
[@@@part "0.5"];;
type 'a expr =
  | Base  of 'a
  | Const of bool
  | And   of 'a expr list
  | Or    of 'a expr list
  | Not   of 'a expr
;;

[%%expect]
[@@@part "1"];;
type mail_field = To | From | CC | Date | Subject;;
type mail_predicate = { field: mail_field;
                        contains: string }
;;

[%%expect]
[@@@part "2"];;
let test field contains = Base { field; contains };;

And [ Or [ test To "doligez"; test CC "doligez" ];
      test Subject "runtime";
    ]
;;

[%%expect]
[@@@part "3"];;
let rec eval expr base_eval =
  (* a shortcut, so we don't need to repeatedly pass [base_eval]
     explicitly to [eval] *)
  let eval' expr = eval expr base_eval in
  match expr with
  | Base  base  -> base_eval base
  | Const bool  -> bool
  | And   exprs -> List.for_all exprs ~f:eval'
  | Or    exprs -> List.exists  exprs ~f:eval'
  | Not   expr  -> not (eval' expr)
;;


[%%expect{|
|}]
[@@@part "4"];;
let and_ l =
  if List.mem l (Const false) then Const false
  else
    match List.filter l ~f:((<>) (Const true)) with
    | [] -> Const true
    | [ x ] -> x
    | l -> And l
;;
let or_ l =
  if List.mem l (Const true) then Const true
  else
    match List.filter l ~f:((<>) (Const false)) with
    | [] -> Const false
    | [x] -> x
    | l -> Or l
;;
let not_ = function
  | Const b -> Const (not b)
  | e -> Not e
;;




[%%expect{|
|}]
[@@@part "5"];;
let rec simplify = function
  | Base _ | Const _ as x -> x
  | And l -> and_ (List.map ~f:simplify l)
  | Or l  -> or_  (List.map ~f:simplify l)
  | Not e -> not_ (simplify e)
;;


[%%expect{|
|}]
[@@@part "6"];;
simplify (Not (And [ Or [Base "it's snowing"; Const true];
                     Base "it's raining"]));;


[%%expect{|
|}]
[@@@part "7"];;
simplify (Not (And [ Or [Base "it's snowing"; Const true];
                     Not (Not (Base "it's raining"))]));;


[%%expect{|
|}]
[@@@part "8"];;
let not_ = function
  | Const b -> Const (not b)
  | (Base _ | And _ | Or _ | Not _) as e -> Not e
;;


[%%expect]
[@@@part "9"];;
let not_ = function
  | Const b -> Const (not b)
  | Not e -> e
  | (Base _ | And _ | Or _ ) as e -> Not e
;;

