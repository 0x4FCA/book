#use "topfind";;
#thread;;
#camlp4o;;
#require "core";;
#require "core.syntax";;
[%%expect{|
- : unit = ()
Findlib has been successfully loaded. Additional directives:
  #require "package";;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates "p,q,...";;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()
|}];;
[@@@part "0.5"];;
open Core_kernel.Std;;
type basic_color =
  | Black | Red | Green | Yellow | Blue | Magenta | Cyan | White ;;

Cyan ;;

[Blue; Magenta; Red] ;;

[%%expect{|
|}];;
[@@@part "1"];;
let basic_color_to_int = function
  | Black -> 0 | Red     -> 1 | Green -> 2 | Yellow -> 3
  | Blue  -> 4 | Magenta -> 5 | Cyan  -> 6 | White  -> 7 ;;

List.map ~f:basic_color_to_int [Blue;Red];;

[%%expect{|
|}];;
[@@@part "2"];;
let color_by_number number text =
  sprintf "\027[38;5;%dm%s\027[0m" number text;;

let blue = color_by_number (basic_color_to_int Blue) "Blue";;

printf "Hello %s World!\n" blue;;

[%%expect{|
Hello [38;5;4mBlue[0m World!
|}];;
[@@@part "3"];;
type weight = Regular | Bold;;
type color =
  | Basic of basic_color * weight (* basic colors, regular and bold *)
  | RGB   of int * int * int       (* 6x6x6 color cube *)
  | Gray  of int                   (* 24 grayscale levels *)
;;

[RGB (250,70,70); Basic (Green, Regular)];;

[%%expect];;
[@@@part "4"];;
let color_to_int = function
  | Basic (basic_color,weight) ->
    let base = match weight with Bold -> 8 | Regular -> 0 in
    base + basic_color_to_int basic_color
  | RGB (r,g,b) -> 16 + b + g * 6 + r * 36
  | Gray i -> 232 + i ;;

[%%expect];;
[@@@part "5"];;
let color_print color s =
  printf "%s\n" (color_by_number (color_to_int color) s);;

color_print (Basic (Red,Bold)) "A bold red!";;

color_print (Gray 4) "A muted gray...";;


[%%expect{|
[38;5;9mA bold red![0m
[38;5;236mA muted gray...[0m
|}];;
[@@@part "6"];;
let three = `Int 3;;

let four = `Float 4.;;

let nan = `Not_a_number;;

[three; four; nan];;



[%%expect];;
[@@@part "7"];;
let five = `Int "five";;

[three; four; five];;

[%%expect{|
Line _, characters 14-18:
Error: This expression has type [> `Int of string ]
       but an expression was expected of type
         [> `Float of float | `Int of int ]
       Types for tag `Int are incompatible
|}];;
[@@@part "8"];;
let is_positive = function
  | `Int   x -> x > 0
  | `Float x -> x > 0.
;;


[%%expect];;
[@@@part "9"];;
let exact = List.filter ~f:is_positive [three;four];;


[%%expect{|
|}];;
[@@@part "10"];;
let is_positive = function
  | `Int   x -> Ok (x > 0)
  | `Float x -> Ok (x > 0.)
  | `Not_a_number -> Error "not a number";;



List.filter [three; four] ~f:(fun x ->
  match is_positive x with Error _ -> false | Ok b -> b);;



[%%expect{|
|}];;
[@@@part "11"];;
type extended_color =
  | Basic of basic_color * weight  (* basic colors, regular and bold *)
  | RGB   of int * int * int       (* 6x6x6 color space *)
  | Gray  of int                   (* 24 grayscale levels *)
  | RGBA  of int * int * int * int (* 6x6x6x6 color space *)
;;






[%%expect];;
[@@@part "12"];;
let extended_color_to_int = function
  | RGBA (r,g,b,a) -> 256 + a + b * 6 + g * 36 + r * 216
  | (Basic _ | RGB _ | Gray _) as color -> color_to_int color
;;




[%%expect{|
Line _, characters 56-61:
Error: This expression has type extended_color
       but an expression was expected of type color
|}];;
[@@@part "13"];;
let basic_color_to_int = function
  | `Black -> 0 | `Red     -> 1 | `Green -> 2 | `Yellow -> 3
  | `Blue  -> 4 | `Magenta -> 5 | `Cyan  -> 6 | `White  -> 7
;;
let color_to_int = function
  | `Basic (basic_color,weight) ->
    let base = match weight with `Bold -> 8 | `Regular -> 0 in
    base + basic_color_to_int basic_color
  | `RGB (r,g,b) -> 16 + b + g * 6 + r * 36
  | `Gray i -> 232 + i
;;


















[%%expect];;
[@@@part "14"];;
let extended_color_to_int = function
  | `RGBA (r,g,b,a) -> 256 + a + b * 6 + g * 36 + r * 216
  | (`Basic _ | `RGB _ | `Gray _) as color -> color_to_int color
;;
















[%%expect];;
[@@@part "15"];;
let extended_color_to_int = function
  | `RGBA (r,g,b,a) -> 256 + a + b * 6 + g * 36 + r * 216
  | color -> color_to_int color
;;

















[%%expect{|
Line _, characters 26-31:
Error: This expression has type [> `RGBA of int * int * int * int ]
       but an expression was expected of type
         [< `Basic of
              [< `Black
               | `Blue
               | `Cyan
               | `Green
               | `Magenta
               | `Red
               | `White
               | `Yellow ] *
              [< `Bold | `Regular ]
          | `Gray of int
          | `RGB of int * int * int ]
       The second variant type does not allow tag(s) `RGBA
|}];;
[@@@part "16"];;
let is_positive_permissive = function
  | `Int   x -> Ok (x > 0)
  | `Float x -> Ok (x > 0.)
  | _ -> Error "Unknown number type"
;;


is_positive_permissive (`Int 0);;

is_positive_permissive (`Ratio (3,4));;


[%%expect{|
|}];;
[@@@part "17"];;
is_positive_permissive (`Floot 3.5);;

[%%expect{|
|}];;
