diff --git a/scripts/memcache.ml b/scripts/memcache.ml
index 676030f..e8945d1 100644
--- a/scripts/memcache.ml
+++ b/scripts/memcache.ml
@@ -5,6 +5,8 @@ type t =
   | File of string
   | Directory
 
+type cache = (string, t) Hashtbl.t
+
 let is_dir fname =
   try Sys.is_directory fname
   with Sys_error err ->
@@ -15,11 +17,11 @@ let string_of_file file =
   Lwt_unix.((stat file) >|= fun st -> st.st_size)
   >>= fun size ->
   let buf = String.create size in
-  Lwt_io.with_file ~mode:Lwt_io.Input file
+  Lwt_io.with_file ~mode:Lwt_io.input file
     (fun ic -> Lwt_io.read_into_exactly ic buf 0 size)
   >|= fun () -> buf
       
-let cache ~root =
+let cache root =
   let h = Hashtbl.create 53 in
   let rec aux ~rel =
     let fulldir = Filename.concat root rel in
@@ -49,7 +51,7 @@ let lookup h path =
 
 let test () =
   Lwt_unix.run (
-    cache ~root:""
+    cache ""
     >>= fun h ->
     Hashtbl.iter (fun k v ->
      Printf.printf "%s -> %s\n" k
diff --git a/scripts/rwoserver.ml b/scripts/rwoserver.ml
index f67da46..58ae306 100644
--- a/scripts/rwoserver.ml
+++ b/scripts/rwoserver.ml
@@ -20,8 +20,8 @@ open Printf
 open Cohttp
 open Cohttp_lwt_unix
 
-let docroot = "./live_site"
-let dataroot = "./fragments"
+let docroot = "live_site"
+let dataroot = "fragments"
 
 let user = "ocamllabs"
 let repo = "rwo-comments"
@@ -165,9 +165,6 @@ let check_auth req =
   |Some a when a = Config.auth -> true
   |Some _ | None -> false
 
-let is_directory path =
-  try Sys.is_directory path with _ -> false
-
 (* Proxy issue creation so that we can set milestones *)
 let dispatch_post ?body req =
   lwt body = Body.string_of_body body in
@@ -199,15 +196,25 @@ let dispatch_post ?body req =
     end
   end
 
+let respond_with_file (cache:Memcache.cache) ?headers ~uri () =
+   let path = Uri.path uri in
+   match Memcache.lookup cache (docroot ^ path) with
+   |None ->
+     printf "not found %s\n%!" (docroot ^ path);
+     Server.respond_not_found ()
+   |Some (Memcache.Directory) ->
+     Server.respond_redirect ?headers ~uri:(Uri.with_path uri (path ^ "/")) ()
+   |Some (Memcache.File body) ->
+     Server.respond_string ?headers ~status:`OK ~body ()
+
 (* Server static file with no auth checks or anything special.
  * Meant for the javascript/etc that is always needed without auth *)
-let dispatch_static req =
+let dispatch_static (cache:Memcache.cache) req =
   let uri = Request.uri req in
-  let fname = Server.resolve_file ~docroot ~uri in
-  Server.respond_file ~fname ()
+  respond_with_file cache ~uri ()
   
 (* detect Github code and set a cookie if so, otherwise serve static file *)
-let dispatch ~milestone req =
+let dispatch cache ~milestone req =
   let current_cookies = Cookie.Cookie_hdr.extract (Request.headers req) in
   (* Extract the access_token so we can do an ACL check *)
   let access_token =
@@ -235,22 +242,20 @@ let dispatch ~milestone req =
     |false -> Server.respond_string ~status:`Forbidden ~body:(Auth.denied ~login) ()
     |true -> begin
       let uri = Request.uri req in
-      let fname = Server.resolve_file ~docroot ~uri in
       let path = Uri.path uri in
       let pathlen = String.length path in
       match Uri.path uri with
       |path when pathlen>0 && path.[pathlen-1] = '/' ->
-        let fname = fname ^ "index.html" in
-        Server.respond_file ~headers ~fname ()
-      |path when is_directory fname ->
-        Server.respond_redirect ~headers ~uri:(Uri.with_path uri (path ^ "/")) ()
+        let path = path ^ "index.html" in
+        let uri = Uri.with_path uri path in
+        respond_with_file cache ~headers ~uri ()
       |path ->
-        Server.respond_file ~headers ~fname ()
+        respond_with_file cache ~headers ~uri ()
     end
   end
   (* No access token and no code, so redirect to Github oAuth login *)
   |None, None ->
-    let redirect_uri = Uri.(with_path (of_string "http://www.realworldocaml.org") (Request.path req)) in
+    let redirect_uri = Uri.(with_path (of_string "http://www.realworldocaml.org:443") (Request.path req)) in
     let uri = Github.URI.authorize ~scopes:[`Public_repo] ~redirect_uri 
       ~client_id:Config.client_id () in
     printf "Redirect for auth to %s\n%!" (Uri.to_string uri);
@@ -273,7 +278,7 @@ let dispatch ~milestone req =
   end
 
 (* main callback function *)
-let callback con_id ?body req =
+let callback (cache:Memcache.cache) con_id ?body req =
   let path = Request.path req in
   printf "%s %s [%s]\n%!" (Code.string_of_method (Request.meth req)) path 
     (String.concat "," (List.map (fun (h,v) -> sprintf "%s=%s" h (String.concat "," v)) 
@@ -281,18 +286,18 @@ let callback con_id ?body req =
   (* Check that the host is www.realworldocaml.org, as the Github redirect requires
    * the exact match, or it'll reject the cross-domain Javascript *)
   match Request.header req "host" with
-  |Some "www.realworldocaml.org" -> begin
+  |Some "www.realworldocaml.org:443" -> begin
     match Request.meth req with
     |`POST -> dispatch_post ?body req
     |`GET -> begin
       let path = Uri.path (Request.uri req) in
       let bits = Re_str.(split (regexp_string "/") path) in
       match bits with
-      |[] -> Server.respond_string ~status:`OK ~body:Comment.index ()
-      |"media"::_ -> dispatch_static req (* No auth required for support files *)
-      |_::"media"::_ -> dispatch_static req (* No auth required for support files *)
+      |[] | ["index.html"] -> Server.respond_string ~status:`OK ~body:Comment.index ()
+      |"media"::_ -> dispatch_static cache req (* No auth required for support files *)
+      |_::"media"::_ -> dispatch_static cache req (* No auth required for support files *)
       |milestone::_ when List.mem milestone Comment.all_milestones ->
-        dispatch ~milestone req
+        dispatch cache ~milestone req
       |_ -> Server.respond_not_found ()
     end
     |_ -> Server.respond_not_found ()
@@ -300,10 +305,16 @@ let callback con_id ?body req =
   |Some _ | None -> (* redirect to www.realworldocaml.org *)
     print_endline "redirecting to www.realworldocaml.org";
     let uri = Uri.with_host (Request.uri req) (Some "www.realworldocaml.org") in
+    let uri = Uri.with_port uri (Some 443) in
     Server.respond_redirect ~uri ()
 
 let _ =
   Sys.set_signal Sys.sigpipe Sys.Signal_ignore;
   let conn_closed con_id () = () in
-  let spec = { Cohttp_lwt_unix.Server.callback; conn_closed } in
-  Lwt_main.run (Cohttp_lwt_unix.server ~address:"0.0.0.0" ~port:80 spec)
+  Lwt_main.run (
+    printf "cwd: %s\n%!" (Sys.getcwd());
+    Memcache.cache ""
+    >>= fun c ->
+    let spec = { Cohttp_lwt_unix.Server.callback=(callback c); conn_closed } in
+    Cohttp_lwt_unix.server ~address:"0.0.0.0" ~port:443 spec
+  )
