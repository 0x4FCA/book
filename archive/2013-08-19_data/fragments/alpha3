((idp9147216
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      TODO use Cow.Html to generate a more complete Atom feed.\n    </blockquote>")))
 (idp9145552
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      TODO finish the atom example.\n    </blockquote>")))
 (idp9145120
  ((file xml-streams-and-trees.html)
   (html "<blockquote>\n      TODO antiquotations.\n    </blockquote>")))
 (idp9141680
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      There's another interesting bit of new syntax in the\n      <code>xml_of_date</code> function known as a\n      <span><em>quotation</em></span>. OCaml not only allows code to be\n      generated during pre-processing, but also to override the core\n      language grammar with new constructs. The most common way of doing\n      this is by embedding the custom grammars inside\n      <code>&lt;:foo&lt; ... &gt;&gt;</code> tags, where\n      <code>foo</code> represents the particular grammar being\n      used. In the case of COW, this lets you generate XMLM-compatible\n      OCaml values just by typing in XML tags.\n    </blockquote>")))
 (idp9140064
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The Atom date field is a good example. We define it as a tuple of\n      integers, but the format mandated by the specification is actually\n      a free-form text format and not XML. However, because the syntax\n      extension generates normal OCaml functions, we can just override\n      the <code>xml_of_date</code> function with a custom one\n      which returns the correct XML fragment. Any references further\n      down the module will just use our overridden version and ignore\n      the auto-generated one.\n    </blockquote>")))
 (idp9139360
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      We've now filled in more of the Atom schema with these records.\n      The first problem we run into is that occasionally there is a\n      mismatch between the syntax extension's idea of what the\n      auto-generated XML should look like, and the reality of the\n      protocol you are mapping to.\n    </blockquote>")))
 (idp9137312
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      This is convenient, but just one small portion of Atom. How do we\n      express the full Atom scheme from earlier? The answer is with just\n      a few more records that match the Atom XML schema.\n    </blockquote>")))
 (idp9135712
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      This will generate the following XML output on the terminal when\n      you execute it:\n    </blockquote>")))
 (idp9132960
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      If we run <code>xml_of_author</code> and convert the result\n      to a human-readable string, our complete example looks like:\n    </blockquote>")))
 (idp9128672
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Notice that the <code>with xml</code> clause has been\n      replaced with a new <code>xml_of_author</code> function that\n      has been generated for you. It accepts an\n      <code>author</code> value and returns an\n      <code>Xml.t</code> value. The generated code isn't really\n      meant to be human-readable, but you don't normally see it when\n      using the syntax extension (we've only dumped it out here to\n      illustrate how <code>camlp4</code> works).\n    </blockquote>")))
 (idp9124880
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Let's see the OCaml code that has been generated for our\n      <code>author</code> record after it has been preprocessed:\n    </blockquote>")))
 (idp9122640
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      You can supply <code>ocamlfind</code> with a number of\n      different predicates to define the type of build you are running\n      (preprocessing, compilation or linking). The final part of the\n      script invokes the <code>camlp4o</code> binary on your ML\n      source file and outputs the transformed source code to your\n      terminal.\n    </blockquote>")))
 (idp9118640
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The OCaml compiler can call <code>camlp4</code>\n      automatically during a compilation to preprocess the source files.\n      This is specified via the <code>-pp</code> flag to the\n      compiler. You don't normally need to specify this flag yourself.\n      Use the <code>ocamlfind</code> utility instead to generate\n      the right command-line flags for you. Here's a small shell script\n      which preprocesses a source file with the COW syntax extension:\n    </blockquote>")))
 (idp9115904
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      This is a standard record type definition with the addition of\n      <code>with xml</code> at the end. This uses a syntax\n      extension to signify that we wish to generate boilerplate code for\n      handling this record as an XML document.\n    </blockquote>")))
 (idp9113616
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Let's start to build up an Atom specification using Cow. First,\n      the <code>&lt;author&gt;</code> tag can be represented with\n      the following type:\n    </blockquote>")))
 (idp9112400
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      One caveat to bear in mind is that COW isn't fully compatible with\n      Core yet, and so you must use the syntax extension before opening\n      the Core modules. (<span><em>avsm</em></span>: we can fix this\n      easily, but note is here as a warning to reviewers).\n    </blockquote>")))
 (idp9109680
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The COW library and syntax extension can be installed via OPAM by\n      <code>opam install cow</code>. There are two OCamlfind\n      packages installed: the library is called <code>cow</code>\n      and the syntax extension is activated with the\n      <code>cow.syntax</code> package.\n    </blockquote>")))
 (idp9108368
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      We want to build this by minimising the amount of repetitive XML\n      generation code. The &quot;Caml on the Web&quot; (COW) library\n      provides a syntax extension that is useful here.\n    </blockquote>")))
 (idp9106128
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Here's an example of an Atom feed:\n    </blockquote>")))
 (idp9105328
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      We'll use the Atom 1.0 syndication format as our example here.\n      Atom feeds allow web-based programs (such as browsers) to poll a\n      website for updates. The website owner publishes a feed of content\n      in a standardized XML format via HTTP. This feed is then parsed by\n      clients and compared against previously downloaded versions to\n      determine which contents are available.\n    </blockquote>")))
 (idp9103232
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The OCaml distribution provides the <code>camlp4</code> tool\n      for this purpose, which you can view as a type-safe preprocessor.\n      Camlp4 operates by loading in a set of syntax extension modules\n      that transform the Abstract Syntax Tree (AST) of OCaml, usually by\n      adding nodes that generate code. We'll talk about how to build\n      your own syntax extensions later in the book, but for now we'll\n      describe how to <span><em>use</em></span> several syntax extensions\n      that make it easier to manipulate external data formats such as\n      XML.\n    </blockquote>")))
 (idp9102560
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      In the earlier JSON chapter, we explained how to construct records\n      by creating the records directly. You can do exactly the same\n      thing for XML, but there is also a more automated method available\n      by using OCaml's facility for syntax extensions.\n    </blockquote>")))
 (idp9097648
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The <code>filter_tag</code> combinator accepts a\n      <code>tree list</code> parameter and outputs a\n      <code>tree list</code>. This lets us easily chain together\n      the results of one filter to another, and hence select\n      hierarchical XML tags very easily. When we get to the\n      <code>&lt;Text&gt;</code> tag, we iterate over all the\n      results and print each one individually.\n    </blockquote>")))
 (idp9094160
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Once we have these helper functions, the selection of all the\n      <code>&lt;Text&gt;</code> tags is a matter of chaining the\n      combinators together to peform the selection over the\n      <code>tree</code> data structure.\n    </blockquote>")))
 (idp9091712
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Notice the use of a <span><em>guard pattern</em></span> in the\n      <code>filter_tag</code> pattern match. This looks for an\n      <code>Element</code> tag that matches the name parameter,\n      and concatenates the results with the accumulator list.\n    </blockquote>")))
 (idp9090064
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      (<span><em>avsm</em></span>: have we explained\n      <code>fold_left</code> before this section or does it need a\n      full intro?)\n    </blockquote>")))
 (idp9087328
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The implementation of these signatures fold over the\n      <code>tree</code> structure to filter the tags which match\n      the desired tag name. A similar version that matches on tag\n      attributes is left as an exercise for you to try.\n    </blockquote>")))
 (idp9083648
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The type <code>tree</code> can be pattern-matched and\n      traversed like a normal OCaml data structure. Let's see how this\n      works by extracting out all the &quot;Related Topics&quot; in the\n      example document. First, we'll need a few helper combinator\n      functions to filter through tags and trees, with the following\n      signature:\n    </blockquote>")))
 (idp9081376
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Signals enforce a very iterative style of parsing XML, as your\n      program has to deal with signals arriving serially. It's often\n      more convenient to deal with complete XML documents directly\n      in-memory as an OCaml data structure. You can convert a signal\n      stream into an OCaml structure by defining the following data type\n      and helper functions:\n    </blockquote>")))
 (idp9073616
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The <code>xml_id</code> function begins by reading one\n      signal, which will always be a <code>Dtd</code>. The\n      recursive <code>pull</code> function is then invoked to\n      iterate over the remaining signals. This uses\n      <code>Xmlm.peek</code> to inspect the current input signal\n      and immediately output it. The rest of the function is not\n      strictly necessary, but it tracks that all of the tags that have\n      been started via the <code>El_start</code> signal are also\n      closed by a corresponding <code>El_end</code> signal. Once\n      the <code>pull</code> function has finished due to the\n      opening tag being closed, the <code>Xmlm.eoi</code> function\n      verifies that the &quot;end of input&quot; has been reached.\n    </blockquote>")))
 (idp9070816
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The <code>Fun</code> channel returns one character at a time\n      as an integer, and <code>String</code> starts parsing an\n      OCaml string from the given integer offset. Both of these are will\n      normally be used in preference to <code>Channel</code>,\n      which uses an interface that is deprecated in Core.\n    </blockquote>")))
 (idp9066192
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Let's start at the bottom, where we open up input and output\n      channels to pass to <code>Xmlm</code> parser. The\n      <code>input</code> and <code>output</code> constructor\n      functions use a polymorphic variant to define the mechanism that\n      the library should use to read the document.\n      <code>Channel</code> is the simplest, but there are several\n      others available.\n    </blockquote>")))
 (idp9063888
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      Let's take a shot at handling signals by writing the XML identity\n      function that parses some XML and outputs it again. There is no\n      explicit buffering required since this uses the XMLM streaming\n      API.\n    </blockquote>")))
 (idp9058512
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      XMLM outputs an ordered sequence of these signals to your code as\n      it parses the document. The first <code>signal</code> when\n      inputting an XML document is always a <code>Dtd</code>. The\n      DTD (or <span><em>document type description</em></span>) optionally\n      defines which tags are allowed within the XML document. Some XML\n      parsers can validate a document against a DTD, but XMLM is a\n      <span><em>non-validating</em></span> parser that reads the DTD if\n      present, but disregards its contents. The\n      <code>El_start</code> and <code>El_end</code> signals\n      indicate the opening and closing of tags, and\n      <code>Data</code> passes the free-form information contained\n      between tags.\n    </blockquote>")))
 (idp9056288
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The type of a <code>signal</code> reveals the basic\n      structure of the streaming API in XMLM:\n    </blockquote>")))
 (idp9052560
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n        A well-formed sequence of <code>signal</code>s represents\n        an XML document tree traversal in depth-first order. Input pulls\n        a well-formed sequence of <code>signal</code>s from a data\n        source and output pushes a well-formed sequence of\n        <code>signal</code>s to a data destination. Functions are\n        provided to easily transform sequences of\n        <code>signal</code>s to/from arborescent data structures.\n      </blockquote>")))
 (idp9051776
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n      The XMLM documentation is a good place to read about the overall\n      layout of the library. It tells us that:\n    </blockquote>")))
 (idp9047888
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n    The XML document is structured as a series of\n    <code>&lt;tags&gt;</code> that are closed by an end\n    <code>&lt;/tag&gt;</code>. The opening tags have an optional\n    set of key/value attributes and usually contain text data or further\n    tags within them. If the XML document is large, we don't want to\n    read the whole thing into memory before processing it. Luckily we\n    don't have to, as there are two parsing strategies for XML: a\n    low-level <span><em>streaming</em></span> API that parses a document\n    incrementally, and a simpler but more inefficient tree API. We'll\n    start with the streaming API first, as the tree API is built on top\n    of it.\n  </blockquote>")))
 (idp9043472
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n    Since XML is such a common web format, we've taken our example\n    document from the\n    <a href=\"http://duckduckgo.com\" target=\"_top\">DuckDuckGo</a> search engine.\n    This is a smaller search engine than the usual suspects, but has the\n    advantage of a freely available API that doesn't require you to\n    register before using it. We'll talk more about how to use the live\n    API later in\n    <a href=\"\">???</a>, but\n    for now here's what a shortened XML search response from DuckDuckGo\n    looks like:\n  </blockquote>")))
 (idp9040480
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n    The remainder of this section uses the freely available XMLM\n    library. It's easiest to obtain it via OPAM (see\n    <a href=\"\">???</a> for\n    installation instructions). You need to run\n    <code>opam install xmlm</code> once OPAM is installed. The\n    library documentation is also readable\n    <a href=\"http://erratique.ch/software/xmlm/doc/Xmlm\" target=\"_top\">online</a>.\n  </blockquote>")))
 (idp9038320
  ((file xml-streams-and-trees.html)
   (html
    "<blockquote>\n    XML is a markup language designed to store tree-structured data in a\n    format that is (somewhat) human- and machine-readable. Like JSON, it\n    is a textual format commonly used in web technologies, with a\n    complete\n    <a href=\"http://www.w3.org/TR/REC-xml/\" target=\"_top\">specification</a>\n    available online. A complete description is beyond the scope of this\n    book, but we'll explain how to manipulate it now.\n  </blockquote>")))
 (idp7812176
  ((file variants.html)
   (html
    "<blockquote>\n        Variants are most problematic exactly where you take full\n        advantage of their power; in particular, when you take advantage\n        of the ability of polymorphic variant types to overlap in the\n        tags they support. This ties into OCaml's support for subtyping.\n        As we'll discuss further when we cover objects in\n        <a href=\"object-oriented-programming.html\">Chapter\194\1609, <i>Object Oriented Programming</i></a>,\n        subtyping brings in a lot of complexity, and most of the time,\n        that's complexity you want to avoid.\n      </blockquote>")))
 (idp7811216
  ((file variants.html)
   (html
    "<blockquote>\n        Probably the safest and most common use-case for polymorphic\n        variants is for cases where ordinary variants would be\n        sufficient, but are syntactically too heavyweight. For example,\n        you often want to create a variant type for encoding the inputs\n        or outputs to a function, where it's not worth declaring a\n        separate type for it. Polymorphic variants are very useful here,\n        and as long as there are type annotations that constrain these\n        to have explicit, exact types, this tends to work well.\n      </blockquote>")))
 (idp7810624
  ((file variants.html)
   (html
    "<blockquote>\n        All that said, polymorphic variants are still a useful and\n        powerful feature, but it's worth understanding their\n        limitations, and how to use them sensibly and modestly.\n      </blockquote>")))
 (idp7809296
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Efficiency:</em></span> This isn't a huge effect,\n            but polymorphic variants are somewhat heavier than regular\n            variants, and OCaml can't generate code for matching on\n            polymorphic variants that is quite as efficient as what is\n            generated for regular variants.\n          </blockquote>")))
 (idp7807920
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Error-finding:</em></span> Polymorphic variants are\n            type-safe, but the typing discipline that they impose is, by\n            dint of its flexibility, less likely to catch bugs in your\n            program.\n          </blockquote>")))
 (idp7806320
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Complexity:</em></span> As we've seen, the typing\n            rules for polymorphic variants are a lot more complicated\n            than they are for regular variants. This means that heavy\n            use of polymorphic variants can leave you scratching your\n            head trying to figure out why a given piece of code did or\n            didn't compile. It can also lead to absurdly long and hard\n            to decode error messages.\n          </blockquote>")))
 (idp7805200
  ((file variants.html)
   (html
    "<blockquote>\n        In reality, regular variants are the more pragmatic choice most\n        of the time. That's because the flexibility of polymorphic\n        variants comes at a price. Here are some of the downsides.\n      </blockquote>")))
 (idp7804560
  ((file variants.html)
   (html
    "<blockquote>\n        At first glance, polymorphic variants look like a strict\n        improvement over ordinary variants. You can do everything that\n        ordinary variants can do, plus it's more flexible and more\n        concise. What's not to like?\n      </blockquote>")))
 (idp7802960
  ((file variants.html)
   (html
    "<blockquote>\n        This is useful when you want to narrow down to a type whose\n        definition is long, and you don't want the verbosity of writing\n        the tags down explicitly in the match.\n      </blockquote>")))
 (idp7800480
  ((file variants.html)
   (html
    "<blockquote>\n        Once we have type definitions at our disposal, we can revisit\n        the question of how we write the pattern-match that narrows the\n        type. In particular, we can explicitly use the type name as part\n        of the pattern match, by prefixing it with a\n        <code>#</code>.\n      </blockquote>")))
 (idp7798240
  ((file variants.html)
   (html
    "<blockquote>\n        In particular, the compiler will complain that the\n        <code>`Grey</code> case as unused.\n      </blockquote>")))
 (idp7796496
  ((file variants.html)
   (html
    "<blockquote>\n        If we add an explicit type annotation to the code itself (rather\n        than just in the mli), then the compiler has enough information\n        to warn us.\n      </blockquote>")))
 (idp7792320
  ((file variants.html)
   (html
    "<blockquote>\n        In the above code, we did something funny to the definition of\n        <code>extended_color_to_int</code>, that underlines some\n        of the downsides of polymorphic variants. In particular, we\n        added some special-case handling for the color gray, rather than\n        using <code>color_to_int</code>. Unfortunately, we\n        misspelled <code>Gray</code> as <code>Grey</code>.\n        This is exactly the kind of error that the compiler would catch\n        with ordinary variants, but with polymorphic variants, this\n        compiles without issue. All that happened was that the compiler\n        inferred a wider type for\n        <code>extended_color_to_int</code>, which happens to be\n        compatible with the narrower type that was listed in the mli.\n      </blockquote>")))
 (idp7788144
  ((file variants.html)
   (html
    "<blockquote>\n        Here, <code>extended_color</code> is defined as an\n        explicit extension of <code>color</code>. Also, notice\n        that we defined all of these types as exact variants. We can\n        implement this library as follows.\n      </blockquote>")))
 (idp7785312
  ((file variants.html)
   (html
    "<blockquote>\n        Let's consider how we might turn our code into a proper library\n        with an <code>mli</code>. Here's what the interface to\n        this file might look like.\n      </blockquote>")))
 (idp7784576
  ((file variants.html)
   (html
    "<blockquote>\n        With ordinary variants, such a typo would have been caught as an\n        unknown tag. As a general matter, one should be wary about\n        mixing catch-all cases and polymorphic variants.\n      </blockquote>")))
 (idp7780848
  ((file variants.html)
   (html
    "<blockquote>\n        Catch-all cases are error-prone even with ordinary variants, but\n        they are especially so with polymorphic variants. That's because\n        you have no way of bounding what tags your function might have\n        to deal with. Such code is particularly vulnerable to typos. For\n        instance, if code that uses\n        <code>is_positive_permissive</code> passes in\n        <code>Float</code> misspelled as <code>Floot</code>,\n        the erroneous code will compile without complaint.\n      </blockquote>")))
 (idp7778144
  ((file variants.html)
   (html
    "<blockquote>\n        As we saw with the definition of <code>is_positive</code>,\n        a match statement can lead to the inference of an upper bound on\n        a variant type, limiting the possible tags to those that can be\n        handled by the match. If we add a catch-all case to our match\n        statement, we end up with a function with a lower bound.\n      </blockquote>")))
 (idp7774976
  ((file variants.html)
   (html
    "<blockquote>\n        The above code is more delicately balanced than one might\n        imagine. In particular, if we use a catch-all case instead of an\n        explicit enumeration of the cases, the type is no longer\n        narrowed, and so compilation fails.\n      </blockquote>")))
 (idp7767264
  ((file variants.html)
   (html
    "<blockquote>\n        Now we can try writing <code>extended_color_to_int</code>.\n        The key issue with this code is that\n        <code>extended_color_to_int</code> needs to invoke\n        <code>color_to_int</code> with a narrower type,\n        <span><em>i.e.</em></span>, one that includes fewer tags. Written\n        properly, this narrowing can be done via a pattern match. In\n        particular, in the following code, the type of the variable\n        <code>color</code> includes only the tags\n        <code>`Basic</code>, <code>`RGB</code> and\n        <code>`Gray</code>, and not <code>`RGBA</code>.\n      </blockquote>")))
 (idp7763104
  ((file variants.html)
   (html
    "<blockquote>\n        What we want to do is to share tags between two different\n        variant types, and polymorphic variants let us do this in a\n        natural way. First, let's rewrite\n        <code>basic_color_to_int</code> and\n        <code>color_to_int</code> using polymorphic variants. The\n        translation here is pretty straightforward.\n      </blockquote>")))
 (idp7760688
  ((file variants.html)
   (html
    "<blockquote>\n        The problem is that <code>extended_color</code> and\n        <code>color</code> are in the compiler's view distinct and\n        unrelated types. The compiler doesn't, for example, recognize\n        any equality between the <code>Basic</code> tag in the two\n        types.\n      </blockquote>")))
 (idp7758688
  ((file variants.html)
   (html
    "<blockquote>\n        This looks reasonable enough, but it leads to the following type\n        error.\n      </blockquote>")))
 (idp7755552
  ((file variants.html)
   (html
    "<blockquote>\n        We want to write a function\n        <code>extended_color_to_int</code>, that works like\n        <code>color_to_int</code> for all of the old kinds of\n        colors, with new logic only for handling colors that include an\n        alpha channel. One might try to write such a function as\n        follows.\n      </blockquote>")))
 (idp7753632
  ((file variants.html)
   (html
    "<blockquote>\n        To see how to use polymorphic variants in practice, we'll return\n        to terminal colors. Imagine that we have a new terminal type\n        that adds yet more colors, say, by adding an alpha channel so\n        you can specify translucent colors. We could model this extended\n        set of colors as follows, using an ordinary variant.\n      </blockquote>")))
 (idp7749024
  ((file variants.html)
   (html
    "<blockquote>\n      Here, the inferred type states that the tags can be no more than\n      <code>`Float</code>, <code>`Int</code> and\n      <code>`Not_a_number</code>, and must contain at least\n      <code>`Float</code> and <code>`Int</code>. As you can\n      already start to see, polymorphic variants can lead to fairly\n      complex inferred types.\n    </blockquote>")))
 (idp7747120
  ((file variants.html)
   (html
    "<blockquote>\n      Perhaps surprisingly, we can also create polymorphic variant types\n      that have different upper and lower bounds.\n    </blockquote>")))
 (idp7743808
  ((file variants.html)
   (html
    "<blockquote>\n      We can think of these <code>&lt;</code> and\n      <code>&gt;</code> markers as indications of upper and lower\n      bounds on the tags involved. If the same set of tags are both an\n      upper and a lower bound, we end up with an\n      <span><em>exact</em></span> polymorphic variant type, which has\n      neither marker. For example:\n    </blockquote>")))
 (idp7740848
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>&lt;</code> is there because\n      <code>is_positive</code> has no way of dealing with values\n      that have tags other than <code>`Float of float</code> or\n      <code>`Int of int</code>.\n    </blockquote>")))
 (idp7738496
  ((file variants.html)
   (html
    "<blockquote>\n      OCaml will in some cases infer a variant type with\n      <code>&lt;</code>, to indicate &quot;these tags or\n      less&quot;, as in the following example.\n    </blockquote>")))
 (idp7734416
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>&gt;</code> at the beginning of the variant types\n      above is critical, because it marks the types as being open to\n      combination with other variant types. We can read the type\n      <code>[&gt; `Int of string | `Float of float]</code> as\n      describing a variant whose tags include\n      <code>`Int of string</code> and\n      <code>`Float of float</code>, but may include more tags as\n      well. In other words, you can roughly translate\n      <code>&gt;</code> to mean: &quot;these tags or more&quot;.\n    </blockquote>")))
 (idp7732528
  ((file variants.html)
   (html
    "<blockquote>\n      The type system will complain, however, if it sees incompatible\n      uses of the same tag:\n    </blockquote>")))
 (idp7731920
  ((file variants.html)
   (html
    "<blockquote>\n      As you can see, polymorphic variant types are inferred\n      automatically, and when we combine variants with different tags,\n      the compiler infers a new type that knows about all of those tags.\n    </blockquote>")))
 (idp7729664
  ((file variants.html)
   (html
    "<blockquote>\n      Syntactically, polymorphic variants are distinguished from\n      ordinary variants by the leading backtick. And unlike ordinary\n      variants, polymorphic variants can be used without an explicit\n      type declaration.\n    </blockquote>")))
 (idp7728592
  ((file variants.html)
   (html
    "<blockquote>\n      In addition to the ordinary variants we've seen so far, OCaml also\n      supports so-called <span><em>polymorphic variants</em></span>. As\n      we'll see, polymorphic variants are more flexible and\n      syntactically more lightweight than ordinary variants, but that\n      extra power comes at a cost.\n    </blockquote>")))
 (idp7726976
  ((file variants.html)
   (html
    "<blockquote>\n      More generally, using variants to build recursive data-structures\n      is a common technique, and shows up everywhere from designing\n      little languages to building efficient data-structures.\n    </blockquote>")))
 (idp7726384
  ((file variants.html)
   (html
    "<blockquote>\n      This example is more than a toy. There's a module very much in\n      this spirit already exists as part of Core, and gets a lot of\n      practical use in a variety of applications.\n    </blockquote>")))
 (idp7724832
  ((file variants.html)
   (html
    "<blockquote>\n      it's easy to see that we've missed an important case:\n      double-negation.\n    </blockquote>")))
 (idp7722432
  ((file variants.html)
   (html
    "<blockquote>\n      One thing to notice about the above code is that it uses a\n      catch-all case in the very last line within the\n      <code>Not</code> case. It's generally better to be explicit\n      about the cases you're ignoring. Indeed, if we change this snippet\n      of code to be more explicit:\n    </blockquote>")))
 (idp7719888
  ((file variants.html)
   (html
    "<blockquote>\n      Another useful operation to be able to do on expressions is\n      simplification. The following function applies some basic\n      simplification rules, most of the simplifications being driven by\n      the presence of constants.\n    </blockquote>")))
 (idp7718512
  ((file variants.html)
   (html
    "<blockquote>\n      The structure of the code is pretty straightforward --- we're just\n      pattern-matching over the structure of the data, doing the\n      appropriate calculation based on which tag we see. To use this\n      evaluator on a concrete example, we just need to write the\n      <code>base_eval</code> function which is capable of\n      evaluating a base predicate.\n    </blockquote>")))
 (idp7715504
  ((file variants.html)
   (html
    "<blockquote>\n      Being able to construct such expressions isn't enough: we also\n      need to be able to evaluate such an expression. The following code\n      shows how you could write a general-purpose evaluator for\n      <code>blang</code>'s.\n    </blockquote>")))
 (idp7712832
  ((file variants.html)
   (html
    "<blockquote>\n      Using the above, we can construct a simple expression with\n      <code>mail_predicate</code> as its base predicate.\n    </blockquote>")))
 (idp7709808
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>Base</code> tag is what allows you to tie the\n      <code>blang</code> to your application, by letting you\n      specify an element of some base predicate type, whose whose truth\n      or falsehood is determined by your application. If you were\n      writing a filter language for an email processor, your base\n      predicates might specify the tests you would run against an email,\n      as in the following example.\n    </blockquote>")))
 (idp7705520
  ((file variants.html)
   (html
    "<blockquote>\n      The purpose of each tag is pretty straightforward.\n      <code>And</code>, <code>Or</code> and\n      <code>Not</code> are the basic operators for building up\n      boolean expression, and <code>Const</code> lets you enter\n      constants <code>true</code> and <code>false</code>.\n    </blockquote>")))
 (idp7703264
  ((file variants.html)
   (html
    "<blockquote>\n      Note that the definition of the type <code>blang</code> is\n      recursive, meaning that a <code>blang</code> may contain\n      other <code>blang</code>s.\n    </blockquote>")))
 (idp7700816
  ((file variants.html)
   (html
    "<blockquote>\n      An expression in this language will be defined by the variant\n      <code>blang</code> (short for &quot;boolean language&quot;)\n      with one tag for each kind of expression we want to support.\n    </blockquote>")))
 (idp7700048
  ((file variants.html)
   (html
    "<blockquote>\n      Another common application of variants is to represent tree-like\n      recursive data-structures. We'll show how this can be done by\n      walking through the design of a simple Boolean expression\n      language. Such a language can be useful anywhere you need to\n      specify filters, which are used in everything from packet\n      analyzers to mail clients.\n    </blockquote>")))
 (idp7696160
  ((file variants.html)
   (html
    "<blockquote>\n      And it's explicit at the type level that\n      <code>handle_log_entry</code> sees only\n      <code>Log_entry</code> messages,\n      <code>handle_logon</code> sees only <code>Logon</code>\n      messages, etc.\n    </blockquote>")))
 (idp7692656
  ((file variants.html)
   (html
    "<blockquote>\n      In addition, this design allows us to essentially downcast to the\n      specific message type once we know what it is, and then dispatch\n      code to handle just that message type. In particular, while we use\n      the type <code>Common.t * details</code> to represent an\n      arbitrary message, we can use\n      <code>Common.t * Logon.t</code> to represent a logon\n      message. Thus, if we had functions for handling individual message\n      types, we could write a dispatch function as follows.\n    </blockquote>")))
 (idp7691488
  ((file variants.html)
   (html
    "<blockquote>\n      Note that the more complex match statement for computing the\n      session id has been replaced with the simple expression\n      <code>common.Common.session_id</code>.\n    </blockquote>")))
 (idp7687712
  ((file variants.html)
   (html
    "<blockquote>\n      A full message can then represented as a pair of a\n      <code>Common.t</code> and a <code>details</code>.\n      Using this, we can rewrite our example above as follows:\n    </blockquote>")))
 (idp7686224
  ((file variants.html)
   (html
    "<blockquote>\n      Separately, we need a record that contains the fields that are\n      common across all messages.\n    </blockquote>")))
 (idp7684736
  ((file variants.html)
   (html
    "<blockquote>\n      We can then define a variant type that covers the different\n      possible unique components.\n    </blockquote>")))
 (idp7682912
  ((file variants.html)
   (html
    "<blockquote>\n      We can improve the code by refactoring our types to explicitly\n      separate which parts are shared and which are common. The first\n      step is to cut down the definitions of the per-message records to\n      just contain the unique components of each message.\n    </blockquote>")))
 (idp7682288
  ((file variants.html)
   (html
    "<blockquote>\n      This code effectively computes the session id for each underlying\n      message type. The repetition in this case isn't that bad, but\n      would become problematic in larger and more complicated examples.\n    </blockquote>")))
 (idp7680512
  ((file variants.html)
   (html
    "<blockquote>\n      There's one awkward bit about the code above, which is the\n      calculation of the session ids. In particular, we have the\n      following repetitive snippet of code:\n    </blockquote>")))
 (idp7678208
  ((file variants.html)
   (html "<blockquote>\n      Here's the concrete code.\n    </blockquote>")))
 (idp7677472
  ((file variants.html)
   (html
    "<blockquote>\n          the set of messages so far that are associated with the user.\n        </blockquote>")))
 (idp7676592
  ((file variants.html)
   (html
    "<blockquote>\n          the set of session identifiers for the user that have been\n          seen thus far.\n        </blockquote>")))
 (idp7674624
  ((file variants.html)
   (html
    "<blockquote>\n      You can increase the precision of your types by using variants to\n      represent differences between types, and records to represent\n      shared structure. Consider the following function that takes a\n      list of <code>client_message</code>s and returns all\n      messages generated by a given user. The code in question is\n      implemented by folding over the list of messages, where the\n      accumulator is a pair of:\n    </blockquote>")))
 (idp7670080
  ((file variants.html)
   (html
    "<blockquote>\n      A <code>client_message</code> is a <code>Logon</code>\n<span><em>or</em></span> a <code>Heartbeat</code>\n<span><em>or</em></span> a <code>Log_entry</code>. If we want\n      to write code that processes messages generically, rather than\n      code specialized to a fixed message type, we need something like\n      <code>client_message</code> to act as one overarching type\n      for the different possible messages.\n    </blockquote>")))
 (idp7664048
  ((file variants.html)
   (html
    "<blockquote>\n      This record type combines multiple pieces of data into one value.\n      In particular, a single <code>Log_entry.t</code> has a\n      <code>session_id</code> <span><em>and</em></span> a\n      <code>time</code> <span><em>and</em></span> an\n      <code>important</code> flag <span><em>and</em></span> a\n      <code>message</code>. More generally, you can think of\n      record types as acting as conjunctions. Variants, on the other\n      hand, are disjunctions, letting you represent multiple\n      possibilities, as in the following example.\n    </blockquote>")))
 (idp7661408
  ((file variants.html)
   (html
    "<blockquote>\n      Records and variants are most effective when used in concert.\n      Consider again the type <code>Log_entry.t</code>\n<a href=\"records.html\">Chapter\194\1603, <i>Records</i></a>:\n    </blockquote>")))
 (idp7658992
  ((file variants.html)
   (html
    "<blockquote>\n    But because the catch-all case encompasses all possibilities, the\n    type system will no longer warn us that we have missed the new\n    <code>Bold</code> case when we change the type to include it.\n    We can get this check back by being more explicit about what we're\n    ignoring. We haven't changed the behavior of the code, but we have\n    improved our robustness to change.\n  </blockquote>")))
 (idp7655680
  ((file variants.html)
   (html
    "<blockquote>\n    Here's an example of how a catch-all case plays in. Imagine we\n    wanted a version of <code>color_to_int</code> that works on\n    older terminals by rendering the first 16 colors (the 8\n    <code>basic_color</code>s in regular and bold) in the normal\n    way, but rendering everything else as white. We might have written\n    the function as follows.\n  </blockquote>")))
 (idp7654832
  ((file variants.html)
   (html
    "<blockquote>\n    As we've seen, the type errors identified the things that needed to\n    be fixed to complete the refactoring of the code. This is\n    fantastically useful, but for it to work well and reliably, you need\n    to write your code in a way that maximizes the compiler's chances of\n    helping you find the bugs. One important rule of thumb to follow to\n    maximize what the compiler can do for you is to avoid catch-all\n    cases in pattern matches.\n  </blockquote>")))
 (idp7653152
  ((file variants.html)
   (html
    "<blockquote>\n    Fixing this now leads us to the correct implementation.\n  </blockquote>")))
 (idp7649488
  ((file variants.html)
   (html
    "<blockquote>\n    Here, the compiler is complaining that the <code>Basic</code>\n    tag is used with the wrong number of arguments. If we fix that,\n    however, the compiler flag will flag a second problem, which is that\n    we haven't handled the new <code>Bold</code> tag.\n  </blockquote>")))
 (idp7644528
  ((file variants.html)
   (html
    "<blockquote>\n    We've essentially broken out the <code>Basic</code> case into\n    two cases, <code>Basic</code> and <code>Bold</code>, and\n    <code>Basic</code> has changed from having two arguments to\n    one. <code>color_to_int</code> as we wrote it still expects\n    the old structure of the variant, and if we try to compile that same\n    code again, the compiler will notice the discrepancy.\n  </blockquote>")))
 (idp7642320
  ((file variants.html)
   (html
    "<blockquote>\n    Consider what would happen if we were to change the definition of\n    <code>color</code> to the following.\n  </blockquote>")))
 (idp7641712
  ((file variants.html)
   (html
    "<blockquote>\n    OCaml's type system can act as a refactoring tool, by warning you of\n    places where your code needs to be updated to match an interface\n    change. This is particularly valuable in the context of variants.\n  </blockquote>")))
 (idp7639552
  ((file variants.html)
   (html
    "<blockquote>\n    Now, we can print text using the full set of available colors.\n  </blockquote>")))
 (idp7637616
  ((file variants.html)
   (html
    "<blockquote>\n    Once again, we'll use pattern matching to convert a color to a\n    corresponding integer. But in this case, the pattern matching does\n    more than separate out the different cases; it also allows us to\n    extract the data associated with each tag.\n  </blockquote>")))
 (idp7635792
  ((file variants.html)
   (html
    "<blockquote>\n    We'll also represent this more complicated color-space as a variant,\n    but this time, the different tags will have arguments which describe\n    the data available in each case.\n  </blockquote>")))
 (idp7635152
  ((file variants.html)
   (html
    "<blockquote>\n        A 24-level grayscale ramp\n      </blockquote>")))
 (idp7634256
  ((file variants.html)
   (html
    "<blockquote>\n        A 6\226\128\133\195\151\226\128\1336\226\128\133\195\151\226\128\1336 RGB color cube\n      </blockquote>")))
 (idp7633408
  ((file variants.html)
   (html
    "<blockquote>\n        The 8 basic colors, in regular and bold versions.\n      </blockquote>")))
 (idp7631328
  ((file variants.html)
   (html
    "<blockquote>\n    In this example, the cases of the variant are simple tag with no\n    associated data. This is substantively the same as the enumerations\n    found in languages like C and Java. But as we'll see, variants can\n    do considerably more than represent a simple enumeration. Indeed, an\n    enumeration isn't enough to effectively describe the full set of\n    colors that a modern terminal can display. Many terminals, including\n    the venerable <code>xterm</code>, support 256 different\n    colors, broken up into the following groups.\n  </blockquote>")))
 (idp7630720
  ((file variants.html)
   (html
    "<blockquote>\n    On most terminals, that word &quot;Blue&quot; will be rendered in\n    blue.\n  </blockquote>")))
 (idp7628656
  ((file variants.html)
   (html
    "<blockquote>\n    Using the above, we can generate escape codes to change the color of\n    a given string displayed in a terminal.\n  </blockquote>")))
 (idp7625920
  ((file variants.html)
   (html
    "<blockquote>\n    The following function uses pattern matching to convert a\n    <code>basic_color</code> to a corresponding integer. Note that\n    the exhaustiveness checking on pattern matches means that the\n    compiler will warn us if we miss a color.\n  </blockquote>")))
 (idp7624176
  ((file variants.html)
   (html
    "<blockquote>\n    Let's consider a concrete example of how variants can be useful.\n    Almost all terminals support a set of 8 basic colors, and we can\n    represent those colors using a variant. Each color is declared as a\n    simple tag, with pipes used to separate the different cases.\n  </blockquote>")))
 (idp7623360
  ((file variants.html)
   (html
    "<blockquote>\n    Variant types are one of the most useful features of OCaml, and also\n    one of the most unusual. They let you represent data that may take\n    on multiple different forms, where each form is marked by an\n    explicit tag. As we'll see, when combined with pattern matching,\n    variants give you a powerful way of representing complex data and of\n    organizing the case-analysis on that information.\n  </blockquote>")))
 (idp7491312
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          And indeed, when we provide the two positions arguments, the\n          <code>sep</code> argument is not erased, instead\n          returning a function that expects the <code>sep</code>\n          argument to be provided.\n        </blockquote>")))
 (idp7489392
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          An optional argument that doesn't have any following\n          positional arguments can't be erased at all, which leads to a\n          compiler warning.\n        </blockquote>")))
 (idp7487808
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          However, if all arguments to a function are presented at once,\n          then erasure of optional arguments isn't applied until all of\n          the arguments are passed in. This preserves our ability to\n          pass in optional arguments anywhere on the argument list.\n          Thus, we can write:\n        </blockquote>")))
 (idp7485984
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          then application of the first argument would not cause the\n          optional argument to be erased.\n        </blockquote>")))
 (idp7482608
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          The rule is: an optional argument is erased as soon as the\n          first positional argument defined <span><em>after</em></span>\n          the optional argument is passed in. That explains the behavior\n          of <code>prepend_pound</code> above. But if we had\n          instead defined <code>concat</code> with the optional\n          argument in the second position:\n        </blockquote>")))
 (idp7481120
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Note that the optional argument <code>?sep</code> has\n          now disappeared, or <span><em>erased</em></span>. So when does\n          OCaml decide to erase an optional argument?\n        </blockquote>")))
 (idp7479552
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But what happens if we partially apply just the first\n          argument?\n        </blockquote>")))
 (idp7477920
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Optional arguments can be tricky to think about in the\n          presence of partial application. We can of course partially\n          apply the optional argument itself:\n        </blockquote>")))
 (idp7473408
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          As suggested by the error message, we can get OCaml to accept\n          the fact that <code>f</code> is used with different\n          argument orders if we provide explicit type information. Thus,\n          the following code compiles without error, due to the type\n          annotation on <code>f</code>.\n        </blockquote>")))
 (idp7470192
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Note that these heuristics might at different points in the\n          source suggest different types. Here's a version of\n          <code>numeric_deriv</code> where the invocations of\n          <code>f</code> were changes so they list the arguments\n          in different orders.\n        </blockquote>")))
 (idp7469488
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Since there are multiple plausible types to choose from, OCaml\n          needs some heuristic for choosing between them. The heuristic\n          the compiler uses is to prefer labels to options, and to\n          choose the order of arguments that shows up in the source\n          code.\n        </blockquote>")))
 (idp7466592
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Even worse, it would be perfectly consistent for\n          <code>f</code> to take an optional argument instead of a\n          labeled one, which could lead to this type signature for\n          <code>numeric_deriv</code>:\n        </blockquote>")))
 (idp7464080
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          In principle, it's not obvious how the order of the arguments\n          to <code>f</code> should be chosen. Since optional\n          arguments can be passed in arbitrary order, it seems like it\n          could as well be\n          <code>y:float -&gt; x:float -&gt; float</code> as it is\n          <code>x:float -&gt; y:float -&gt; float</code>.\n        </blockquote>")))
 (idp7456000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One subtle aspect of labeled and optional arguments is how\n          they are inferred by the type system. Consider the following\n          example for computing numerical derivatives of a function of\n          two dimensions. The function takes an argument\n          <code>delta</code> which determines the scale at which\n          to compute the derivative, values <code>x</code> and\n          <code>y</code> which determine which point to compute\n          the derivative at, and the function <code>f</code> whose\n          derivative is being computed. The function\n          <code>f</code> itself takes two labeled arguments\n          <code>x</code> and <code>y</code>. Note that you\n          can use an apostrophe as part of a variable name, so\n          <code>x'</code> and <code>y'</code> are just\n          ordinary variables.\n        </blockquote>")))
 (idp7452032
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Now, if someone calls <code>uppercase_concat</code>\n          without an argument, an explicit <code>None</code> will\n          be passed to <code>concat</code>, leaving\n          <code>concat</code> to decide what the default behavior\n          should be.\n        </blockquote>")))
 (idp7448592
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Instead, we can have <code>uppercase_concat</code>\n          simply pass through the optional argument to\n          <code>concat</code> using the <code>?</code>\n          syntax.\n        </blockquote>")))
 (idp7446672
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          In the way we've written it, we've been forced to separately\n          make the decision as to what the default separator is. Thus,\n          if we later change <code>concat</code>'s default\n          behavior, we'll need to remember to change\n          <code>uppercase_concat</code> to match it.\n        </blockquote>")))
 (idp7443456
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One use-case for this is when you want to define a wrapper\n          function that mimics the optional arguments of the function\n          it's wrapping. For example, imagine we wanted to create a\n          function called <code>uppercase_concat</code>, which is\n          the same as <code>concat</code> except that it converts\n          the first string that it's passed to uppercase. We could write\n          the function as follows.\n        </blockquote>")))
 (idp7440512
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          And the following two lines are equivalent ways of calling\n          <code>concat</code> without specifying\n          <code>sep</code>.\n        </blockquote>")))
 (idp7435472
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But sometimes, passing in <code>Some</code> or\n          <code>None</code> explicitly is exactly what you want.\n          OCaml lets you do this by using <code>?</code> instead\n          of <code>~</code> to mark the argument. Thus, the\n          following two lines are equivalent ways of specifying the\n          <code>sep</code> argument to concat.\n        </blockquote>")))
 (idp7432320
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Under the covers, a function with an optional argument\n          receives <code>None</code> when the caller doesn't\n          provide the argument, and <code>Some</code> when it\n          does. But the <code>Some</code> and\n          <code>None</code> are normally not explicitly passed in\n          by the caller.\n        </blockquote>")))
 (idp7429840
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This means that rarely used functions should not have optional\n        arguments. A good rule of thumb is not to use optional arguments\n        for functions internal to a module, <span><em>i.e.</em></span>,\n        functions that are not included in the <code>mli</code>.\n      </blockquote>")))
 (idp7429104
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The downside is that the caller may be unaware that there is a\n        choice to be made, and so may unknowingly (and wrongly) pick\n        that default behavior. Optional arguments really only make sense\n        when the extra concision of omitting the argument overwhelms the\n        corresponding loss of explicitness.\n      </blockquote>")))
 (idp7428368
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Optional arguments are very useful, but they're also easy to\n        abuse. The key advantage of optional arguments is that they let\n        you write functions with multiple arguments that users can\n        ignore most of the time, only worrying about them when they\n        specifically want to invoke those options.\n      </blockquote>")))
 (idp7426000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In the above example, we had a bit of code to substitute in the\n        empty string when no argument was provided. This is a common\n        enough pattern that there's an explicit syntax for providing a\n        default value, which allows us to write\n        <code>concat</code> even more concisely.\n      </blockquote>")))
 (idp7420464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here, <code>?</code> is used in the definition of the\n        function to mark <code>sep</code> as optional. And while\n        the caller can pass a value of type <code>string</code>\n        for <code>sep</code>, internally to the function,\n        <code>sep</code> is seen as a\n        <code>string option</code>, with <code>None</code>\n        appearing when <code>sep</code> is not provided by the\n        caller.\n      </blockquote>")))
 (idp7418720
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here's an example of a string concatenation function with an\n        optional separator.\n      </blockquote>")))
 (idp7418000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        An optional argument is like a labeled argument that the caller\n        can choose whether or not to provide. Optional arguments are\n        passed in using the same syntax as labeled arguments, and,\n        similarly to labeled arguments, optional arguments can be\n        provided in any order.\n      </blockquote>")))
 (idp7416208
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          So, even though the order of labeled arguments usually doesn't\n          matter, it will sometimes bite you in higher-ordered contexts,\n          where you're doing things like passing functions as arguments\n          to other functions.\n        </blockquote>")))
 (idp7414048
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But, if we go back to the original definition of\n          <code>apply_to_tuple</code>, things will work smoothly.\n        </blockquote>")))
 (idp7411776
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          we'll find that it can't be passed in to\n          <code>apply_to_tuple</code>.\n        </blockquote>")))
 (idp7410208
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          It turns out this order of listing matters. In particular, if\n          we define a function that has a different order\n        </blockquote>")))
 (idp7405936
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Here, the definition of <code>apply_to_tuple</code> sets\n          up the expectation that its first argument is a function with\n          two labeled arguments, <code>first</code> and\n          <code>second</code>, listed in that order. We could have\n          defined <code>apply_to_tuple</code> differently to\n          change the order in which the labeled arguments were listed.\n        </blockquote>")))
 (idp7403744
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One surprising gotcha with labeled arguments is that while\n          order doesn't matter when calling a function with labeled\n          arguments, it does matter in a higher-order context,\n          <span><em>e.g.</em></span>, when passing a function with\n          labeled arguments to another function. Here's an example.\n        </blockquote>")))
 (idp7401936
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            In other cases, you want to put the function argument\n            second. One common reason is readability. In particular, a\n            function that spans multiple lines is easiest to read when\n            it's the last argument provided.\n          </blockquote>")))
 (idp7398624
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When you want flexibility on the order in which arguments\n            are passed. Consider a function like\n            <code>List.iter</code>, that takes two arguments: a\n            function, and a list of elements to call that function on. A\n            common pattern is to partially apply\n            <code>List.iter</code> by giving it just the function,\n            as in the following example from earlier in the chapter.\n            This requires putting the function argument first.\n          </blockquote>")))
 (idp7396656
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            but with labeled arguments, we can make the intent much\n            clearer.\n          </blockquote>")))
 (idp7394784
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When the meaning of a particular argument is unclear from\n            the type alone. For example, consider a function for\n            creating a hashtable where the first argument is the initial\n            size of the table, and the second argument is a flag which,\n            when true, indicates that the hashtable will reduce its size\n            when the hashtable contains few elements. The following\n            signature doesn't give you much of a hint as to the meaning\n            of the arguments.\n          </blockquote>")))
 (idp7393136
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            This improves the readability of both the signature and of\n            client code that makes use of <code>substring</code>,\n            and makes it harder to accidentally swap the position and\n            the length.\n          </blockquote>")))
 (idp7391568
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            where the two ints are the starting position and length of\n            the substring to extract. Labeled arguments can make this\n            signature clearer:\n          </blockquote>")))
 (idp7389984
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When defining functions that have multiple arguments that\n            might get confused with each other. This is most at issue\n            when the arguments are of the same type. For example,\n            consider this signature for a function for extracting a\n            substring of another string.\n          </blockquote>")))
 (idp7389024
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When defining a function with lots of arguments. Beyond a\n            certain number, arguments are easier to remember by name\n            than by position.\n          </blockquote>")))
 (idp7388048
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Labeled arguments are useful in a few different cases:\n      </blockquote>")))
 (idp7385408
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml also supports <span><em>label punning</em></span>, meaning\n        that you get to drop the text after the <code>:</code> if\n        the name of the label and the name of the variable being used\n        are the same. Label punning works in both function declaration\n        and function invocation, as shown in these examples:\n      </blockquote>")))
 (idp7383904
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can then provide a labeled argument using a similar\n        convention. As you can see, the arguments can be provided in any\n        order.\n      </blockquote>")))
 (idp7381712
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Up until now, we've written functions where the arguments are\n        specified positionally, <span><em>i.e.</em></span>, by the order\n        in which the arguments are passed to the function. OCaml also\n        supports labeled arguments, which let you identify a function\n        argument by name. Labels are marked by a leading tilde, and a\n        label (followed by a colon) are put in front of the variable to\n        be labeled.\n      </blockquote>")))
 (idp7378240
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Also, note the use of partial application to generate the\n        function passed to <code>List.map</code>. In other words,\n        <code>some_or_default 100</code> is a function that was\n        created by feeding just the first argument to\n        <code>some_or_default</code>.\n      </blockquote>")))
 (idp7376192
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can also combine the different styles of function declaration\n        together, as in the following example where we declare a two\n        argument (curried) function with a pattern-match on the second\n        argument.\n      </blockquote>")))
 (idp7373536
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This is equivalent to combining a <code>fun</code> with\n        <code>match</code>, as follows:\n      </blockquote>")))
 (idp7370464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another way to define a function is using the\n        <code>function</code> keyword. Instead of having syntactic\n        support for declaring multi-argument (curried) functions,\n        <code>function</code> has built-in pattern matching.\n        Here's an example:\n      </blockquote>")))
 (idp7368384
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The type error aside, this example highlights the importance of\n        choosing the operator you use with care, particularly with\n        respect to associativity.\n      </blockquote>")))
 (idp7365200
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The above type error is a little bewildering at first glance.\n        What's going on is that, because <code>^!</code> is right\n        associative, the operator is trying to feed the value\n        <code>List.dedup ~compare:String.compare</code> to the\n        function <code>List.iter ~f:print_endline</code>. But\n        <code>List.iter ~f:print_endline</code> expects a list of\n        strings as its input, not a function.\n      </blockquote>")))
 (idp7362240
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that <code>|!</code> only works in the intended way\n        because it is left-associative. Indeed, let's see what happens\n        if we try using a right associative operator, like (^!).\n      </blockquote>")))
 (idp7361152
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It is this later form that we're using in the\n        <code>|!</code> pipeline above.\n      </blockquote>")))
 (idp7359648
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or, we can pass it just the function argument, leaving us with a\n        function for printing out a list of strings.\n      </blockquote>")))
 (idp7356672
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        An important part of what's happening here is partial\n        application. Normally, <code>List.iter</code> takes two\n        arguments: a function to be called on each element of the list,\n        and the list to iterate over. We can call\n        <code>List.iter</code> with all it's arguments:\n      </blockquote>")))
 (idp7353168
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It's not quite obvious at first what the purpose of this\n        operator is: it just takes some value and a function, and\n        applies the function to the value. But its utility is clearer\n        when you see it in action. It works as a kind of sequencing\n        operator, similar in spirit to using pipe in the UNIX shell.\n        Consider, for example, the following code for printing out the\n        unique elements of your <code>PATH</code>. Note that\n        <code>List.dedup</code> below removes duplicates from a\n        list by sorting the list using the provided comparison function.\n      </blockquote>")))
 (idp7351664
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here's an example of a very useful operator that's defined in\n        Core, following these rules. Here's the definition:\n      </blockquote>")))
 (idp7348576
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        There's one important special case: <code>-</code> and\n        <code>-.</code>, which are the integer and floating point\n        subtraction operators, can act as both prefix operators (for\n        negation) and infix operators (for subtraction), So, you both\n        <code>-x</code> and <code>x - y</code> are\n        meaningful expressions.\n      </blockquote>")))
 (idp7328704
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The syntactic role of an operator work is determined by its\n        first character. This table describes how, and lists the\n        operators from highest to lowest precedence.\n      </blockquote>")))
 (idp7327120
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can define (or redefine) the meaning of an operator as\n        follows. Here's an example of a simple vector-addition operator\n        on int pairs.\n      </blockquote>")))
 (idp7325152
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        or is one of a handful of pre-determined strings, including\n        <code>mod</code>, the modulus operator, and\n        <code>lsl</code>, for &quot;logical shift left&quot;, a\n        bit-shifting operation.\n      </blockquote>")))
 (idp7323776
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        A function is treated syntactically as an operator if the name\n        of that function is chosen from one of a specialized set of\n        identifiers. This set includes any identifier that is a sequence\n        of characters from the following set\n      </blockquote>")))
 (idp7321888
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In the second expression above, we've partially applied\n        <code>(+)</code> to gain a function that increments its\n        single argument by <code>3</code>, and then applied that\n        to all the elements of a list.\n      </blockquote>")))
 (idp7319568
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You might not have thought of the second example as an ordinary\n        function, but it very much is. Infix operators like\n        <code>+</code> really only differ syntactically from other\n        functions. In fact, if we put parenthesis around an infix\n        operator, you can use it as an ordinary prefix function.\n      </blockquote>")))
 (idp7318112
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        So far, we've seen examples of functions used in both prefix and\n        infix style:\n      </blockquote>")))
 (idp7316528
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In addition, having a non-recursive form makes it easier to\n        create a new definition that extends and supersedes an existing\n        one by shadowing it.\n      </blockquote>")))
 (idp7315680
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        But this decision has some good effects. For one thing,\n        recursive (and especially mutually recursive) definitions are\n        harder to reason about than non-recursive definitions that\n        proceed in order, each building on top of what has already been\n        defined. It's therefore useful that, in the absence of an\n        explicit marker, new definitions can only build upon ones that\n        were previously defined.\n      </blockquote>")))
 (idp7313632
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml distinguishes between non-recursive definitions (using\n        <code>let</code>) and recursive definitions (using\n        <code>let rec</code>) largely for technical reasons: the\n        type-inference algorithm needs to know when a set of function\n        definitions are mutually recursive, and for some technical\n        reasons that don't apply to a pure language like Haskell, these\n        have to be marked explicitly by the programmer.\n      </blockquote>")))
 (idp7309904
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can also define multiple mutually recursive values by using\n        <code>let rec</code> and <code>and</code> together,\n        as in this (gratuitously inefficient) example.\n      </blockquote>")))
 (idp7306912
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that in the above, the pattern\n        <code>| [] | [_]</code> is actually the combination of two\n        patterns; <code>[]</code>, matching the empty list, and\n        <code>[_]</code>, matching any single element list. The\n        <code>_</code> is there so we don't have to put an\n        explicit name on that single element.\n      </blockquote>")))
 (idp7304480
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In order to define a recursive function, you need to mark the\n        let binding as recursive with the <code>rec</code>\n        keyword, as shown in this example:\n      </blockquote>")))
 (idp7303520
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        A function is <span><em>recursive</em></span> if it refers to\n        itself in its definition. Recursion is important in any\n        programming language, but is particularly important in\n        functional languages.\n      </blockquote>")))
 (idp7301920
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        There are small tradeoffs between these two approaches, but most\n        of the time, one should stick to currying, since it's the\n        default style in the OCaml world.\n      </blockquote>")))
 (idp7301216
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml handles this calling convention efficiently as well. In\n        particular it does not generally have to allocate a tuple just\n        for the purpose of sending arguments to a tuple-style function.\n        (You can't, however, use partial application for this style of\n        function.)\n      </blockquote>")))
 (idp7299600
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Currying is not the only way of writing a multi-argument\n        function in OCaml. It's also possible to use the different arms\n        of a tuple as different arguments. So, we could write:\n      </blockquote>")))
 (idp7298912
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You might worry that curried functions are terribly expensive,\n        but this is not the case. In OCaml, there is no penalty for\n        calling a curried function with all of its arguments. (Partial\n        application, unsurprisingly, does have a small extra cost.)\n      </blockquote>")))
 (idp7296224
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that the <code>fun</code> keyword supports its own\n        syntactic sugar for currying, so we could also have written\n        <code>abs_diff</code> as follows.\n      </blockquote>")))
 (idp7295328
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The practice of applying some of the arguments of a curried\n        function to get a new function is called <span><em>partial\n        application</em></span>.\n      </blockquote>")))
 (idp7292112
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Currying is more than just a theoretical curiosity. You can make\n        use of currying to specialize a function by feeding in some of\n        the arguments. Here's an example where we create a specialized\n        version of <code>abs_diff</code> that measures the\n        distance of a given number from <code>3</code>.\n      </blockquote>")))
 (idp7288752
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This style of function is called a <span><em>curried</em></span>\n        function. (Currying is named after Haskell Curry, a famous\n        logician who had a significant impact on the design and theory\n        of programming languages.) The key to interpreting the type\n        signature of a curried function is the observation that\n        <code>-&gt;</code> is right-associative. The type\n        signature of <code>abs_diff</code> can therefore be\n        parenthesized as follows. This doesn't change the meaning of the\n        signature, but it makes it easier to see how the currying fits\n        in.\n      </blockquote>")))
 (idp7285552
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This rewrite makes it explicit that <code>abs_diff</code>\n        is actually a function of one argument that returns another\n        function of one argument, which itself returns the final\n        computation. Because the functions are nested, the inner\n        expression <code>abs (x - y)</code> has access to both\n        <code>x</code>, which was captured by the first function\n        application, and <code>y</code>, which was captured by the\n        second one.\n      </blockquote>")))
 (idp7282080
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You may find the type signature of <code>abs_diff</code>\n        with all of its arrows a little hard to parse. To understand\n        what's going on, let's rewrite <code>abs_diff</code> in an\n        equivalent form, using the <code>fun</code> keyword:\n      </blockquote>")))
 (idp7280080
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml of course also supports multi-argument functions. Here's\n        an example that came up in\n        <a href=\"a-guided-tour.html\">Chapter\194\1601, <i>A Guided Tour</i></a>.\n      </blockquote>")))
 (idp7277920
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This connection is important, and will come up more when\n        programming in a monadic style, as we'll see in\n        <a href=\"\">???</a>.\n      </blockquote>")))
 (idp7276176
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Functions and let bindings have a lot to do with each other. In\n        some sense, you can think of the argument of a function as a\n        variable being bound to the value passed by the caller. Indeed,\n        the following two expressions are nearly equivalent:\n      </blockquote>")))
 (idp7273696
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This is the most common and convenient way to declare a\n        function, but syntactic niceties aside, the two styles of\n        function definition are entirely equivalent.\n      </blockquote>")))
 (idp7272192
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Defining named functions is so common that there is some built\n        in syntactic sugar for it. Thus, we can write:\n      </blockquote>")))
 (idp7270352
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The key thing to understand is that functions are ordinary\n        values in OCaml, and you can do everything with them that you'd\n        do with an ordinary value, including passing them to and\n        returning them from other functions and storing them in data\n        structures. We even name functions in the same way that we name\n        other values, by using a let binding.\n      </blockquote>")))
 (idp7266336
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It's worth stopping for a moment to puzzle this example out,\n        since this kind of higher-order use of functions can be a bit\n        obscure at first. The first thing to understand is the function\n        <code>(fun f -&gt; f 5)</code>, which takes a function as\n        its argument and applies that function to the number\n        <code>5</code>. The invocation of\n        <code>List.map</code> applies\n        <code>(fun f -&gt; f 5)</code> to the elements of the\n        <code>increments</code> list (which are themselves\n        functions) and returns the list containing the results of these\n        function applications.\n      </blockquote>")))
 (idp7264800
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or even stuff them into a data structure.\n      </blockquote>")))
 (idp7263344
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or pass it to another function.\n      </blockquote>")))
 (idp7261776
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Anonymous functions aren't named, but they can be used for many\n        different purposes nonetheless. You can, for example, apply an\n        anonymous function to an argument:\n      </blockquote>")))
 (idp7259120
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We'll start by looking at the most basic form of OCaml function,\n        the <span><em>anonymous</em></span> function. Anonymous functions\n        are declared using the <code>fun</code> keyword. Here's a\n        simple anonymous function for incrementing an integer.\n      </blockquote>")))
 (idp7257440
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      OCaml being a functional language, it's no surprise that functions\n      are an important and pervasive element of programming in OCaml.\n      Indeed, we've seen functions pop up already in many of the\n      examples we've looked at thus far. But while we've introduced the\n      basics of functions, we're now going to cover them in more depth,\n      starting from the foundations.\n    </blockquote>")))
 (idp7254464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that when doing a\n        <code>let</code>/<code>and</code> style declaration,\n        the order of execution of the right-hand side of the binds is\n        undefined by the language definition, so one should not write\n        code that relies on it.\n      </blockquote>")))
 (idp7253184
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This use-case doesn't come up that often, however. Most of the\n        time that <code>and</code> comes into play, it's used to\n        define multiple mutually recursive values, which we'll learn\n        about later in the chapter.\n      </blockquote>")))
 (idp7251712
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Without this trick, we would need to do something like the\n        following:\n      </blockquote>")))
 (idp7250000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that this is just shadowing the definitions of\n        <code>x</code> and <code>y</code>, not mutating\n        anything.\n      </blockquote>")))
 (idp7247184
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This can be useful when you want to create a number of new let\n        bindings at once, without having each definition affect the\n        next. So, if we wanted to create new bindings that swapped the\n        values of <code>x</code> and <code>y</code>, we\n        could write:\n      </blockquote>")))
 (idp7245024
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another variant on the let binding is the use of\n        <code>and</code> to join multiple variable definitions\n        into a single declaration. For example, we can write:\n      </blockquote>")))
 (idp7240304
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This case can't really come up in practice, because\n        <code>String.split</code> always returns a list with at\n        least one element. But the compiler doesn't know this, and so it\n        emits the warning. It's generally better to use a match\n        statement to handle such cases explicitly:\n      </blockquote>")))
 (idp7236736
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This actually binds two variables, one for each element of the\n        pair. Using a pattern in a let-binding makes the most sense for\n        a pattern that is <span><em>irrefutable</em></span>,\n        <span><em>i.e.</em></span>, where any value of the type in\n        question is guaranteed to match the pattern. Tuple and record\n        patterns are irrefutable, but list patterns are not. Consider\n        the following code that implements a function for up-casing the\n        first element of a comma-separate list.\n      </blockquote>")))
 (idp7234272
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another useful feature of let bindings is that they support the\n        use of patterns on the left-hand side of the bind. Consider the\n        following code, which uses <code>List.unzip</code>, a\n        function for converting a list of pairs into a pair of lists.\n      </blockquote>")))
 (idp7231840
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      In OCaml, let bindings are immutable. As we'll see in\n      <a href=\"a-guided-tour.html#imperative-programming\">the section called \226\128\156Imperative programming\226\128\157</a>, there are\n      mutable values in OCaml, but no mutable variables.\n    </blockquote>")))
 (idp7226224
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Here, we redefined <code>pi</code> to be zero after the\n      definition of <code>area_of_circle</code>. You might think\n      that this would mean that the result of the computation would now\n      be zero, but you'd be wrong. In fact, the behavior of the function\n      is unchanged. That's because the original definition of\n      <code>pi</code> wasn't changed, it was just shadowed, so\n      that any subsequent reference to <code>pi</code> would see\n      the new definition of <code>pi</code> as zero. But there is\n      no later use of <code>pi</code>, so the binding doesn't make\n      a difference. Indeed, if you type the example I gave above into\n      the toplevel, OCaml will warn you that the definition is unused.\n    </blockquote>")))
 (idp7223856
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      It's important not to confuse this sequence of let bindings with\n      the modification of a mutable variable. How would\n      <code>area_of_ring</code> be different, for example, if we\n      had instead written this purposefully confusing bit of code:\n    </blockquote>")))
 (idp7220912
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      One common idiom is to use a series of nested\n      <code>let</code>/<code>in</code> expressions to build\n      up the components of a larger computation. Thus, we might write:\n    </blockquote>")))
 (idp7216864
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      This time, in the inner scope we called the list of strings\n      <code>languages</code> instead of\n      <code>language_list</code>, thus hiding the original\n      definition of <code>languages</code>. But once the\n      definition of <code>dashed_languages</code> is complete, the\n      inner scope has closed and the original definition of languages\n      reappears.\n    </blockquote>")))
 (idp7213984
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      A let binding in an inner scope can <span><em>shadow</em></span>,\n      or hide, the definition from an outer scope. So, for example, we\n      could have written the <code>dashed_languages</code> example\n      as follows:\n    </blockquote>")))
 (idp7211248
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Note that the scope of <code>language_list</code> is just\n      the expression\n      <code>String.concat ~sep:&quot;-&quot; language_list</code>,\n      and is not available at the toplevel, as we can see if we try to\n      access it now.\n    </blockquote>")))
 (idp7206400
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      This first evaluates <span><em><code>expr1</code></em></span>\n      and then evaluates <span><em><code>expr2</code></em></span>\n      with <span><em><code>identifier</code></em></span> bound to\n      whatever value was produced by the evaluation of\n      <span><em><code>expr1</code></em></span>. Here's how it looks\n      in practice.\n    </blockquote>")))
 (idp7204368
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n<code>let</code> can also be used to create a variable\n      binding whose scope is limited to a particular expression, using\n      the following syntax.\n    </blockquote>")))
 (idp7203008
  ((file variables-and-functions.html)
   (html "<blockquote>\n      Here's a simple example.\n    </blockquote>")))
 (idp7202000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Every variable binding has a <span><em>scope</em></span>, which is\n      the portion of the code that can refer to that binding. The scope\n      of a toplevel let binding is everything that follows it in the\n      toplevel session (or in the remainder of the module).\n    </blockquote>")))
 (idp7200944
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      As we'll see when we get to the module system in\n      <a href=\"files-modules-and-programs.html\">Chapter\194\1606, <i>Files, Modules and Programs</i></a>, this same\n      syntax is used for toplevel definitions in a module.\n    </blockquote>")))
 (idp7198768
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      At its simplest, a variable is an identifier whose meaning is\n      bound to a particular value. In OCaml these bindings are often\n      introduced using the <code>let</code> keyword. When typed in\n      at the prompt of the interpreter, a let binding has the following\n      syntax.\n    </blockquote>")))
 (idp7197168
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n    Variables and functions are fundamental ideas that show up in\n    virtually all programming languages. But OCaml has a different take\n    on these basic concepts, and so we'll spend some time digging into\n    the details of OCaml's variables and functions differ from what you\n    may have seen elsewhere.\n  </blockquote>")))
 (idp7621680
  ((file records.html)
   (html
    "<blockquote>\n      Field iterators are useful for a variety of tasks, from building\n      validation functions to scaffolding the definition of a web-form\n      based on a record type, all with a guarantee that you've\n      exhaustively considered all elements of the field.\n    </blockquote>")))
 (idp7619840
  ((file records.html)
   (html
    "<blockquote>\n      The advantage of using field iterators is that when the definition\n      of <code>Logon</code> changes, <code>iter</code> will\n      change along with it, prompting you to handle whatever new cases\n      arise.\n    </blockquote>")))
 (idp7613984
  ((file records.html)
   (html
    "<blockquote>\n<code>fieldslib</code> also provides higher-level operators,\n      like <code>Fields.fold</code> and\n      <code>Fields.iter</code>, which let you iterate over all the\n      fields of a record. The following function uses\n      <code>Logon.Fields.iter</code> and\n      <code>show_field</code> to print out all the fields of a\n      <code>Logon</code> record.\n    </blockquote>")))
 (idp7612160
  ((file records.html)
   (html
    "<blockquote>\n      (As a side note, the above is our first use of the\n      <code>Fn</code> module which provides a collection of useful\n      primitives for dealing with functions. <code>Fn.id</code> is\n      the identity function.)\n    </blockquote>")))
 (idp7609520
  ((file records.html)
   (html
    "<blockquote>\n      Here's an example of <code>show_field</code> in action.\n    </blockquote>")))
 (idp7608384
  ((file records.html)
   (html
    "<blockquote>\n      This takes three arguments: the <code>Field.t</code>, a\n      function for converting the contents of the field in question to a\n      string, and the record type.\n    </blockquote>")))
 (idp7606560
  ((file records.html)
   (html
    "<blockquote>\n      We can use these first class fields to do things like write a\n      generic function for displaying a record field.\n    </blockquote>")))
 (idp7603344
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.setter</code>, which returns\n          <code>None</code> if the field is not mutable or\n          <code>Some f</code> if it is, where <code>f</code>\n          is a function for mutating that field.\n        </blockquote>")))
 (idp7601792
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.fset</code>, which does a functional update\n          of a field\n        </blockquote>")))
 (idp7600320
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.get</code>, which returns the content of\n          afield\n        </blockquote>")))
 (idp7598928
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.name</code>, which returns the name of a\n          field\n        </blockquote>")))
 (idp7595344
  ((file records.html)
   (html
    "<blockquote>\n      In addition to generating field accessor functions,\n      <code>fieldslib</code> also creates a sub-module called\n      <code>Fields</code> that contains a first class\n      representative of each field, in the form of a value of type\n      <code>Field.t</code>. The <code>Field</code> module\n      provides the following functions:\n    </blockquote>")))
 (idp7593088
  ((file records.html)
   (html
    "<blockquote>\n      Given that definition, we can use the function\n      <code>Logon.user</code> to extract the user field from a\n      logon message.\n    </blockquote>")))
 (idp7589648
  ((file records.html)
   (html
    "<blockquote>\n<code>fieldslib</code> is invoked by putting the\n      <code>with fields</code> annotation at the end of the\n      declaration of a record type. So, for example, we could have\n      defined <code>Logon</code> as follows.\n    </blockquote>")))
 (idp7586528
  ((file records.html)
   (html
    "<blockquote>\n      Here, we wrote a small function\n      <code>(fun x -&gt; x.Logon.user)</code> to access the\n      <code>user</code> field. This kind of accessor function is a\n      common enough pattern that that it would be convenient to generate\n      them automatically. The <code>fieldslib</code> syntax\n      extension that ships with <code>Core</code> does just that.\n    </blockquote>")))
 (idp7584240
  ((file records.html)
   (html
    "<blockquote>\n      Consider the following function for extracting the usernames from\n      a list of <code>Logon</code> messages.\n    </blockquote>")))
 (idp7582128
  ((file records.html)
   (html
    "<blockquote>\n      OCaml's policy of immutable-by-default is a good one, but\n      imperative programming does have its place. We'll discuss more\n      about how (and when) to use OCaml's imperative features in\n      <a href=\"a-guided-tour.html#imperative-programming\">the section called \226\128\156Imperative programming\226\128\157</a>.\n    </blockquote>")))
 (idp7580944
  ((file records.html)
   (html
    "<blockquote>\n      Note that <code>&lt;-</code> is not needed for\n      initialization, because all fields of a record, including mutable\n      ones, must be specified when the record is created.\n    </blockquote>")))
 (idp7577936
  ((file records.html)
   (html
    "<blockquote>\n      We then use the <code>&lt;-</code> operator for actually\n      changing the state. The side-effecting version of\n      <code>register_heartbeat</code> would be written as follows.\n    </blockquote>")))
 (idp7575536
  ((file records.html)
   (html
    "<blockquote>\n      Like most OCaml values, records are immutable by default. You can,\n      however, declare individual record fields as mutable. For example,\n      we could take the <code>client_info</code> type and make the\n      fields that may need to change over time mutable, as follows.\n    </blockquote>")))
 (idp7572144
  ((file records.html)
   (html
    "<blockquote>\n      The original implementation of\n      <code>register_heartbeat</code> would now be invalid, and\n      thus the compiler would warn us to think about how to handle this\n      new field. But the version using a functional update continues to\n      compile as is, even though it incorrectly ignores the new field.\n      The correct thing to do would be to update the code as follows.\n    </blockquote>")))
 (idp7570160
  ((file records.html)
   (html
    "<blockquote>\n      Functional updates make your code independent of the identity of\n      the fields in the record that are not changing. This is often what\n      you want, but it has downsides as well. In particular, if you\n      change the definition of your record to have more fields, the type\n      system will not prompt you to reconsider whether your update code\n      should affect those fields. Consider what happens if we decided to\n      add a field for the status message received on the last heartbeat.\n    </blockquote>")))
 (idp7568176
  ((file records.html)
   (html
    "<blockquote>\n      Given this, we can rewrite <code>register_heartbeat</code>\n      more concisely.\n    </blockquote>")))
 (idp7567616
  ((file records.html)
   (html
    "<blockquote>\n      The purpose of the functional update is to create a new record\n      based on an existing one, with a set of field changes layered on\n      top.\n    </blockquote>")))
 (idp7564864
  ((file records.html)
   (html
    "<blockquote>\n      This is fairly verbose, given that there's only one field that we\n      actually want to change, and all the others are just being copied\n      over from <code>t</code>. We can use OCaml's\n      <span><em>functional update</em></span> syntax to do this more\n      tersely. The syntax of a functional update is as follows.\n    </blockquote>")))
 (idp7562288
  ((file records.html)
   (html
    "<blockquote>\n      Fairly often, you will find yourself wanting to create a new\n      record that differs from an existing record in only a subset of\n      the fields. For example, imagine our logging server had a record\n      type for representing the state of a given client, including when\n      the last heartbeat was received from that client. The following\n      defines a type for representing this information, as well as a\n      function for updating the client information when a new heartbeat\n      arrives.\n    </blockquote>")))
 (idp7560640
  ((file records.html)
   (html
    "<blockquote>\n      For functions defined within the module where a given record is\n      defined, the module qualification goes away entirely. And indeed,\n      for things like constructors, defining it within the module is\n      often the best solution.\n    </blockquote>")))
 (idp7557488
  ((file records.html)
   (html
    "<blockquote>\n      The module name <code>Log_entry</code> is required to\n      qualify the fields, because this function is outside of the\n      <code>Log_entry</code> module where the record was defined.\n      OCaml only requires the module qualification for one record field,\n      however, so we can write this more concisely.\n    </blockquote>")))
 (idp7555696
  ((file records.html)
   (html
    "<blockquote>\n      Now, our heartbeat-creation function can be rendered as follows.\n    </blockquote>")))
 (idp7553008
  ((file records.html)
   (html
    "<blockquote>\n      Another approach is to mint a module for each type. This is\n      actually a broadly useful idiom (and one used quite extensively by\n      Core), providing for each type a name-space within which to put\n      related values. When using this style, it is standard practice to\n      name the type associated with the module <code>t</code>.\n      Using this style we would write:\n    </blockquote>")))
 (idp7552416
  ((file records.html)
   (html
    "<blockquote>\n      This eliminates the collisions and is simple enough to do. But it\n      leaves you with awkwardly named record fields, and adds needless\n      repetition and verbosity to your code.\n    </blockquote>")))
 (idp7550560
  ((file records.html)
   (html
    "<blockquote>\n      There are two common solutions to this problem. The first is to\n      add a prefix to each field name to make it unique, as shown below.\n    </blockquote>")))
 (idp7544320
  ((file records.html)
   (html
    "<blockquote>\n      The problem is that the declaration of <code>logon</code>\n      (and <code>heartbeat</code>) shadowed some of the fields of\n      <code>log_entry</code>. As a result, the fields\n      <code>time</code> and <code>session_id</code> are\n      assumed to be fields of <code>logon</code>, and\n      <code>important</code> and <code>message</code>, which\n      were not shadowed, are assumed to be fields of\n      <code>log_entry</code>. The compiler therefore complains\n      that we're trying to construct a record with fields from two\n      different record types.\n    </blockquote>")))
 (idp7542544
  ((file records.html)
   (html
    "<blockquote>\n      The fact that we reused field names will cause trouble when we try\n      to construct a message.\n    </blockquote>")))
 (idp7538544
  ((file records.html)
   (html
    "<blockquote>\n      Below, the <code>log_entry</code> message is used to deliver\n      a log entry to the server for processing. The\n      <code>logon</code> message is sent when a client initiates a\n      connection, and includes the identity of the user connecting and\n      credentials used for authentication. Finally, the\n      <code>heartbeat</code> message is periodically sent by the\n      client to demonstrate to the server that the client is alive and\n      connected. All of these messages include a session id and the time\n      the message was generated.\n    </blockquote>")))
 (idp7537872
  ((file records.html)
   (html
    "<blockquote>\n      Defining records with the same field names can be problematic.\n      Let's consider a simple example: building types to represent the\n      protocol used for a logging server. The following types represent\n      messages a server might receive from a client.\n    </blockquote>")))
 (idp7536144
  ((file records.html)
   (html
    "<blockquote>\n      Together, labeled arguments, field names, and field and label\n      punning, encourage a style where you propagate the same names\n      throughout your code-base. This is generally good practice, since\n      it encourages consistent naming, which makes it easier for new\n      people to navigate your source.\n    </blockquote>")))
 (idp7534512
  ((file records.html)
   (html
    "<blockquote>\n      This is considerably more concise than what you would get without\n      punning at all.\n    </blockquote>")))
 (idp7532896
  ((file records.html)
   (html
    "<blockquote>\n      You can take advantage of both field punning and label punning\n      when writing a function for constructing a record from labeled\n      arguments, as shown below.\n    </blockquote>")))
 (idp7532304
  ((file records.html)
   (html
    "<blockquote>\n      In the above code, we defined variables corresponding to the\n      record fields first, and then the record declaration itself simply\n      listed the fields that needed to be included.\n    </blockquote>")))
 (idp7529648
  ((file records.html)
   (html
    "<blockquote>\n      Field punning can also be used to construct a record. Consider the\n      following code for generating a <code>host_info</code>\n      record.\n    </blockquote>")))
 (idp7527184
  ((file records.html)
   (html
    "<blockquote>\n      When the name of a variable coincides with the name of a record\n      field, OCaml provides some handy syntactic shortcuts. For example,\n      the pattern in the following function binds all of the fields in\n      question to variables of the same name. This is called\n      <span><em>field punning</em></span>.\n    </blockquote>")))
 (idp7525008
  ((file records.html)
   (html
    "<blockquote>\n      Generally, the right default is to turn the warning for incomplete\n      record matches on, and to explicitly disable it with an\n      <code>_</code> where necessary.\n    </blockquote>")))
 (idp7523248
  ((file records.html)
   (html
    "<blockquote>\n      We can disable the warning for a given pattern by explicitly\n      acknowledging that we are ignoring extra fields. This is done by\n      adding an underscore to the pattern, as shown below.\n    </blockquote>")))
 (idp7519760
  ((file records.html)
   (html
    "<blockquote>\n      Happily, OCaml does offer an optional warning for missing fields\n      in a record pattern. With that warning turned on (which you can do\n      in the toplevel by typing\n      <code>#warnings &quot;+9&quot;</code>), the compiler will\n      warn about the missing field.\n    </blockquote>")))
 (idp7517824
  ((file records.html)
   (html
    "<blockquote>\n      The code for <code>host_info_to_string</code> would continue\n      to compile without change. In this particular case, it's pretty\n      clear that you might want to update\n      <code>host_info_to_string</code> in order to take into\n      account the new field, and it would be nice if the type system\n      would give you a warning about the change.\n    </blockquote>")))
 (idp7515056
  ((file records.html)
   (html
    "<blockquote>\n      As an example, imagine that we wanted to add a new field to our\n      <code>host_info</code> record called\n      <code>os_version</code>, as shown below.\n    </blockquote>")))
 (idp7514208
  ((file records.html)
   (html
    "<blockquote>\n      Another important characteristic of record patterns is that they\n      don't need to be complete; a pattern can mention only a subset of\n      the fields in the record. This can be convenient, but it's can\n      also be error prone. In particular, this means that when new\n      fields are added to the record, code that should be updated to\n      react to the presence of those new fields will not be flagged by\n      the compiler.\n    </blockquote>")))
 (idp7512256
  ((file records.html)
   (html
    "<blockquote>\n      Note that the pattern that we used had only a single case, rather\n      than using several cases separated by <code>|</code>s. We\n      only needed a single pattern because record patterns are\n      <span><em>irrefutable</em></span>, meaning that, because the layout\n      of a record is always the same, a record pattern match will never\n      fail at runtime. In general, types with a fixed structure, like\n      records and tuples, have irrefutable patterns, whereas types with\n      variable structure, like lists and variants, do not.\n    </blockquote>")))
 (idp7509584
  ((file records.html)
   (html
    "<blockquote>\n      Another way of getting information out of a record is by using a\n      pattern match, as in the definition of\n      <code>host_info_to_string</code> below.\n    </blockquote>")))
 (idp7507232
  ((file records.html)
   (html
    "<blockquote>\n    Once we have a record value in hand, we can extract elements from\n    the record field using dot-notation.\n  </blockquote>")))
 (idp7505168
  ((file records.html)
   (html
    "<blockquote>\n    You might wonder how the compiler inferred that\n    <code>my_host</code> is of type <code>host_info</code>.\n    The hook that the compiler uses in this case to figure out the type\n    is the record field names. It turns out that, within a given scope,\n    each record field name is associated with a unique record type.\n    Later in the chapter, we'll talk about what to do when you want to\n    have the same record fields in multiple records.\n  </blockquote>")))
 (idp7501104
  ((file records.html)
   (html
    "<blockquote>\n    We can construct a <code>host_info</code> just as easily. The\n    following code uses the <code>Shell</code> module from\n    <code>Core_extended</code> to dispatch commands to the shell\n    to extract the information we need about the computer we're running\n    on.\n  </blockquote>")))
 (idp7498992
  ((file records.html)
   (html
    "<blockquote>\n    Here's a simple example, a <code>host_info</code> record that\n    summarizes information about a given computer.\n  </blockquote>")))
 (idp7497376
  ((file records.html)
   (html
    "<blockquote>\n    A record represents a collection of values stored together as one,\n    where each component is identified by a different field name. The\n    basic syntax for a record type declaration is as follows.\n  </blockquote>")))
 (idp7495360
  ((file records.html)
   (html
    "<blockquote>\n    One of OCaml's best features is its concise and expressive system\n    for declaring new datatypes. Two key elements of that system are\n    <span><em>records</em></span> and <span><em>variants</em></span>, both\n    of which we discussed briefly in\n    <a href=\"a-guided-tour.html\">Chapter\194\1601, <i>A Guided Tour</i></a>. In this chapter we'll\n    cover records in more depth, covering more of the details of how\n    they work, as well as advice on how to use them effectively in your\n    software designs.\n  </blockquote>")))
 (idp285296
  ((file prologue.html)
   (html
    "<blockquote>\n        Yaron obtained his PhD in Computer Science from Cornell\n        University, where he studied distributed systems. Yaron has\n        lectured, blogged and written about OCaml for years, with\n        articles published in Communications of the ACM and the Journal\n        of Functional Programming. He chairs the steering committee of\n        the Commercial Users of Functional Programming, and is a member\n        of the steering committee for the International Conference on\n        Functional Programming.\n      </blockquote>")))
 (idp284464
  ((file prologue.html)
   (html
    "<blockquote>\n        Yaron Minsky heads the Technology group at Jane Street, a\n        proprietary trading firm that is the largest industrial user of\n        OCaml. He was responsible for introducing OCaml to the company\n        and for managing the company's transition to using OCaml for all\n        of its core infrastructure. Today, billions of dollars worth of\n        securities transactions flow each day through those systems.\n      </blockquote>")))
 (idp282304
  ((file prologue.html)
   (html
    "<blockquote>\n        Prior to obtaining his PhD in 2006 from the University of\n        Cambridge, Anil had a diverse background in industry at NetApp,\n        NASA and Internet Vision. He is an active member of the\n        open-source development community with the OpenBSD operating\n        system, is on the steering committee of the Commercial Uses of\n        Functional Programming ACM workshop, and serves on the boards of\n        startup companies where OCaml is extensively used. He has also\n        developed the Mirage unikernel system that is written entirely\n        in OCaml from the device drivers up.\n      </blockquote>")))
 (idp281424
  ((file prologue.html)
   (html
    "<blockquote>\n        Anil Madhavapeddy is a Senior Research Fellow at the University\n        of Cambridge, based in the Systems Research Group. He was on the\n        original team that developed the Xen hypervisor, and helped\n        develop an industry-leading cloud management toolstack written\n        entirely in OCaml. This XenServer product has been deployed on\n        millions of physical hosts, and drives critical infrastructure\n        for many Fortune 500 companies.\n      </blockquote>")))
 (idp278784
  ((file prologue.html)
   (html
    "<blockquote>\n        Prior to joining Google, Jason was an Assistant Professor of\n        Computer Science at Caltech, where his research was in reliable\n        and fault-tolerant computing systems, including programming\n        language design, formal methods, compilers, and new models of\n        distributed computation. He obtained his PhD in Computer Science\n        from Cornell University, where he studied programming languages.\n        He is the author of the MetaPRL system, a logical framework for\n        design and analysis of large software systems; OMake, an\n        advanced build system for large software projects. He is the\n        author of the textbook, <span><em>An Introduction to Objective\n        Caml</em></span> (unpublished).\n      </blockquote>")))
 (idp278032
  ((file prologue.html)
   (html
    "<blockquote>\n        Jason Hickey is a Software Engineer at Google Inc. in Mountain\n        View, California. He is part of the team that designs and\n        develops the global computing infrastructure used to support\n        Google services, including the software systems for managing and\n        scheduling massively distributed computing resources.\n      </blockquote>")))
 (idp252592
  ((file prologue.html)
   (html
    "<blockquote>\n      At this stage, the Windows operating system is also unsupported,\n      and only MacOS X, Linux, FreeBSD and OpenBSD can be expected to\n      work reliably. We realize this is a concern; there are no\n      fundamental barriers to Windows support, but we're focussed on\n      getting the main content finished before getting stuck into the\n      porting effort.\n    </blockquote>")))
 (idp5267600
  ((file prologue.html)
   (html
    "<blockquote>\n      Real World OCaml uses some tools that we've developed while\n      writing this book. Some of these resulted in improvements to the\n      OCaml compiler, which means that you will need to ensure that you\n      have an up-to-date development environment (using the 4.01.0\n      compiler). We've automated everything you need via the OPAM\n      package manager, so please do follow the installation instructions\n      in <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a> carefully.\n    </blockquote>")))
 (idp5264192
  ((file prologue.html)
   (html
    "<blockquote>\n          Part III is all about understanding the runtime system in\n          OCaml. It's a remarkably simple system in comparison to other\n          language runtimes (such as Java or the .NET CLR), and you'll\n          need to read this to build very high performance systems that\n          have to minimise resource usage or interface to C libraries.\n          This is also where we talk about profiling and debugging\n          techniques using tools such as GNU <code>gdb</code> and\n          <code>gprof</code>. Contributing your code back to the\n          community is also important (if only to get bug fixes from\n          other people!), and this part also explains how to do this via\n          OPAM and Github.\n        </blockquote>")))
 (idp5262912
  ((file prologue.html)
   (html
    "<blockquote>\n          Part II builds on the basics to construct more complete\n          examples. This is where you'll pick up some useful techniques\n          for building networked systems, as well as some functional\n          design patterns that glue together OCaml language elements in\n          useful ways. The theme throughout this chapter is on networked\n          systems, and we build a running example that will perform\n          Internet queries using the DuckDuckGo search engine.\n        </blockquote>")))
 (idp5261424
  ((file prologue.html)
   (html
    "<blockquote>\n          Part I covers the basic concepts you'll need to know when\n          building OCaml programs. You won't need to memorise all of\n          this (objects, for example, are used rarely in practise), but\n          understanding the concepts and examples is important. This\n          part opens up with a guided tour to give you a quick overview\n          of the language. It then moves onto modules, functors and\n          objects, which may take some time to digest. Persevere though;\n          even thought these concepts may be difficult at first, they\n          will put you in good stead even when switching to other\n          languages, many of which have drawn inspiration from ML.\n        </blockquote>")))
 (idp5260528
  ((file prologue.html)
   (html
    "<blockquote>\n      Real World OCaml is split into three parts and appendices:\n    </blockquote>")))
 (idp252208
  ((file prologue.html)
   (html
    "<blockquote>\n      If you've learnt some OCaml before, this book may surprise you\n      with some differences from your past experience. The Core standard\n      library redefines most of the standard modules to be much more\n      consistent, and so you'll need to adapt older code. We believe the\n      Core model is worth learning; it's been successfully used on large\n      million line codebases, and removes a big barrier to more\n      widespread OCaml adoption. There will always exist code that uses\n      only the compiler standard library of course, but there are other\n      online resources available to learn that. Real World OCaml focuses\n      on the techniques the authors have used in their personal\n      experience to construct scalable, robust computer systems.\n    </blockquote>")))
 (idp250816
  ((file prologue.html)
   (html
    "<blockquote>\n      At the same time, OCaml is not Haskell. It takes a much more\n      pragmatic approach by being strictly evaluated by default, and\n      permitting arbitrary side-effects. In fact, you can write OCaml\n      code that looks very similar to C, but is still type-safe. One of\n      the major strengths of OCaml for systems programming is that, with\n      some experience, you can predict the runtime behaviour of a block\n      of code very easily, with very little compiler magic involved.\n    </blockquote>")))
 (idp249424
  ((file prologue.html)
   (html
    "<blockquote>\n      Real World OCaml is aimed at programmers who have some experience\n      with conventional programming languages, but not specifically with\n      <span><em>statically typed functional programming</em></span>. The\n      world of dynamic scripting languages such as Javascript, Ruby and\n      Python have all adopted healthy elements of functional\n      programming, but not all of it. Real World OCaml takes you through\n      the full lifecycle of how to construct software with static\n      typing, including the powerful module system that makes code\n      re-use so much more robust.\n    </blockquote>")))
 (idp4646144
  ((file prologue.html)
   (html
    "<blockquote>\n        Another big improvement over the standard library is the\n        <code>utop</code> interactive top level. This is a modern\n        interactive tool that supports command history, macro expansion,\n        module completion, and other niceties that make it much more\n        pleasant to work with the language. We'll be using\n        <code>utop</code> throughout the book instead of the\n        normal OCaml toplevel. It can, of course, be installed using\n        OPAM, and <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a> guides you\n        through that that process.\n      </blockquote>")))
 (idp4400800
  ((file prologue.html)
   (html
    "<blockquote>\n        Core is a very comprehensive standard library, but there's also\n        a large community of programmers who have used OCaml since its\n        first release in 1996. In Real World OCaml, we'll also introduce\n        some of these libraries for you to experiment with realistic\n        examples. The installation and management of these third-party\n        libraries is made much easier via a package management tool\n        known as OPAM. We'll explain more about OPAM as the book\n        unfolds, but it forms the basis of the Platform, which is a set\n        of tools and libraries that, along with the OCaml compiler, let\n        you build realistic applications quickly and effectively.\n      </blockquote>")))
 (idp3362288
  ((file prologue.html)
   (html
    "<blockquote>\n        But all is not lost! There is an effective alternative to the\n        OCaml standard library called Core. Jane Street, a company that\n        has been using OCaml for more than a decade, developed Core for\n        its own internal use, but it was designed from the start with an\n        eye towards being a general-purpose standard library. Core is\n        also distributed with syntax extensions which provide essential\n        new functionality to OCaml; and there are additional libraries\n        such as the <code>Async</code> network communications\n        library that provide even more useful functionality.\n      </blockquote>")))
 (idp3362928
  ((file prologue.html)
   (html
    "<blockquote>\n        A language on its own isn't enough. You also need a rich set of\n        libraries to base your applications on. A common source of\n        frustration for those learning OCaml is that the standard\n        library that ships with the OCaml compiler is not ideal. While\n        it's well implemented, it is really intended for use within the\n        compiler itself, and covers only a small subset of the\n        functionality you expect for more general-purpose use.\n      </blockquote>")))
 (idp1873584
  ((file prologue.html)
   (html
    "<blockquote>\n      Among this worthy set of languages, OCaml stands apart because it\n      manages to provide a great deal of power while remaining highly\n      pragmatic, highly performant, and comparatively simple to use and\n      understand. It is this that makes OCaml a great choice for\n      programmers who want to step up to a better programming language,\n      and at the same time want to get practical work done.\n    </blockquote>")))
 (idp5103120
  ((file prologue.html)
   (html
    "<blockquote>\n      Some of you will know and love these features, and others will be\n      completely new to them. Most of you will have seen\n      <span><em>some</em></span> of them in other languages that you've\n      used. As we'll demonstrate over the course of this book, it turns\n      out that there is something transformative about having them all\n      together and able to interact in a single language. Despite their\n      importance, these ideas have made only limited inroads into\n      mainstream languages. And when they do arrive there, like\n      higher-order functions in C# or parametric polymorphism in Java,\n      it's typically in a limited and awkward form. The only languages\n      that support these ideas well are statically-typed functional\n      programming languages like OCaml, F#, Haskell, Scala and\n      Standard-ML.\n    </blockquote>")))
 (idp4510768
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Automatic type inference</em></span> to avoid having\n          to laboriously define the type of every single variable in a\n          program and have it inferred based on how a value is used.\n        </blockquote>")))
 (idp3384496
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Algebraic datatypes</em></span> and pattern matching\n          to describe values more precisely, available in Miranda, F#\n          and Standard ML.\n        </blockquote>")))
 (idp4097968
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Immutable data structures</em></span> that cannot be\n          destructively updated, famously enforced in Haskell but also a\n          common feature of many distributed big data frameworks.\n        </blockquote>")))
 (idp4433680
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Generics</em></span> to enable abstractions to be\n          constructed across different datatypes, available in Java and\n          .NET.\n        </blockquote>")))
 (idp5506688
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Static type-checking</em></span> to reduce run-time\n          errors, such as Java class interfaces or Objective-C methods.\n        </blockquote>")))
 (idp4461072
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Higher-order functions</em></span> that can be passed\n          around as first-class values, and seen in Javascript or Scala.\n        </blockquote>")))
 (idp4560752
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Garbage collection</em></span> for automatic memory\n          management, now a feature of almost every modern high-level\n          language.\n        </blockquote>")))
 (idp5284272
  ((file prologue.html)
   (html
    "<blockquote>\n      But not all ideas about how to design a programming language are\n      created equal. Over the last 40 years, a few key language features\n      have emerged that together form a kind of sweet-spot in language\n      design. These features include:\n    </blockquote>")))
 (idp2377584
  ((file prologue.html)
   (html
    "<blockquote>\n      The programming languages that you use affect your productivity.\n      They affect how reliable your software is, how efficient it is,\n      how easy it is to read, to refactor, and to extend. And the\n      languages you know and use can deeply affect how you think about\n      programming and software design.\n    </blockquote>")))
 (idp9430448
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        The mixin pattern isn't limited to non-polymorphic classes, of\n        course. We can use it to implement generic features as well. The\n        following mixin defines functional-style iteration in terms of\n        the imperative iterator pattern.\n      </blockquote>")))
 (idp9428288
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        In this particular case, the mixin works only for a collection\n        of integers, so we can't add the mixin to the polymorphic class\n        definition <code>['a] slist</code> itself. However, the\n        result of using the mixin is that the integer collection has a\n        method <code>sum</code>, and it is done with very little\n        of the fuss we would need if we used object composition instead.\n      </blockquote>")))
 (idp9425808
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        The collections are different is some ways, but they share a\n        common pattern for iteration that we can re-use. For a simple\n        example, let's define a mixin that implements an arithmetic sum\n        for a collection of integers.\n      </blockquote>")))
 (idp9422368
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        That's too abstract, so let's give an example based on\n        collections. In Section XXX:Objecttypes, we introduced the\n        <span><em>iterator</em></span> pattern, where an\n        <span><em>iterator</em></span> object is used to enumerate the\n        elements of a collection. Lots of containers can have iterators,\n        singly-linked lists, dictionaries, vectors, etc.\n      </blockquote>")))
 (idp9418128
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        In any case, if you're programming with objects, there's one\n        general pattern for multiple inheritance that is both useful and\n        reasonably simple, the <span><em>mixin</em></span> pattern.\n        Generically, a <span><em>mixin</em></span> is just a virtual\n        class that implements a feature based on another one. If you\n        have a class that implements methods <span><em>A</em></span>, and\n        you have a mixin <span><em>M</em></span> that provides methods\n        <span><em>B</em></span> from <span><em>A</em></span>, then you can\n        inherit from <span><em>M</em></span> -- &quot;mixing&quot; it in\n        -- to get features <span><em>B</em></span>.\n      </blockquote>")))
 (idp9417248
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        When should you use multiple inheritance? If you ask multiple\n        people, you're likely to get multiple (perhaps heated) answers.\n        Some will argue that multiple inheritance is overly complicated;\n        others will argue that inheritance is problematic in general,\n        and one should use object composition instead. But regardless of\n        who you talk to, you will rarely hear that multiple inheritance\n        is great and you should use it widely.\n      </blockquote>")))
 (idp9408544
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        To reiterate, to understand what inheritance means, replace each\n        <code>inherit</code> directive with its definition, and\n        take the last definition of each method or field. This holds\n        even for private methods. However, it does\n        <span><em>not</em></span> hold for private methods that are\n        &quot;really&quot; private, meaning that they have been hidden\n        by a type constraint. In the following definitions, there are\n        three definitions of the private method <code>g</code>.\n        However, the definition of <code>g</code> in\n        <code>m8</code> is not overridden, because it is not part\n        of the class type for <code>m8</code>.\n      </blockquote>")))
 (idp9404800
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Of course, it is unlikely that you will define two methods or\n        two fields of the same name in the same class. However, the\n        rules for inheritance follow the same pattern: the last\n        definition wins. In the following definition, the\n        <code>inherit</code> declaration comes last, so the method\n        definition <code>method get = 2</code> overrides the\n        previous definition, always returning 2.\n      </blockquote>")))
 (idp9402976
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Fields have similar behavior, though the compiler produces a\n        warning message about the override.\n      </blockquote>")))
 (idp9400336
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        First, let's consider what happens when we define a method more\n        than once. In the following example, the method\n        <code>get</code> is defined twice; the second definition\n        &quot;wins,&quot; meaning that it overrides the first one.\n      </blockquote>")))
 (idp9399648
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        If there is one thing to remember about inheritance in OCaml, it\n        is this: inheritance is like textual inclusion. If there is more\n        than one definition for a name, the last definition wins. Let's\n        look at some artificial, but illustrative, examples.\n      </blockquote>")))
 (idp9398864
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        The main &quot;trickiness&quot; of multiple inheritance is due\n        to naming -- what happens when a method or field with some name\n        is defined in more than one class?\n      </blockquote>")))
 (idp9396528
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      When a class inherits from more than one superclass, it is using\n      <span><em>multiple inheritance</em></span>. Multiple inheritance\n      extends the variety of ways in which classes can be combined, and\n      it can be quite useful, particularly with virtual classes.\n      However, it can be tricky to use, particularly when the\n      inheritance hierarchy is a graph rather than a tree, so it should\n      be used with care.\n    </blockquote>")))
 (idp9393808
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      This level of dependency on the implementation details is\n      possible, but it is hard to justify the use of a virtual class --\n      why not just define the <code>swap</code> method as part of\n      the concrete class? Virtual classes are better suited for\n      situations where there are multiple (useful) implementations of\n      the virtual parts. In most cases, this will be public virtual\n      methods.\n    </blockquote>")))
 (idp9391968
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      We've been mentioning that fields can be virtual too. Here is\n      another implementation of the swapper, this time with direct\n      access to the array of values.\n    </blockquote>")))
 (idp9390208
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      One way to view a <code>virtual</code> class is that it is\n      like a functor, where the &quot;inputs&quot; are the declared, but\n      not defined, virtual methods and fields. The functor application\n      is implemented through inheritance, when virtual methods are given\n      concrete implementations.\n    </blockquote>")))
 (idp9387712
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      Here's a different implementation using\n      <code>HashTbl</code>.\n    </blockquote>")))
 (idp9383520
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      At some future time, we may settle on a concrete implementation\n      for the vector. We can inherit from the\n      <code>abstract_swappable_bvector</code> to get the\n      <code>swap</code> method &quot;for free.&quot; Here's one\n      implementation using arrays.\n    </blockquote>")))
 (idp9378592
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      One way to do this is to declare the\n      <code>swappable_vector</code> abstractly, declaring the\n      methods <code>get</code> and <code>set</code>, but\n      leaving the implementation for later. However, the\n      <code>swap</code> method can be defined immediately.\n    </blockquote>")))
 (idp9373040
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      In the previous section, we defined a class\n      <code>swappable_vector</code> that inherits from\n      <code>array_vector</code> and adds a <code>swap</code>\n      method. In fact, the <code>swap</code> method could be\n      defined for any object with <code>get</code> and\n      <code>set</code> methods; it doesn't have to be the specific\n      class <code>array_vector</code>.\n    </blockquote>")))
 (idp9370448
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      A <span><em>virtual</em></span> class is a class where some methods\n      or fields are declared, but not implemented. This should not be\n      confused with the word &quot;virtual&quot; as it is used in C++.\n      In C++, a &quot;virtual&quot; method uses dynamic dispatch,\n      regular non-virtual methods use static dispatched. In OCaml,\n      <span><em>all</em></span> methods use dynamic dispatch, but the\n      keyword <span><em>virtual</em></span> means the method or field is\n      not implemented.\n    </blockquote>")))
 (idp9365792
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      The key property of private methods is that they are visible to\n      subclasses, but not anywhere else. If you want the stronger\n      guarantee that a method is <span><em>really</em></span> private,\n      not even accessible in subclasses, you can use an explicit typing\n      that omits the method. In the following code, the\n      <code>move_up</code> method is explicitly omitted from the\n      object type, and it can't be invoked in subclasses.\n    </blockquote>")))
 (idp9364512
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      The method <code>move_up</code> implements the process of\n      restoring heap order as a recursive method (though it would be\n      straightforward avoid the recursion and use iteration here).\n    </blockquote>")))
 (idp9359424
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      Yet another reason for private methods is to factor the\n      implementation and support recursion. Moving along with this\n      example, let's build a binary heap, which is a binary tree in heap\n      order: where the label of parent elements is smaller than the\n      labels of its children. One efficient implementation is to use an\n      array to represent the values, where the root is at index 0, and\n      the children of a parent node at index <code>i</code> are at\n      indexes <code>2 * i</code> and <code>2 * i + 1</code>.\n      To insert a node into the tree, we add it as a leaf, and then\n      recursively move it up the tree until we restore heap order.\n    </blockquote>")))
 (idp9354576
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      To be precise, the method <code>ensure_capacity</code> is\n      part of the class type, but it is not part of the object type.\n      This means the object <code>v</code> has no method\n      <code>ensure_capacity</code>. However, it is available to\n      subclasses. We can extend the class, for example, to include a\n      method <code>swap</code> that swaps two elements.\n    </blockquote>")))
 (idp9347632
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      To illustrate, let's build a class <code>vector</code> that\n      contains an array of integers, resizing the storage array on\n      demand. The field <code>values</code> contains the actual\n      values, and the <code>get</code>, <code>set</code>,\n      and <code>length</code> methods implement the array access.\n      For clarity, the resizing operation is implemented as a private\n      method <code>ensure_capacity</code> that resizes the array\n      if necessary.\n    </blockquote>")))
 (idp9346192
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      Methods can be declared <span><em>private</em></span>, which means\n      that they may be called by subclasses, but they are not visible\n      otherwise (similar to a <span><em>protected</em></span> method in\n      C++).\n    </blockquote>")))
 (idp9339680
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        The binary method <code>equals</code> is now implemented\n        in terms of the concrete type <code>shape_repr</code>. In\n        fact, the objects are now isomorphic to the\n        <code>shape_repr</code> type. When using this pattern, you\n        will not be able to hide the <code>repr</code> method, but\n        you can hide the type definition using the module system.\n      </blockquote>")))
 (idp9336816
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        If we want to define equality for shapes in general, the\n        remaining solution is to use the same approach as we described\n        for narrowing. That is, introduce a\n        <span><em>representation</em></span> type implemented using\n        variants, and implement the comparison based on the\n        representation type.\n      </blockquote>")))
 (idp9336000
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        The problem here is that the builtin polymorphic equality\n        compares the method implementations, not their return values.\n        The method implementations (the function values that implement\n        the methods) are different, so the equality comparison is false.\n        There are other reasons not to use the builtin polymorphic\n        equality, but these false negatives are a showstopper.\n      </blockquote>")))
 (idp9333584
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        One proposal we could consider is, since the problematic method\n        is equality, why not just drop it from the base type\n        <code>shape</code> and use polymorphic equality instead?\n        Unfortunately, the builtin equality has very poor behavior when\n        applied to objects.\n      </blockquote>")))
 (idp9332976
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        This problem is fundamental. Many languages solve it either with\n        narrowing (with dynamic type checking), or by method\n        overloading. Since OCaml has neither of these, what can we do?\n      </blockquote>")))
 (idp9330336
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        The problem is that a <code>square</code> expects to be\n        compared with a <code>square</code>, not an arbitrary\n        shape; similarly for <code>rectangle</code>.\n      </blockquote>")))
 (idp9325296
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        This works, but there is a problem lurking here. The method\n        <code>equals</code> takes an object of the exact type\n        <code>square</code> or <code>rectangle</code>.\n        Because of this, we can't define a common base class\n        <code>shape</code> that also includes an equality method.\n      </blockquote>")))
 (idp9321424
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        A <span><em>binary method</em></span> is a method that takes an\n        object of <code>self</code> type. One common example is\n        defining a method for equality.\n      </blockquote>")))
 (idp9319488
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        This pattern works, but it has drawbacks. In particular, the\n        recursive type definition should make it clear that this pattern\n        is essentially equivalent to using variants, and that objects do\n        not provide much value here.\n      </blockquote>")))
 (idp9316304
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Regardless, there is a solution if you find yourself in this\n        situation, which is to augment the classes with variants. You\n        can define a method <code>variant</code> that injects the\n        actual object into a variant type.\n      </blockquote>")))
 (idp9313808
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        In this case, it is much less clear how to augment the\n        <code>Shape</code> class to support this kind of pattern\n        analysis. It is also not obvious that object-oriented\n        programming is well-suited for this situation. Pattern matching\n        seems like a better fit.\n      </blockquote>")))
 (idp9310720
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        However, the situation is not always so obvious. The following\n        code checks whether an array of shapes looks like a\n        &quot;barbell,&quot; composed to two <code>Circle</code>\n        objects separated by a <code>Line</code>, where the\n        circles have the same radius.\n      </blockquote>")))
 (idp9308240
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Most programmers would consider this code to be\n        &quot;wrong.&quot; Instead of performing a case analysis on the\n        type of object, it would be better to define a method to return\n        the name of the shape. Instead of calling\n        <code>GetShapeName(s)</code>, we should call\n        <code>s.Name()</code> instead.\n      </blockquote>")))
 (idp9306656
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        More commonly, narrowing leads to poor object-oriented style.\n        Consider the following Java code, which returns the name of a\n        shape object.\n      </blockquote>")))
 (idp9303744
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        The design argument is this: narrowing violates abstraction. In\n        fact, with a structural typing system like in OCaml, narrowing\n        would essentially provide the ability to enumerate the methods\n        in an object. To check whether an object <code>obj</code>\n        has some method <code>foo : int</code>, one would attempt\n        a coercion <code>(obj :&gt; &lt; foo : int &gt;)</code>.\n      </blockquote>")))
 (idp9303152
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Why? There are two reasonable explanations, one based on a\n        design principle, and another technical (the technical reason is\n        simple: it is hard to implement).\n      </blockquote>")))
 (idp9302272
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Narrowing is <span><em>not permitted</em></span> in OCaml.\n        Period.\n      </blockquote>")))
 (idp9295456
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Narrowing, also called <span><em>down casting</em></span>, is the\n        ability to coerce an object to one of its subtypes. For example,\n        if we have a list of shapes <code>shape slist</code>, we\n        might know (for some reason) what the actual type of each shape\n        is. Perhaps we know that all objects in the list have type\n        <code>square</code>. In this case,\n        <span><em>narrowing</em></span> would allow the re-casting of the\n        object from type <code>shape</code> to type\n        <code>square</code>. Many languages support narrowing\n        through dynamic type checking. For example, in Java, a coercion\n        <code>(Square) x</code> is allowed if the value\n        <code>x</code> has type <code>Square</code> or one\n        of its subtypes; otherwise the coercion throws an exception.\n      </blockquote>")))
 (idp9289920
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        OCaml supports an abbreviation in this case, but it works only\n        for classes, not object types. The type expression\n        <code># classname</code> is an abbreviation for an elided\n        type containing all of the methods in the named class, and more.\n        Since <code>shape</code> is an object type, we can't write\n        <code>#shape</code>. However, if a class definition is\n        available, this abbreviation can be useful. The following\n        definition is exactly equivalent to the preceeding.\n      </blockquote>")))
 (idp9287856
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        This works, and it removes the need for explicit coercions. This\n        type is still fairly simple, but it does have the drawback that\n        the programmer needs to remember that the types\n        <code>&lt; area : float; ..&gt;</code> and\n        <code>shape</code> are related.\n      </blockquote>")))
 (idp9284016
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        A solution is to use an elided type. Instead of\n        <code>shape</code>, we can use the elided type\n        <code>&lt; area : float; .. &gt;</code>. In fact, once we\n        do this, it also becomes possible to use the\n        <code>slist</code> type.\n      </blockquote>")))
 (idp9281904
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Before we move to the next topic, there is one more thing to\n        address. The typing we gave above, using\n        <code>readonly_shape_slist</code>, requires that the\n        caller perform an explicit coercion before calling the\n        <code>total_area</code> function. We would like to give a\n        better type that avoids the coercion.\n      </blockquote>")))
 (idp9276240
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        This reasoning may seem fairly long and complicated, but it\n        should be pointed out that this typing\n        <span><em>works</em></span>, and in the end the type annotations\n        are fairly minor. In most typed object-oriented languages, the\n        coercion would simply not be possible. For example, in C++, a\n        STL type <code>slist&lt;T&gt;</code> is invariant in\n        <code>T</code>, it is simply not possible to use\n        <code>slist&lt;square&gt;</code> where\n        <code>slist&lt;shape&gt;</code> is expected (at least\n        safely). The situation is similar in Java, although Java\n        supports has an escape hatch that allows the program to fall\n        back to dynamic typing. The situation in OCaml is much better;\n        it works, it is statically checked, and the annotations are\n        pretty simple.\n      </blockquote>")))
 (idp9269872
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        In this particular case, depth subtyping on the\n        <code>iterator</code> method requires that\n        <code>square iterator</code> be a subtype of\n        <code>shape iterator</code>. Expanding the type definition\n        for the type <code>iterator</code>, we again invoke depth\n        subtyping, and we need to show that the type\n        <code>&lt; get : square &gt;</code> is a subtype of\n        <code>&lt;get : shape &gt;</code>, which follows because\n        <code>square</code> is a subtype of\n        <code>shape</code>.\n      </blockquote>")))
 (idp9262512
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Why does this work, why is a <code>square slist</code> a\n        subtype of <code>readonly_shape_slist</code>. The\n        reasoning is in two steps. First, the easy part is width\n        subtyping: we can drop the other methods to see that\n        <code>square slist</code> is a subtype of\n        <code>&lt; iterator : square iterator &gt;</code>. The\n        next step is to use <span><em>depth</em></span> subtyping, which,\n        in its general form, says that an object type\n        <code>&lt; m : t1 &gt;</code> is a subtype of a type\n        <code>&lt; m : t2&gt;</code> iff <code>t1</code> is\n        a subtype of <code>t2</code>. In other words, instead of\n        reasoning about the number of methods in a type (the width), the\n        number of methods is fixed, and we look within the method types\n        themselves (the &quot;depth&quot;).\n      </blockquote>")))
 (idp9258128
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n        Still, the <code>total_area</code> function should be\n        fine, in principle. It doesn't call <code>insert</code>,\n        so it isn't making that error. To make it work, we need to use a\n        more precise type that indicates we are not going to be mutating\n        the list. We define a type\n        <code>readonly_shape_slist</code> and confirm that we can\n        coerce the list of squares.\n      </blockquote>")))
 (idp9250368
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      It might seem tempting to give up at this point, especially\n      because the subtyping is not even true -- the type\n      <code>square slist</code> is not a subtype of\n      <code>shape slist</code>. The problem is with the\n      <code>insert</code> method. For\n      <code>shape slist</code>, the <code>insert</code>\n      method takes an arbitrary <code>shape</code> and inserts it\n      into the list. So if we could coerce a\n      <code>square slist</code> to a\n      <code>shape slist</code>, then it would be possible to\n      insert an arbitrary shape into the list, which would be an error.\n    </blockquote>")))
 (idp9245392
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      We can also define a function to calculate the total area of a\n      list of shapes. There is no reason to restrict this to squares, it\n      should work for any list of shapes with type\n      <code>shape slist</code>. The problem is that doing so\n      raises some serious typing questions -- can a\n      <code>square slist</code> be passed to a function that\n      expects a <code>shape slist</code>? If we try it, the\n      compiler produces a verbose error message.\n    </blockquote>")))
 (idp9242880
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      Next, let's take a seemingly tiny step forward, and start building\n      collections of shapes. It is easy enough to define a\n      <code>slist</code> of squares.\n    </blockquote>")))
 (idp9242016
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      This may seem absurd, but this concept is expressible in all\n      object-oriented languages. The contradiction is semantic -- we\n      know that in the real world, not all rectangles are squares; but\n      in the programming world, rectangles have all of the features of\n      squares (according to our definition), so they can be used just\n      like squares. Suffice it to say that it is usually better to avoid\n      such apparent contradictions.\n    </blockquote>")))
 (idp9237888
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      The subtyping rules are purely technical, they have no relation to\n      object semantics. We can define a class\n      <code>rectangle</code> that has all of the methods of a\n      <code>square</code>, so it is a subtype of square and can be\n      used wherever a <code>square</code> is expected.\n    </blockquote>")))
 (idp9231792
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      What are the rules for subtyping? In general, object subtyping has\n      two general forms, called <span><em>width</em></span> and\n      <span><em>depth</em></span> subtyping. Width subtyping means that\n      an object type <span><em>A</em></span> is a a subtype of\n      <span><em>B</em></span>, if <span><em>A</em></span> has all of the\n      methods of <span><em>B</em></span>, and possibly more. A\n      <code>square</code> is a subtype of <code>shape</code>\n      because it implements all of the methods of\n      <code>shape</code> (the <code>area</code> method).\n    </blockquote>")))
 (idp9224704
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      A <code>square</code> has a method <code>area</code>\n      just like a <code>shape</code>, and an additional method\n      <code>width</code>. Still, we expect a\n      <code>square</code> to be a <code>shape</code>, and it\n      is. The coercion <code>:&gt;</code> must be explicit.\n    </blockquote>")))
 (idp9221472
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      To explore this, let's define some simple classes for geometric\n      shapes. The generic type <code>shape</code> has a method to\n      compute the area, and a <code>square</code> is a specific\n      kind of shape.\n    </blockquote>")))
 (idp9215120
  ((file object-subtyping-and-inheritance.html)
   (html
    "<blockquote>\n      Subtyping is a central concept in object-oriented programming. It\n      governs when an object with one type <span><em>A</em></span> can be\n      used in an expression that expects an object of another type\n      <span><em>B</em></span>. When this is true, we say that\n      <span><em>A</em></span> is a <span><em>subtype</em></span> of\n      <span><em>B</em></span>. Actually, more concretely, subtyping\n      determines when the coercion operator <code>e :&gt; t</code>\n      can be applied. This coercion works only if the expression\n      <code>e</code> has some type <code>s</code> and\n      <code>s</code> is a subtype of <code>t</code>.\n    </blockquote>")))
 (idp8782512
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      One more thing, in this example the function\n      <code>make</code> has type\n      <code>unit -&gt; 'a slist</code>. But wait, we've stressed\n      <span><em>classes are not types</em></span>, so what's up with\n      that? In fact, what we've said is entirely true, classes and class\n      names <span><em>are not</em></span> types. However, class names can\n      be used to stand for types. When the compiler sees a class name in\n      type position, it automatically constructs an object type from it\n      by erasing all the fields and keeping only the method types. In\n      this case, the type expression <code>'a slist</code> is\n      exactly equivalent to <code>'a t</code>.\n    </blockquote>")))
 (idp8778656
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In this signature, we've chosen to make nearly everything visible.\n      The class type for <code>slist</code> specifies the types of\n      the fields <code>first</code> and <code>last</code>,\n      as well ad the types of each of the methods. We've also included a\n      class type for <code>slist_iterator</code>, which is of\n      somewhat more questionable value, since the type doesn't appear in\n      the type for <code>slist</code> at all.\n    </blockquote>")))
 (idp8774656
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The abstract signature is simple because we ignore the classes.\n      But what if we want to include them in the signature, so that\n      other modules can inherit from the class definitions? For this, we\n      need to specify types for the classes, called <span><em>class\n      types</em></span>. Class types do not appear in mainstream\n      object-oriented programming languages, so you may not be familiar\n      with them, but the concept is pretty simple. A class type\n      specifies the type of each of the visible parts of the class,\n      including both fields and methods. Just like for module types, you\n      don't have to give a type for everything; anything you omit will\n      be hidden.\n    </blockquote>")))
 (idp8772896
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We have multiple choices in defining the module type, depending on\n      how much of the implementation we want to expose. At one extreme,\n      a maximally-abstract signature would completely hide the class\n      definitions.\n    </blockquote>")))
 (idp8769312
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Before we begin, let's wrap up the implementation in an explicit\n      module (we'll use explicit modules for illustration, but the\n      process is similar when we want to define a\n      <code>.mli</code> file). In keeping with the usual style for\n      modules, we define a type <code>'a t</code> to represent the\n      type of list values.\n    </blockquote>")))
 (idp8768064
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Once we have defined the list implementation, the next step is to\n      wrap it in a module or <code>.ml</code> file and give it a\n      type so that it can be used in the rest of our code. What is the\n      type?\n    </blockquote>")))
 (idp8764656
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We use the same object type <code>iterator</code> for\n      iterators, but implement it differently.\n    </blockquote>")))
 (idp8763328
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      There are some restriction on the use of the expression\n      <code>{&lt; ... &gt;}</code>. It can be used only within a\n      method body, and only the values of fields may be updated. Method\n      implementations are fixed at the time the object is created, they\n      cannot be changed dynamically.\n    </blockquote>")))
 (idp8758880
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A key part of the implementation is the definition of the method\n      <code>insert</code>. The expression\n      <code>{&lt; ... &gt;}</code> produces a copy of the current\n      object, with the same type, and the specified fields updated. In\n      other words, the <code>new_fst new_x</code> method produces\n      a copy of the object, with <code>x</code> replaced by\n      <code>new_x</code>. The original object is not modified, and\n      the value of <code>y</code> is also unaffected.\n    </blockquote>")))
 (idp8755952
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Indeed, in many programs, this makes sense, but it is by no means\n      required. Let's define an object-oriented version of lists similar\n      to the imperative list above. We'll implement it with a regular\n      list type <code>'a list</code>, and insertion will be to the\n      beginning of the list instead of to the end.\n    </blockquote>")))
 (idp8755296
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Many people consider object-oriented programming to be\n      intrinsically imperative, where an object is like a state machine.\n      Sending a message to an object causes it to change state,\n      possibily sending messages to other objects.\n    </blockquote>")))
 (idp8750912
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The solution is to use a type quantifier, as shown in the\n      following example. The method type must be specified directly\n      after the method name, which means that method parameters must be\n      expressed using a <code>fun</code> or\n      <code>function</code> expression.\n    </blockquote>")))
 (idp8745280
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      What about functional operations similar to\n      <code>List.map</code> or <code>List.fold</code>? In\n      general, these methods take a function that produces a value of\n      some other type than the elements of the set. For example, the\n      function <code>List.fold</code> has type\n      <code>'a list -&gt; ('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b</code>,\n      where <code>'b</code> is an arbitrary type. To replicate\n      this in the <code>slist</code> class, we need a method type\n      <code>('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b</code>, where\n      the method type is polymorphic over <code>'b</code>.\n    </blockquote>")))
 (idp8742512
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We may also wish to define functional-style methods,\n      <code>iter f</code> takes a function <code>f</code>\n      and applies it to each of the elements of the list.\n    </blockquote>")))
 (idp8737744
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Finally, we add a method <code>iterator</code> to the slist\n      class to produce an iterator. To do so, we construct an\n      <code>slist_iterator</code> that refers to the first node in\n      the list, but we want to return a value with the object type\n      <code>iterator</code>. This requires an explicit coercion\n      using the <code>:&gt;</code> operator.\n    </blockquote>")))
 (idp8734608
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Next, we'll define an actual iterator for the class\n      <code>slist</code>. We can represent the position in the\n      list with a field <code>current</code>, following links as\n      we traverse the list.\n    </blockquote>")))
 (idp8732544
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      First, we'll define an object type <code>iterator</code>\n      that specifies the methods in an iterator.\n    </blockquote>")))
 (idp8731392
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      OCaml support both styles. In fact, OCaml is more flexible than\n      these approaches because an object type can be implemented by any\n      object with the appropriate methods, it does not have to be\n      specified by the object's class <span><em>a priori</em></span>.\n      We'll leave abstract classes for later. Let's demonstrate the\n      technique using object types.\n    </blockquote>")))
 (idp8728784
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      There are two common styles for defining abstract interfaces like\n      this. In Java, an iterator would normally be specified with an\n      interface, which specifies a set of method types. In languages\n      without interfaces, like C++, the specification would normally use\n      <span><em>abstract</em></span> classes to specify the methods\n      without implementing them (C++ uses the &quot;= 0&quot; definition\n      to mean &quot;not implemented&quot;).\n    </blockquote>")))
 (idp8726704
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      This definition of the class <code>slist</code> is not\n      complete, we can construct lists, but we also need to add the\n      ability to traverse the elements in the list. One common style for\n      doing this is to define a class for an <code>iterator</code>\n      object. An iterator provides a generic mechanism to inspect and\n      traverse the elements of a collection. This pattern isn't\n      restricted to lists, it can be used for many different kinds of\n      collections.\n    </blockquote>")))
 (idp8721792
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Next, we can define the list itself. We'll keep a field\n      <code>head</code> the refers to the first element in the\n      list, and <code>last</code> refers to the final element in\n      the list. The method <code>insert</code> adds an element to\n      the end of the list.\n    </blockquote>")))
 (idp8720880
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In general, we need to provide enough constraints so that the\n      compiler will infer the correct type. We can add type constraints\n      to the parameters, to the fields, and to the methods. It is a\n      matter of preference how many constraints to add. You can add type\n      constraints in all three places, but the extra text may not help\n      clarity. A convenient middle ground is to annotate the fields\n      and/or class parameters, and add constraints to methods only if\n      necessary.\n    </blockquote>")))
 (idp8715408
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The type annotations on the <code>val</code> declarations\n      are used to constrain type inference. If we omit these\n      annotations, the type inferred for the class will be &quot;too\n      polymorphic,&quot; <code>x</code> could have some type\n      <code>'b</code> and <code>next_node</code> some type\n      <code>'c option</code>.\n    </blockquote>")))
 (idp8711520
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The <code>value</code> is the value stored in the node, and\n      it can be retrieved and changed with the <code>get</code>\n      and <code>set</code> methods. The\n      <code>next_node</code> field is the link to the next element\n      in the stack. Note that the type parameter <code>['a]</code>\n      in the definition uses square brackets, but other uses of the type\n      can omit them (or use parentheses if there is more than one type\n      parameter).\n    </blockquote>")))
 (idp8707680
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Let's build an example of an imperative singly-linked list using\n      object-oriented techniques. First, we'll want to define a class\n      for a single element of the list. We'll call it a\n      <code>node</code>, and it will hold a value of type\n      <code>'a</code>. When defining the class, the type\n      parameters are placed in square brackets before the class name in\n      the class definition. We also need a parameter\n      <code>x</code> for the initial value.\n    </blockquote>")))
 (idp8706112
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A class definition serves as the <span><em>constructor</em></span>\n      for the class. In general, a class definition may have parameters\n      that must be provided as arguments when the object is created with\n      <code>new</code>.\n    </blockquote>")))
 (idp8703728
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In this version, we don't use any references, and instead a\n      recursive function keeps track of the last digest in use and the\n      accumulated result string. This version isn't quite as efficient\n      as the previous one due to the careless use of string\n      concatenation for the accumulator, but this can easily be fixed by\n      using the <code>Buffer</code> module instead.\n    </blockquote>")))
 (idp8700128
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Notice how the encoder object is used as an accumulator, by using\n      the <code>put_string</code> and\n      <code>available_output</code> to keep track of progress.\n      Objects don't <span><em>require</em></span> an imperative style\n      though, and the same algorithm can be written more functionally:\n    </blockquote>")))
 (idp8698640
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The derivation algorithm takes an input password and desired total\n      length (the addition of the key and IV length). It initialises a\n      <code>Hexa.encode</code> transformer, which will accept\n      arbitrary binary data and output a hexadecimal string (with two\n      output bytes per input byte). A reference stores the last digest\n      that's been calculated, and then the algorithm iterates until it\n      has sufficient data to satisfy the required key length.\n    </blockquote>")))
 (idp8693872
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We've selected the <code>-nosalt</code> option here to make\n      the output deterministic, and the <code>-P</code> option\n      prints out the derived key and IV and exits. The algorithm used to\n      derive these results is described in the\n      <code>man EVP_BytesToKey</code> manual page (you may need to\n      install the OpenSSL documentation packages on your system first).\n      We can implement this derivation function using an imperative\n      style:\n    </blockquote>")))
 (idp8691536
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Now let's try something more advanced. The\n      <code>openssl</code> library is installed on most systems,\n      and can be used to encrypt plaintext using several encryption\n      strategies. At its simplest, it will take a secret phrase and\n      derive an appropriate key and initialisation vector.\n    </blockquote>")))
 (idp8687376
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We can extend this simple example by selecting either the\n      <code>md5</code> or <code>sha1</code> hash function at\n      runtime depending on the name of our binary.\n      <code>Sys.argv</code> is an array containing the arguments\n      the command was invoked with, and the first entry is the name of\n      the binary itself.\n    </blockquote>")))
 (idp8684720
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      After opening the right modules, we read in the entire standard\n      input into an OCaml string. This is then passed onto the MD5 hash\n      function, which returns a binary string. This binary is passed\n      through the <code>Hexa</code> hexadecimal encoder, which\n      returns an ASCII representation of the input. The output of this\n      command will be the same as the <code>md5</code> command (or\n      <code>md5sum</code> in some systems).\n    </blockquote>")))
 (idp8680512
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Hash objects hold state and are thus naturally imperative. Once\n      instantiated, data is fed into them by the addition functions, the\n      <code>result</code> is computed and finally the contents\n      erased via <code>wipe</code>. The\n      <code>hash_string</code> convenience function applies the\n      hash function fully to a string, and returns the result. The\n      <code>md5</code> command is quite straight-forward now:\n    </blockquote>")))
 (idp8678064
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Concrete hash objects can be instantiated from various sub-modules\n      in Cryptokit. The simplest ones such as MD5 or SHA1 do not take\n      any special input parameters to build the object. The\n      <code>hmac_sha1</code> takes a string key to initialise the\n      Message Authenticate Code for that particular hash function.\n    </blockquote>")))
 (idp8674720
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Our first example mimics the <code>md5</code> command, which\n      reads in an input file and returns a hexadecimal representation of\n      its MD5 cryptographic hash. Cryptokit defines a number of\n      different functions and collects them together under the\n      <code>Cryptokit.hash</code> class type:\n    </blockquote>")))
 (idp8672768
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The Cryptokit library can be installed via OPAM via\n      <code>opam install cryptokit</code>. Once that's finished\n      compiling and installing, you just need to\n      <code>#require &quot;cryptokit&quot;</code> in your toplevel\n      to load the library and make the modules available.\n    </blockquote>")))
 (idp8671584
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Let's take a break from describing the object system with a more\n      practical example that uses the OCaml cryptographic library.\n    </blockquote>")))
 (idp8666240
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      This new <code>movable_point</code> class also makes use of\n      the <code>(self : 'self)</code> binding after the\n      <code>object</code> keyword. The variable\n      <code>self</code> stands for the current object, allowing\n      self-invocation, and the type variable <code>'self</code>\n      stands for the type of the current object (which in general is a\n      subtype of <code>movable_point</code>).\n    </blockquote>")))
 (idp8663744
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Inheritance uses an existing class to define a new one. For\n      example, the following class definition supports an addition\n      method <code>moveby</code> that moves the point by a\n      relative amount.\n    </blockquote>")))
 (idp8661456
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      To produce an object, classes are instantiated with the keyword\n      <code>new</code>.\n    </blockquote>")))
 (idp8656320
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The type <code>class point : ... end</code> is a\n      <span><em>class type</em></span>. This particular type specifies\n      that the <code>point</code> class defines a mutable field\n      <code>x</code>, a method <code>get</code> that returns\n      an <code>int</code>, and a method <code>set</code>\n      with type <code>int -&gt; unit</code>.\n    </blockquote>")))
 (idp8653632
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In OCaml, class definitions must be defined as toplevel statements\n      in a module. A class is not an object, and a class definition is\n      not an expression. The syntax for a class definition uses the\n      keyword <code>class</code>.\n    </blockquote>")))
 (idp8652080
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Programming with objects directly is great for encapsulation, but\n      one of the main goals of object-oriented programming is code\n      re-use through inheritance. For inheritance, we need to introduce\n      <span><em>classes</em></span>. In object-oriented programming, a\n      class is a &quot;recipe&quot; for creating objects. The recipe can\n      be changed by adding new methods and fields, or it can be changed\n      by modifying existing methods.\n    </blockquote>")))
 (idp8645840
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      An object of type <code>&lt; get:int; .. &gt;</code> can be\n      any object with a method <code>get:int</code>, it doesn't\n      matter how it is implemented. So far, we've constructed two\n      objects with that type; the function <code>make</code>\n      constructed one, and so did <code>average</code>. When the\n      method <code>#get</code> is invoked, the actual method that\n      is run is determined by the object.\n    </blockquote>")))
 (idp8642608
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In other words, the type <code>'a point</code> is equal to\n      <code>'a</code>, where\n      <code>'a = &lt; get : int; .. &gt;</code>. That may seem\n      like an odd way to say it, and in fact, this type definition is\n      not really an abbreviation because <code>'a</code> refers to\n      the entire type.\n    </blockquote>")))
 (idp8638384
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A <code>..</code> in an object type is called a\n      <span><em>row variable</em></span> and this typing scheme is called\n      <span><em>row polymorphism</em></span>. Even though\n      <code>..</code> doesn't look like a type variable, it\n      actually is. The error message suggests a solution, which is to\n      add the <code>as 'a</code> type constraint.\n    </blockquote>")))
 (idp8635696
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The <code>..</code> in an object type is an elision,\n      standing for &quot;possibly more methods.&quot; It may not be\n      apparent from the syntax, but an elided object type is actually\n      polymorphic. If we try to write a type definition, we get an\n      obscure error.\n    </blockquote>")))
 (idp8632512
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The potential extra parameters defined by the object are carefully\n      tracked by the OCaml type checker. If we manually try and\n      constrain the exact type <code>&lt; get : int &gt;</code>\n      for an object with more methods, type inference will fail.\n    </blockquote>")))
 (idp8630496
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We can use the <code>average</code> using the normal object\n      invocation syntax:\n    </blockquote>")))
 (idp8626736
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      There's some new syntax in the type that's been inferred for\n      <code>average</code> here. The parameters have the object\n      type <code>&lt; get : int; .. &gt;</code>. The\n      <code>..</code> are ellipsis, standing for any other\n      methods. The type <code>&lt; get : int; .. &gt;</code>\n      specifies an object that must have at least a\n      <code>get</code> method, and possibly some others as well.\n    </blockquote>")))
 (idp8623856
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Functions can also take object arguments. Let's construct a new\n      object <code>average</code> that returns the average of any\n      two objects with a <code>get</code> method.\n    </blockquote>")))
 (idp8619808
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Note that the types of the function <code>make</code> and\n      the returned object now use the polymorphic type\n      <code>'a</code>. When make is invoked on a concrete value\n      <code>5</code>, we get the same object type as before, with\n      type <code>int</code> for the value.\n    </blockquote>")))
 (idp8617920
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Objects can also be constructed by functions. If we want to\n      specify the initial value of the object, we can define a function\n      that takes the value and returns an object.\n    </blockquote>")))
 (idp8614176
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The object type is enclosed in angle brackets\n      <code>&lt; ... &gt;</code>, containing just the types of the\n      methods. Fields, like <code>x</code>, are not part of the\n      public interface of an object. All interaction with an object is\n      through its methods. The syntax for a method invocation (also\n      called &quot;sending a message&quot; to the object) uses the\n      <code>#</code> character.\n    </blockquote>")))
 (idp8611296
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The object has an integer value <code>x</code>, a method\n      <code>get</code> that returns x, and a method\n      <code>set</code> that updates the value of\n      <code>x</code>.\n    </blockquote>")))
 (idp8609136
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      OCaml is entirely different. Classes are used to construct objects\n      and support inheritance, including non-subtyping inheritance.\n      Classes are not types. Instead, objects have <span><em>object\n      types</em></span>, and if you want to use objects, you aren't\n      required to use classes at all. Here's an example of a simple\n      object.\n    </blockquote>")))
 (idp8606848
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      If you already know about object oriented programming in a\n      language like Java or C++, the OCaml object system may come as a\n      surprise. Foremost is the complete separation of subtyping and\n      inheritance in OCaml. In a language like Java, a class name is\n      also used as the type of objects created by instantiating it, and\n      the subtyping rule corresponds to inheritance. For example. if we\n      implement a class <code>Stack</code> in Java by inheriting\n      from a class <code>Deque</code>, we would be allowed to pass\n      a stack anywhere a deque is expected (this is a silly example of\n      course, practitioners will point out that we shouldn't do it).\n    </blockquote>")))
 (idp8604688
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In this chapter, we'll introduce you to the basics of object\n      definition and use in OCaml, and then demonstrate their use with\n      an example using Cryptokit. We'll return to the more advanced\n      areas of object use later on in the book in\n      <a href=\"object-subtyping-and-inheritance.html\">Chapter\194\16014, <i>Object Subtyping and Inheritance</i></a>.\n    </blockquote>")))
 (idp8602560
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In general, a rule of thumb is: use classes and objects in\n      situations where dynamic binding is a big win, for example if you\n      have many similar variations in the implementation of a concept.\n      Two good examples are Xavier Leroy's\n      <a href=\"http://gallium.inria.fr/~xleroy/software.html#cryptokit\" target=\"_top\">Cryptokit</a>,\n      which provides a variety of cryptographic primitives that can be\n      combined in building-block style, and the\n      <a href=\"http://cristal.inria.fr/camlimages/\" target=\"_top\">Camlimages</a>\n      library which manipulates various graphical file formats.\n    </blockquote>")))
 (idp8601856
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In contrast, modules use static (lexical) scoping. If you want to\n      parameterize your module code so that some part of it can be\n      implemented later, you would write a function or functor. This is\n      more explicit, but often more verbose than overriding a method in\n      a class.\n    </blockquote>")))
 (idp8600544
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Modules already provide these features in some form, but the main\n      focus of classes is on code re-use through inheritance and late\n      binding of methods. This is a critical property of classes: the\n      methods that implement an object are determined when the object is\n      instantiated, a form of <span><em>dynamic</em></span> binding. In\n      the meantime, while classes are being defined, it is possible (and\n      necessary) to refer to methods without knowing statically how they\n      will be implemented.\n    </blockquote>")))
 (idp8599680
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      You might wonder when to use objects in OCaml, which has a\n      multitude of alternative mechanisms to express the same concept.\n      First-class modules are more expressive (a module can include\n      types, while classes and objects cannot). Modules, functors, and\n      algebraic data types also offer a wide range of ways to express\n      program structure. In fact, many seasoned OCaml programmers rarely\n      use classes and objects, if at all.\n    </blockquote>")))
 (idp8598080
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n    Almost every notable modern programming language has been influenced\n    by OOP, and you'll have run across these terms if you've ever used\n    C++, Java, C#, Ruby, Python or Javascript.\n  </blockquote>")))
 (idp8596832
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Inheritance</em></span>: the definition of one kind of\n        object can be re-used to produce a new kind of object. This new\n        definition can override some behaviour, but also share code with\n        its parent.\n      </blockquote>")))
 (idp8593184
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Subtyping</em></span>: if an object\n        <code>a</code> has all the functionality of an object\n        <code>b</code>, then we may use <code>a</code> in\n        any context where <code>b</code> is expected.\n      </blockquote>")))
 (idp8591728
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Dynamic lookup</em></span>: when a message is sent to\n        an object, the method to be executed is determined by the\n        implementation of the object, not by some static property of the\n        program. In other words, different objects may react to the same\n        message in different ways.\n      </blockquote>")))
 (idp8590400
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Abstraction</em></span>: the details of the\n        implementation are hidden in the object, and the external\n        interface is just the set of publically-accessible methods.\n      </blockquote>")))
 (idp8589392
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n    There are four fundamental properties that differentiate OOP from\n    other styles:\n  </blockquote>")))
 (idp8587008
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n    Object-oriented programming (often shorted to OOP) is a programming\n    style that encapsulates computation and data within logical\n    <span><em>objects</em></span>. Each object contains some data stored\n    in <span><em>fields</em></span>, and has <span><em>method</em></span>\n    functions that can be invoked against the data within the object.\n    The code definition behind an object is called a\n    <span><em>class</em></span>, and objects are constructed from a class\n    definition by calling a constructor with the data that the object\n    will use to build itself.\n  </blockquote>")))
 (idp8585632
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n    We've already seen several tools that OCaml provides for organizing\n    programs, particularly first-class modules. In addition, OCaml also\n    supports object-oriented programming. There are objects, classes,\n    and their associated types. Objects are good for encapsulation and\n    abstraction, and classes are good for code re-use.\n  </blockquote>")))
 (idp9539264
  ((file installation.html)
   (html
    "<blockquote>\n      TODO: Package listings are obtained by adding\n      <span><em>remotes</em></span> that provide package descriptions,\n      installation instructions and URLs.\n    </blockquote>")))
 (idp9537440
  ((file installation.html)
   (html
    "<blockquote>\n        TODO: Eclipse plugins: which one is maintained?\n      </blockquote>")))
 (idp9536224
  ((file installation.html)
   (html
    "<blockquote>\n        TODO: Vim users can use the built-in style, and\n        <a href=\"http://github.com/avsm/ocaml-annot\" target=\"_top\">ocaml-annot</a>\n        may also be useful.\n      </blockquote>")))
 (idp9535056
  ((file installation.html)
   (html
    "<blockquote>\n        TODO: Emacs users have tuareg and\n        <a href=\"http://www.typerex.org/\" target=\"_top\">Typerex</a>.\n      </blockquote>")))
 (idp9531488
  ((file installation.html)
   (html
    "<blockquote>\n<span><em>TODO</em></span>: the <code>.ocamlinit</code>\n        handling in OPAM is being finalised and is tracked in\n        <a href=\"https://github.com/OCamlPro/opam/issues/185\" target=\"_top\">issue\n        185</a>.\n      </blockquote>")))
 (idp9530272
  ((file installation.html)
   (html
    "<blockquote>\n        When you run <code>utop</code> with this initialization\n        file, it should start up with Core opened and ready to use.\n      </blockquote>")))
 (idp9526336
  ((file installation.html)
   (html
    "<blockquote>\n        The <code>utop</code> tool provides a convenient\n        interactive toplevel, with full command history, command macros\n        and module name completion. The <code>~/.ocamlinit</code>\n        file in your home directory initialises <code>utop</code>\n        with common libraries and syntax extensions, so you don't need\n        to type them in every time. A good default you should create for\n        the examples in this book is:\n      </blockquote>")))
 (idp9525888
  ((file installation.html)
   (html
    "<blockquote>\n        TODO: explain OCamlfind here.\n      </blockquote>")))
 (idp9520928
  ((file installation.html)
   (html
    "<blockquote>\n        Remember from earlier that OPAM never installs files directly\n        into your system directories, and this applies to\n        <code>utop</code> too. You'll find the binary in\n        <code>~/.opam/4.00.1+short-types/bin</code>. However, just\n        typing in <code>utop</code> from your shell should just\n        work, due to the <code>opam config env</code> step which\n        configures your shell. Don't forget to automate this as\n        described earlier, as it makes life much easier when developing\n        OCaml code!\n      </blockquote>")))
 (idp9519584
  ((file installation.html)
   (html
    "<blockquote>\n        The <code>utop</code> package us an interactive\n        command-line interface to OCaml that has tab-completion,\n        persistent history and integration with Emacs so that you can\n        run it within your editing environment.\n      </blockquote>")))
 (idp9517488
  ((file installation.html)
   (html
    "<blockquote>\n        There's one last tool you need before getting started on the\n        examples. The default <code>ocaml</code> command gives us\n        an interactive command-line to experiment with code without\n        compiling it. However, it's quite a spartan experience and so we\n        use a more modern alternative.\n      </blockquote>")))
 (idp9514832
  ((file installation.html)
   (html
    "<blockquote>\n<code>async</code> is the network programming library\n          that we use in Part II to communicate with other hosts. You\n          can skip this for the initial installation until you get to\n          Part II, if you prefer.\n        </blockquote>")))
 (idp9513152
  ((file installation.html)
   (html
    "<blockquote>\n<code>core_extended</code> contains a number of\n          experimental, but useful, extension libraries that are under\n          review for inclusion in Core. We use some of these in places,\n          but much less than Core itself.\n        </blockquote>")))
 (idp9511600
  ((file installation.html)
   (html
    "<blockquote>\n<code>core</code> is the main, well-supported Core\n          distribution from Jane Street.\n        </blockquote>")))
 (idp9510480
  ((file installation.html)
   (html
    "<blockquote>\n      This will take about five minutes to install, and install a series\n      of packages. OPAM figures out the dependencies you need\n      automatically, but the three packages that really matter are:\n    </blockquote>")))
 (idp9509280
  ((file installation.html)
   (html
    "<blockquote>\n      Finally, we're ready to install the Core libraries. Run this:\n    </blockquote>")))
 (idp9505408
  ((file installation.html)
   (html
    "<blockquote>\n      This evaluates the results of running\n      <code>opam config env</code> in your current shell, and sets\n      the variables so that subsequent commands will use them. This only\n      works with your current shell, and it can be automated for all\n      future shells by adding the line to your login scripts. On MacOS X\n      or Debian, this is usually the <code>~/.bash_profile</code>\n      file if you're using the default shell. If you've switched to\n      another shell, it might be <code>~/.zshrc</code> instead.\n      OPAM isn't unusual in this approach; the SSH\n      <code>ssh-agent</code> also works similarly, so if you're\n      having any problems just hunt around in your configuration scripts\n      to see how that's being invoked.\n    </blockquote>")))
 (idp9503152
  ((file installation.html)
   (html
    "<blockquote>\n      When the compilation finishes, you'll see some instructions about\n      environment variables. OPAM never installs files into your system\n      directories (which would require administrator privileges).\n      Instead, it puts them into your home directory by default, and can\n      output a set of shell commands which configures your shell with\n      the right <code>PATH</code> variables so that packages will\n      just work. This requires just one command:\n    </blockquote>")))
 (idp9500992
  ((file installation.html)
   (html
    "<blockquote>\n      The new compiler will be installed into\n      <code>~/.opam/4.00.1+short-types</code> and any libraries\n      you install for it will be tracked separately from your system\n      installation. You can have any number of compilers installed\n      simultaneously, but only one can be active at any time. Browse\n      through the available compilers by running\n      <code>opam switch list</code>.\n    </blockquote>")))
 (idp9499296
  ((file installation.html)
   (html
    "<blockquote>\n      This step will take about 5-10 minutes on a modern machine, and\n      will download and install (within the <code>~/.opam</code>\n      directory) a custom OCaml compiler. OPAM supports multiple such\n      installations, and you'll find this very useful if you ever decide\n      to hack on the internals of the compiler itself, or you want to\n      experiment with the latest release without sacrificing your\n      current installation. You only need to install this compiler once,\n      and future updates will be much faster as they only recompile\n      libraries within the compiler installation.\n    </blockquote>")))
 (idp9496624
  ((file installation.html)
   (html
    "<blockquote>\n      The most important package we need to install is Core, which is\n      the replacement standard library that all of the examples in this\n      book use. Before doing this, let's make sure you have exactly the\n      right compiler version you need. We've made some minor\n      modifications to the way the OCaml compiler displays type\n      signatures, and the next command will install a patched\n      <code>4.00.1</code> compiler with this functionality\n      enabled.\n    </blockquote>")))
 (idp9494576
  ((file installation.html)
   (html
    "<blockquote>\n      You only need to run this command once, and it will create the\n      <code>~/.opam</code> directory and sync with the latest\n      package list from the online OPAM database.\n      <code>opam list</code> will list these, but don't install\n      any just yet.\n    </blockquote>")))
 (idp9493408
  ((file installation.html)
   (html
    "<blockquote>\n      Begin by initialising the OPAM package database.\n    </blockquote>")))
 (idp9489712
  ((file installation.html)
   (html
    "<blockquote>\n      The entire OPAM package database is held in the\n      <code>.opam</code> directory in your home directory,\n      including compiler installations. On Linux and MacOS X, this will\n      be the <code>~/.opam</code> directory. You shouldn't switch\n      to an admin user to install packages as nothing will be installed\n      outside of this directory. If you run into problems, just delete\n      the whole <code>~/.opam</code> directory and follow the\n      installations instructions from the <code>opam init</code>\n      stage again.\n    </blockquote>")))
 (idp9487888
  ((file installation.html)
   (html "<blockquote>\n        TODO\n      </blockquote>")))
 (idp9486240
  ((file installation.html)
   (html "<blockquote>\n        TODO\n      </blockquote>")))
 (idp9481920
  ((file installation.html)
   (html
    "<blockquote>\n        If the binary packages aren't suitable, you need to install the\n        latest OPAM release from source. The distribution only requires\n        the OCaml compiler to be installed, so this should be pretty\n        straightforward. Download the latest version, which is always\n        marked with a <code>stable</code> tag on the project\n        <a href=\"https://github.com/OCamlPro/opam/tags\" target=\"_top\">homepage</a>.\n      </blockquote>")))
 (idp9481104
  ((file installation.html)
   (html
    "<blockquote>\n        The OPAM instructions will be simplified when integrated\n        upstream into Debian and Fedora, which is ongoing. Until then,\n        we're leaving source-code installation instructions here. Please\n        leave a comment with any amended instructions you encounter\n      </blockquote>")))
 (idp9479088
  ((file installation.html)
   (html
    "<blockquote>\n        When this is done, update your packages and install OPAM. You\n        can ignore the warning about unsigned packages, which will\n        disappear when OPAM is upstreamed into Debian mainline.\n      </blockquote>")))
 (idp9477120
  ((file installation.html)
   (html
    "<blockquote>\n        There are experimental binary packages available for Debian\n        Wheezy/amd64. Just add the following line to your\n        <code>/etc/apt/sources.list</code>:\n      </blockquote>")))
 (idp9474768
  ((file installation.html)
   (html
    "<blockquote>\n        And on MacPorts, install it like this:\n      </blockquote>")))
 (idp9473520
  ((file installation.html)
   (html
    "<blockquote>\n        Source installation of OPAM will take a minute or so on a modern\n        machine. There is a Homebrew package for the latest OPAM:\n      </blockquote>")))
 (idp9469856
  ((file installation.html)
   (html
    "<blockquote>\n      OPAM maintains multiple compiler and library installations, but\n      this can clash with a global installation of the\n      <code>ocamlfind</code> tool. Uninstall any existing copies\n      of <code>ocamlfind</code> before installing OPAM.\n      <span><em>Reviewers</em></span>: this has since been fixed in\n      OCaml-4.01.0.\n    </blockquote>")))
 (idp9466912
  ((file installation.html)
   (html
    "<blockquote>\n      Before installing OPAM, make sure that you have the OCaml compiler\n      installed as described above. Once installed, the entire OPAM\n      database is held in your home directory (normally\n      <code>$HOME/.opam</code>). If something goes wrong, just\n      delete this <code>.opam</code> directory and start over from\n      a clean slate. If youre using a version of OPAM you've installed\n      previously, please ensure you have at least version 0.9.3 or\n      greater.\n    </blockquote>")))
 (idp9466192
  ((file installation.html)
   (html
    "<blockquote>\n      OPAM manages multiple simultaneous OCaml compiler and library\n      installations, tracks library versions across upgrades, and\n      recompiles dependencies automatically if they get out of date.\n      It's used throughout Real World OCaml as the mechanism to retrieve\n      and use third-party libraries.\n    </blockquote>")))
 (idp9462080
  ((file installation.html)
   (html
    "<blockquote>\n        Once the installation is completed into this custom location,\n        you will need to add <code>$HOME/my-ocaml/bin</code> to\n        your <code>PATH</code>, normally by editing the\n        <code>~/.bash_profile</code> file. You shouldn't really to\n        do this unless you have special reasons, so try to install\n        binary packages before trying a source installation.\n      </blockquote>")))
 (idp9460048
  ((file installation.html)
   (html
    "<blockquote>\n        The final step requires administrator privilege to install in\n        your system directory. You can also install it in your home\n        directory by passing the <code>prefix</code> option to the\n        configuration script:\n      </blockquote>")))
 (idp9457264
  ((file installation.html)
   (html
    "<blockquote>\n        To install OCaml from source code, first make sure that you have\n        a C compilation environment (usually either\n        <code>gcc</code> or <code>llvm</code> installed)\n      </blockquote>")))
 (idp9455408
  ((file installation.html)
   (html
    "<blockquote>\n        Windows is not currently supported by the examples in Real World\n        OCaml, although it is being worked on. Until that's ready, we\n        recommend using a virtual machine running Debian Linux on your\n        local machine.\n      </blockquote>")))
 (idp9453696
  ((file installation.html)
   (html "<blockquote>\n        TODO: Arch Linux\n      </blockquote>")))
 (idp9453264
  ((file installation.html)
   (html "<blockquote>\n        TODO: Fedora / RHEL\n      </blockquote>")))
 (idp9451776
  ((file installation.html)
   (html
    "<blockquote>\n        Notice that we've installed a few more packages than just the\n        OCaml compiler here. The second command line installs enough\n        system packages to let you build your own OCaml packages. You\n        may find that some OCaml libraries require more system libraries\n        (for example, <code>libssl-dev</code>), but we'll\n        highlight these in the book when we introduce the library.\n      </blockquote>")))
 (idp9450144
  ((file installation.html)
   (html
    "<blockquote>\n        On Debian Linux, you should install OCaml via binary packages.\n        You'll need at least OCaml version 3.12.1 to bootstrap OPAM,\n        which means using Debian Wheezy or greater. Don't worry about\n        getting the absolute latest version of the compiler, as you just\n        need one new enough to compile the OPAM package manager, after\n        which you use OPAM to manage your compiler installation.\n      </blockquote>")))
 (idp9446928
  ((file installation.html)
   (html
    "<blockquote>\n        Another popular package manager on MacOS X is\n        <a href=\"http://macports.org\" target=\"_top\">MacPorts</a>, which also\n        has an OCaml port:\n      </blockquote>")))
 (idp9446288
  ((file installation.html)
   (html
    "<blockquote>\n        The Perl-compatible Regular Expression library (PCRE) is used by\n        the Core suite. It's not strictly needed to use OCaml, but is a\n        commonly used library that we're installing now to save time\n        later.\n      </blockquote>")))
 (idp9444304
  ((file installation.html)
   (html
    "<blockquote>\n        The\n        <a href=\"http://github.com/mxcl/homebrew\" target=\"_top\">Homebrew</a>\n        package manager has an OCaml installer, which is usually updated\n        pretty quickly to the latest stable release.\n      </blockquote>")))
 (idp9442576
  ((file installation.html)
   (html
    "<blockquote>\n      The OCaml compiler is available as a binary distribution on many\n      operating systems. This is the simplest and preferred installation\n      route, but we'll also describe how to do a manual installation as\n      a last resort.\n    </blockquote>")))
 (idp9440176
  ((file installation.html)
   (html
    "<blockquote>\n    Let's get started with how to install OCaml on various operating\n    systems, and we'll get OPAM and <code>utop</code> running\n    after that.\n  </blockquote>")))
 (idp9438688
  ((file installation.html)
   (html
    "<blockquote>\n        The <code>utop</code> interactive toplevel, a modern\n        interactive toplevel with command history and tab completion.\n      </blockquote>")))
 (idp9437792
  ((file installation.html)
   (html
    "<blockquote>\n        The OPAM source package manager, through which we'll install\n        several extra libraries.\n      </blockquote>")))
 (idp9436960
  ((file installation.html)
   (html
    "<blockquote>\n        The OCaml compiler itself.\n      </blockquote>")))
 (idp9435952
  ((file installation.html)
   (html
    "<blockquote>\n    To work through Real World OCaml, you'll need three major components\n    installed:\n  </blockquote>")))
 (idp9435104
  ((file installation.html)
   (html
    "<blockquote>\n    An important difference between OCaml and scripting languages such\n    as Python or Ruby is that the static type safety that means that you\n    can't just mix-and-match compiled libraries. Interfaces are checked\n    when libraries are compiled, so when an interface is changed, all\n    the dependent libraries must also be recompiled. Source-based\n    package managers automate this process for you and make development\n    life much easier.\n  </blockquote>")))
 (idp9434416
  ((file installation.html)
   (html
    "<blockquote>\n    The easiest way to use OCaml is via the binary packages available in\n    many operating systems. For day-to-day code development however,\n    it's much easier to use a source-code manager that lets you modify\n    individual libraries and automatically recompile all the\n    dependencies.\n  </blockquote>")))
 (idp8583248
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>ocaml # time (fun () -&gt; edit_distance (&quot;OCaml 4.01&quot;,&quot;ocaml 4.01&quot;));; Time: 2.14601ms - : int = 2</code>\n        This is about ten thousand times faster than our original\n        implementation.\n      </blockquote>")))
 (idp8582144
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And this new version of <code>edit_distance</code> is\n        indeed much more efficient than the one we started with.\n      </blockquote>")))
 (idp8577216
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This very same approach will work for\n        <code>edit_distance</code>. The one change we'll need to\n        make is that <code>edit_server</code> will now take a pair\n        of strings as a single argument, since\n        <code>memoize</code> only works sensibly for\n        single-argument functions. We can always recover the original\n        interface with a wrapper function.\n      </blockquote>")))
 (idp8574256
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can even combine this into one compact form that makes this\n        look as much as possible like an ordinary function declaration.\n        Here, we're essentially using <code>memo_fix</code> as a\n        custom form of <code>let rec</code>.\n      </blockquote>")))
 (idp8571488
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        In any case, using <code>memo_fix</code>, we can now build\n        an efficient version of <code>fib</code>.\n      </blockquote>")))
 (idp8566992
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        OCaml rejects the definition because OCaml, as a strict\n        language, can't safely construct the closure\n        <code>(fun x -&gt; f f' x)</code> until\n        <code>f'</code> itself is defined, and\n        <code>f'</code> can't be defined until\n        <code>memoize</code> runs, by which time the closure\n        already needs to exist. Generally, OCaml requires that the right\n        hand side of a <code>let rec</code> be either a function,\n        a <code>lazy</code> value or a variant or record\n        constructor.\n      </blockquote>")))
 (idp8563920
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        It's not obvious why we need to use laziness here. It seems like\n        you should be able to get away with just dropping the the\n        <code>lazy</code> and the <code>Lazy.force</code>\n        from the above code, as follows.\n      </blockquote>")))
 (idp8561312
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This is clever enough, but all we've done so far is find a new\n        way to implement the same old slow Fibonacci function. To make\n        it faster, we need a function like <code>fix</code> that\n        inserts memoization when it ties the recursive knot. Here is\n        just such a function.\n      </blockquote>")))
 (idp8557440
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This is a pretty strange piece of code, and it may take a few\n        minutes of staring at this to figure out what's going on. Like\n        <code>fib_recur</code>, the function <code>f</code>\n        passed into <code>fix</code> is a function that isn't\n        recursive, but takes as an argument of a function that it will\n        call. What <code>fix</code> does is to essentially feed\n        <code>f</code> to itself, thus making a true recursive\n        function.\n      </blockquote>")))
 (idp8554976
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And we can even write a polymorphic function that we'll call\n        <code>fix</code> that can tie the recursive not for any\n        function of this form.\n      </blockquote>")))
 (idp8553472
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can now turn this back into an ordinary Fibonacci function by\n        tying the recursive knot, as shown below.\n      </blockquote>")))
 (idp8550400
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The first step is to write <code>fib</code> in a way that\n        partially unwinds the recursion. The following definition of\n        <code>fib_recur</code> expects as its first argument to be\n        passed a function that it can use for making its recursive\n        calls.\n      </blockquote>")))
 (idp8548464
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        So, how can we use memoization to make this faster? The tricky\n        bit is that we need to insert the memoization before the\n        recursive calls within <code>fib</code>. We can't just\n        define <code>fib</code> in the ordinary way and memoize it\n        after the fact and expect any improvement.\n      </blockquote>")))
 (idp8546368
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Here, <code>fib 40</code> takes almost a minute to\n        compute, as opposed to five <span><em>milliseconds</em></span>\n        for <code>fib 20</code>.\n      </blockquote>")))
 (idp8542240
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>ocaml # let rec fib i =     if i &lt;= 1 then 1 else fib (i - 1) + fib (i - 2);;</code>\n        This is, however, exponentially slow, for the same reason that\n        <code>edit_distance</code> was slow: we end up making many\n        redundant calls to <code>fib</code>. It shows up quite\n        dramatically in the performance.\n      </blockquote>")))
 (idp8539392
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Memoization would be a huge help here, but to fix the problem,\n        we need to memoize the calls that\n        <code>edit_distance</code> makes to itself. To see how to\n        do this, let's step away from <code>edit_distance</code>,\n        and instead consider a much simpler example: computing the nth\n        element of the Fibonacci sequence. The Fibonacci sequence by\n        definition starts out with two <code>1</code>'s, with\n        every subsequent element being the sum of the previous two. The\n        classic recursive definition of Fibonacci is as follows:\n      </blockquote>")))
 (idp8538896
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Just those few extra characters made it almost 4000 times\n        slower!\n      </blockquote>")))
 (idp8537280
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And now we can use this to try out some examples.\n      </blockquote>")))
 (idp8534128
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        As you can see, some of these calls are repeats. For example,\n        there are two different calls to\n        <code>edit_distance &quot;OCam&quot; &quot;oca&quot;</code>.\n        The number of redundant calls grows exponentially with the size\n        of the strings, meaning that our implementation of\n        <code>edit_distance</code> is brutally slow for large\n        strings. We can see this by writing a small timing function.\n      </blockquote>")))
 (idp8532272
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And these calls will in turn dispatch other calls:\n      </blockquote>")))
 (idp8530208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The thing to note is that if you call\n        <code>edit_distance &quot;OCaml&quot; &quot;ocaml&quot;</code>,\n        then that will in turn dispatch the following calls:\n      </blockquote>")))
 (idp8527568
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Consider the following code for computing the edit distance.\n        Understanding the algorithm isn't important here, but you should\n        pay attention to the structure of the recursive calls.\n      </blockquote>")))
 (idp8526048
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Memoization can be useful whenever you have a function that is\n        expensive to recompute, and you don't mind caching old values\n        indefinitely. But memoization is also useful for efficiently\n        implementing some recursive algorithms. One good example is the\n        algorithm for computing the <span><em>edit distance</em></span>\n        (also called the Levenshtein distance) between two strings. The\n        edit distance is the number of single-character changes\n        (including letter switches, insertions and deletions) required\n        to convert one string to the other. This kind of distance metric\n        can be useful for a variety of approximate string matching\n        problems, like spell checkers.\n      </blockquote>")))
 (idp8524832
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that we use <code>Hashtbl.Poly.create</code> to\n        create a hash table using OCaml's built-in polymorphic hash\n        function. It's also possible to create a hash-table using a hash\n        function specialized to a given type.\n      </blockquote>")))
 (idp8521616
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Here's a function that takes as an argument an arbitrary\n        single-argument function and returns a memoized version of that\n        function. Here we'll use Core's <code>Hashtbl</code>\n        module, rather than our toy <code>Dictionary</code>.\n      </blockquote>")))
 (idp8520624
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Another unobservable effect is <span><em>memoization</em></span>.\n        A memoized function remembers the result of previous invocations\n        of the function so that they can be returned without further\n        computation when the same arguments are presented again.\n      </blockquote>")))
 (idp8517968
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The main difference between our implementation of laziness and the\n      built-in version is syntax. Rather than writing\n      <code>create_lazy (fun () -&gt; sqrt 16.)</code>, we can\n      just write <code>lazy (sqrt 16.)</code>.\n    </blockquote>")))
 (idp8516000
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Which we can use in the same way we used\n      <code>Lazy.force</code>:\n    </blockquote>")))
 (idp8514256
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now we just need a way to force a lazy value. The following\n      function does just that.\n    </blockquote>")))
 (idp8512032
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We can create a lazy value based on a thunk,\n      <span><em>i.e.</em></span>, a function that takes a unit argument.\n      Wrapping an expression in a thunk is another way to suspend the\n      computation of an expression.\n    </blockquote>")))
 (idp8507456
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      A <code>lazy_state</code> represents the possible states of\n      a lazy value. A lazy value is <code>Delayed</code> before it\n      has been run, where <code>Delayed</code> holds a function\n      for computing the value in question. A lazy value is in the\n      <code>Value</code> state when it has been forced and the\n      computation ended normally. The <code>Exn</code> case is for\n      when the lazy value has been forced, but the computation ended\n      with an exception. A lazy value is just a reference to a\n      <code>lazy_state</code>.\n    </blockquote>")))
 (idp8505664
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      To better understand how laziness works, let's walk through the\n      implementation of our own lazy type. We'll start by declaring\n      types to represent a lazy value.\n    </blockquote>")))
 (idp8504528
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      You can see from the print statement that the actual computation\n      was performed only once, and only after <code>force</code>\n      had been called.\n    </blockquote>")))
 (idp8500368
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      One of the simplest unobservable effect is\n      <span><em>laziness</em></span>. A lazy value is one that is not\n      computed until it is actually needed. In OCaml, lazy values are\n      created using the <code>lazy</code> keyword, which can be\n      used to prefix any expression, returning a value of type\n      <code>'a Lazy.t</code>. The evaluation of that expression is\n      delayed until forced with the <code>Lazy.force</code>\n      function.\n    </blockquote>")))
 (idp8499136
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There are many instances where you basically want to program in a\n      pure style, but you want to make limited use of side-effects to\n      improve the performance of your code, without really changing\n      anything else. Such side effects are sometimes called\n      <span><em>unobservable effects</em></span>, and they are a useful\n      way of leveraging OCaml's imperative features while still\n      maintaining most of the benefits of pure programming.\n    </blockquote>")))
 (idp8490304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>Dlist</code> has two such iterators:\n        <code>iter</code>, the goal of which is to call a\n        <code>unit</code> producing function on every element of\n        the list, in order; and <code>find_el</code>, which runs a\n        provided test function on each values stored in the list,\n        returning the first <code>element</code> that passes the\n        test. Both <code>iter</code> and\n        <code>find_el</code> are implemented using simple\n        recursive loops that use <code>next</code> to walk from\n        element to element, and <code>value</code> to extract the\n        element from a given node.\n      </blockquote>")))
 (idp8487776
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        When defining containers like lists, dictionaries and trees,\n        you'll typically want to define a set of iteration functions,\n        like <code>iter</code>, <code>map</code>, and\n        <code>fold</code>, which let you concisely express common\n        iteration patterns.\n      </blockquote>")))
 (idp8485168
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This shouldn't be a big surprise. Complex imperative data\n        structures can be quite tricky; considerably trickier than their\n        pure equivalents. The issues described above can be dealt with\n        by more careful error detection, and such error correction is\n        taken care of in modules like Core's\n        <code>Doubly_linked</code>. You should use imperative data\n        structures from a well-designed library when you can. And when\n        you can't, you should make sure that the code you write is\n        careful about error detection.\n      </blockquote>")))
 (idp8483760
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        These functions are more fragile than they may seem. In\n        particular, misuse of the interface may lead to corrupted data.\n        For example, double-removing an element will cause the main list\n        reference to be set to <code>None</code>, thus emptying\n        the list. Similar problems arise from removing an element from a\n        list it doesn't belong to.\n      </blockquote>")))
 (idp8481184
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that the above code is careful to change the\n        <code>prev</code> pointer of the following element, and\n        the <code>next</code> pointer of the previous element, if\n        they exist. If there's no previous element, then the list\n        pointer itself is updated. In any case, the next and previous\n        pointers of the element itself are set to\n        <code>None</code>.\n      </blockquote>")))
 (idp8478896
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Finally, we need a <code>remove</code> function.\n      </blockquote>")))
 (idp8475920
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        In order to add elements later in the list, we can use\n        <code>insert_after</code>, which takes an\n        <code>element</code> as an argument, after which it\n        inserts a new element.\n      </blockquote>")))
 (idp8470800
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>insert_first</code> first defines a new element\n        <code>new_elt</code>, and then links it into the list,\n        finally setting the the list itself to point to\n        <code>new_elt</code>. Note that the precedence of a\n        <code>match</code> expression is very low, so to separate\n        it from the following assignment\n        <code>l := Some new_front</code>, we surround the match in\n        a <code>begin ... end</code> bracketing (we could also use\n        parentheses). If we did not, the final assignment would become\n        part of the <code>None -&gt; ...</code> case, which is not\n        what we want.\n      </blockquote>")))
 (idp8468464
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Now, we'll start considering operations that mutate the list,\n        starting with <code>insert_first</code>, which inserts an\n        element at the front of the list.\n      </blockquote>")))
 (idp8466944
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This approach is quite limited, however. General purpose cyclic\n      data structures require mutation.\n    </blockquote>")))
 (idp8464672
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There is an exception to this, though: you can construct\n      fixed-size cyclic data-structures using\n      <code>let rec</code>.\n    </blockquote>")))
 (idp8463904
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Doubly-linked lists are a cyclic data structure, meaning that it\n      is possible to follow a nontrivial sequence of pointers that\n      closes in on itself. In general, building cyclic data structures\n      requires the use of side-effects. This is done by constructing the\n      data elements first, and then adding cycles using assignment\n      afterwards.\n    </blockquote>")))
 (idp8462896
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      These all follow relatively straight-forwardly from our type\n      definitions.\n    </blockquote>")))
 (idp8461376
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now we can define a few basic functions that operate on lists and\n      elements.\n    </blockquote>")))
 (idp8458496
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The type of the list itself, <code>'a t</code>, is an\n      optional, mutable reference to an <code>element</code>. This\n      reference is <code>None</code> if the list is empty, and\n      <code>Some</code> otherwise.\n    </blockquote>")))
 (idp8454784
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      An <code>'a element</code> is a record containing the value\n      to be stored in that node as well as optional (and mutable) fields\n      pointing to the previous and next elements. At the beginning of\n      the list, the <code>prev</code> field is\n      <code>None</code>, and at the end of the list, the\n      <code>next</code> field is <code>None</code>.\n    </blockquote>")))
 (idp8451984
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now let's look at the implementation. We'll start by defining\n      <code>'a element</code> and <code>'a t</code>.\n    </blockquote>")))
 (idp8450064
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note that there are two types defined here:\n      <code>'a t</code>, the type of a list, and\n      <code>'a element</code>, the type of an element. Elements\n      act as pointers to the interior of a list, and allow us to\n      navigate the list and give us a point at which to apply mutating\n      operations.\n    </blockquote>")))
 (idp8446976
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Here's the <code>mli</code> of the module we'll build.\n    </blockquote>")))
 (idp8445552
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Another common imperative data structure is the doubly-linked\n      list. Doubly-linked lists can be traversed in both directions and\n      elements can be added and removed from the list in constant time.\n      Core defines a doubly-linked list (the module is called\n      <code>Doubly_linked</code>) which is a good choice for real\n      work, but we'll define our own as an illustration.\n    </blockquote>")))
 (idp8442208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      In the above, we used <code>incr</code> and\n      <code>decr</code>, which are functions for incrementing and\n      decrementing an <code>int ref</code> by one, respectively.\n    </blockquote>")))
 (idp8439248
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      A <code>while</code>-loop on the other hand, takes a\n      condition and a body, and repeatedly runs the body until the\n      condition is false. Here's a simple example of a function for\n      reversing an array in-place.\n    </blockquote>")))
 (idp8437008
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      As you can see, the upper and lower bounds are inclusive. We can\n      also use <code>downto</code> to iterate in the other\n      direction.\n    </blockquote>")))
 (idp8432304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The <code>for</code> loop is the simpler of the two. Indeed,\n      we've already seen the <code>for</code> loop in action ---\n      the <code>iter</code> function in\n      <code>Dictionary</code> is built using it. Here's a simple\n      example of <code>for</code>.\n    </blockquote>")))
 (idp8430560
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Nonetheless, explicit <code>for</code> and\n      <code>while</code> loops are both more idiomatic for\n      imperative programming and often more concise.\n    </blockquote>")))
 (idp8427968
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      OCaml provides support for traditional imperative looping\n      constructs, in particular, <code>for</code> and\n      <code>while</code> loops, even though neither of them is\n      strictly necessary. Anything you can do with such a loop you can\n      also do with a recursive function, and you can also write\n      higher-order functions like <code>Array.iter</code> that\n      cover much of the same ground.\n    </blockquote>")))
 (idp8425136
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        More generally, when you wrap a library for use in OCaml, you'll\n        often find yourself introducing new imperative operations to the\n        language.\n      </blockquote>")))
 (idp8422976
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Another source of imperative operations in OCaml is resources\n        that come from interfacing with some external library through\n        OCaml's foreign function interface (FFI). The FFI opens OCaml up\n        to any imperative construct that is exported by a system call, a\n        C library, or any other external resource that you connect to.\n        Many of these come built in, like access to the\n        <code>write</code> system call, or to the\n        <code>clock</code>; while others come from user libraries,\n        like LAPACK bindings.\n      </blockquote>")))
 (idp8418992
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          There's nothing magic about a <code>ref</code>: it's\n          really just a record. The <code>ref</code> type and its\n          associated operations are defined as follows.\n        </blockquote>")))
 (idp8417600
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          You can see these in action below.\n        </blockquote>")))
 (idp8416240
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>refcell := expr</code> replaces the contents\n              of the reference cell.\n            </blockquote>")))
 (idp8414768
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>!refcell</code> returns the contents of the\n              reference cell.\n            </blockquote>")))
 (idp8412624
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>ref expr</code> constructs a reference cell\n              containing the value defined by the expression\n              <code>expr</code>.\n            </blockquote>")))
 (idp8411600
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          The standard library defines the following operators for\n          working with refs.\n        </blockquote>")))
 (idp8410112
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          Variables in OCaml are never mutable --- they can refer to\n          mutable data, but what the variable points to can't be\n          changed. Sometimes, though, you want to do exactly what you\n          would do with a mutable variable in another language: define a\n          single, mutable value. In OCaml this is typically achieved\n          using a <code>ref</code>, which is essentially a\n          container with a single, mutable value.\n        </blockquote>")))
 (idp8408192
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        As we'll see in\n        <a href=\"object-oriented-programming.html\">Chapter\194\1609, <i>Object Oriented Programming</i></a>, fields\n        of an object can similarly be declared as mutable, and can then\n        be modified in much the same way as with records.\n      </blockquote>")))
 (idp8405984
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        As we've seen, records are immutable by default, but individual\n        record fields can be declared as mutable. These mutable fields\n        can be set using the <code>&lt;-</code> operator,\n        <span><em>i.e.</em></span>,\n        <code>record.field &lt;- expr</code>.\n      </blockquote>")))
 (idp8402528
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        A bigarray is a handle to a block of memory stored outside of\n        the OCaml heap. These are mostly useful for interacting with C\n        or Fortran libraries, and are discussed in\n        <a href=\"\">???</a>.\n        Bigarrays too have their own getting and setting syntax:\n        <code>bigarray.{index}</code> and\n        <code>bigarray.{index} &lt;- expr</code>.\n      </blockquote>")))
 (idp8400688
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Strings also come with their own syntax for getting and setting\n        values: <code>string.[index]</code> and\n        <code>string.[index] &lt;- expr</code> respectively, and\n        string literals are bounded by quotes.\n      </blockquote>")))
 (idp8397328
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Strings are essentially byte-arrays, with some extra useful\n        functions in the <code>String</code> module for dealing\n        with textual data in this form. The main reason to use a\n        <code>String.t</code> rather than a\n        <code>Char.t array</code> (a <code>Char.t</code> is\n        an 8-bit character) is that the former is considerably more\n        space efficient; an array uses one word --- 8 bytes on a 64-bit\n        machine --- to store a single entry, whereas strings use one\n        byte per character.\n      </blockquote>")))
 (idp8393712
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Arrays also come with a special syntax for getting an element\n        from an array: <code>array.(index)</code>; and for setting\n        an element: <code>array.(index) &lt;- expr</code>. Literal\n        arrays can be declared using <code>[|</code> and\n        <code>|]</code> as delimiters. Thus,\n        <code>[| 1; 2; 3 |]</code> is an integer array.\n      </blockquote>")))
 (idp8390080
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        OCaml supports a number of array-like data structures;\n        <span><em>i.e.</em></span>, integer-indexed containers. The\n        <code>array</code> type is one example, and the\n        <code>Array</code> module comes with a variety of mutable\n        operations on arrays, including <code>Array.set</code>,\n        which modifies an individual element, and\n        <code>Array.blit</code>, which efficiently copies a range\n        of values in an array.\n      </blockquote>")))
 (idp8388544
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We've already encountered two different forms of mutable data:\n      records with mutable fields, and arrays. These are two of the\n      building blocks of imperative programming in OCaml. We discuss\n      those, and a few others, below.\n    </blockquote>")))
 (idp8386848
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note also that we do all of the side-effecting operations at the\n      very end of each function. This is good practice because it\n      minimizes the chance that such operations will be interrupted with\n      an exception, leaving the data structure in an inconsistent state.\n    </blockquote>")))
 (idp8383744
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Also note, the precedence of a <code>match</code> expression\n      is very low, so to separate it from the following assignment\n      <code>l := Some new_front</code>, we surround the match in a\n      <code>begin ... end</code> bracketing (we could also use\n      parentheses). If we did not, the final assignment would become\n      part of the <code>None -&gt; ...</code> case, which is not\n      what we want.\n    </blockquote>")))
 (idp8380432
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      It's also worth noting that <code>;</code> is a\n      <span><em>separator</em></span>, not a terminator as it is in C or\n      Java. The compiler is somewhat relaxed about parsing a terminating\n      semicolon, so it may work for you, but you should not rely on it.\n      Here is an example where we're using <code>;</code> as if it\n      were a terminator\n    </blockquote>")))
 (idp8374224
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      In general, when a sequence expression\n      <code>expr1; expr2</code> is evaluated,\n      <code>expr1</code> is evaluated first, and then\n      <code>expr2</code>. The expression <code>expr1</code>\n      must have type <code>unit</code>, and the the value of\n      <code>expr2</code> is returned as the value of the entire\n      sequence. For example, the sequence\n      <code>print_string &quot;hello world&quot;; 1 + 2</code>\n      first prints the string\n      <code>&quot;hello world&quot;</code>, then returns the\n      integer <code>3</code>.\n    </blockquote>")))
 (idp8372352
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>ocaml     let () = t.buckets.(i) &lt;- filtered_bucket in     let () = t.length &lt;- t.length - 1 in</code>\n      but <code>;</code> is more idiomatic.\n    </blockquote>")))
 (idp8371120
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We also use a single semicolon, <code>;</code>, as a\n      sequencing operator, to allow us to do two side-effecting\n      operations in a row: first, update the bucket, then update the\n      count. We could have done this using let bindings:\n    </blockquote>")))
 (idp8368864
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We use the <code>&lt;-</code> operator for updating elements\n      of an array (<code>array.(i) &lt;- expr</code>) and for\n      updating a record field\n      (<code>record.field &lt;- expression</code>).\n    </blockquote>")))
 (idp8366960
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The above code is for adding and removing mappings from the\n      dictionary. This section is made more complicated by the fact that\n      we need to detect whether we are overwriting or removing an\n      existing binding, so we can decide whether\n      <code>t.length</code> needs to be changed. The helper\n      function <code>bucket_has_key</code> is used for this\n      purpose.\n    </blockquote>")))
 (idp8360016
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The code for <code>iter</code> uses two forms of iteration:\n      a <code>for</code> loop to iterate over the array of\n      buckets; and within that loop, and a call to\n      <code>List.iter</code> to walk over the list of values in a\n      given bucket. <code>for</code> loops are not of fundamental\n      importance to the language: instead of using\n      <code>for</code>, we could have implemented the outer loop\n      using the <code>Array.iter</code>, which in turn could be\n      implemented as a recursive function. But <code>for</code> is\n      syntactically convenient, and is often more familiar and idiomatic\n      when coding imperatively.\n    </blockquote>")))
 (idp8355680
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>iter</code> is designed to walk over all the entries\n      in the dictionary. In particular, <code>iter d ~f</code>\n      will call <code>f</code> for each key/value pair in\n      dictionary <code>d</code>. Note that <code>f</code> is\n      expected to return <code>unit</code>, since it is expected\n      to work by side effect rather than by returning a value.\n    </blockquote>")))
 (idp8348864
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There's also code for <code>create</code>, which creates an\n      empty dictionary, <code>length</code>, which grabs the\n      length from the corresponding record field, and\n      <code>find</code>, which looks for a matching key in the\n      table using <code>List.find_map</code> on the corresponding\n      bucket. (<code>List.find_map</code> takes a list, and a\n      function for transforming the list elements to options, returning\n      a list of the contents of the returned <code>Some</code>s.)\n      In <code>find</code>, you'll notice that we make use of the\n      <code>array.(index)</code> syntax for looking up a value in\n      an array.\n    </blockquote>")))
 (idp8345392
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now we define the function for choosing a hash-bucket based on the\n      key. We do this using <code>Hashtbl.hash</code> to compute\n      hash values. <code>Hashtbl.hash</code> is a special function\n      provided by the OCaml runtime that can compute a hash for almost\n      any OCaml value. It's type is <code>'a -&gt; int</code>, so\n      it can be applied to a value of any type. (While it can be applied\n      to any type, it won't succeed for all values.\n      <code>Hashtbl.hash</code> will throw an exception if it\n      encounters a value it can't handle, like a function or a value\n      from a C libraries that lives outside the OCaml heap.)\n    </blockquote>")))
 (idp8341888
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Our first step is to define the type of a dictionary as a record\n      with two fields. The first field, <code>length</code> is\n      declared as mutable. In OCaml, records are immutable by default,\n      but individual fields are mutable when marked as such. The second\n      field, <code>buckets</code>, is immutable, but contains an\n      array, which is itself a mutable data structure, as we'll see.\n    </blockquote>")))
 (idp8340288
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The implementation is shown below. We'll go through the code bit\n      by bit, explaining different imperative constructs as they show\n      up.\n    </blockquote>")))
 (idp8336432
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The type <code>('a, 'b) t</code> is used to represent a\n      dictionary with keys of type <code>'a</code> and data of\n      type <code>'b</code>. The <code>mli</code> also\n      includes a collection of helper functions. Notice that a number of\n      the functions, in particular, ones like <code>add</code>\n      that modify the dictionary, return unit. This is typical of\n      functions that act by side-effect.\n    </blockquote>")))
 (idp8334208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      First, we'll write down the <code>mli</code> for our\n      dictionary.\n    </blockquote>")))
 (idp8332960
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We'll implement our dictionary as a hash table, based on an\n      <span><em>open hashing</em></span> scheme, which is to say it will\n      be structured as an array of buckets, with each bucket containing\n      a list of key/value pairs that have been hashed into that bucket.\n      For simplicity's sake, we'll use a fixed-length bucket array,\n      though growing the bucket array as more elements are added would\n      be necessary for a practical implementation.\n    </blockquote>")))
 (idp8331744
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We'll walk through the implementation of a simple imperative\n      dictionary, <span><em>i.e.</em></span>, a mutable mapping from keys\n      to values. Both Core and OCaml's standard library provide multiple\n      data structures for implementing such dictionaries, and for most\n      real world tasks, you should use one of those. But we'll walk\n      through this nonetheless as a way of seeing OCaml's imperative\n      constructs in action.\n    </blockquote>")))
 (idp8330160
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    OCaml offers a happy compromise here, making it easy and natural to\n    program in a pure style, but also providing great support for\n    imperative programming where you need it. This chapter will walk you\n    through OCaml's imperative features, and help you use them to their\n    fullest.\n  </blockquote>")))
 (idp8329152
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    Pure code is the default in OCaml, and for good reason --- it's\n    generally easier to reason about, less error prone and more\n    composeable. But imperative code is of fundamental importance to any\n    practical programming language because real-world tasks require that\n    you interact with the outside world, whether by receiving a network\n    packet or by writing data to a file. Imperative programming can also\n    be important for performance. While pure code is quite efficient in\n    OCaml, there are many algorithms that can only be implemented\n    efficiently using imperative techniques.\n  </blockquote>")))
 (idp8326992
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    Most of the code shown so far in this book, and indeed, most OCaml\n    code in general, is <span><em>pure</em></span>. Pure code works\n    without mutating the program's internal state, performing I/O,\n    reading the clock, or in any other way interacting with changeable\n    parts of the world. Thus, a pure function behaves like a\n    mathematical function, always returning the same results when given\n    the same inputs. <span><em>Imperative</em></span> code, on the other\n    hand, operates by side-effects that modify a program's internal\n    state or interacts with the outside world, and so can have a\n    different effect, and return different results, every time they're\n    called.\n  </blockquote>")))
 (idp9035264
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        We'll also return to the Github example here later in the book\n        when discussing the Async networking library, and you can find\n        the full ATD specification for Github in the\n        <a href=\"http://github.com/avsm/ocaml-github\" target=\"_top\"><code>ocaml-github</code></a>\n        repository.\n      </blockquote>")))
 (idp9032928
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The full ATD specification is quite sophisticated (and well\n        documented online at its homepage). The ATD compiler can also\n        target formats other than JSON, and also outputs code for other\n        languages such as Java if you need more interoperability. There\n        are also several similar projects you can investigate which\n        automate the code generation process:\n        <a href=\"http://piqi.org\" target=\"_top\">Piqi</a> uses the Google\n        protobuf format, and\n        <a href=\"http://thrift.apache.org\" target=\"_top\">Thrift</a> supports a\n        huge variety of other programming languages.\n      </blockquote>")))
 (idp9031440
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>-j-defaults</code>: force the output a JSON\n            value even if the specification defines it as the default\n            value for that field.\n          </blockquote>")))
 (idp9029808
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>-j-custom-fields FUNCTION</code>: call a custom\n            function for every unknown field encountered, instead of\n            raising a parsing exception.\n          </blockquote>")))
 (idp9028240
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>-j-std</code>: work in standard JSON mode, and\n            never print non-standard JSON extensions.\n          </blockquote>")))
 (idp9026288
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        This is pretty convenient! We've written a single ATD file, and\n        all the OCaml boilerplate to convert between JSON and a strongly\n        typed record has been generated for us. You can control various\n        aspects of the serializer by passing flags to\n        <code>atdgen</code>. The important ones for JSON are:\n      </blockquote>")))
 (idp9021712
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>Github_t</code> module only contains the type\n        definitions, while <code>Github_j</code> has a concrete\n        serialization module to and from JSON. You can read the\n        <code>github_j.mli</code> to see the full interface, but\n        the important functions for most uses are the conversion\n        functions to and from a string. For our example above, this\n        looks like:\n      </blockquote>")))
 (idp9018768
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        There is an obvious correspondence to the ATD definition. Note\n        in particular that field names in separate OCaml records cannot\n        shadow each other, and so we specifically prefix every field\n        with a prefix to distinguish it from other records. For example,\n        <code>&lt;ocaml field_prefix=&quot;auth_req_&quot;&gt;</code>\n        in the ATD spec prefixes every field name in the generated\n        <code>authorization_request</code> record with\n        <code>auth_req</code>.\n      </blockquote>")))
 (idp9014880
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        This will generate some new files in your current directory.\n        <code>Github_t.ml</code> and\n        <code>Github_t.mli</code> will contain an OCaml module\n        with types defines that correspond to the ATD file. It looks\n        like this:\n      </blockquote>")))
 (idp9013296
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The ATD spec can be compiled to a number of OCaml targets. Let's\n        run the compiler twice, to generate some OCaml type definitions,\n        and a JSON serialiser.\n      </blockquote>")))
 (idp9011840
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        ATD is (deliberately) similar to OCaml type definitions. Each\n        field can include extra annotations to customise the parsing\n        code for a particular backend. For example, the Github\n        <code>scope</code> field above is defined as a variant\n        type, but with the actual JSON values being defined explicitly\n        (as lower-case versions).\n      </blockquote>")))
 (idp9008704
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Let's go straight into looking at an example of how this works,\n        by using a small portion of the Github API. Github is a popular\n        code hosting and sharing website that provides a JSON-based web\n        <a href=\"http://developer.github.com\" target=\"_top\">API</a>. The ATD\n        code fragment below describes the Github authorization API. It\n        is based on a pseudo-standard web protocol known as OAuth, and\n        is used to authorized users to access Github services.\n      </blockquote>")))
 (idp9007264
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The idea behind ATD is to specify the format of the JSON in a\n        separate file, and then run a compiler\n        (<code>atdgen</code>) that outputs OCaml code to construct\n        and parse JSON values. This means that you don't need to write\n        any OCaml parsing code at all, as it will all be auto-generated\n        for you.\n      </blockquote>")))
 (idp9005840
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The combinators described earlier make it fairly easy to extract\n        fields from JSON records, but the process is still pretty\n        manual. We'll talk about how to do larger-scale JSON parsing\n        now, using a domain-specific language known as\n        <a href=\"http://oss.wink.com/atdgen/\" target=\"_top\">ATD</a>.\n      </blockquote>")))
 (idp8999984
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The only purpose of these extensions is to make the data\n          representation more expressive without having to refer to the\n          original OCaml types. You can always cast a\n          <code>Safe.json</code> to a\n          <code>Basic.json</code> type by using the\n          <code>to_basic</code> function as follows:\n        </blockquote>")))
 (idp8997040
  ((file handling-json-data.html)
   (html
    "<blockquote>\n              The <code>Variant</code> type encodes OCaml variants\n              more explicitly, as\n              <code>&lt;&quot;Foo&quot;&gt;</code> or\n              <code>&lt;&quot;Bar&quot;:123&gt;</code> for a\n              variant with parameters.\n            </blockquote>")))
 (idp8994752
  ((file handling-json-data.html)
   (html
    "<blockquote>\n              The <code>Tuple</code> type is stored as\n              <code>(&quot;abc&quot;, 123)</code> instead of a\n              list.\n            </blockquote>")))
 (idp8990992
  ((file handling-json-data.html)
   (html
    "<blockquote>\n              The <code>lit</code> suffix denotes that the value\n              is stored as a JSON string. For example, a\n              <code>Floatlit</code> will be stored as\n              <code>&quot;1.234&quot;</code> instead of\n              <code>1.234</code>.\n            </blockquote>")))
 (idp8990016
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The extensions includes with Yojson include:\n        </blockquote>")))
 (idp8985680
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          You should immediately be able to spot a benefit of using\n          polymorphic variants here. A standard JSON type such as a\n          <code>String</code> will type-check against both the\n          <code>Basic</code> module and also the non-standard\n          <code>Safe</code> module. However, if you use extension\n          values such as <code>Tuple</code> with the\n          <code>Basic</code> module, they will not be a valid\n          sub-type and the compiler will complain.\n        </blockquote>")))
 (idp8981808
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The standard JSON types are <span><em>really</em></span> basic,\n          and OCaml types are far more expressive. Yojson supports an\n          extended JSON format for those times when you're not\n          interoperating with external systems and just want a\n          convenient human-readable local format. The\n          <code>Yojson.Safe.json</code> type is a superset of the\n          <code>Basic</code> polymorphic variant, and looks like\n          this:\n        </blockquote>")))
 (idp8979824
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<span><em>avsm</em></span>: segway into memory representation of\n        polyvariants here?\n      </blockquote>")))
 (idp8975344
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        In this case, we've marked the <code>x</code> as being of\n        type <code>Yojson.Basic.json</code>, and the compiler\n        immediately spots that the argument to the\n        <code>Assoc</code> variant has the incorrect type. This\n        illustrates the strengths and drawbacks of using polymorphic\n        variants: they make it possible to easily subtype across module\n        boundaries (the <code>Basic</code> and\n        <code>Safe</code> in Yojson's case), but the error\n        messages can be more confusing. However, a bit of careful manual\n        type annotation is all it takes to make tracking down such\n        issues much easier.\n      </blockquote>")))
 (idp8972864
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The type error above isn't <span><em>wrong</em></span> as such,\n        but can be inconvenient to wade through for larger values. An\n        easy way to narrow down this sort of type error is to add\n        explicit type annotations as a compiler hint about your\n        intentions:\n      </blockquote>")))
 (idp8965920
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        In the example above, although the value that\n        <code>x</code> has is compatible with the type\n        <code>json</code>, it's not explicitly defined as such.\n        The type inference engine will figure out a type that is based\n        on how the value <code>x</code> is used, and in this case\n        only the <code>Assoc</code> and <code>String</code>\n        variants are present. One difficulty you will encounter is that\n        type errors involving polymorphic variants can be quite verbose\n        if you make a mistake in your code. For example, suppose you\n        build an <code>Assoc</code> and include a single value\n        instead of a list of keys:\n      </blockquote>")))
 (idp8962608
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        To build and print JSON values, you can just construct values of\n        type <code>json</code> and call the\n        <code>to_string</code> function. There are also\n        pretty-printing functions that lay out the output in a more\n        human-readable style:\n      </blockquote>")))
 (idp8960400
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          In the last part of the example, we simply print the parsed\n          fields since they are just normal OCaml values. This technique\n          of using chained parsing functions is very powerful in\n          combination with the OCaml type system. Many errors that don't\n          make sense at runtime (for example, mixing up lists and\n          objects) will be caught statically via a type error.\n        </blockquote>")))
 (idp8955200
  ((file handling-json-data.html)
   (html
    "<blockquote>\n              The <code>is_online</code> and\n              <code>is_translated</code> fields are optional in\n              our JSON schema, and no error is raised if they are not\n              present in the JSON array. The resulting OCaml type is a\n              <code>string option</code> to reflect this. In our\n              example, only <code>is_online</code> is present and\n              <code>is_translated</code> will be\n              <code>None</code>.\n            </blockquote>")))
 (idp8951280
  ((file handling-json-data.html)
   (html
    "<blockquote>\n              The <code>tags</code> field is similar to\n              <code>title</code>, but are passed through the\n              <code>to_list</code> combinator since they are a\n              JSON list. The <code>filter_string</code> combinator\n              folds all of the strings in the JSON list into an OCaml\n              list (any non-strings also in there are simply ignored).\n            </blockquote>")))
 (idp8948864
  ((file handling-json-data.html)
   (html
    "<blockquote>\n              For the <code>title</code> string, the\n              <code>member</code> combinator extracts the key from\n              the array, and casts it to an OCaml string. An exception\n              is raised if the JSON value is not a string.\n            </blockquote>")))
 (idp8945792
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          This introduces the <code>Yojson.Basic.Util</code>\n          module, which contains <span><em>combinator</em></span>\n          functions for JSON manipulation. Combinators are a style of\n          function that can be chained together using the\n          <code>|!</code> pipe operator to select and convert\n          values out of the JSON structure. Let's examine some of them\n          in more detail:\n        </blockquote>")))
 (idp8942720
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          Now that we've figured out how to parse the example JSON, lets\n          see how we can manipulate it from OCaml code with a more\n          complete example.\n        </blockquote>")))
 (idp8939488
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        If you feel like hanging your OCaml interpreter, you can verify\n        what happens with recursive values for yourself:\n      </blockquote>")))
 (idp8934400
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        It's quite easy to mix up the use of <code>=</code> and\n        <code>==</code>, so Core disables the\n        <code>==</code> operator and provides\n        <code>phys_equal</code> instead. You'll see a type error\n        if you use <code>==</code> anywhere:\n      </blockquote>")))
 (idp8932000
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>=</code> structural equality operator\n        recursively inspects each field in the two values and tests them\n        individually for equality. In the JSON parsing example, every\n        field will be traversed and checked, and they will check out as\n        equal. Crucially, if your data structure is cyclical (that is, a\n        value recursively points back to another field within the same\n        structure), the <code>=</code> operator will never\n        terminate, and your program will hang! In this situation, you\n        must use the physical equality operator, or write a custom\n        comparison function that breaks the recursion.\n      </blockquote>")))
 (idp8929136
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>==</code> physical equality test will match if\n        two data structures have precisely the same pointer in memory.\n        Two data structures that have identical contents, but are\n        constructed separately, will not match using this operator. In\n        the JSON example, the <code>json1</code> and\n        <code>json2</code> values are not identical and so would\n        fail the physical equality test.\n      </blockquote>")))
 (idp8925648
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        If you come from a C/C++ background, you will probably\n        reflexively use <code>==</code> to test two values for\n        equality. In OCaml, <code>==</code> tests for\n        <span><em>physical</em></span> equality, and <code>=</code>\n        tests for <span><em>structural</em></span> equality.\n      </blockquote>")))
 (idp8919168
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>from_file</code> function accepts an input\n        filename and takes care of opening and closing it for you. It's\n        far more common to use <code>from_string</code> to\n        construct a JSON value from an OCaml <code>string</code>.\n        These strings can come from a network connection (we'll see more\n        of this in\n        <a href=\"\">???</a>)\n        or even a database. Finally, the example checks that the two\n        input mechanisms actually resulted in the same OCaml data\n        structure.\n      </blockquote>")))
 (idp8915536
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>in_channel</code> constructor is from the\n        original OCaml standard library, and its use is considered\n        deprecated when using the Core standard library. This leaves us\n        with two ways of parsing the JSON: either from a string buffer,\n        or from a file on a filesystem. The next example shows both in\n        action, assuming the JSON record is stored in a file called\n        <span><em>book.json</em></span>:\n      </blockquote>")))
 (idp8913680
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        When first reading these interfaces, you can generally ignore\n        the optional arguments (which have the question marks in the\n        type signature), as they will be filled in with sensible values.\n        The signature for these values with the optional elements\n        removed makes their purpose quite clear:\n      </blockquote>")))
 (idp8910528
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Let's parse the earlier JSON string example into this type now.\n        The first stop is the <code>Yojson.Basic</code>\n        documentation, where we find these helpful functions:\n      </blockquote>")))
 (idp8906528
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The JSON specification has very few data types, and Yojson\n        implements these in the <code>Yojson.Basic</code> module.\n        The <code>json</code> type shown below is sufficient to\n        express any valid JSON structure. Note that some of the types\n        are recursive, so that fields can contain references to more\n        JSON fields, and that it also specifically includes a\n        <code>Null</code> variant for empty fields.\n      </blockquote>")))
 (idp8904080
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      See <a href=\"\">???</a> for\n      installation instructions if you haven't already got OPAM.\n    </blockquote>")))
 (idp8901696
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      There are several JSON libraries available for OCaml. For this\n      chapter, we've picked the\n      <a href=\"http://mjambon.com/yojson.html\" target=\"_top\"><code>Yojson</code></a>\n      library. Install it by using the OPAM package manager.\n    </blockquote>")))
 (idp8899408
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Our first task is to parse the JSON into a more structured OCaml\n      type so that we can use static typing more effectively. When\n      manipulating JSON in Python or Ruby, you might write unit tests to\n      check that you have handled unusual inputs. The OCaml model\n      prefers compile-time static checking as well as unit tests. For\n      example, using pattern matching can warn you if you've not checked\n      that a value can be <code>Null</code> as well as contain an\n      actual value.\n    </blockquote>")))
 (idp8897232
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      This free-form nature of JSON types is both a blessing and a\n      curse. It's very easy to generate JSON values, but code parsing\n      them also has to cope with handling subtle variations in how\n      values are represented. For example, what if the\n      <code>pages</code> value above is actually represented as a\n      string value of <code>&quot;450&quot;</code> instead of an\n      integer?\n    </blockquote>")))
 (idp8895040
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      JSON values usually start with an object at the top level that\n      contains a set of key/value pairs. The keys must be strings, but\n      values can be any JSON type. In the example above,\n      <code>tags</code> is a string list, while the\n      <code>authors</code> field contains a list of records.\n      Unlike OCaml lists, JSON lists can contain completely different\n      JSON types within them.\n    </blockquote>")))
 (idp8893040
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      JSON consists of just two basic structures: an unordered\n      collection of key/value pairs, and an ordered list of values.\n      Values can be strings, booleans, floats, integers or null. Let's\n      see what an example JSON record for a book description looks like:\n    </blockquote>")))
 (idp8891584
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      JSON is a lightweight data-interchange format often used in web\n      services and browsers. It's described in\n      <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" target=\"_top\">RFC4627</a>,\n      and is designed to be easy to parse and generate. You'll run into\n      JSON very often when working with modern APIs, so we'll cover\n      several different ways to manipulate it in this chapter.\n    </blockquote>")))
 (idp8889856
  ((file handling-json-data.html)
   (html
    "<blockquote>\n    Now that you've seen how to convert OCaml values into s-expressions,\n    it's time to look at other useful serialization mechanisms. We'll\n    start off by looking at JSON and XML, as they are very common\n    third-party data formats. This chapter also introduces you to some\n    nice uses of polymorphic variants, and also using external tools to\n    auto-generate OCaml code.\n  </blockquote>")))
 (idp8322864
  ((file functors.html)
   (html
    "<blockquote>\n          Support for so-called monadic libraries, like the ones\n          discussed in <a href=\"error-handling.html\">Chapter\194\1605, <i>Error Handling</i></a> and\n          <a href=\"\">???</a>.\n          Here, the functor is used to provide a collection of standard\n          helper functions based on the core <code>bind</code> and\n          <code>return</code> operators.\n        </blockquote>")))
 (idp8321984
  ((file functors.html)
   (html
    "<blockquote>\n          Adding hash-based data structures like hash sets and hash\n          heaps.\n        </blockquote>")))
 (idp8320480
  ((file functors.html)
   (html
    "<blockquote>\n          Adding comparison-based data structures like maps and sets,\n          based on the <code>Comparable</code> interface.\n        </blockquote>")))
 (idp8319472
  ((file functors.html)
   (html
    "<blockquote>\n      This pattern comes up quite a bit in Core, and is used to for a\n      variety of purposes.\n    </blockquote>")))
 (idp8314384
  ((file functors.html)
   (html
    "<blockquote>\n      In order to apply the functor, we'll put the definition of\n      <code>Fqueue</code> in a sub-module called\n      <code>T</code>, and then call\n      <code>Foldable.Extend</code> on <code>T</code>.\n    </blockquote>")))
 (idp8311504
  ((file functors.html)
   (html
    "<blockquote>\n      Now we can apply this to <code>Fqueue</code>. We can rewrite\n      the interface of <code>Fqueue</code> as follows.\n    </blockquote>")))
 (idp8305392
  ((file functors.html)
   (html
    "<blockquote>\n      We'll create a new module, <code>Foldable</code> that\n      automates the process of adding helper functions to a\n      fold-supporting container. As you can see,\n      <code>Foldable</code> contains a module signature\n      <code>S</code> which defines the signature that is required\n      to support folding; and a functor <code>Extend</code> that\n      allows one to extend any module that matches\n      <code>Foldable.S</code>.\n    </blockquote>")))
 (idp8304016
  ((file functors.html)
   (html
    "<blockquote>\n      As it happens, many of these helper functions can be derived\n      mechanically from just the fold function we already implemented.\n      Rather than write all of these helper functions by hand for every\n      new container type, we can instead use a functor that will let us\n      add this functionality to any container that has a\n      <code>fold</code> function.\n    </blockquote>")))
 (idp8301296
  ((file functors.html)
   (html
    "<blockquote>\n      One problem with our <code>Fqueue</code> is that the\n      interface is quite skeletal. There are lots of useful helper\n      functions that one might want that aren't there. For example, for\n      lists we have <code>List.iter</code> which runs a function\n      on each node; and a <code>List.find</code> that finds the\n      first element on the list that matches a given predicate. Such\n      helper functions come up for pretty much every container type, and\n      implementing them over and over is a bit of a dull and repetitive\n      affair.\n    </blockquote>")))
 (idp8296720
  ((file functors.html)
   (html
    "<blockquote>\n      Now let's implement <code>Fqueue</code>. A standard trick is\n      for the <code>Fqueue</code> to maintain an input and an\n      output list, so that one can efficiently\n      <code>enqueue</code> on the first list, and can efficiently\n      dequeue from the out list. If you attempt to dequeue when the\n      output list is empty, the input list is reversed and becomes the\n      new output list. Here's an implementation that uses that trick.\n    </blockquote>")))
 (idp8294992
  ((file functors.html)
   (html "<blockquote>\n      Here's a reasonable mli\n    </blockquote>")))
 (idp8294176
  ((file functors.html)
   (html
    "<blockquote>\n      Another common use of functors is to generate type-specific\n      functionality for a given module in a standardized way. Let's see\n      how this works in the context of a functional queue, which is just\n      a functional version of a FIFO (first-in, first-out) queue. Being\n      functional, operations on the queue return new queues, rather than\n      modifying the queues that were passed in.\n    </blockquote>")))
 (idp8291472
  ((file functors.html)
   (html
    "<blockquote>\n        And now, we can use that sexp-converter in the ordinary way:\n      </blockquote>")))
 (idp8288592
  ((file functors.html)
   (html
    "<blockquote>\n        Also note that we have been careful to override the\n        sexp-converter here to ensure that the data structures\n        invariants are still maintained when reading in from an\n        s-expression.\n      </blockquote>")))
 (idp8286032
  ((file functors.html)
   (html
    "<blockquote>\n        We can modify <code>Make_interval</code> to use the\n        <code>Sexpable</code> interface, for both its input and\n        its output. Note the use of destructive substitution to combine\n        multiple signatures together. This is important because it stops\n        the <code>type t</code>'s from the different signatures\n        from interfering with each other.\n      </blockquote>")))
 (idp8283904
  ((file functors.html)
   (html
    "<blockquote>\n        Happily, Core comes with a built in interface for just this\n        purpose called <code>Sexpable</code>, which is defined as\n        follows:\n      </blockquote>")))
 (idp8280112
  ((file functors.html)
   (html
    "<blockquote>\n        The problem is that <code>with sexp</code> adds code for\n        defining the s-expression converters, and that code assumes that\n        <code>Endpoint</code> has the appropriate sexp-conversion\n        functions for <code>Endpoint.t</code>. But all we know\n        about <code>Endpoint</code> is that it satisfies the\n        <code>Comparable</code> interface, which doesn't say\n        anything about s-expressions.\n      </blockquote>")))
 (idp8276384
  ((file functors.html)
   (html
    "<blockquote>\n        Another feature that we might want for our interval module is\n        the ability to serialize the type, in particular, by converting\n        to s-expressions. If we simply invoke the\n        <code>sexplib</code> macros by adding\n        <code>with sexp</code> to the definition of\n        <code>t</code>, though, we'll get an error:\n      </blockquote>")))
 (idp8271728
  ((file functors.html)
   (html
    "<blockquote>\n        The interface is precisely what we want, and we didn't need to\n        define the <code>endpoint</code> type alias in the body of\n        the module. If we instantiate this module, we'll see that it\n        works properly: we can construct new intervals, but\n        <code>t</code> is abstract, and so we can't directly\n        access the constructors and violate the invariants of the data\n        structure.\n      </blockquote>")))
 (idp8268496
  ((file functors.html)
   (html
    "<blockquote>\n        There's now no mention of n <code>endpoint</code>, all\n        occurrences of that type having been replaced by\n        <code>int</code>. As with sharing constraints, we can also\n        use this in the context of a functor.\n      </blockquote>")))
 (idp8266192
  ((file functors.html)
   (html
    "<blockquote>\n        Here's an example of what we get if we use destructive\n        substitution to specialize the <code>Interval_intf</code>\n        interface to integer intervals.\n      </blockquote>")))
 (idp8265104
  ((file functors.html)
   (html
    "<blockquote>\n        The following shows how we could use this with\n        <code>Make_interval</code>.\n      </blockquote>")))
 (idp8259856
  ((file functors.html)
   (html
    "<blockquote>\n        Sharing constraints basically do the job, but they have some\n        downsides. In particular, we've now been stuck with the useless\n        type declaration of <code>endpoint</code> that clutters up\n        both the interface and the implementation. A better solution\n        would be to modify the <code>Interval_intf</code>\n        signature by replacing <code>endpoint</code> with\n        <code>Endpoint.t</code> everywhere it shows up, and\n        deleting the definition of <code>endpoint</code> from the\n        signature. We can do just this using what's called\n        <span><em>destructive substitution</em></span>. Here's the basic\n        syntax.\n      </blockquote>")))
 (idp8256000
  ((file functors.html)
   (html
    "<blockquote>\n        So now, the interface is as it was, except that\n        <code>endpoint</code> is now known to be equal to\n        <code>Endpoint.t</code>. As a result of that type\n        equality, we can now do things like construct intervals again.\n      </blockquote>")))
 (idp8252592
  ((file functors.html)
   (html
    "<blockquote>\n        And we can also use it in the context of a functor, where the\n        right-hand side of the sharing constraint is an element of the\n        functor argument. Thus, we expose an equality between a type in\n        the output of the functor (in this case, the type\n        <code>endpoint</code>) and a type in its input\n        (<code>Endpoint.t</code>).\n      </blockquote>")))
 (idp8245744
  ((file functors.html)
   (html
    "<blockquote>\n        where <code>S</code> is a module type,\n        <code>s</code> is a type inside of <code>S</code>,\n        and <code>t</code> is a type defined outside of\n        <code>S</code>. The result of this expression is a new\n        signature that's been modified so that it exposes the fact that\n        <code>s</code> is equal to <code>t</code>. We can\n        use a sharing constraint to create a specialized version of\n        <code>Interval_intf</code> for integer intervals.\n      </blockquote>")))
 (idp8241216
  ((file functors.html)
   (html
    "<blockquote>\n        To fix this, we need to expose the fact that\n        <code>endpoint</code> is equal to <code>Int.t</code>\n        (or more generally, <code>Endpoint.t</code>, where\n        <code>Endpoint</code> is the argument to the functor). One\n        way of doing this is through a <span><em>sharing\n        constraint</em></span>, which allows you to tell the compiler to\n        expose the fact that a given type is equal to some other type.\n        The syntax for a sharing constraint on a module type is as\n        follows.\n      </blockquote>")))
 (idp8238784
  ((file functors.html)
   (html
    "<blockquote>\n        The resulting module is abstract, but unfortunately, it's too\n        abstract. In particular, we haven't exposed the type\n        <code>endpoint</code>, which means that we can't even\n        construct an interval anymore.\n      </blockquote>")))
 (idp8233264
  ((file functors.html)
   (html
    "<blockquote>\n        This interface includes the type <code>endpoint</code> to\n        represent the type of the endpoints of the interval. Given this\n        interface, we can redo our definition of\n        <code>Make_interval</code>. Notice that we added the type\n        <code>endpoint</code> to the implementation of the module\n        to make the implementation match\n        <code>Interval_intf</code>.\n      </blockquote>")))
 (idp8230144
  ((file functors.html)
   (html
    "<blockquote>\n        To make <code>Int_interval.t</code> abstract, we need to\n        apply an interface to the output of the\n        <code>Make_interval</code>. Here's an explicit interface\n        that we can use for that purpose.\n      </blockquote>")))
 (idp8226544
  ((file functors.html)
   (html
    "<blockquote>\n        There's a problem with <code>Make_interval</code>. The\n        code we wrote depends on the invariant that the upper bound of\n        an interval is greater than its lower bound, but that invariant\n        can be violated. The invariant is enforced by the create\n        function, but because <code>Interval.t</code> is not\n        abstract, we can bypass the <code>create</code> function.\n      </blockquote>")))
 (idp8225040
  ((file functors.html)
   (html
    "<blockquote>\n      This is important, because confusing the two kinds of intervals\n      would be a semantic error, and it's an easy one to make. The\n      ability of functors to mint new types is a useful trick that comes\n      up a lot.\n    </blockquote>")))
 (idp8222096
  ((file functors.html)
   (html
    "<blockquote>\n      Importantly, <code>Rev_int_interval.t</code> is a different\n      type than <code>Int_interval.t</code>, even though its\n      physical representation is the same. Indeed, the type system will\n      prevent us from confusing them.\n    </blockquote>")))
 (idp8219360
  ((file functors.html)
   (html
    "<blockquote>\n      The behavior of <code>Rev_int_interval</code> is of course\n      different from <code>Int_interval</code>, as we can see\n      below.\n    </blockquote>")))
 (idp8217712
  ((file functors.html)
   (html
    "<blockquote>\n      This design gives us the freedom to use any comparison function we\n      want for comparing the endpoints. We could, for example, create a\n      type of int interval with the order of the comparison reversed, as\n      follows:\n    </blockquote>")))
 (idp8215552
  ((file functors.html)
   (html
    "<blockquote>\n      Now we can use the newly defined <code>Int_interval</code>\n      module like any ordinary module.\n    </blockquote>")))
 (idp8212976
  ((file functors.html)
   (html
    "<blockquote>\n      This works because many modules in Core, including\n      <code>Int</code> and <code>String</code>, satisfy an\n      extended version of the <code>Comparable</code> signature\n      described above. Standardized signatures are generally good\n      practice, both because they makes functors easier to use, and\n      because they make the codebase generally easier to navigate.\n    </blockquote>")))
 (idp8210128
  ((file functors.html)
   (html
    "<blockquote>\n      When we choose our interfaces that are aligned with the standards\n      of our libraries, we don't need to construct a custom module to\n      feed to the functor. In this case, for example, we can directly\n      use the <code>Int</code> or <code>String</code>\n      modules provided by Core.\n    </blockquote>")))
 (idp8208256
  ((file functors.html)
   (html
    "<blockquote>\n      We can instantiate the functor by applying it to a module with the\n      right signature. In the following, we provide the functor input as\n      an anonymous module.\n    </blockquote>")))
 (idp8202448
  ((file functors.html)
   (html
    "<blockquote>\n      The functor for creating the interval module is shown below. We\n      represent an interval with a variant type, which is either\n      <code>Empty</code> or <code>Interval (x,y)</code>,\n      where <code>x</code> and <code>y</code> are the bounds\n      of the interval.\n    </blockquote>")))
 (idp8199392
  ((file functors.html)
   (html
    "<blockquote>\n      The comparison function follows the standard OCaml idiom for such\n      functions, returning <code>0</code> if the two elements are\n      equal, a positive number if the first element is larger than the\n      second, and a negative number if the first element is smaller than\n      the second. Thus, we could rewrite the standard comparison\n      functions on top of <code>compare</code> as shown below.\n    </blockquote>")))
 (idp8196816
  ((file functors.html)
   (html
    "<blockquote>\n      First we'll define a module type that captures the information\n      we'll need about the endpoint type. This interface, which we'll\n      call <code>Comparable</code>, contains just two things: a\n      comparison function, and the type of the values to be compared.\n    </blockquote>")))
 (idp8196160
  ((file functors.html)
   (html
    "<blockquote>\n      Let's now consider a more realistic example of how to use\n      functors: a library for computing with intervals. This library\n      will be functorized over the type of the endpoints of the\n      intervals and the ordering of those endpoints.\n    </blockquote>")))
 (idp8189392
  ((file functors.html)
   (html
    "<blockquote>\n      In this case, we applied <code>Increment</code> to a module\n      whose signature is exactly equal to <code>X_int</code>. But\n      we can apply <code>Increment</code> to any module that\n      satisfies the interface <code>X_int</code>, in the same way\n      that a the contents of an <code>ml</code> file can satisfy\n      the <code>mli</code>. That means that the module type can\n      omit some information available in the module, either by dropping\n      fields or by leaving some fields abstract. Here's an example:\n    </blockquote>")))
 (idp8187328
  ((file functors.html)
   (html
    "<blockquote>\n      We can now use <code>Increment</code> to define new modules.\n    </blockquote>")))
 (idp8186144
  ((file functors.html)
   (html
    "<blockquote>\n      We can see that the inferred module type of the output is now\n      written out explicitly, rather than being a reference to the named\n      signature <code>X_int</code>.\n    </blockquote>")))
 (idp8184528
  ((file functors.html)
   (html
    "<blockquote>\n      The following shows what happens when we omit the module type for\n      the output of the functor.\n    </blockquote>")))
 (idp8183008
  ((file functors.html)
   (html
    "<blockquote>\n      One thing that immediately jumps out about functors is that\n      they're considerably more heavyweight syntactically than ordinary\n      functions. For one thing, functors require explicit (module) type\n      annotations, which ordinary functions do not. Here, we've\n      specified the module type <code>X_int</code> for both the\n      input and output of the functor. Technically, only the type on the\n      input is mandatory, although in practice, one often specifies\n      both.\n    </blockquote>")))
 (idp8179968
  ((file functors.html)
   (html
    "<blockquote>\n      More precisely, we'll create a functor that takes a module\n      containing a single integer variable <code>x</code>, and\n      returns a new module with <code>x</code> incremented by one.\n    </blockquote>")))
 (idp8179456
  ((file functors.html)
   (html
    "<blockquote>\n      We'll start by considering the simplest possible example: a\n      functor for incrementing an integer.\n    </blockquote>")))
 (idp8177232
  ((file functors.html)
   (html
    "<blockquote>\n<span><em>Instantiating modules with state</em></span>. Modules\n        can contain mutable state, and that means that you'll\n        occasionally want to have multiple instantiations of a\n        particular module, each with its own separate and independent\n        mutable state. Functors let you automate the construction of\n        such modules.\n      </blockquote>")))
 (idp8175568
  ((file functors.html)
   (html
    "<blockquote>\n<span><em>Auto-extension of modules</em></span>. Sometimes, there\n        is some functionality that you want to build in a standard way\n        for different types, in each case based on a some piece of\n        type-specific logic. For example, you might want to add a slew\n        of comparison operators derived from a base comparison function.\n        To do this by hand would require a lot of repetitive code for\n        each type, but functors let you write this logic just once and\n        apply it to many different types.\n      </blockquote>")))
 (idp8174192
  ((file functors.html)
   (html
    "<blockquote>\n<span><em>Dependency injection</em></span>, or making the\n        implementations of some components of a system swappable. This\n        is particularly useful when you want to mock up parts of your\n        system for testing and simulation purposes.\n      </blockquote>")))
 (idp8173120
  ((file functors.html)
   (html
    "<blockquote>\n    Functors are, roughly speaking, functions from modules to modules,\n    and they can be used to solve a variety of code-structuring\n    problems, including:\n  </blockquote>")))
 (idp8172336
  ((file functors.html)
   (html
    "<blockquote>\n    Up until now, we've seen OCaml's module system play an important but\n    limited role. In particular, we've seen them as a mechanism for\n    organizing code into units with specified interfaces. But modules\n    can do much more than that, acting as a powerful toolset for\n    building generic code and structuring large-scale systems. Much of\n    that power comes from functors.\n  </blockquote>")))
 (idp8169280
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          In this case, <code>ocamlbuild</code> will notice the\n          error and complain:\n        </blockquote>")))
 (idp8166816
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The problem manifests in a different way if we create circular\n          references between files. We could create such a situation by\n          adding a reference to Freq from <code>counter.ml</code>,\n          <span><em>e.g.</em></span>, by adding the following line:\n        </blockquote>")))
 (idp8165440
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          then when we try to build, we'll get this error:\n        </blockquote>")))
 (idp8162688
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The simplest case of this is that a module can not directly\n          refer to itself (although definitions within a module can\n          refer to each other in the ordinary way). So, if we tried to\n          add a reference to <code>Counter</code> from within\n          <code>counter.ml</code>:\n        </blockquote>")))
 (idp8162080
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The same is true at the module level. By default, circular\n          dependencies between modules is not allowed, and indeed,\n          circular dependencies among files is never allowed.\n        </blockquote>")))
 (idp8159680
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          In most cases, OCaml doesn't allow circular dependencies,\n          <span><em>i.e.</em></span>, a collection of definitions that\n          all refer to each other. If you want to create such\n          definitions, you typically have to mark them specially. For\n          example, when defining a set of mutually recursive values, you\n          need to define them using <code>let rec</code> rather\n          than ordinary <code>let</code>.\n        </blockquote>")))
 (idp8158016
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Order is similarly important in other parts of the signature,\n          including the order in which record fields are declared and\n          the order of arguments (including labeled and optional\n          arguments) to a function.\n        </blockquote>")))
 (idp8155984
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          that will lead to a compilation error:\n        </blockquote>")))
 (idp8151824
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Type definitions that show up in an <code>mli</code>\n          need to match up with corresponding definitions in the\n          <code>ml</code>. Consider again the example of the type\n          <code>median</code>. The order of the declaration of\n          variants matters to the OCaml compiler so, if the definition\n          of <code>median</code> in the implementation lists those\n          options in a different order:\n        </blockquote>")))
 (idp8150336
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          A missing type definition will lead to a similar error.\n        </blockquote>")))
 (idp8148736
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Now, if we try to compile without actually adding the\n          implementation, we'll get this error:\n        </blockquote>")))
 (idp8146064
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          We might decide that we want a new function in\n          <code>Counter</code> for pulling out the frequency count\n          of a given string. We can update the <code>mli</code> by\n          adding the following line.\n        </blockquote>")))
 (idp8144112
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          This error message is a bit intimidating at first, and it\n          takes a bit of thought to see where the first type, which is\n          the type of [touch] in the implementation, doesn't match the\n          second one, which is the type of [touch] in the interface. You\n          need to recognize that [t] is in fact a [Core.Std.Map.t], and\n          the problem is that in the first type, the first argument is a\n          map while the second is the key to that map, but the order is\n          swapped in the second type.\n        </blockquote>")))
 (idp8141344
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          and then try to compile <code>Counter</code> (by writing\n          <code>ocamlbuild -use-ocamlfind counter.cmo</code>),\n          we'll get the following error:\n        </blockquote>")))
 (idp8138544
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The simplest kind of error is where the type specified in the\n          signature does not match up with the type in the\n          implementation of the module. As an example, if we replace the\n          <code>val</code> declaration in\n          <code>counter.mli</code> by swapping the types of the\n          first two arguments:\n        </blockquote>")))
 (idp8135888
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        When OCaml compiles a program with an <code>ml</code> and\n        an <code>mli</code>, it will complain if it detects a\n        mismatch between the two. Here are some of the common errors\n        you'll run into.\n      </blockquote>")))
 (idp8133216
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            There's another even more lightweight syntax for local\n            opens, which is particularly useful for small expressions:\n          </blockquote>")))
 (idp8131584
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            In the above, <code>of_int</code> and the infix\n            operators are the ones from <code>Int64</code> module.\n          </blockquote>")))
 (idp8129664
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            If you do need to do an open, it's better to do a\n            <span><em>local open</em></span>. There are two syntaxes for\n            local opens. For example, you can write:\n          </blockquote>")))
 (idp8127376
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            Because the module name <code>C</code> only exists for\n            a short scope, it's easy to read and remember what\n            <code>C</code> stands for. Rebinding modules to very\n            short names at the toplevel of your module is usually a\n            mistake.\n          </blockquote>")))
 (idp8125664
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            ...you could write\n          </blockquote>")))
 (idp8123808
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            One alternative to local opens that makes your code terser\n            without giving up on explicitness is to locally rebind the\n            name of a module. So, instead of writing:\n          </blockquote>")))
 (idp8121568
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            Opening modules at the toplevel of a module should be done\n            quite sparingly, and generally only with modules that have\n            been specifically designed to be opened, like\n            <code>Core.Std</code> or\n            <code>Option.Monad_infix</code>.\n          </blockquote>")))
 (idp8120592
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Here's some general advice on how to deal with opens.\n      </blockquote>")))
 (idp8119200
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n<code>open</code> is essential when dealing with something\n        like a standard library, but it's generally good style to keep\n        opening of modules to a minimum. Opening a module is basically a\n        tradeoff between terseness and explicitness - the more modules\n        you open, the harder it is to look at an identifier and figure\n        out where it's defined.\n      </blockquote>")))
 (idp8115312
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The basic purpose of <code>open</code> is to extend the\n        namespaces that OCaml searches when trying to resolve an\n        identifier. Roughly, if you open a module <code>M</code>,\n        then every subsequent time you look for an identifier\n        <code>foo</code>, the module system will look in\n        <code>M</code> for a value named <code>foo</code>.\n        This is true for all kinds of identifiers, including types, type\n        constructors, values and modules.\n      </blockquote>")))
 (idp8113504
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        One useful primitive in OCaml's module language is the\n        <code>open</code> directive. We've seen that already in\n        the <code>open Core.Std</code> that has been at the top of\n        our source files.\n      </blockquote>")))
 (idp8109328
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        We can also combine this with the use of the include directive\n        to add some extra functionality to such a module. Thus, we could\n        have rewritten the definition of <code>Hostname</code>\n        above as follows to add a function\n        <code>Hostname.mine</code> that returns the hostname of\n        the present machine.\n      </blockquote>")))
 (idp8106064
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        We could have written this slightly differently, by giving the\n        signature its own toplevel <code>module type</code>\n        declaration, making it possible to in a lightweight way create\n        multiple distinct types with the same underlying implementation.\n      </blockquote>")))
 (idp8104640
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The basic structure of a module declaration like this is:\n      </blockquote>")))
 (idp8102800
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Here's how you might create such a type, within a module:\n      </blockquote>")))
 (idp8101216
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Up until now, we've only considered modules that correspond to\n        files, like <code>counter.ml</code>. But modules (and\n        module signatures) can be nested inside other modules. As a\n        simple example, consider a program that needs to deal with some\n        class of identifier like a username. Rather than just keeping\n        usernames as strings, you might want to mint an abstract type,\n        so that the type-system will help you to not confuse usernames\n        with other string data that is floating around your program.\n      </blockquote>")))
 (idp8097248
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        And if we then put <code>open Common</code> after\n        <code>open Core.Std</code> at the top of each file in our\n        project, then references to <code>List</code> will\n        automatically go to <code>Ext_list</code> instead.\n      </blockquote>")))
 (idp8093408
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        And we can now use <code>Ext_list</code> as a replacement\n        for <code>List</code>. If we want to use\n        <code>Ext_list</code> in preference to\n        <code>List</code> in our project, we can create a file of\n        common definitions:\n      </blockquote>")))
 (idp185120
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Now, what about the interface of this new module? It turns out\n        that include works on the signature language as well, so we can\n        pull essentially the same trick to write an\n        <code>mli</code> for this new module. The only trick is\n        that we need to get our hands on the signature for the list\n        module, which can be done using\n        <code>module type of</code>.\n      </blockquote>")))
 (idp180976
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        One natural application of <code>include</code> is to\n        create one module which is an extension of another one. For\n        example, imagine you wanted to build an extended version of the\n        <code>List</code> module, where you've added some\n        functionality not present in the module as distributed in Core.\n        We can do this easily using <code>include</code>:\n      </blockquote>")))
 (idp179664
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        OCaml provides a number of tools for manipulating modules. One\n        particularly useful one is the <code>include</code>\n        directive, which is used to include the contents of one module\n        into another.\n      </blockquote>")))
 (idp8073760
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The decision of whether a given type should be abstract or\n        concrete is an important one. Abstract types give you more\n        control over how values are created and accessed, and makes it\n        easier to enforce invariants beyond the what's enforced by the\n        type itself; concrete types let you expose more detail and\n        structure to client code in a lightweight way. The right choice\n        depends very much on the context.\n      </blockquote>")))
 (idp8070800
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Now, to expose this usefully in the interface, we need to expose\n        both the function and the type <code>median</code> with\n        its definition. We'd do that by adding these lines to the\n        <code>counter.mli</code>:\n      </blockquote>")))
 (idp8067392
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        For example, imagine we wanted to add a function to\n        <code>Counter</code> for returning the line with the\n        median frequency count. If the number of lines is even, then\n        there is no precise median, so the function would return the two\n        lines before and after the median instead. We'll use a custom\n        type to represent the fact that there are two possible return\n        values. Here's a possible implementation.\n      </blockquote>")))
 (idp8065072
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        In our frequency-count example, the module\n        <code>Counter</code> had an abstract type\n        <code>Counter.t</code> for representing a collection of\n        frequency counts. Sometimes, you'll want to make a type in your\n        interface <span><em>concrete</em></span>, by including the type\n        definition in the interface.\n      </blockquote>")))
 (idp8060016
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Now we can turn to optimizing the implementation of\n        <code>Counter</code>. Here's an alternate and far more\n        efficient implementation, based on the <code>Map</code>\n        datastructure in Core.\n      </blockquote>")))
 (idp8056832
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        This is because <code>freq.ml</code> depends on the fact\n        that frequency counts are represented as association lists, a\n        fact that we've just hidden. We just need to fix the code to use\n        <code>Counter.empty</code> instead of\n        <code>[]</code> and <code>Counter.to_list</code> to\n        get the association list out at the end for processing and\n        printing.\n      </blockquote>")))
 (idp8054896
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        If we now try to compile <code>freq.ml</code>, we'll get\n        the following error:\n      </blockquote>")))
 (idp8052560
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Here's a rewrite of <code>counter.ml</code> to match this\n        signature.\n      </blockquote>")))
 (idp8049600
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Note that we needed to add <code>empty</code> and\n        <code>to_list</code> to <code>Counter</code>, since\n        otherwise, there would be no way to create a\n        <code>Counter.t</code> or get data out of one.\n      </blockquote>")))
 (idp8046800
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        To actually hide the fact that frequency counts are represented\n        as association lists, we need to make the type of frequency\n        counts <span><em>abstract</em></span>. A type is abstract if its\n        name is exposed in the interface, but its definition is not.\n        Here's an abstract interface for <code>Counter</code>:\n      </blockquote>")))
 (idp8043872
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        and are used to expose the existence of a given value in the\n        module. Here's an interface that describes the current contents\n        of <code>Counter</code>. We can save this as\n        <code>counter.mli</code> and compile, and the program will\n        build as before.\n      </blockquote>")))
 (idp8038448
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The first step towards hiding the implementation details of\n        <code>Counter</code> is to create an interface file,\n        <code>counter.mli</code>, which controls how\n        <code>counter</code> is accessed. Let's start by writing\n        down a simple descriptive interface, <span><em>i.e.</em></span>,\n        an interface that describes what's currently available in\n        <code>Counter</code> without hiding anything. We'll use\n        <code>val</code> declarations in the\n        <code>mli</code>, which have the following syntax\n      </blockquote>")))
 (idp8036480
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        you'll see that it depends on the fact that the empty set of\n        frequency counts is represented as an empty list. We'd like to\n        prevent this kind of dependency, so that we can change the\n        implementation of <code>Counter</code> without needing to\n        change client code like that in <code>freq.ml</code>.\n      </blockquote>")))
 (idp8032576
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        While we've pushed some of the logic to the\n        <code>Counter</code> module, the code in\n        <code>freq.ml</code> can still depend on the details of\n        the implementation of <code>Counter</code>. Indeed, if you\n        look at the invocation of <code>build_counts</code>:\n      </blockquote>")))
 (idp8026416
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can now rewrite <code>freq.ml</code> to use\n      <code>Counter</code>. Note that the resulting code can still\n      be built with <code>build.sh</code>, since\n      <code>ocamlbuild</code> will discover dependencies and\n      realize that <code>counter.ml</code> needs to be compiled.\n    </blockquote>")))
 (idp8023360
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We'll start by creating a file, <code>counter.ml</code>,\n      that contains the logic for maintaining the association list used\n      to describe the counts. The key function, called\n      <code>touch</code>, updates the association list with the\n      information that a given line should be added to the frequency\n      counts.\n    </blockquote>")))
 (idp8022608
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can fix this problem by replacing association lists with a more\n      efficient data structure. To do that, we'll first factor out the\n      key functionality into a separate module with an explicit\n      interface. We can consider alternative (and more efficient)\n      implementations once we have a clear interface to program against.\n    </blockquote>")))
 (idp8020560
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Let's consider how we can use modules to refactor the\n      implementation of <code>freq.ml</code>. Remember that the\n      variable <code>counts</code> contains an association list\n      representing the counts of the lines seen so far. But updating an\n      association list takes time linear in the length of the list,\n      meaning that the time complexity of processing a file is quadratic\n      in the number of distinct lines in the file.\n    </blockquote>")))
 (idp8017872
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Source files in OCaml are tied into the module system, with each\n      file compiling down into a module whose name is derived from the\n      name of the file. We've encountered modules before, for example,\n      when we used functions like <code>find</code> and\n      <code>add</code> from the <code>List.Assoc</code>\n      module. At it's simplest, you can think of a module as a\n      collection of definitions that are stored within a namespace.\n    </blockquote>")))
 (idp8016032
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      As a general matter, production executables should usually be\n      built using the native-code compiler, but it sometimes makes sense\n      to use bytecode for development builds. And, of course, bytecode\n      makes sense when targeting a platform not supported by the native\n      code compiler.\n    </blockquote>")))
 (idp8014352
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Aside from performance, executables generated by the two compilers\n      have nearly identical behavior. There are a few things to be aware\n      of. First, the byte-code compiler can be used on more\n      architectures, and has some better tool support; in particular,\n      the OCaml debugger only works with byte-code. Also, the byte-code\n      compiler compiles faster than the native code compiler. Also, in\n      order to run a bytecode executable you typically need to have\n      OCaml installed on the system in question. That's not strictly\n      required, though, since you can a byte-code executable with an\n      embedded runtime, using the <code>-custom</code> compiler\n      flag.\n    </blockquote>")))
 (idp8011152
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      OCaml ships with two compilers---the <code>ocamlc</code>\n      byte-code compiler, and the <code>ocamlopt</code>\n      native-code compiler. Programs compiled with\n      <code>ocamlc</code> are interpreted by a virtual machine,\n      while programs compiled with <code>ocamlopt</code> are\n      compiled to native machine code to be run on a specific operating\n      system and processor architecture.\n    </blockquote>")))
 (idp8008432
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can now run the our program from the command-line. The\n      following line extracts strings from the\n      <code>ocamlopt</code> executable, and then reports the most\n      frequently occurring ones.\n    </blockquote>")))
 (idp8006176
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If we'd invoked <code>ocamlbuild</code> with a target of\n      <code>freq.native</code> instead of\n      <code>freq.byte</code>, we would have gotten native-code\n      instead.\n    </blockquote>")))
 (idp8004544
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can then invoke <code>ocamlbuild</code> to build the\n      executable in question.\n    </blockquote>")))
 (idp8001296
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The purpose of the <code>_tags</code> file is to specify\n      which compilation options are required for which files. In this\n      case, we're telling <code>ocamlbuild</code> to link in the\n      <code>core</code> package and to turn on threading, output\n      of annotation files, and debugging support for all files (the\n      condition <code>true</code> causes the options to be applied\n      to every file in the project.)\n    </blockquote>")))
 (idp7997504
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      While this works well enough for a one-file project, more\n      complicated builds will require a tool to orchestrate the build.\n      One great tool for this task is <code>ocamlbuild</code>,\n      which is shipped with the OCaml compiler. We'll talk more about\n      <code>ocamlbuild</code> in\n      <a href=\"\">???</a>, but for\n      now, we'll just walk through the steps required for this simple\n      application. First, create a <code>_tags</code> file,\n      containing the following lines.\n    </blockquote>")))
 (idp7992944
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Here we're using <code>ocamlfind</code>, a tool which itself\n      invokes other parts of the ocaml toolchain (in this case,\n      <code>ocamlc</code>) with the appropriate flags to link in\n      particular libraries and packages. Here,\n      <code>-package core</code> is asking\n      <code>ocamlfind</code> to link in the Core library,\n      <code>-linkpkg</code> is required to do the final linking in\n      of packages for building a runnable executable, and\n      <code>-thread</code> turns on threading support, which is\n      required for Core.\n    </blockquote>")))
 (idp7991056
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      But in this case, this command will fail with the error\n      <code>Unbound module Core</code>. We need a somewhat more\n      complex invocation to get Core linked in:\n    </blockquote>")))
 (idp7989920
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If we weren't using Core or any other external libraries, we could\n      build the executable like this:\n    </blockquote>")))
 (idp7986352
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Unlike C, programs in OCaml do not have a unique\n      <code>main</code> function. When an OCaml program is\n      evaluated, all the statements in the implementation files are\n      evaluated in order. These implementation files can contain\n      arbitrary expressions, not just function definitions. In this\n      example, the declaration starting with <code>let () =</code>\n      plays the role of the <code>main</code> declaration, kicking\n      off the processing. But really the entire file is evaluated at\n      startup, and so in some sense the full codebase is one big\n      <code>main</code> function.\n    </blockquote>")))
 (idp7980432
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We'll start with an example: a utility that reads lines from\n      <code>stdin</code>, computing a frequency count of the lines\n      that have been read in. At the end, the 10 lines with the highest\n      frequency counts are written out. Here's a simple implementation,\n      which we'll save as the file <code>freq.ml</code>. Note that\n      we're using several functions from the\n      <code>List.Assoc</code> module, which provides utility\n      functions for interacting with association lists,\n      <span><em>i.e.</em></span>, lists of key/value pairs.\n    </blockquote>")))
 (idp7978976
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n    In this chapter, we'll show you how to build an OCaml program from a\n    collection of files, as well as the basics of working with modules\n    and module signatures.\n  </blockquote>")))
 (idp7978192
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n    We've so far experienced OCaml largely through the toplevel. As you\n    move from exercises to real-world programs, you'll need to leave the\n    toplevel behind and start building programs from files. Files are\n    more than just a convenient way to store and manage your code; in\n    OCaml, they also act as boundaries that divide your program into\n    conceptual units.\n  </blockquote>")))
 (idp9211552
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      We'll discuss each of these syntax extensions in detail, starting\n      with Sexplib.\n    </blockquote>")))
 (idp9209600
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n<span><strong>Pa_typehash</strong></span>: generates a\n          hash value for a type definition, <span><em>i.e.</em></span>,\n          an integer that is highly unlikely to be the same for two\n          distinct types.\n        </blockquote>")))
 (idp9208048
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n<span><strong>Pa_compare</strong></span>: generates\n          efficient, type-specialized comparison functions.\n        </blockquote>")))
 (idp9206416
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n<span><strong>Variantslib</strong></span>: like Fieldslib\n          for variants, producing first-class variants and other helper\n          functions for interacting with variant types.\n        </blockquote>")))
 (idp9204784
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n<span><strong>Fieldslib</strong></span>: generates\n          first-class values that represent fields of a record, as well\n          as accessor functions and setters for mutable record fields.\n        </blockquote>")))
 (idp9203232
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n<span><strong>Bin_prot</strong></span>: provides\n          serialization to an efficient binary format.\n        </blockquote>")))
 (idp9201696
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n<span><strong>Sexplib</strong></span>: provides\n          serialization for s-expressions.\n        </blockquote>")))
 (idp9200704
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      There are several syntax extensions distributed with Core,\n      including:\n    </blockquote>")))
 (idp9195824
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      Similarly, sometimes you simultaneously want an accessor to a\n      field of a record and a textual representation of the name of that\n      field. This might come up if you were validating a field and\n      needed the string representation to generate an error message, or\n      if you wanted to scaffold a form in a GUI automatically based on\n      the fields of a record. Fieldslib provides a module\n      <code>Field</code> for this purpose. Here's some code for\n      creating <code>Field.t</code>'s for all the fields of our\n      type <code>t</code>.\n    </blockquote>")))
 (idp9194192
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      One common idiom when using records is to provide field accessor\n      functions for a particular record.\n    </blockquote>")))
 (idp9193760
  ((file fast-binary-serialization-with-bin_prot.html)
   (html "<blockquote>\n      TODO: out of place\n    </blockquote>")))
 (idp9190560
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      We earlier mentioned that <code>bigstring</code> is a more\n      efficient version of <code>string</code>. Understanding the\n      difference requires some understanding of how OCaml allocates\n      values. TODO.\n    </blockquote>")))
 (idp9185632
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      The code to generate and read and write these messages now just\n      uses the static <code>Message.t</code> type, with no need to\n      worry about the marshalling mechanism.\n    </blockquote>")))
 (idp9182096
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      Reading back the binary value we've just defined is quite similar.\n      We read in the length field, read that much data into a\n      <code>bigstring</code>, and convert it to our type using\n      <code>Binable.of_bigstring</code>.\n    </blockquote>")))
 (idp9180816
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      Since the <code>Binable.S</code> module values are generated\n      for you automatically, the only functions you'll need to regularly\n      use are the conversion functions above.\n    </blockquote>")))
 (idp9178672
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      The <code>Binable</code> interface in Core is pretty simple:\n      <code>type 'a m = (module Binable.S with type t = 'a)  val of_bigstring : 'a m -&gt; bigstring -&gt; 'a val to_bigstring : ?prefix_with_length:bool -&gt; 'a m -&gt; 'a -&gt; bigstring val of_string : 'a m -&gt; string -&gt; 'a val to_string : 'a m -&gt; 'a -&gt; string</code>\n</blockquote>")))
 (idp9175168
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      The <code>save_message</code> is then responsible for\n      writing the binary content out to a <code>bigstring</code>.\n      It first invokes the <code>Binable.to_bigstring</code> on a\n      <code>Message.t</code> value to retrieve a marshalled\n      string. It then determines the length of this string, and writes\n      out the length and the string to the output channel.\n    </blockquote>")))
 (idp9172416
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      The <code>binable</code> value above captures all the\n      auto-generated <code>bin_io</code> functions into a\n      first-class module of type <code>Binable.S</code>. This\n      module has the low-level reader and writer functions which we\n      don't want to have to manually construct.\n    </blockquote>")))
 (idp9169008
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      Next we need to define how to marshal and unmarshal these\n      messages. The interface is a little more complex than for\n      s-expressions since we don't just want to serialise from the\n      normal OCaml <code>string</code>, but also to the\n      <code>bigstring</code> type. We'll explain what this is in\n      more detail shortly, but for now think of it as a more efficient\n      alternative for large binary data.\n    </blockquote>")))
 (idp9167728
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      You can can combine multiple syntax generators in the same type\n      declaration by comma-separating them, so you could generate both\n      formats via <code>with bin_io,sexp</code> above.\n    </blockquote>")))
 (idp9165088
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n      Here's a small complete example of a program that can read and\n      write values using <code>bin_io</code>. Here, the\n      serialization is of types that might be used as part of a\n      message-queue, where each message has a topic, some content, and a\n      source, which is in turn a hostname and a port.\n    </blockquote>")))
 (idp9160896
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n    You can also just type this in directly into <code>utop</code>\n    (with <code>;;</code> to finish the line) instead. The\n    extension is activated by putting <code>with bin_io</code>\n    after the type declaration. This looks a bit unsightly in the\n    toplevel because of all the definitions that are generated. We'll\n    elide those definitions in the book, but you can see them for\n    yourself in the toplevel.\n  </blockquote>")))
 (idp9158192
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n    The <code>bin_prot</code> syntax extension isn't activated by\n    default in the toplevel, but is easily available if you add this to\n    your <code>~/.ocamlinit</code> file:\n  </blockquote>")))
 (idp9154784
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n<code>Bin_prot</code> is a library that addresses these issues\n    by providing fast serialization in a compact binary format. We'll\n    also introduce the Core <code>Bigstring</code> library for\n    handling large binary strings efficiently during this chapter.\n  </blockquote>")))
 (idp9151808
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n        parsing and printing to strings in an ASCII format can be\n        expensive for types like <code>int</code>s,\n        <code>float</code>s and <code>Time.t</code>s where\n        some real computation needs to be done to produce or parse the\n        ASCII representation.\n      </blockquote>")))
 (idp9150096
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n        s-expression serialization goes through an intermediate type,\n        <code>Sexp.t</code>, which must be allocated and is then\n        typically thrown away, putting non-trivial pressure on the\n        garbage collector.\n      </blockquote>")))
 (idp9148944
  ((file fast-binary-serialization-with-bin_prot.html)
   (html
    "<blockquote>\n    S-expressions are a good serialization format when you need\n    something machine-parseable as well as human readable and editable.\n    But Sexplib's s-expressions are not particularly performant for a\n    couple of reasons:\n  </blockquote>")))
 (idp7975536
  ((file error-handling.html)
   (html
    "<blockquote>\n        And then we can re-raise that exception:\n      </blockquote>")))
 (idp7971840
  ((file error-handling.html)
   (html
    "<blockquote>\n        And <code>Result</code> and <code>Or_error</code>\n        have similar <code>try_with</code> functions. So, we could\n        write:\n      </blockquote>")))
 (idp7969712
  ((file error-handling.html)
   (html
    "<blockquote>\n        Both exceptions and error-aware types are necessary parts of\n        programming in OCaml. As such, you often need to move between\n        these two worlds. Happily, Core comes with some useful helper\n        functions to help you do just that. For example, given a piece\n        of code that can throw an exception, you can capture that\n        exception into an option as follows:\n      </blockquote>")))
 (idp7967504
  ((file error-handling.html)
   (html
    "<blockquote>\n        Backtraces can also be obtained at runtime. In particular,\n        <code>Exn.backtrace</code> will return the backtrace of\n        the most recently thrown exception.\n      </blockquote>")))
 (idp7965280
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can get more information from OCaml if we turn on stack\n        traces. This can be done by setting the\n        <code>OCAMLRUNPARAM</code> environment variable, as shown:\n      </blockquote>")))
 (idp7964608
  ((file error-handling.html)
   (html
    "<blockquote>\n        The example in question is short enough that it's quite easy to\n        see where the error came from. But in a complex program, simply\n        knowing which exception was thrown is usually not enough\n        information to figure out what went wrong.\n      </blockquote>")))
 (idp7963248
  ((file error-handling.html)
   (html
    "<blockquote>\n        If we build and run this program, we'll get a pretty\n        uninformative error:\n      </blockquote>")))
 (idp7961296
  ((file error-handling.html)
   (html
    "<blockquote>\n        A big part of the point of exceptions is to give useful\n        debugging information. But at first glance, OCaml's exceptions\n        can be less than informative. Consider the following simple\n        program.\n      </blockquote>")))
 (idp7957808
  ((file error-handling.html)
   (html
    "<blockquote>\n        At which point, it makes sense to simply use the non-exception\n        throwing function, <code>List.Assoc.find</code>, instead.\n      </blockquote>")))
 (idp7955552
  ((file error-handling.html)
   (html
    "<blockquote>\n        This kind of problem is hard to detect in advance, because the\n        type system doesn't tell us what kinds of exceptions a given\n        function might throw. Because of this kind of confusion, it's\n        usually better to avoid catching specific exceptions. In this\n        case, we can improve the code by catching the exception in a\n        narrower scope.\n      </blockquote>")))
 (idp7951984
  ((file error-handling.html)
   (html
    "<blockquote>\n        This implementation is more problematic than it looks. In\n        particular, what happens if <code>compute_weight</code>\n        itself throws an exception? Ideally,\n        <code>lookup_weight</code> should propagate that exception\n        on, but if the exception happens to be\n        <code>Not_found</code>, then that's not what will happen:\n      </blockquote>")))
 (idp7950304
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can implement such a function using exceptions as follows:\n      </blockquote>")))
 (idp7946352
  ((file error-handling.html)
   (html
    "<blockquote>\n        OCaml's exception-handling system allows you to tune your\n        error-recovery logic to the particular error that was thrown.\n        For example, <code>List.find_exn</code> always throws\n        <code>Not_found</code>. You can take advantage of this in\n        your code, for example, let's define a function called\n        <code>lookup_weight</code>, with the following signature:\n      </blockquote>")))
 (idp7939824
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can fix this using Core's <code>protect</code>\n        function. The basic purpose of <code>protect</code> is to\n        ensure that the <code>finally</code> thunk will be called\n        when <code>f</code> exits, whether it exited normally or\n        with an exception. This is similar to the\n        <code>try/finally</code> construct available in many\n        programming languages, but it is implemented in a library,\n        rather than being a built-in primitive. Here's how it could be\n        used to fix <code>load_config</code>.\n      </blockquote>")))
 (idp7937808
  ((file error-handling.html)
   (html
    "<blockquote>\n        The problem with this code is that the function that loads the\n        s-expression and parses it into a <code>Config.t</code>\n        might throw an exception if the config file in question is\n        malformed. Unfortunately, that means that the\n        <code>In_channel.t</code> that was opened will never be\n        closed, leading to a file-descriptor leak.\n      </blockquote>")))
 (idp7936160
  ((file error-handling.html)
   (html
    "<blockquote>\n        One headache with exceptions is that they can terminate your\n        execution at unexpected places, leaving your program in an\n        awkward state. Consider the following code snippet:\n      </blockquote>")))
 (idp7934544
  ((file error-handling.html)
   (html
    "<blockquote>\n        Otherwise, the original exception continues up the call stack,\n        to be handled by the next outer exception handler. If the\n        exception is never caught, it terminates the program.\n      </blockquote>")))
 (idp7932512
  ((file error-handling.html)
   (html
    "<blockquote>\n        But if the evaluation of the body throws an exception, then the\n        exception will be fed to the pattern match statements following\n        the <code>with</code>. If the exception matches a pattern,\n        then we consider the exception caught, and the\n        <code>try/with</code> clause evaluates to the expression\n        on the right-hand side of the matching pattern.\n      </blockquote>")))
 (idp7930144
  ((file error-handling.html)
   (html
    "<blockquote>\n        A <code>try/with</code> clause first evaluates it's body,\n        <code>&lt;expr&gt;</code>. If no exception is thrown, then\n        the result of evaluating the body is what the entire\n        <code>try/with</code> clause evaluates to.\n      </blockquote>")))
 (idp7927456
  ((file error-handling.html)
   (html
    "<blockquote>\n        In OCaml, an exception handler is declared using a\n        <code>try</code>/<code>with</code> statement. Here's\n        the basic syntax.\n      </blockquote>")))
 (idp7926432
  ((file error-handling.html)
   (html
    "<blockquote>\n        So far, we've only seen exceptions fully terminate the execution\n        of a computation. But often, we want a program to be able to\n        respond to and recover from an exception. This is achieved\n        through the use of <span><em>exception handlers</em></span>.\n      </blockquote>")))
 (idp7922800
  ((file error-handling.html)
   (html
    "<blockquote>\n      The period in front of <code>Wrong_date</code> is there\n      because the representation generated by\n      <code>with sexp</code> includes the full module path of the\n      module where the exception in question is defined. We'll talk more\n      about modules in\n      <a href=\"files-modules-and-programs.html\">Chapter\194\1606, <i>Files, Modules and Programs</i></a>, but for\n      now, it's enough to know that this is useful in tracking down\n      which precise exception is being reported. In this case, since\n      we've declared the exception at the toplevel, that module path is\n      trivial.\n    </blockquote>")))
 (idp7920544
  ((file error-handling.html)
   (html
    "<blockquote>\n      But if you declare the exception using\n      <code>with sexp</code> (and the constituent types have sexp\n      converters), we'll get something with more information.\n    </blockquote>")))
 (idp7918960
  ((file error-handling.html)
   (html
    "<blockquote>\n      OCaml can't always generate a useful textual representation of\n      your exception, for example:\n    </blockquote>")))
 (idp7916432
  ((file error-handling.html)
   (html
    "<blockquote>\n      This all matters because it means that the return type of\n      <code>raise</code> can be whatever it needs to be to fit in\n      to the context it is called in. Thus, the type system will let us\n      throw an exception anywhere in a program.\n    </blockquote>")))
 (idp7915328
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>forever</code> doesn't return a value for a different\n      reason: it is an infinite loop.\n    </blockquote>")))
 (idp7911088
  ((file error-handling.html)
   (html
    "<blockquote>\n      The return type of <code>'a</code> suggests that\n      <code>raise</code> could return a value of any type. That\n      seems impossible, and it is. Really, <code>raise</code> has\n      this type because it never returns at all. This behavior isn't\n      restricted to functions like <code>raise</code> that\n      terminate by throwing exceptions. Here's another example of a\n      function that doesn't return a value.\n    </blockquote>")))
 (idp7909072
  ((file error-handling.html)
   (html
    "<blockquote>\n      In the above example, <code>raise</code> throws the\n      exception, thus terminating the computation. The type of raise is\n      a bit surprising when you first see it:\n    </blockquote>")))
 (idp7907920
  ((file error-handling.html)
   (html
    "<blockquote>\n      Note that we named the function <code>find_exn</code> to\n      warn the user that the function routinely throws exceptions, a\n      convention that is used heavily in Core.\n    </blockquote>")))
 (idp7905280
  ((file error-handling.html)
   (html
    "<blockquote>\n      Here's an example of a function for looking up a key in an\n      <span><em>association list</em></span>, <span><em>i.e.</em></span> a\n      list of key/value pairs which uses this newly-defined exception:\n    </blockquote>")))
 (idp7903200
  ((file error-handling.html)
   (html
    "<blockquote>\n      In addition to built-in exceptions like\n      <code>Divide_by_zero</code>, OCaml lets you define your own.\n    </blockquote>")))
 (idp7900384
  ((file error-handling.html)
   (html
    "<blockquote>\n      And an exception can terminate a computation even if it happens\n      nested a few levels deep in a computation.\n    </blockquote>")))
 (idp7899008
  ((file error-handling.html)
   (html
    "<blockquote>\n      You can trigger an exception triggered in OCaml by, for example,\n      dividing an integer by zero:\n    </blockquote>")))
 (idp7898272
  ((file error-handling.html)
   (html
    "<blockquote>\n      Exceptions in OCaml are not that different from exceptions in many\n      other languages, like Java, C# and Python. Exceptions are a way to\n      terminate a computation and report an error, while providing a\n      mechanism to catch and handle (and possibly recover from)\n      exceptions that are triggered by sub-computations.\n    </blockquote>")))
 (idp7894560
  ((file error-handling.html)
   (html
    "<blockquote>\n        These error-handling functions are valuable because they let you\n        express your error handling both explicitly and concisely. We've\n        only discussed these functions in the context of the\n        <code>Option</code> module, but similar functionality is\n        available in both <code>Result</code> and\n        <code>Or_error</code>.\n      </blockquote>")))
 (idp7889232
  ((file error-handling.html)
   (html
    "<blockquote>\n        There are other useful idioms encoded in the functions in\n        <code>Option</code>. Another example is\n        <code>Option.both</code>, which takes two optional values\n        and produces a new optional pair that is <code>None</code>\n        if either of its arguments are <code>None</code>. Using\n        <code>Option.both</code>, we can make\n        <code>compute_bounds</code> even shorter.\n      </blockquote>")))
 (idp7884896
  ((file error-handling.html)
   (html
    "<blockquote>\n        The above code is a little bit hard to swallow, however, on a\n        syntactic level. We can make it a bit easier to read, and drop\n        some of the parenthesis, by using the infix operator form of\n        bind. Note that we locally open the\n        <code>Option.Monad_infix</code> module to get access to\n        the operators. (The module is called\n        <code>Monad_infix</code> because the bind operator is part\n        of a sub-interface called <code>Monad</code>, which we'll\n        talk about more in\n        <a href=\"\">???</a>.\n      </blockquote>")))
 (idp7877936
  ((file error-handling.html)
   (html
    "<blockquote>\n        As you can see, <code>bind None f</code> returns\n        <code>None</code> without calling <code>f</code>,\n        and <code>bind (Some x) f</code> returns\n        <code>f x</code>. Perhaps surprisingly,\n        <code>bind</code> can be used as a way of sequencing\n        together error-producing functions so that the first one to\n        produce an error terminates the computation. Here's a rewrite of\n        <code>compute_bounds</code> to use a nested series of\n        <code>bind</code>s.\n      </blockquote>")))
 (idp7872896
  ((file error-handling.html)
   (html
    "<blockquote>\n        As you write more error handling code in OCaml, you'll discover\n        that certain patterns start to emerge. A number of these common\n        patterns been codified in the interfaces of modules like\n        <code>Option</code> and <code>Result</code>. One\n        particularly useful one is built around the function\n        <code>bind</code>, which is both an ordinary function and\n        an infix operator <code>&gt;&gt;=</code>. Here's how you\n        can define <code>bind</code>.\n      </blockquote>")))
 (idp7869056
  ((file error-handling.html)
   (html
    "<blockquote>\n        The type <code>'a Or_error.t</code> is just a shorthand\n        for <code>('a,Error.t) Result.t</code>, and it is, after\n        <code>option</code>, the most common way of returning\n        errors in Core.\n      </blockquote>")))
 (idp7866544
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Error</code> also supports operations for\n        transforming errors. For example, it's often useful to augment\n        an error with some extra information about the context of the\n        error, or to combine multiplier errors together.\n        <code>Error.tag</code> and\n        <code>Error.of_list</code> fulfill these roles.\n      </blockquote>")))
 (idp7865328
  ((file error-handling.html)
   (html
    "<blockquote>\n        The above declaration of\n        <code>&lt;:sexp_of&lt;float * string list * int&gt;&gt;</code>\n        is interpreted by sexplib as a sexp-converter for the tuple.\n      </blockquote>")))
 (idp7861456
  ((file error-handling.html)
   (html
    "<blockquote>\n        Here, the value <code>Time.epoch</code> is included in the\n        error, but that value isn't converted into an s-expression until\n        the error is printed out. Using the Sexplib syntax-extension,\n        which is discussed in more detail in chapter\n        <a href=\"data-serialization-with-json-xml-and-s-expressions\" target=\"_top\">xref</a>,\n        we can create an s-expression converter for a new type, thus\n        allowing us to conveniently register multiple pieces of data in\n        an <code>Error.t</code> as a tuple.\n      </blockquote>")))
 (idp7859040
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can also create an <code>Error.t</code> based on an\n        s-expression converter. This is probably the most common idiom\n        in Core.\n      </blockquote>")))
 (idp7857328
  ((file error-handling.html)
   (html
    "<blockquote>\n        In this case, we can benefit from the laziness of\n        <code>Error</code>, since the thunk won't be called until\n        the <code>Error.t</code> is converted to a string.\n      </blockquote>")))
 (idp7853680
  ((file error-handling.html)
   (html
    "<blockquote>\n        A more interesting construction message from a performance point\n        of view is to construct an <code>Error.t</code> from a\n        <span><em>thunk</em></span>, <span><em>i.e.</em></span>, a\n        function that takes a single argument of type\n        <code>unit</code>.\n      </blockquote>")))
 (idp7850704
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Error</code> gets around this issue through\n        laziness. In particular, an <code>Error.t</code> allows\n        you to put off generation of the error string until you need it,\n        which means a lot of the time you never have to construct it at\n        all. You can of course construct an error directly from a\n        string:\n      </blockquote>")))
 (idp7849984
  ((file error-handling.html)
   (html
    "<blockquote>\n        It might not be obvious at first why efficiency is an issue at\n        all. But generating error messages is an expensive business. An\n        ASCII representation of a value can be quite time-consuming to\n        construct, particularly if it includes expensive-to-convert\n        numerical data.\n      </blockquote>")))
 (idp7848816
  ((file error-handling.html)
   (html
    "<blockquote>\n        Core's answer to this question is the <code>Error.t</code>\n        type, which tries to forge a good compromise between efficiency,\n        convenience and control over the presentation of errors.\n      </blockquote>")))
 (idp7848272
  ((file error-handling.html)
   (html
    "<blockquote>\n        But which type to choose? Is it better to represent errors as\n        strings? Or S-expressions? Or something else entirely?\n      </blockquote>")))
 (idp7846960
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Result.t</code> gives you complete freedom to choose\n        the type of value you use to represent errors, but it's often\n        useful to standardize on an error type. Among other things, this\n        makes it easier to write utility functions to automate common\n        error handling patterns.\n      </blockquote>")))
 (idp7843952
  ((file error-handling.html)
   (html
    "<blockquote>\n        without first opening the <code>Result</code> module.\n      </blockquote>")))
 (idp7838592
  ((file error-handling.html)
   (html
    "<blockquote>\n        A <code>Result.t</code> is essentially an option augmented\n        with the ability to store other information in the error case.\n        Like <code>Some</code> and <code>None</code> for\n        options, the constructors <code>Ok</code> and\n        <code>Error</code> are promoted to the toplevel by\n        <code>Core.Std</code>. As such, we can write:\n      </blockquote>")))
 (idp7836512
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Result.t</code> is meant to address this deficiency.\n        The type is defined as follows.\n      </blockquote>")))
 (idp7835248
  ((file error-handling.html)
   (html
    "<blockquote>\n        Options aren't always a sufficiently expressive way to report\n        errors. Specifically, when you encode an error as\n        <code>None</code>, there's nowhere to say anything about\n        the nature of the error.\n      </blockquote>")))
 (idp7833056
  ((file error-handling.html)
   (html
    "<blockquote>\n      The use of options to encode errors underlines the fact that it's\n      not clear whether a particular outcome, like not finding something\n      on a list, is really an error, or just another valid outcome of\n      your function. This turns out to be very context-dependent, and\n      error-aware return types give you a uniform way of handling the\n      result that works well for both situations.\n    </blockquote>")))
 (idp7829712
  ((file error-handling.html)
   (html
    "<blockquote>\n      On the other hand, in <code>find_mismatches</code> below,\n      errors encountered during the computation do not propagate to the\n      return value of the function. <code>find_mismatches</code>\n      takes two hash tables as arguments, and searches for keys that\n      have different data in one table than in the other. As such, the\n      failure to find a key in one table isn't a failure of any sort.\n    </blockquote>")))
 (idp7827344
  ((file error-handling.html)
   (html
    "<blockquote>\n      The match statement is used to handle the error cases, propagating\n      a None in <code>hd</code> or <code>last</code> into\n      the return value of <code>compute_bounds</code>.\n    </blockquote>")))
 (idp7822944
  ((file error-handling.html)
   (html
    "<blockquote>\n      Consider the <code>compute_bounds</code> function defined\n      below. The function takes a list and a comparison function, and\n      returns upper and lower bounds for the list by finding the\n      smallest and largest element on the list.\n      <code>List.hd</code> and <code>List.last</code>, which\n      return <code>None</code> when they encounter an empty list,\n      are used to extract the largest and smallest element of the list.\n    </blockquote>")))
 (idp7822272
  ((file error-handling.html)
   (html
    "<blockquote>\n      Having errors be explicit in the return values of your functions\n      tells the caller that there is an error that needs to be handled.\n      The caller can then handle the error explicitly, either recovering\n      from the error or propagating it onward.\n    </blockquote>")))
 (idp7820592
  ((file error-handling.html)
   (html
    "<blockquote>\n      The option in the return type indicates that the function may not\n      succeed in finding a suitable element, as you can see below.\n    </blockquote>")))
 (idp7817872
  ((file error-handling.html)
   (html
    "<blockquote>\n      The best way in OCaml to signal an error is to include that error\n      in your return value. Consider the type of the\n      <code>find</code> function in the <code>List</code>\n      module.\n    </blockquote>")))
 (idp7816464
  ((file error-handling.html)
   (html
    "<blockquote>\n    We'll start by describing the two basic approaches for reporting\n    errors in OCaml: error-aware return types and exceptions.\n  </blockquote>")))
 (idp7815776
  ((file error-handling.html)
   (html
    "<blockquote>\n    Thankfully, OCaml has powerful tools for handling errors reliably\n    and with a minimum of pain. In this chapter we'll discuss some of\n    the different approaches in OCaml to handling errors, and give some\n    advice on how to design interfaces that make error handling easier.\n  </blockquote>")))
 (idp7814704
  ((file error-handling.html)
   (html
    "<blockquote>\n    Nobody likes dealing with errors. It's tedious, it's easy to get\n    wrong, and it's usually just not as fun as planning out how your\n    program is going to succeed. But error handling is important, and\n    however much you don't like thinking about it, having your software\n    fail due to poor error handling code is worse.\n  </blockquote>")))
 (idp8886384
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        You might prefer to make the syntax a bit less parenthesis-laden\n        by dropping the parentheses around the list.\n        <code>sexp_list</code> gives us this alternate syntax:\n      </blockquote>")))
 (idp8884608
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        One problem with the auto-generated sexp-converters is that they\n        can have more parentheses than one would ideally like. Consider,\n        for example, the following variant type:\n      </blockquote>")))
 (idp8880336
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        But what if we want a field to be optional,\n        <span><em>i.e.</em></span>, we want to allow it to be omitted\n        from the record entirely? In that case, we can mark it with\n        <code>sexp_option</code>:\n      </blockquote>")))
 (idp8875184
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        Another common directive is <code>sexp_opaque</code>,\n        which is used to make an optional field in a record. Ordinary\n        optional values are represented either as <code>()</code>\n        for <code>None</code>, or as <code>(x)</code> for\n        <code>Some x</code>. If you put an option in a record\n        field, then the record field will always be required, and its\n        value will be presented in the way an ordinary optional value\n        would. For example:\n      </blockquote>")))
 (idp8871648
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        And if we now convert a value of this type to an s-expression,\n        we'll see the contents of field <code>a</code> marked as\n        opaque:\n      </blockquote>")))
 (idp8869424
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        But with <code>sexp_opaque</code>, we won't:\n      </blockquote>")))
 (idp8865536
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The most commonly used directive is\n        <code>sexp_opaque</code>, whose purpose is to mark a given\n        component of a type as being unconvertible. Anything marked with\n        <code>sexp_opaque</code> will be presented as the atom\n        <code>&lt;opaque&gt;</code> by the to-sexp converter, and\n        will trigger an exception from the from-sexp converter. Note\n        that the type of a component marked as opaque doesn't need to\n        have a sexp-converter defined. Here, if we define a type without\n        a sexp-converter, and then try to use it another type with a\n        sexp-converter, we'll error out:\n      </blockquote>")))
 (idp8863600
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Sexplib supports a collection of directives for modifying the\n      default behavior of the auto-generated sexp-converters. These\n      directives allow you to customize the way in which types are\n      represented as s-expressions without having to write a custom\n      parser.\n    </blockquote>")))
 (idp8861984
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      In the above error, &quot;foo.scm:3:4&quot; tells us that the\n      error occurred on &quot;foo.scm&quot;, line 3, character 4, which\n      is a much better start for figuring out what has gone wrong.\n    </blockquote>")))
 (idp8860320
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      and run it again, we'll get the following much more helpful error\n      message:\n    </blockquote>")))
 (idp8858256
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      But there's hope! If we make small change to the\n      <code>run</code> function as follows:\n    </blockquote>")))
 (idp8857520
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      If all you have is the error message and the string, it's not\n      terribly informative. In particular, you know that the parsing\n      error-ed out on the atom &quot;not-an-integer&quot;, but you don't\n      know which one! In a large file, this kind of bad error message\n      can be pure misery.\n    </blockquote>")))
 (idp8856304
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      you'll get the following error:\n    </blockquote>")))
 (idp8855120
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      If you were to run this on a malformatted file, say, this one:\n    </blockquote>")))
 (idp8853184
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      There are two steps to deserializing a type from an s-expression:\n      first, converting the bytes in a file to an s-expression, and the\n      second, converting that s-expression into the type in question.\n      One problem with this is that it can be hard to localize errors to\n      the right place using this scheme. Consider the following example:\n    </blockquote>")))
 (idp8850896
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      We call the function <code>of_sexp_error</code> to raise an\n      exception because that improves the error reporting that Sexplib\n      can provide when a conversion fails.\n    </blockquote>")))
 (idp8848256
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      This trick of overriding an existing function definition with a\n      new one is perfectly acceptable in OCaml. Function definitions are\n      only recursive if the <code>rec</code> keyword is specified,\n      and so in this case the inner <code>t_of_sexp</code> call\n      will go to the earlier auto-generated definition that resulted\n      from the <code>type t with sexp</code> definition.\n    </blockquote>")))
 (idp8846224
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      We can fix this problem by overriding the autogenerated function\n      and writing a custom sexp-converter, but still using the\n      sexp-converter that we already have:\n    </blockquote>")))
 (idp8841280
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      One easy mistake to make when dealing with sexp converters is to\n      ignore the fact that those converters can violate the invariants\n      of your code. For example, the <code>Int_interval</code>\n      module depends for the correctness of the\n      <code>is_empty</code> check on the fact that for any value\n      <code>Range (x,y)</code>, <code>y</code> is greater\n      than or equal to <code>x</code>. The\n      <code>create</code> function preserves this invariant, but\n      the <code>t_of_sexp</code> function does not.\n    </blockquote>")))
 (idp8838832
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      at which point <code>test_interval.ml</code> will compile\n      again, and if we run it, we'll get the following output:\n    </blockquote>")))
 (idp8836224
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      But Sexplib has a shorthand for this as well, so that we can just\n      use the same <code>with</code> shorthand in the\n      <code>mli</code> signature:\n    </blockquote>")))
 (idp8834816
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      We could export the types by hand in the signature:\n    </blockquote>")))
 (idp8833456
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      then we'll get the following error:\n    </blockquote>")))
 (idp8830496
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      But we're still missing something: we haven't created an\n      <code>mli</code> signature for\n      <code>Int_interval</code> yet. Note that we need to\n      explicitly export the s-expression converters that were created\n      within the ml. If we don't:\n    </blockquote>")))
 (idp8828928
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      We can now use this module as follows:\n    </blockquote>")))
 (idp8826720
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      The most important functionality provided by Sexplib is the\n      auto-generation of converters for new types. We've seen a bit of\n      how this works already, but let's walk through a complete example.\n      Here's the source for the beginning of a library for representing\n      integer intervals.\n    </blockquote>")))
 (idp8824480
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      In the above, we use <code>Exn.handle_uncaught</code> to\n      make sure that the exception gets printed out in full detail. You\n      should generally wrap every Core program in this handler to get\n      good error messages for any unexpected exceptions.\n    </blockquote>")))
 (idp8822112
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      If we introduce an error into our s-expression, by, say, deleting\n      the open-paren in front of <code>bar</code>, we'll get a\n      parse error:\n    </blockquote>")))
 (idp8820960
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Note that the comments were dropped from the file upon reading.\n      This is expected, since there's no place in the\n      <code>Sexp.t</code> type to store comments.\n    </blockquote>")))
 (idp8819472
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      we can load it up and print it back out again:\n    </blockquote>")))
 (idp8816992
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Sexplib's format for s-expressions is pretty straightforward. An\n      s-expression is written down as a nested parenthetical expression,\n      with whitespace-separated strings as the atoms. Quotes are used\n      for atoms that contain parenthesis or spaces themselves, backslash\n      is the escape character, and semicolons are used to introduce\n      comments. Thus, if you create the following\n      <code>foo.scm</code> file:\n    </blockquote>")))
 (idp8815456
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    The syntax extensions in Core all have this same basic structure:\n    they auto-generate code based on type definitions, implementing\n    functionality that you could in theory have implemented by hand, but\n    with far less programmer effort.\n  </blockquote>")))
 (idp8812976
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    The <code>with sexp</code> is detected by a\n    <code>Sexplib</code> grammar extension to the normal OCaml\n    syntax, and replaced with the extra conversion functions you see\n    above. You can ignore <code>t_of_sexp__</code>, which is a\n    helper function that is needed in very rare cases.\n  </blockquote>")))
 (idp8809584
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    Given how mechanical the code is, you could imagine writing a\n    program that inspected the type definition and auto-generated the\n    conversion code for you. That is precisely where syntax extensions\n    come in. Using <code>Sexplib</code> (part of Core) and adding\n    <code>with sexp</code> as an annotation to our type\n    definition, we get the functions we want for free.\n  </blockquote>")))
 (idp8807904
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    This is somewhat tiresome to write, and it gets more so when you\n    consider the parser, <span><em>i.e.</em></span>,\n    <code>t_of_sexp</code>, which is considerably more complex.\n    Writing this kind of parsing and printing code by hand is mechanical\n    and error prone, not to mention a drag.\n  </blockquote>")))
 (idp8805824
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    But what if you want a function to convert some brand new type to an\n    s-expression? You can of course write it yourself manually:\n  </blockquote>")))
 (idp8804560
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    Notice that <code>List.sexp_of_t</code> is polymorphic, and\n    takes as its first argument another conversion function to handle\n    the elements of the list to be converted. Core uses this scheme more\n    generally for defining sexp-converters for polymorphic types.\n  </blockquote>")))
 (idp8802768
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    In addition, most of the base types in Core support conversion to\n    and from s-expressions. For example, we can write:\n  </blockquote>")))
 (idp8800224
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    An s-expression is in essence a nested parenthetical list whose\n    atomic values are strings. The <code>Sexp</code> module in\n    Core comes with functionality for parsing and printing\n    s-expressions.\n  </blockquote>")))
 (idp8798800
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    The corresponding OCaml type for an s-expression is quite simple:\n  </blockquote>")))
 (idp8797248
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    S-expressions are nested paranthetical strings whose atomic values\n    are strings. They were first popularized by the Lisp programming\n    language in the 1960s, and have remained a simple way to encode data\n    structures since then. An example s-expression might look like this:\n  </blockquote>")))
 (idp8794464
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    Many of the examples in the subsequent chapters depend on\n    <code>camlp4</code>, but the examples all invoke it\n    automatically for you via the <code>-pp</code> flag to the\n    OCaml compiler. If you're interested in building your own\n    generators, investigate the <code>type_conv</code> library\n    which provides the basic extension mechanism used by the rest of\n    this chapter.\n  </blockquote>")))
 (idp8793024
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    OCaml doesn't directly support converting static type definitions to\n    and from other data formats. Instead, it supplies a powerful syntax\n    extension mechanism known as <code>camlp4</code>. This lets\n    you extend the grammar of the language to mark types as requiring\n    special action, and then mechanically generate boilerplate code over\n    those types (such as converting to and from other data formats).\n  </blockquote>")))
 (idp8789488
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    We'll start by introducing some features in Core that make it really\n    easy to manipulate s-expressions and safe binary serialisers\n    directly from OCaml types. After this section, we'll move onto\n    interoperating with other third-party formats in\n    <a href=\"handling-json-data.html\">Chapter\194\16011, <i>Handling JSON data</i></a> and\n    <a href=\"xml-streams-and-trees.html\">Chapter\194\16012, <i>XML Streams and Trees</i></a>.\n  </blockquote>")))
 (idp8788304
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    Data serialization, <span><em>i.e.</em></span> reading and writing\n    program data to a sequence of bytes, is an important and common\n    programming task. Sometimes you need to match someone else's data\n    format (such as XML), and other times you just want to quickly dump\n    some values to disk and read them back later. To this end, OCaml\n    comes with several techniques for data serialization depending on\n    what your problem is.\n  </blockquote>")))
 (idp7195424
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      That's it for our guided tour! There are plenty of features left\n      to touch upon and lots of details to explain, but the hope is that\n      this has given you enough of a feel for the language that you have\n      a sense as to what to expect, and will be comfortable reading\n      examples in the rest of the book.\n    </blockquote>")))
 (idp7193712
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        More work is needed to make a really usable command-line\n        programming, including a proper command-line parsing interface\n        and better error handling.\n      </blockquote>")))
 (idp7191184
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The <code>.native</code> suffix indicates that we're\n        building a native-code executable, which we'll discuss more in\n        <a href=\"files-modules-and-programs.html\">Chapter\194\1606, <i>Files, Modules and Programs</i></a>. Once the\n        build completes, we can use the resulting program like any\n        command-line utility. In this example, we can just type in a\n        sequence of numbers, one per line, hitting control-d to exit\n        when the input is complete.\n      </blockquote>")))
 (idp7189456
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        With our <code>_tags</code> file in place, we can build\n        our executable by issuing this command.\n      </blockquote>")))
 (idp7185696
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We can use <code>ocamlbuild</code> to compile the program.\n        We'll need to create a file, in the same directory as\n        <code>sum.ml</code>, called <code>_tags</code>. We\n        can put the following in <code>_tags</code> to indicate\n        that we're building against Core, and that threads should be\n        enabled, which is a required by Core.\n      </blockquote>")))
 (idp7180864
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      After <code>read_and_accumulate</code> returns, the total\n      needs to be printed. This is done using the\n      <code>printf</code> command, which provides support for\n      type-safe format strings, similar to what you'll find in a variety\n      of languages. The format string is parsed by the compiler and used\n      to determine the number and type of the remaining arguments that\n      are required. In this case, there is a single formatting\n      directive, <code>%F</code>, so <code>printf</code>\n      expects one additional argument of type <code>float</code>.\n    </blockquote>")))
 (idp7177728
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      This is our first use of OCaml's input and output routines. The\n      function <code>read_and_accumulate</code> is a recursive\n      function that uses <code>In_channel.input_line</code> to\n      read in lines one by one from the standard input, invoking itself\n      at each iteration with its updated accumulated sum. Note that\n      <code>input_line</code> returns an optional value, with\n      <code>None</code> indicating the end of the input.\n    </blockquote>")))
 (idp7175440
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Here's the code, which you can save in a file called\n      <code>sum.ml</code>.\n    </blockquote>")))
 (idp7174784
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've played with the basic features of the language using\n      the toplevel. Now we'll create a simple, complete stand-along\n      program that does something useful: sum up a list of numbers read\n      in from the UNIX standard input.\n    </blockquote>")))
 (idp7171776
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here's an example run of this code.\n      </blockquote>")))
 (idp7168768
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        From a syntactic perspective, you should note the keywords that\n        distinguish a for loop: <code>for</code>,\n        <code>to</code>, <code>do</code> and\n        <code>done</code>.\n      </blockquote>")))
 (idp7164752
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Along with mutable data structures, OCaml gives you constructs\n        like while and for loops for interacting with them. Here, for\n        example, is some code that uses a for loop for permuting an\n        array. We use the <code>Random</code> module as our source\n        of randomness. <code>Random</code> starts out with a\n        deterministic seed, but you can call\n        <code>Random.self_init</code> to choose a new at random.\n      </blockquote>")))
 (idp7163184
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This isn't the most idiomatic (or the fastest) way to sum up a\n        list, but it shows how you can use a ref in place of a mutable\n        variable.\n      </blockquote>")))
 (idp7160048
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Even though a <code>ref</code> is just another record\n        type, it's notable because it is the standard way of simulating\n        the traditional mutable variable you'll find in most imperative\n        languages. For example, if we wanted to write an imperative loop\n        to sum over the elements of an array, we could do it as follows,\n        using the function <code>List.iter</code> to call a simple\n        function on every element of a list, and a ref to accumulate the\n        results.\n      </blockquote>")))
 (idp7158272
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here, <code>!</code> and <code>:=</code> are infix\n        operators that we're defining, where the parenthetical syntax is\n        what marks them as such.\n      </blockquote>")))
 (idp7154624
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The definition of all this is quite straightforward. Here is the\n        complete implementation of the <code>ref</code> type. The\n        <code>'a</code> before the ref indicates that the\n        <code>ref</code> type is polymorphic, in the same way that\n        lists are polymorphic, meaning it can contain values of any\n        type.\n      </blockquote>")))
 (idp7152736
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        There are a handful of useful functions and operators defined\n        for refs to make them more convenient to work with.\n      </blockquote>")))
 (idp7150480
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We can declare a single mutable value by using a\n        <code>ref</code>, which is a record type with a single\n        mutable field that is defined in the standard library.\n      </blockquote>")))
 (idp7146688
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here's an example of <code>create</code> and\n        <code>update</code> in action.\n      </blockquote>")))
 (idp7142192
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        If it doesn't convey any information, then what is\n        <code>unit</code> good for? Most of the time,\n        <code>unit</code> acts as a placeholder. Thus, we use\n        <code>unit</code> for the return value of a function like\n        <code>update</code> that operates by side effect rather\n        than by returning a value, and for the argument to a function\n        like <code>create</code> that doesn't require any\n        information to be passed into it in order to run. This is\n        similar to the role that <code>void</code> plays in\n        languages like C and Java.\n      </blockquote>")))
 (idp7138432
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        A new and somewhat odd type has cropped up in this example:\n        <code>unit</code>. What makes <code>unit</code>\n        different is that there is only one value of type\n        <code>unit</code>, which is written <code>()</code>.\n        Because there is only one value of type <code>unit</code>\n        that value doesn't really convey any information.\n      </blockquote>")))
 (idp7137792
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note the use in the above code of single semi-colons to sequence\n        operations. When we were working purely functionally, this\n        wasn't necessary, but you start needing it when your code is\n        acting by side-effect.\n      </blockquote>")))
 (idp7134160
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>create</code> returns a\n        <code>running_sum</code> corresponding to the empty set,\n        and <code>update rsum x</code> changes\n        <code>rsum</code> to reflect the addition of\n        <code>x</code> to its set of samples, by updating the\n        number of samples, the sum, and the sum of squares.\n      </blockquote>")))
 (idp7131696
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We also need functions to create and update\n        <code>running_sum</code>s:\n      </blockquote>")))
 (idp7129248
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The fields in <code>running_sum</code> are designed to be\n        easy to extend incrementally, and sufficient to compute means\n        and standard deviations, as shown below.\n      </blockquote>")))
 (idp7127472
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The array is an important mutable data structure, but it's not\n        the only one. Records, which are immutable by default, can be\n        declared with specific fields as being mutable. Here's a small\n        example of a data structure for storing a running statistical\n        summary of a collection of numbers. Here's the basic data\n        structure:\n      </blockquote>")))
 (idp7124000
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        the <code>.(i)</code> syntax is used to refer to an\n        element of an array, and the <code>&lt;-</code> syntax is\n        for modification. Because the elements of the array are counted\n        starting at zero, element <code>.(2)</code> is the third\n        element.\n      </blockquote>")))
 (idp7122560
  ((file a-guided-tour.html)
   (html "<blockquote>\n        Here's an example.\n      </blockquote>")))
 (idp7121632
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Perhaps the simplest mutable data structure in OCaml is the\n        array. Arrays in OCaml are very similar to arrays in other\n        languages like C: they are fixed width, indexing starts at 0,\n        and accessing or modifying an array element is a constant-time\n        operation. Arrays are more compact in terms of memory\n        utilization than most other data structures in OCaml, including\n        lists. OCaml uses three words per element of a list, but only\n        one per element of an array.\n      </blockquote>")))
 (idp7120032
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Functional code is the default in OCaml, with variable bindings\n      and most data structures being immutable. But OCaml also has\n      excellent support for imperative programming, including mutable\n      data structures like arrays and hashtables and control-flow\n      constructs like for and while loops.\n    </blockquote>")))
 (idp7117616
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've only written so-called <span><em>pure</em></span> or\n      <span><em>functional</em></span> code, meaning that we didn't write\n      any code that modified a variable or value after its creation.\n      Indeed, almost all of the data structures we've encountered so far\n      are <span><em>immutable</em></span>, meaning there's no way in the\n      language to modify them at all. This is a quite different style\n      from <span><em>imperative</em></span> programming, where\n      computations are structured as sequences of instructions that\n      operate by modifying state as they go.\n    </blockquote>")))
 (idp7113712
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We also made our first use of an <span><em>anonymous\n      function</em></span> in the call to\n      <code>List.for_all</code>. An anonymous function is a\n      function that is defined but not named, in this case, using the\n      <code>fun</code> keyword. Anonymous functions are common in\n      OCaml, particularly when using iteration functions like like\n      <code>List.for_all</code>.\n    </blockquote>")))
 (idp7109296
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      You might at this point notice that the use of\n      <code>match</code> here is reminiscent of how we used\n      <code>match</code> with <code>option</code> and\n      <code>list</code>. This is no accident:\n      <code>option</code> and <code>list</code> are really\n      just examples of variant types that happen to be important enough\n      to be defined in the standard library (and in the case of lists,\n      to have some special syntax).\n    </blockquote>")))
 (idp7102848
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The <code>|</code> character separates the different cases\n      of the variant (the first <code>|</code> is optional), and\n      each case has a tag, like <code>Circle</code>,\n      <code>Rect</code> and <code>Scene</code>, to\n      distinguish that case from the others. Here's how we might write a\n      function for testing whether a point is in the interior of some\n      element of a list of <code>scene_element</code>s.\n    </blockquote>")))
 (idp7100800
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now, imagine that you want to combine multiple objects of these\n      types together as a description of a multi-object scene. You need\n      some unified way of representing these objects together in a\n      single type. One way of doing this is using a\n      <span><em>variant</em></span> type:\n    </blockquote>")))
 (idp7099120
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      And we can of course include our newly defined types as components\n      in larger types, as in the following types, each of which is a\n      description of a different geometric object.\n    </blockquote>")))
 (idp7097568
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can also use dot-notation for accessing record fields:\n    </blockquote>")))
 (idp7095536
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can write the pattern match even more tersely, using what's\n      called <span><em>field punning</em></span>. In particular, when the\n      name of the field and the name of the variable coincide, we don't\n      have to write them both down. Thus, the magnitude function can be\n      rewritten as follows.\n    </blockquote>")))
 (idp7093936
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      And we can get access to the contents of these types using pattern\n      matching:\n    </blockquote>")))
 (idp7091392
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>point2d</code> is a <span><em>record</em></span> type,\n      which you can think of as a tuple where the individual fields are\n      named, rather than being defined positionally. Record types are\n      easy enough to construct:\n    </blockquote>")))
 (idp7089760
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've looked only at data structures that were predefined\n      in the language, like lists and tuples. But OCaml also allows us\n      to define new datatypes. Here's a toy example of a datatype\n      representing a point in 2-dimensional space:\n    </blockquote>")))
 (idp7085840
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In OCaml, however, nulls are explicit. A value of type\n        <code>string * string</code> always actually contains two\n        well-defined values of type <code>string</code>. If you\n        want to allow, say, the first of those to be absent, then you\n        need to change the type to\n        <code>string option * string</code>. As we'll see, this\n        explicitness allows the compiler to provide a great deal of help\n        in making sure you're correctly handing the possibility of\n        missing data.\n      </blockquote>")))
 (idp7083920
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Options are important because they are the standard way in OCaml\n        to encode a value that might not be there --- there's no such\n        thing as a <code>NullPointerException</code> in OCaml.\n        This is different from most other languages, including Java and\n        C#, where most if not all datatypes are\n        <span><em>nullable</em></span>, meaning that, whatever their type\n        is, any given value also contains the possibility of being a\n        null value. In such languages, null is lurking everywhere.\n      </blockquote>")))
 (idp7082512
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This kind of nested let binding is a common way of building up a\n        complex expression, with each <code>let</code> breaking\n        off and naming an individual component, and then combining them\n        in one final expression.\n      </blockquote>")))
 (idp7081040
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        And even have multiple let statements in a row, each one adding\n        a new variable binding to what came before.\n      </blockquote>")))
 (idp7076928
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As a side note, this is our first use of <code>let</code>\n        to define a new variable within the body of a function. A\n        <code>let</code> bounded with an <code>in</code> can\n        be used to introduce a new binding within any local scope,\n        including a function body. The <code>in</code> marks the\n        beginning of the scope within which the new variable can be\n        used. Thus, we could write:\n      </blockquote>")))
 (idp7074560
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We use a <code>match</code> statement for handling the two\n        possible states of an option.\n      </blockquote>")))
 (idp7071376
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        To get a value out of an option, we use pattern matching, as we\n        did with tuples and lists. Consider the following simple\n        function for printing a log entry given an optional time and a\n        message. If no time is provided (<span><em>i.e.</em></span>, if\n        the time is <code>None</code>), the current time is\n        computed and used in its place.\n      </blockquote>")))
 (idp7066448
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The function <code>divide</code> either returns\n        <code>None</code>, if the divisor is zero, or\n        <code>Some</code> of the result of the division,\n        otherwise. <code>Some</code> and <code>None</code>\n        are constructors, like <code>::</code> and\n        <code>[]</code> for lists, which let you build optional\n        values. You can think of an option as a specialized list that\n        can only have zero or one element.\n      </blockquote>")))
 (idp7064832
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Another common data structure in OCaml is the option. An option\n        is used to express that a value might or might not be present.\n        For example,\n      </blockquote>")))
 (idp7062256
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In the last few examples, our list processing code involved a\n          lot of recursive functions. In practice, this isn't usually\n          necessary. Most of the time, you'll find yourself happy to use\n          the iteration functions found in the <code>List</code>\n          module. But it's good to know how to use recursion when you\n          need to do something new that's not already supported.\n        </blockquote>")))
 (idp7058000
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Note that this code used another variant of the list pattern,\n          <code>[hd]</code>, to match a list with a single\n          element. We can do this to match a list with any fixed number\n          of elements, <span><em>e.g.</em></span>,\n          <code>[x;y;z]</code> will match any list with exactly\n          three elements, and will bind those elements to the variables\n          <code>x</code>, <code>y</code> and\n          <code>z</code>.\n        </blockquote>")))
 (idp7056048
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          This indicates that we're missing a case, in particular we\n          don't handle one-element lists. That's easy enough to fix by\n          adding another case to the match:\n        </blockquote>")))
 (idp7054672
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Again, the first arm of the match is the base case, and the\n          second is the inductive. Unfortunately, this code has a\n          problem. If you type it into the toplevel, you'll see this\n          error:\n        </blockquote>")))
 (idp7052464
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We can introduce more complicated list patterns as well.\n          Here's a function for destuttering a list,\n          <span><em>i.e.</em></span>, for removing sequential duplicates.\n        </blockquote>")))
 (idp7051920
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          This suggests a reasonable mental model for what OCaml is\n          actually doing to evaluate a recursive function.\n        </blockquote>")))
 (idp7049664
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Logically, you can think of the evaluation of a simple\n          recursive function like <code>sum</code> almost as if it\n          were a mathematical equation whose meaning you were unfolding\n          step by step.\n        </blockquote>")))
 (idp7047872
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Note that we had to use the <code>rec</code> keyword to\n          allow <code>sum</code> to refer to itself. And, as you\n          might imagine, the base case and inductive case are different\n          arms of the match.\n        </blockquote>")))
 (idp7046032
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          When writing recursive list functions, this separation between\n          the base cases and the inductive cases is often done using\n          pattern matching. Here's a simple example of a function that\n          sums the elements of a list.\n        </blockquote>")))
 (idp7044448
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Recursive functions, or, functions that call themselves, are\n          an important technique in OCaml and in any functional\n          language. The typical approach to designing a recursive\n          function is to separate the logic into a set of <span><em>base\n          cases</em></span>, that can be solved directly, and a set of\n          <span><em>inductive cases</em></span>, where the function\n          breaks the problem down into smaller pieces and then calls\n          itself to solve those smaller problems.\n        </blockquote>")))
 (idp7040144
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The first pattern, <code>first :: the_rest</code>,\n          covers the case where <code>languages</code> has at\n          least one element, since every list except for the empty list\n          can be written down with one or more <code>::</code>'s.\n          The second pattern, <code>[]</code>, matches only the\n          empty list. These cases are exhaustive (every list is either\n          empty, or has at least one element), and the compiler can\n          detect that exhaustiveness, which is why it doesn't spit out a\n          warning.\n        </blockquote>")))
 (idp7037520
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Note that we included a comment in the above code. OCaml\n          comments are bounded by <code>(*</code> and\n          <code>*)</code>, and can be nested arbitrarily and cover\n          multiple lines. There's no equivalent of the C-style single\n          line comment that is prefixed by <code>//</code> --- all\n          comments must be bounded on both sides.\n        </blockquote>")))
 (idp7034432
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here's a new version of\n          <code>my_favorite_language</code> that uses\n          <code>match</code>, and doesn't trigger a compiler\n          warning.\n        </blockquote>")))
 (idp7031008
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          A <code>match</code> statement is a kind of juiced-up\n          version of the switch statement found in <code>C</code>\n          and <code>Java</code>. It essentially lets you list a\n          sequence of patterns (separated by <code>|</code>\n          characters --- the one before the first case is optional), and\n          the compiler then dispatches to the code following the first\n          matched pattern. And, as we've already seen, we can name new\n          variables in our patterns that correspond to sub-structures of\n          the value being matched.\n        </blockquote>")))
 (idp7029824
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          You can avoid these warnings, and more importantly make sure\n          that your code actually handles all of the possible cases, by\n          using a <code>match</code> statement instead.\n        </blockquote>")))
 (idp7027376
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The warning comes because the compiler can't be certain that\n          the pattern match won't lead to a runtime error. Indeed, the\n          warning gives an example of a pattern that won't match, the\n          empty list, <code>[]</code>. We can see this in action\n          below.\n        </blockquote>")))
 (idp7025488
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          If you try the above example in the toplevel, however, you'll\n          see that it spits out an error:\n        </blockquote>")))
 (idp7023024
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          By pattern matching using <code>::</code>, we've broken\n          off the first element of <code>languages</code> from the\n          rest of the list. If you know Lisp or Scheme, what we've done\n          is the equivalent of using <code>car</code> to grab the\n          first element of a list.\n        </blockquote>")))
 (idp7020272
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The elements of a list can be accessed through\n          pattern-matching. List patterns are based on the two list\n          constructors, <code>[]</code> and <code>::</code>.\n          Here's a simple example.\n        </blockquote>")))
 (idp7018176
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          It's important to remember that this is not a constant-time\n          operation. Concatenating two lists takes time proportional to\n          the length of the first list.\n        </blockquote>")))
 (idp7015440
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The <code>::</code> operator can only be used for adding\n          one element to the front of the list. There's also a list\n          concatenation operator, <code>@</code>, which can\n          concatenate two lists.\n        </blockquote>")))
 (idp7012512
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The bracket notation for lists is really just syntactic sugar\n          for <code>::</code>. Thus, the following declarations\n          are all equivalent. Note that <code>[]</code> is used to\n          represent the empty list.\n        </blockquote>")))
 (idp7011040
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here, we're creating a new extended list, not changing the\n          list we started with, as you can see below.\n        </blockquote>")))
 (idp7008832
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In addition to constructing lists using brackets, we can use\n          the operator <code>::</code> for adding elements to the\n          front of a list.\n        </blockquote>")))
 (idp7006336
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We'll learn more about labeled arguments and why they're\n          important in\n          <a href=\"variables-and-functions.html\">Chapter\194\1602, <i>Variables and Functions</i></a>.\n        </blockquote>")))
 (idp7003136
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In this example, the function <code>String.length</code>\n          is passed using under the <span><em>labeled\n          argument</em></span> <code>~f</code>. Labels allow you to\n          specify function arguments by name rather than by position. As\n          you can see below, we can change the order of labeled\n          arguments without changing the function's behavior.\n        </blockquote>")))
 (idp7001280
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>List.map</code> takes two arguments: a list, and a\n          function for transforming the elements of that list. Note that\n          <code>List.map</code> creates a new list and does not\n          modify the original.\n        </blockquote>")))
 (idp6999792
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here's something a little more complicated. We can compute the\n          list of the lengths of each language as follows.\n        </blockquote>")))
 (idp6997664
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Core comes with a <code>List</code> module that has a\n          rich collection of functions for working with lists. We can\n          access values from within a module by using dot-notation.\n          Here, for example, is how we compute the length of a list.\n        </blockquote>")))
 (idp6994176
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note that you can't mix elements of different types on the same\n        list, as we did with tuples.\n      </blockquote>")))
 (idp6992544
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Where tuples let you combine a fixed number of items,\n        potentially of different types, lists let you hold any number of\n        items of the same type. For example:\n      </blockquote>")))
 (idp6990960
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This is just a first taste of pattern matching. Pattern matching\n        is a pervasive tool in OCaml, and as you'll see, it has\n        surprising power.\n      </blockquote>")))
 (idp6989856
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The <code>**</code> operator used above is for raising a\n        floating-point number to a power.\n      </blockquote>")))
 (idp6987552
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Pattern matching can also show up in function arguments. Here's\n        a function for computing the distance between two points on the\n        plane, where each point is represented as a pair of\n        <code>float</code>s. The pattern matching syntax lets us\n        get at the values we need with a minimum of fuss.\n      </blockquote>")))
 (idp6987040
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note that the same syntax is used both for constructing and for\n        pattern-matching on tuples.\n      </blockquote>")))
 (idp6983040
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here, the <code>(x,y)</code> on the left-hand side of the\n        <code>let</code> binding is the pattern. This pattern lets\n        us mint the new variables <code>x</code> and\n        <code>y</code>, each bound to different components of the\n        value being matched, which can now be used in subsequent\n        expressions.\n      </blockquote>")))
 (idp6981536
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        You can extract the components of a tuple using OCaml's\n        pattern-matching syntax. For example:\n      </blockquote>")))
 (idp6978464
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        For the mathematically inclined, the <code>*</code>\n        character is used because the set of all pairs of type\n        <code>t * s</code> corresponds to the Cartesian product of\n        the set of elements of type <code>t</code> and the set of\n        elements of type <code>s</code>.\n      </blockquote>")))
 (idp6974128
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        So far we've encountered a handful of basic types like\n        <code>int</code>, <code>float</code> and\n        <code>string</code> as well as function types like\n        <code>string -&gt; int</code>. But we haven't yet talked\n        about any data structures. We'll start by looking at a\n        particularly simple data structure, the tuple. A tuple is an\n        ordered collection of values that can each be of different type.\n        You can create a tuple by joining values together with a comma:\n      </blockquote>")))
 (idp6970032
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The distinction here is that type errors will stop you whether\n        or not the offending code is ever actually executed. Merely\n        defining <code>add_potato</code> is an error, whereas\n        <code>is_a_multiple</code> only fails when it's called,\n        and then, only when it's called with an input that triggers the\n        exception.\n      </blockquote>")))
 (idp6968112
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        are compile-time errors, whereas an error that can't be caught\n        by the type system, like division by zero, leads to a runtime\n        exception.\n      </blockquote>")))
 (idp6966432
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Working in the toplevel somewhat obscures the difference between\n        run-time and compile time errors, but that difference is still\n        there. Generally, type errors, like this one:\n      </blockquote>")))
 (idp6965712
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        There's a big difference in OCaml (and really in any compiled\n        language) between errors that are caught at compile time and\n        those that are caught at run-time. It's better to catch errors\n        as early as possible in the development process, and compilation\n        time is best of all.\n      </blockquote>")))
 (idp6959872
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In this example, <code>big_number</code> requires that\n        <code>'a</code> be of type <code>int</code>, whereas\n        <code>&quot;short&quot;</code> and\n        <code>&quot;loooooong&quot;</code> require that\n        <code>'a</code> be of type <code>string</code>, and\n        they can't all be right at the same time. This kind of\n        genericity is called <span><em>parametric\n        polymorphism</em></span>, and is very similar to generics in C#\n        and Java.\n      </blockquote>")))
 (idp6954608
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Both <code>long_string</code> and\n        <code>big_number</code> are functions, and each is passed\n        to <code>first_if_true</code> with two other arguments of\n        the appropriate type (strings in the first example, and integers\n        in the second). But we can't mix and match two different\n        concrete types for <code>'a</code> in the same use of\n        <code>first_if_true</code>.\n      </blockquote>")))
 (idp6953184
  ((file a-guided-tour.html)
   (html "<blockquote>\n        And we can also write:\n      </blockquote>")))
 (idp6951664
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This genericity means that we can write:\n      </blockquote>")))
 (idp6945488
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        we see that rather than choose a single concrete type, OCaml has\n        introduced a <span><em>type variable</em></span>\n<code>'a</code> to express that the type is generic. In\n        particular, the type of the <code>test</code> argument is\n        <code>('a -&gt; bool)</code>, which means that test is a\n        one-argument function whose return value is\n        <code>bool</code>, and whose argument could be of any type\n        <code>'a</code>. But, whatever type <code>'a</code>\n        is, it has to be the same as the type of the other two\n        arguments, <code>x</code> and <code>y</code>.\n      </blockquote>")))
 (idp6936304
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>first_if_true</code> takes as its arguments a\n        function <code>test</code>, and two values,\n        <code>x</code> and <code>y</code>, where\n        <code>x</code> is to be returned if\n        <code>test x</code> evaluates to <code>true</code>,\n        and <code>y</code> otherwise. So what's the type of\n        <code>first_if_true</code>? There are no obvious clues\n        such as arithmetic operators or literals to tell you what the\n        type of <code>x</code> and <code>y</code> are. That\n        makes it seem like one could use this\n        <code>first_if_true</code> on values of any type. Indeed,\n        if we look at the type returned by the toplevel:\n      </blockquote>")))
 (idp6934816
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Sometimes, there isn't enough information to fully determine the\n        concrete type of a given value. Consider this function.\n      </blockquote>")))
 (idp6933072
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In the above, we've marked every argument to the function with\n        its type, with the final annotation indicating the type of the\n        return value. Such type annotations can actually go around any\n        value in an OCaml program, and can be useful for figuring out\n        why a given program is failing to compile.\n      </blockquote>")))
 (idp6930304
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Over time, you'll build a rough intuition for how the OCaml\n        inference engine works, which makes it easier to reason through\n        your programs. One way of making it easier to understand the\n        types is to add explicit type annotations. These annotations\n        never change the behavior of an OCaml program, but they can\n        serve as useful documentation, as well as catch unintended type\n        changes. Here's an annotated version of\n        <code>sum_if_true</code>:\n      </blockquote>")))
 (idp6929152
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Together, that nails down the the types of all the variables,\n        which determines the overall type of\n        <code>sum_if_true</code>.\n      </blockquote>")))
 (idp6927184
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n            The fact that <code>+</code> returns an int implies\n            that the return value of <code>sum_if_true</code> must\n            be int.\n          </blockquote>")))
 (idp6923920
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>test x</code> is used as the condition in an\n            <code>if</code> statement, so the return type of\n            <code>test</code> must be <code>bool</code>.\n          </blockquote>")))
 (idp6919408
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>test</code> is passed <code>x</code> as an\n            argument. Since <code>x</code> has type\n            <code>int</code>, the input type of\n            <code>test</code> must be <code>int</code>.\n          </blockquote>")))
 (idp6914176
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n            OCaml requires that both arms of an <code>if</code>\n            statement return the same type, so the expression\n            <code>if test x then x else 0</code> requires that\n            <code>x</code> must be the same type as\n            <code>0</code>, which is <code>int</code>. By\n            the same logic we can conclude that <code>y</code> has\n            type <code>int</code>.\n          </blockquote>")))
 (idp6912544
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As an example, let's walk through the process of inferring the\n        type of <code>sum_if_true</code>.\n      </blockquote>")))
 (idp6911424
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        OCaml determines the type of an expression using a technique\n        called <span><em>type inference</em></span>, by which it infers\n        the type of a given expression based on what it already knows\n        about the types of other related variables, and on constraints\n        on the types that arise from the structure of the code.\n      </blockquote>")))
 (idp6910816
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As the types we encounter get more complicated, you might ask\n        yourself how OCaml is able to figure them out, given that we\n        didn't write down any explicit type information.\n      </blockquote>")))
 (idp6906208
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Note that in the definition of <code>even</code> we used\n      <code>=</code> in two different ways: once as an equality\n      test, when comparing <code>x mod 2</code> to\n      <code>0</code>; and once as the part of the let binding that\n      separates the thing being defined from its definition. These two\n      uses of <code>=</code> are basically unrelated.\n    </blockquote>")))
 (idp6904288
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      If we look at the inferred type signature in detail, we see that\n      the first argument is a function that takes an int and returns a\n      boolean, and that the remaining two arguments are integers. Here's\n      an example of this function in action.\n    </blockquote>")))
 (idp6902480
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can even write functions that take other functions as\n      arguments. Here's an example of a function that takes three\n      arguments: a test function and two integer arguments. The function\n      returns the sum of the integers that pass the test.\n    </blockquote>")))
 (idp6900848
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      describes a function that takes two <code>int</code>\n      arguments and returns a <code>float</code>.\n    </blockquote>")))
 (idp6898672
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The notation for the type-signature of a multi-argument functions\n      may be a little surprising at first, but we'll explain where it\n      comes from when we get to function currying in\n      <a href=\"variables-and-functions.html\">Chapter\194\1602, <i>Variables and Functions</i></a>. For the\n      moment, think of the arrows as separating different arguments of\n      the function, with the type after the final arrow being the return\n      value of the function. Thus,\n    </blockquote>")))
 (idp6895056
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now that we're creating more interesting values like functions,\n      the types have gotten more interesting too.\n      <code>int -&gt; int</code> is a function type, in this case\n      indicating a function that takes an <code>int</code> and\n      returns an <code>int</code>. We can also write functions\n      that take multiple arguments.\n    </blockquote>")))
 (idp6892496
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      When using <code>let</code> to define a function, the first\n      identifier after the <code>let</code> is the function name,\n      and each subsequent identifier is a different argument to the\n      function. Thus, <code>square</code> is a function with a\n      single argument. If no arguments are given, then we just have the\n      ordinary definition of a variable that we saw earlier.\n    </blockquote>")))
 (idp6890352
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The <code>let</code> syntax can also be used for creating\n      functions:\n    </blockquote>")))
 (idp6885728
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      After a new variable is created, the toplevel tells us the name of\n      the variable (<code>x</code> or <code>y</code>), in\n      addition to its type (<code>int</code>) and value\n      (<code>7</code> or <code>14</code>).\n    </blockquote>")))
 (idp6883360
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can also create a variable to name the value of a given\n      expression, using the <code>let</code> keyword (also known\n      as a <span><em>let binding</em></span>).\n    </blockquote>")))
 (idp6877424
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          OCaml carefully distinguishes between\n          <code>float</code>, the type for floating point numbers\n          and <code>int</code> the type for integers. The types\n          have different literals (<code>6.</code> instead of\n          <code>6</code>) and different infix operators\n          (<code>+.</code> instead of <code>+</code>), and\n          OCaml doesn't do any automated casting between the types. This\n          can be a bit of a nuisance, but it has its benefits, since it\n          prevents some kinds of bugs that arise in other languages due\n          to unexpected differences between the behavior of\n          <code>int</code> and <code>float</code>.\n        </blockquote>")))
 (idp6876464
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Function arguments are separated by spaces, instead of by\n          parenthesis and commas, which is more like the UNIX shell than\n          C or Java.\n        </blockquote>")))
 (idp6875552
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          After evaluating an expression, the toplevel spits out both\n          the type of the result and the result itself.\n        </blockquote>")))
 (idp6873280
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We needed to type <code>;;</code> in order to tell the\n          toplevel that it should evaluate an expression. This is a\n          peculiarity of the toplevel that is not required in\n          stand-alone programs (though it is sometimes helpful to\n          include <code>;;</code> to improve OCaml's error\n          reporting.)\n        </blockquote>")))
 (idp6872208
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      By and large, this is pretty similar to what you'd find in any\n      programming language, but there are a few things that jump right\n      out at you.\n    </blockquote>")))
 (idp6870736
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now that we have Core open, let's try a few simple numerical\n      calculations.\n    </blockquote>")))
 (idp6868016
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Let's spin up the toplevel. Throughout the book we're going to use\n      Core, a more full-featured and capable replacement for OCaml's\n      standard library. Accordingly, we'll start by opening the\n      <code>Core.Std</code> module to get access to Core's\n      libraries. If you don't open <code>Core.Std</code> many of\n      the examples below will fail.\n    </blockquote>")))
 (idp298224
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    Then type in <code>utop</code>, and you'll be in an\n    interactive toplevel environment. OCaml phrases are only evaluated\n    when you enter a double semicolon (<code>;;</code>), so you\n    can split your typing over multiple lines. You can exit\n    <code>utop</code> by pressing <code>control-D</code> and\n    return. For complete instructions, please refer to\n    <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a>.\n  </blockquote>")))
 (idp296160
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    Then create a file called <code>~/.ocamlinit</code> in your\n    home directory:\n  </blockquote>")))
 (idp294080
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    The easiest way to get the examples running is to set up the OPAM\n    package manager, which is explained in\n    <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a>. In a nutshell, you need to\n    have a working C compilation environment and the PCRE library\n    installed, and then:\n  </blockquote>")))
 (idp292144
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    Before getting started, do make sure you have a working OCaml\n    installation and toplevel as you read through this chapter so you\n    can try out the examples.\n  </blockquote>")))
 (idp288864
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    We'll present this guided tour using the Core standard library and\n    the <code>utop</code> OCaml toplevel, a shell that lets you\n    type in expressions and evaluate them interactively.\n    <code>utop</code> is an easier-to-use version of the toplevel\n    that you get by typing <code>ocaml</code> at the command line,\n    and these instructions will assume you're using\n    <code>utop</code> specifically.\n  </blockquote>")))
 (idp288208
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    This chapter gives an overview of OCaml by walking through a series\n    of small examples that cover most of the major features of the\n    language. This should give a sense of what OCaml can do, without\n    getting too deep in any one topic.\n  </blockquote>"))))
