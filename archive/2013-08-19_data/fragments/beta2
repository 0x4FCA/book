((idp8177808
  ((file variants.html)
   (html
    "<blockquote>\n        Variants are most problematic exactly where you take full\n        advantage of their power; in particular, when you take advantage\n        of the ability of polymorphic variant types to overlap in the\n        tags they support. This ties into OCaml's support for subtyping.\n        As we'll discuss further when we cover objects in\n        <a href=\"objects.html\">Chapter\194\16011, <i>Objects</i></a>, subtyping brings in a lot\n        of complexity, and most of the time, that's complexity you want\n        to avoid.\n      </blockquote>")))
 (idp8176864
  ((file variants.html)
   (html
    "<blockquote>\n        Probably the safest and most common use-case for polymorphic\n        variants is where ordinary variants would be sufficient, but are\n        syntactically too heavyweight. For example, you often want to\n        create a variant type for encoding the inputs or outputs to a\n        function, where it's not worth declaring a separate type for it.\n        Polymorphic variants are very useful here, and as long as there\n        are type annotations that constrain these to have explicit,\n        exact types, this tends to work well.\n      </blockquote>")))
 (idp8176272
  ((file variants.html)
   (html
    "<blockquote>\n        All that said, polymorphic variants are still a useful and\n        powerful feature, but it's worth understanding their\n        limitations, and how to use them sensibly and modestly.\n      </blockquote>")))
 (idp8174944
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Efficiency:</em></span> This isn't a huge effect,\n            but polymorphic variants are somewhat heavier than regular\n            variants, and OCaml can't generate code for matching on\n            polymorphic variants that is quite as efficient as what it\n            generated for regular variants.\n          </blockquote>")))
 (idp8173568
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Error-finding:</em></span> Polymorphic variants are\n            type-safe, but the typing discipline that they impose is, by\n            dint of its flexibility, less likely to catch bugs in your\n            program.\n          </blockquote>")))
 (idp8171856
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Complexity:</em></span> As we've seen, the typing\n            rules for polymorphic variants are a lot more complicated\n            than they are for regular variants. This means that heavy\n            use of polymorphic variants can leave you scratching your\n            head trying to figure out why a given piece of code did or\n            didn't compile. It can also lead to absurdly long and hard\n            to decode error messages. Indeed, concision at the value\n            level is often balanced out by more verbosity at the type\n            level.\n          </blockquote>")))
 (idp8170736
  ((file variants.html)
   (html
    "<blockquote>\n        In reality, regular variants are the more pragmatic choice most\n        of the time. That's because the flexibility of polymorphic\n        variants comes at a price. Here are some of the downsides.\n      </blockquote>")))
 (idp8170096
  ((file variants.html)
   (html
    "<blockquote>\n        At first glance, polymorphic variants look like a strict\n        improvement over ordinary variants. You can do everything that\n        ordinary variants can do, plus it's more flexible and more\n        concise. What's not to like?\n      </blockquote>")))
 (idp8168496
  ((file variants.html)
   (html
    "<blockquote>\n        This is useful when you want to narrow down to a type whose\n        definition is long, and you don't want the verbosity of writing\n        the tags down explicitly in the match.\n      </blockquote>")))
 (idp8166480
  ((file variants.html)
   (html
    "<blockquote>\n        Once we have type definitions at our disposal, we can revisit\n        the question of how we write the pattern match that narrows the\n        type. In particular, we can explicitly use the type name as part\n        of the pattern match, by prefixing it with a\n        <code>#</code>.\n      </blockquote>")))
 (idp8164688
  ((file variants.html)
   (html
    "<blockquote>\n        In particular, the compiler will complain that the\n        <code>`Grey</code> case is unused.\n      </blockquote>")))
 (idp8162768
  ((file variants.html)
   (html
    "<blockquote>\n        If we add an explicit type annotation to the code itself (rather\n        than just in the <code>mli</code>), then the compiler has\n        enough information to warn us.\n      </blockquote>")))
 (idp8157968
  ((file variants.html)
   (html
    "<blockquote>\n        In the above code, we did something funny to the definition of\n        <code>extended_color_to_int</code>, that underlines some\n        of the downsides of polymorphic variants. In particular, we\n        added some special-case handling for the color gray, rather than\n        using <code>color_to_int</code>. Unfortunately, we\n        misspelled <code>Gray</code> as <code>Grey</code>.\n        This is exactly the kind of error that the compiler would catch\n        with ordinary variants, but with polymorphic variants, this\n        compiles without issue. All that happened was that the compiler\n        inferred a wider type for\n        <code>extended_color_to_int</code>, which happens to be\n        compatible with the narrower type that was listed in the\n        <code>mli</code>.\n      </blockquote>")))
 (idp8155488
  ((file variants.html)
   (html
    "<blockquote>\n        Here, <code>extended_color</code> is defined as an\n        explicit extension of <code>color</code>. Also, notice\n        that we defined all of these types as exact variants. We can\n        implement this library as follows.\n      </blockquote>")))
 (idp8151904
  ((file variants.html)
   (html
    "<blockquote>\n        Let's consider how we might turn our code into a proper library\n        with an implementation in an <code>ml</code> file and an\n        interface in a separate <code>mli</code>, as we saw in\n        <a href=\"files-modules-and-programs.html\">Chapter\194\1604, <i>Files, Modules and Programs</i></a>. Let's\n        start with the <code>mli</code>.\n      </blockquote>")))
 (idp8151168
  ((file variants.html)
   (html
    "<blockquote>\n        With ordinary variants, such a typo would have been caught as an\n        unknown tag. As a general matter, one should be wary about\n        mixing catch-all cases and polymorphic variants.\n      </blockquote>")))
 (idp8147776
  ((file variants.html)
   (html
    "<blockquote>\n        Catch-all cases are error-prone even with ordinary variants, but\n        they are especially so with polymorphic variants. That's because\n        you have no way of bounding what tags your function might have\n        to deal with. Such code is particularly vulnerable to typos. For\n        instance, if code that uses\n        <code>is_positive_permissive</code> passes in\n        <code>Float</code> misspelled as <code>Floot</code>,\n        the erroneous code will compile without complaint.\n      </blockquote>")))
 (idp8145760
  ((file variants.html)
   (html
    "<blockquote>\n        As we saw with the definition of <code>is_positive</code>,\n        a match statement can lead to the inference of an upper bound on\n        a variant type, limiting the possible tags to those that can be\n        handled by the match. If we add a catch-all case to our match\n        statement, we end up with a function with a lower bound.\n      </blockquote>")))
 (idp8143760
  ((file variants.html)
   (html
    "<blockquote>\n        The above code is more delicately balanced than one might\n        imagine. In particular, if we use a catch-all case instead of an\n        explicit enumeration of the cases, the type is no longer\n        narrowed, and so compilation fails.\n      </blockquote>")))
 (idp8137088
  ((file variants.html)
   (html
    "<blockquote>\n        Now we can try writing <code>extended_color_to_int</code>.\n        The key issue with this code is that\n        <code>extended_color_to_int</code> needs to invoke\n        <code>color_to_int</code> with a narrower type,\n        <span><em>i.e.</em></span>, one that includes fewer tags. Written\n        properly, this narrowing can be done via a pattern match. In\n        particular, in the following code, the type of the variable\n        <code>color</code> includes only the tags\n        <code>`Basic</code>, <code>`RGB</code> and\n        <code>`Gray</code>, and not <code>`RGBA</code>.\n      </blockquote>")))
 (idp8134432
  ((file variants.html)
   (html
    "<blockquote>\n        What we want to do is to share tags between two different\n        variant types, and polymorphic variants let us do this in a\n        natural way. First, let's rewrite\n        <code>basic_color_to_int</code> and\n        <code>color_to_int</code> using polymorphic variants. The\n        translation here is pretty straightforward.\n      </blockquote>")))
 (idp8131904
  ((file variants.html)
   (html
    "<blockquote>\n        The code looks reasonable enough, but it leads to a type error\n        because <code>extended_color</code> and\n        <code>color</code> are in the compiler's view distinct and\n        unrelated types. The compiler doesn't, for example, recognize\n        any equality between the <code>Basic</code> tag in the two\n        types.\n      </blockquote>")))
 (idp8129360
  ((file variants.html)
   (html
    "<blockquote>\n        We want to write a function\n        <code>extended_color_to_int</code>, that works like\n        <code>color_to_int</code> for all of the old kinds of\n        colors, with new logic only for handling colors that include an\n        alpha channel. One might try to write such a function as\n        follows.\n      </blockquote>")))
 (idp8127904
  ((file variants.html)
   (html
    "<blockquote>\n        To see how to use polymorphic variants in practice, we'll return\n        to terminal colors. Imagine that we have a new terminal type\n        that adds yet more colors, say, by adding an alpha channel so\n        you can specify translucent colors. We could model this extended\n        set of colors as follows, using an ordinary variant.\n      </blockquote>")))
 (idp8123296
  ((file variants.html)
   (html
    "<blockquote>\n      Here, the inferred type states that the tags can be no more than\n      <code>`Float</code>, <code>`Int</code> and\n      <code>`Not_a_number</code>, and must contain at least\n      <code>`Float</code> and <code>`Int</code>. As you can\n      already start to see, polymorphic variants can lead to fairly\n      complex inferred types.\n    </blockquote>")))
 (idp8120176
  ((file variants.html)
   (html
    "<blockquote>\n      Perhaps surprisingly, we can also create polymorphic variant types\n      that have different upper and lower bounds. Note that\n      <code>Ok</code> and <code>Error</code> in the\n      following example come from the <code>Result.t</code> type\n      from Core.\n    </blockquote>")))
 (idp8117168
  ((file variants.html)
   (html
    "<blockquote>\n      We can think of these <code>&lt;</code> and\n      <code>&gt;</code> markers as indications of upper and lower\n      bounds on the tags involved. If the same set of tags are both an\n      upper and a lower bound, we end up with an\n      <span><em>exact</em></span> polymorphic variant type, which has\n      neither marker. For example:\n    </blockquote>")))
 (idp8114208
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>&lt;</code> is there because\n      <code>is_positive</code> has no way of dealing with values\n      that have tags other than <code>`Float of float</code> or\n      <code>`Int of int</code>.\n    </blockquote>")))
 (idp8112288
  ((file variants.html)
   (html
    "<blockquote>\n      OCaml will in some cases infer a variant type with\n      <code>&lt;</code>, to indicate &quot;these tags or\n      less&quot;, as in the following example.\n    </blockquote>")))
 (idp8108208
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>&gt;</code> at the beginning of the variant types\n      above is critical, because it marks the types as being open to\n      combination with other variant types. We can read the type\n      <code>[&gt; `Int of string | `Float of float]</code> as\n      describing a variant whose tags include\n      <code>`Int of string</code> and\n      <code>`Float of float</code>, but may include more tags as\n      well. In other words, you can roughly translate\n      <code>&gt;</code> to mean: &quot;these tags or more&quot;.\n    </blockquote>")))
 (idp8107008
  ((file variants.html)
   (html
    "<blockquote>\n      The type system will complain, if it sees incompatible uses of the\n      same tag:\n    </blockquote>")))
 (idp8104704
  ((file variants.html)
   (html
    "<blockquote>\n      As you can see, polymorphic variant types are inferred\n      automatically, and when we combine variants with different tags,\n      the compiler infers a new type that knows about all of those tags.\n      Note that in the above example, the tag name\n      (<span><em>e.g.</em></span>, <code>`Int</code>) matches the\n      type name (<code>int</code>). This is a common convention in\n      OCaml.\n    </blockquote>")))
 (idp8103360
  ((file variants.html)
   (html
    "<blockquote>\n      Syntactically, polymorphic variants are distinguished from\n      ordinary variants by the leading backtick. And unlike ordinary\n      variants, polymorphic variants can be used without an explicit\n      type declaration.\n    </blockquote>")))
 (idp8102288
  ((file variants.html)
   (html
    "<blockquote>\n      In addition to the ordinary variants we've seen so far, OCaml also\n      supports so-called <span><em>polymorphic variants</em></span>. As\n      we'll see, polymorphic variants are more flexible and\n      syntactically more lightweight than ordinary variants, but that\n      extra power comes at a cost.\n    </blockquote>")))
 (idp8100672
  ((file variants.html)
   (html
    "<blockquote>\n      More generally, using variants to build recursive data structures\n      is a common technique, and shows up everywhere from designing\n      little languages to building complex data structures.\n    </blockquote>")))
 (idp8098736
  ((file variants.html)
   (html
    "<blockquote>\n      The example of a boolean expression language is more than a toy.\n      There's a module very much in this spirit in Core called\n      <code>Blang</code> (short for &quot;boolean language&quot;),\n      and it gets a lot of practical use in a variety of applications.\n      The simplification algorithm in particular is useful when you want\n      to use it to specialize the evaluation of expressions for which\n      the evaluation of some of the base predicates is already known.\n    </blockquote>")))
 (idp8097520
  ((file variants.html)
   (html
    "<blockquote>\n      We can of course fix this by handling simply adding an explicit\n      case for double-negation.\n    </blockquote>")))
 (idp8095392
  ((file variants.html)
   (html
    "<blockquote>\n      It fails to remove the double negation, and it's easy to see why.\n      The <code>not_</code> function has a catch-all case, so it\n      ignores everything but the one case it explicitly considers, that\n      of the negation of a constant. Catch-all cases are generally a bad\n      idea, and if we make the code more explicit, we see that the\n      missing of the double-negation is more obvious.\n    </blockquote>")))
 (idp8094160
  ((file variants.html)
   (html
    "<blockquote>\n      There are some simplifications it misses, however. In particular,\n      see what happens if we add a double negation in.\n    </blockquote>")))
 (idp8091280
  ((file variants.html)
   (html
    "<blockquote>\n      Here, it correctly converted the <code>Or</code> branch to\n      <code>Const true</code>, and then eliminated the\n      <code>And</code>, entirely, since the <code>And</code>\n      then had only one non-trivial component.\n    </blockquote>")))
 (idp8090064
  ((file variants.html)
   (html
    "<blockquote>\n      We can now apply this to a boolean expression and see how good of\n      a job it does at simplifying it.\n    </blockquote>")))
 (idp8088864
  ((file variants.html)
   (html
    "<blockquote>\n      Now, we can write a simplification routine that brings these\n      together.\n    </blockquote>")))
 (idp8087440
  ((file variants.html)
   (html
    "<blockquote>\n      Another useful operation on expressions is simplification. The\n      following simplification code is based on having some simplifying\n      constructors that mirror the tags used to construct a tree. Then\n      the simplification function is responsible for rebuilding the tree\n      using these constructors.\n    </blockquote>")))
 (idp8086064
  ((file variants.html)
   (html
    "<blockquote>\n      The structure of the code is pretty straightforward --- we're just\n      pattern matching over the structure of the data, doing the\n      appropriate calculation based on which tag we see. To use this\n      evaluator on a concrete example, we just need to write the\n      <code>base_eval</code> function which is capable of\n      evaluating a base predicate.\n    </blockquote>")))
 (idp8084720
  ((file variants.html)
   (html
    "<blockquote>\n      Being able to construct such expressions isn't enough; we also\n      need to be able to evaluate such an expression. The following code\n      shows how you could write a general-purpose evaluator for these\n      expressions.\n    </blockquote>")))
 (idp8082912
  ((file variants.html)
   (html
    "<blockquote>\n      Using the above, we can construct a simple expression with\n      <code>mail_predicate</code> as its base predicate.\n    </blockquote>")))
 (idp8080208
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>Base</code> tag is what allows you to tie the\n      <code>expr</code> to your application, by letting you\n      specify an element of some base predicate type, whose truth or\n      falsehood is determined by your application. If you were writing a\n      filter language for an email processor, your base predicates might\n      specify the tests you would run against an email, as in the\n      following example.\n    </blockquote>")))
 (idp8075904
  ((file variants.html)
   (html
    "<blockquote>\n      The purpose of each tag is pretty straightforward.\n      <code>And</code>, <code>Or</code> and\n      <code>Not</code> are the basic operators for building up\n      Boolean expressions, and <code>Const</code> lets you enter\n      the constants <code>true</code> and\n      <code>false</code>.\n    </blockquote>")))
 (idp8071680
  ((file variants.html)
   (html
    "<blockquote>\n      Note that the definition of the type <code>expr</code> is\n      recursive, meaning that a <code>expr</code> may contain\n      other <code>expr</code>s. Also, <code>expr</code> is\n      parameterized by a polymorphic type <code>'a</code> which is\n      used for specifying the type of the value that goes under the\n      <code>Base</code> tag.\n    </blockquote>")))
 (idp8069776
  ((file variants.html)
   (html
    "<blockquote>\n      An expression in this language will be defined by the variant\n      <code>expr</code>, with one tag for each kind of expression\n      we want to support.\n    </blockquote>")))
 (idp8069008
  ((file variants.html)
   (html
    "<blockquote>\n      Another common application of variants is to represent tree-like\n      recursive data structures. We'll show how this can be done by\n      walking through the design of a simple Boolean expression\n      language. Such a language can be useful anywhere you need to\n      specify filters, which are used in everything from packet\n      analyzers to mail clients.\n    </blockquote>")))
 (idp8065120
  ((file variants.html)
   (html
    "<blockquote>\n      And it's explicit at the type level that\n      <code>handle_log_entry</code> sees only\n      <code>Log_entry</code> messages,\n      <code>handle_logon</code> sees only <code>Logon</code>\n      messages, etc.\n    </blockquote>")))
 (idp8062272
  ((file variants.html)
   (html
    "<blockquote>\n      In addition, this design allows us to essentially downcast to the\n      specific message type once we know what it is, and then dispatch\n      code to handle just that message type. In particular, while we use\n      the type <code>Common.t * details</code> to represent an\n      arbitrary message, we can use\n      <code>Common.t * Logon.t</code> to represent a logon\n      message. Thus, if we had functions for handling individual message\n      types, we could write a dispatch function as follows.\n    </blockquote>")))
 (idp8061104
  ((file variants.html)
   (html
    "<blockquote>\n      Note that the more complex match statement for computing the\n      session id has been replaced with the simple expression\n      <code>common.Common.session_id</code>.\n    </blockquote>")))
 (idp8058608
  ((file variants.html)
   (html
    "<blockquote>\n      A full message can then be represented as a pair of a\n      <code>Common.t</code> and a <code>details</code>.\n      Using this, we can rewrite our example above as follows:\n    </blockquote>")))
 (idp8057392
  ((file variants.html)
   (html
    "<blockquote>\n      Separately, we need a record that contains the fields that are\n      common across all messages.\n    </blockquote>")))
 (idp8056176
  ((file variants.html)
   (html
    "<blockquote>\n      We can then define a variant type that covers the different\n      possible unique components.\n    </blockquote>")))
 (idp8054784
  ((file variants.html)
   (html
    "<blockquote>\n      We can improve the code by refactoring our types to explicitly\n      separate the parts that are shared from those that are common. The\n      first step is to cut down the definitions of the per-message\n      records to just contain the unique components of each message.\n    </blockquote>")))
 (idp8052592
  ((file variants.html)
   (html
    "<blockquote>\n      There's one awkward bit about the code above, which is the\n      calculation of the session ids. In particular, we have the\n      repetitive bit of code where we compute the\n      <code>session_id</code>. This code effectively computes the\n      session id for each underlying message type. The repetition in\n      this case isn't that bad, but would become problematic in larger\n      and more complicated examples. Also, we had to include code for\n      the <code>Logon</code> case, even though it can't actually\n      come up.\n    </blockquote>")))
 (idp8051504
  ((file variants.html)
   (html "<blockquote>\n      Here's the concrete code.\n    </blockquote>")))
 (idp8050768
  ((file variants.html)
   (html
    "<blockquote>\n          the set of messages so far that are associated with the user.\n        </blockquote>")))
 (idp8049888
  ((file variants.html)
   (html
    "<blockquote>\n          the set of session identifiers for the user that have been\n          seen thus far.\n        </blockquote>")))
 (idp8047920
  ((file variants.html)
   (html
    "<blockquote>\n      You can increase the precision of your types by using variants to\n      represent differences between types, and records to represent\n      shared structure. Consider the following function that takes a\n      list of <code>client_message</code>s and returns all\n      messages generated by a given user. The code in question is\n      implemented by folding over the list of messages, where the\n      accumulator is a pair of:\n    </blockquote>")))
 (idp8042624
  ((file variants.html)
   (html
    "<blockquote>\n      A <code>client_message</code> is a <code>Logon</code>\n<span><em>or</em></span> a <code>Heartbeat</code>\n<span><em>or</em></span> a <code>Log_entry</code>. If we want\n      to write code that processes messages generically, rather than\n      code specialized to a fixed message type, we need something like\n      <code>client_message</code> to act as one overarching type\n      for the different possible messages. We can then match on the\n      <code>client_message</code> to determine the type of the\n      particular message being dealt with.\n    </blockquote>")))
 (idp8036912
  ((file variants.html)
   (html
    "<blockquote>\n      This record type combines multiple pieces of data into one value.\n      In particular, a single <code>Log_entry.t</code> has a\n      <code>session_id</code> <span><em>and</em></span> a\n      <code>time</code> <span><em>and</em></span> an\n      <code>important</code> flag <span><em>and</em></span> a\n      <code>message</code>. More generally, you can think of\n      record types as acting as conjunctions. Variants, on the other\n      hand, are disjunctions, letting you represent multiple\n      possibilities, as in the following example.\n    </blockquote>")))
 (idp8034368
  ((file variants.html)
   (html
    "<blockquote>\n      Algebraic data types gain much of their power from the ability to\n      construct layered combination of sums and products. Let's see what\n      we can achieve with this by revisiting the logging server types\n      that were described in <a href=\"records.html\">Chapter\194\1605, <i>Records</i></a>. We'll\n      start by reminding ourselves of the definition of\n      <code>Log_entry.t</code>.\n    </blockquote>")))
 (idp8032176
  ((file variants.html)
   (html
    "<blockquote>\n      The term <span><em>algebraic data types</em></span> is often used\n      to describe a collection of types that includes variants, records\n      and tuples. Algebraic data types act as a peculiarly useful and\n      powerful language for describing data. At the heart of their\n      utility is the fact that they combine two different kinds of\n      types: <span><em>product types</em></span>, like tuples and\n      records, which combine multiple different types together and are\n      mathematically similar to cartesian products; and <span><em>sum\n      types</em></span>, like variants, which let you combine multiple\n      different possibilities into one type, and are mathematically\n      similar to disjoint unions.\n    </blockquote>")))
 (idp8029808
  ((file variants.html)
   (html
    "<blockquote>\n    But because the catch-all case encompasses all possibilities, the\n    type system will no longer warn us that we have missed the new\n    <code>Bold</code> case when we change the type to include it.\n    We can get this check back by avoiding the catch-all case, and\n    instead being explicit about the tags that are ignored.\n  </blockquote>")))
 (idp8027072
  ((file variants.html)
   (html
    "<blockquote>\n    Here's an example that illustrates how catch-all cases interact with\n    exhaustion checks. Imagine we wanted a version of\n    <code>color_to_int</code> that works on older terminals by\n    rendering the first 16 colors (the 8 <code>basic_color</code>s\n    in regular and bold) in the normal way, but rendering everything\n    else as white. We might have written the function as follows.\n  </blockquote>")))
 (idp8026272
  ((file variants.html)
   (html
    "<blockquote>\n    As we've seen, the type errors identified the things that needed to\n    be fixed to complete the refactoring of the code. This is\n    fantastically useful, but for it to work well and reliably, you need\n    to write your code in a way that maximizes the compiler's chances of\n    helping you find the bugs. To this end, a useful rule of thumb is to\n    avoid catch-all cases in pattern matches.\n  </blockquote>")))
 (idp8025104
  ((file variants.html)
   (html
    "<blockquote>\n    Fixing this now leads us to the correct implementation.\n  </blockquote>")))
 (idp8022576
  ((file variants.html)
   (html
    "<blockquote>\n    Here, the compiler is complaining that the <code>Basic</code>\n    tag is used with the wrong number of arguments. If we fix that,\n    however, the compiler flag will flag a second problem, which is that\n    we haven't handled the new <code>Bold</code> tag.\n  </blockquote>")))
 (idp8018192
  ((file variants.html)
   (html
    "<blockquote>\n    We've essentially broken out the <code>Basic</code> case into\n    two cases, <code>Basic</code> and <code>Bold</code>, and\n    <code>Basic</code> has changed from having two arguments to\n    one. <code>color_to_int</code> as we wrote it still expects\n    the old structure of the variant, and if we try to compile that same\n    code again, the compiler will notice the discrepancy.\n  </blockquote>")))
 (idp8016384
  ((file variants.html)
   (html
    "<blockquote>\n    Consider what would happen if we were to change the definition of\n    <code>color</code> to the following.\n  </blockquote>")))
 (idp8015776
  ((file variants.html)
   (html
    "<blockquote>\n    OCaml's type system can act as a refactoring tool, by warning you of\n    places where your code needs to be updated to match an interface\n    change. This is particularly valuable in the context of variants.\n  </blockquote>")))
 (idp8014096
  ((file variants.html)
   (html
    "<blockquote>\n    Now, we can print text using the full set of available colors.\n  </blockquote>")))
 (idp8012736
  ((file variants.html)
   (html
    "<blockquote>\n    Once again, we'll use pattern matching to convert a color to a\n    corresponding integer. But in this case, the pattern matching does\n    more than separate out the different cases; it also allows us to\n    extract the data associated with each tag.\n  </blockquote>")))
 (idp8010752
  ((file variants.html)
   (html
    "<blockquote>\n    We'll also represent this more complicated color-space as a variant,\n    but this time, the different tags will have arguments which describe\n    the data available in each case. Note that variants can have\n    multiple arguments, which are separated by <code>*</code>'s.\n  </blockquote>")))
 (idp8010112
  ((file variants.html)
   (html
    "<blockquote>\n        A 24-level grayscale ramp\n      </blockquote>")))
 (idp8009216
  ((file variants.html)
   (html
    "<blockquote>\n        A 6\226\128\133\195\151\226\128\1336\226\128\133\195\151\226\128\1336 RGB color cube\n      </blockquote>")))
 (idp8008368
  ((file variants.html)
   (html
    "<blockquote>\n        The 8 basic colors, in regular and bold versions.\n      </blockquote>")))
 (idp8006288
  ((file variants.html)
   (html
    "<blockquote>\n    In this example, the cases of the variant are simple tags with no\n    associated data. This is substantively the same as the enumerations\n    found in languages like C and Java. But as we'll see, variants can\n    do considerably more than represent a simple enumeration. Indeed, an\n    enumeration isn't enough to effectively describe the full set of\n    colors that a modern terminal can display. Many terminals, including\n    the venerable <code>xterm</code>, support 256 different\n    colors, broken up into the following groups.\n  </blockquote>")))
 (idp8005680
  ((file variants.html)
   (html
    "<blockquote>\n    On most terminals, that word &quot;Blue&quot; will be rendered in\n    blue.\n  </blockquote>")))
 (idp8004448
  ((file variants.html)
   (html
    "<blockquote>\n    Using the above, we can generate escape codes to change the color of\n    a given string displayed in a terminal.\n  </blockquote>")))
 (idp8002496
  ((file variants.html)
   (html
    "<blockquote>\n    The following function uses pattern matching to convert a\n    <code>basic_color</code> to a corresponding integer. The\n    exhaustiveness checking on pattern matches means that the compiler\n    will warn us if we miss a color.\n  </blockquote>")))
 (idp8001072
  ((file variants.html)
   (html
    "<blockquote>\n    Let's consider a concrete example of how variants can be useful.\n    Almost all terminals support a set of 8 basic colors, and we can\n    represent those colors using a variant. Each color is declared as a\n    simple tag, with pipes used to separate the different cases. Note\n    that variant tags must be capitalized.\n  </blockquote>")))
 (idp8000480
  ((file variants.html)
   (html
    "<blockquote>\n    Each row starts with a tag that identifies that case, and in\n    addition, there may be a collection of fields, each with its own\n    type, that is associated with a given tag.\n  </blockquote>")))
 (idp7999392
  ((file variants.html)
   (html
    "<blockquote>\n    The basic syntax of a variant type declaration is as follows.\n  </blockquote>")))
 (idp7998576
  ((file variants.html)
   (html
    "<blockquote>\n    Variant types are one of the most useful features of OCaml, and also\n    one of the most unusual. They let you represent data that may take\n    on multiple different forms, where each form is marked by an\n    explicit tag. As we'll see, when combined with pattern matching,\n    variants give you a powerful way of representing complex data and of\n    organizing the case-analysis on that information.\n  </blockquote>")))
 (idp7416352
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          And indeed, when we provide the two positional arguments, the\n          <code>sep</code> argument is not erased, instead\n          returning a function that expects the <code>sep</code>\n          argument to be provided.\n        </blockquote>")))
 (idp7415056
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          An optional argument that doesn't have any following\n          positional arguments can't be erased at all, which leads to a\n          compiler warning.\n        </blockquote>")))
 (idp7413616
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          However, if all arguments to a function are presented at once,\n          then erasure of optional arguments isn't applied until all of\n          the arguments are passed in. This preserves our ability to\n          pass in optional arguments anywhere on the argument list.\n          Thus, we can write:\n        </blockquote>")))
 (idp7412368
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          then application of the first argument would not cause the\n          optional argument to be erased.\n        </blockquote>")))
 (idp7408880
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          The rule is: an optional argument is erased as soon as the\n          first positional (<span><em>i.e.</em></span>, neither labeled\n          nor optional) argument defined <span><em>after</em></span> the\n          optional argument is passed in. That explains the behavior of\n          <code>prepend_pound</code> above. But if we had instead\n          defined <code>concat</code> with the optional argument\n          in the second position:\n        </blockquote>")))
 (idp7408400
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          So when does OCaml decide to erase an optional argument?\n        </blockquote>")))
 (idp7406160
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          The optional argument <code>?sep</code> has now\n          disappeared, or been <span><em>erased</em></span>. Indeed, if\n          we try to pass in that optional argument now, it will be\n          rejected.\n        </blockquote>")))
 (idp7404944
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But what happens if we partially apply just the first\n          argument?\n        </blockquote>")))
 (idp7403632
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Optional arguments can be tricky to think about in the\n          presence of partial application. We can of course partially\n          apply the optional argument itself:\n        </blockquote>")))
 (idp7399952
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          As suggested by the error message, we can get OCaml to accept\n          the fact that <code>f</code> is used with different\n          argument orders if we provide explicit type information. Thus,\n          the following code compiles without error, due to the type\n          annotation on <code>f</code>.\n        </blockquote>")))
 (idp7397360
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Note that these heuristics might at different points in the\n          source suggest different types. Here's a version of\n          <code>numeric_deriv</code> where different invocations\n          of <code>f</code> list the arguments in different\n          orders.\n        </blockquote>")))
 (idp7396656
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Since there are multiple plausible types to choose from, OCaml\n          needs some heuristic for choosing between them. The heuristic\n          the compiler uses is to prefer labels to options, and to\n          choose the order of arguments that shows up in the source\n          code.\n        </blockquote>")))
 (idp7394080
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Even worse, it would be perfectly consistent for\n          <code>f</code> to take an optional argument instead of a\n          labeled one, which could lead to this type signature for\n          <code>numeric_deriv</code>.\n        </blockquote>")))
 (idp7391568
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          In principle, it's not obvious how the order of the arguments\n          to <code>f</code> should be chosen. Since labeled\n          arguments can be passed in arbitrary order, it seems like it\n          could as well be\n          <code>y:float -&gt; x:float -&gt; float</code> as it is\n          <code>x:float -&gt; y:float -&gt; float</code>.\n        </blockquote>")))
 (idp7384176
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One subtle aspect of labeled and optional arguments is how\n          they are inferred by the type system. Consider the following\n          example for computing numerical derivatives of a function of\n          two dimensions. The function takes an argument\n          <code>delta</code> which determines the scale at which\n          to compute the derivative, values <code>x</code> and\n          <code>y</code> which determine which point to compute\n          the derivative at, and the function <code>f</code> whose\n          derivative is being computed. The function\n          <code>f</code> itself takes two labeled arguments\n          <code>x</code> and <code>y</code>. Note that you\n          can use an apostrophe as part of a variable name, so\n          <code>x'</code> and <code>y'</code> are just\n          ordinary variables.\n        </blockquote>")))
 (idp7380208
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Now, if someone calls <code>uppercase_concat</code>\n          without an argument, an explicit <code>None</code> will\n          be passed to <code>concat</code>, leaving\n          <code>concat</code> to decide what the default behavior\n          should be.\n        </blockquote>")))
 (idp7377152
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Instead, we can have <code>uppercase_concat</code>\n          simply pass through the optional argument to\n          <code>concat</code> using the <code>?</code>\n          syntax.\n        </blockquote>")))
 (idp7375232
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          In the way we've written it, we've been forced to separately\n          make the decision as to what the default separator is. Thus,\n          if we later change <code>concat</code>'s default\n          behavior, we'll need to remember to change\n          <code>uppercase_concat</code> to match it.\n        </blockquote>")))
 (idp7372464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One use-case for this is when you want to define a wrapper\n          function that mimics the optional arguments of the function\n          it's wrapping. For example, imagine we wanted to create a\n          function called <code>uppercase_concat</code>, which is\n          the same as <code>concat</code> except that it converts\n          the first string that it's passed to uppercase. We could write\n          the function as follows.\n        </blockquote>")))
 (idp7370016
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          And the following two lines are equivalent ways of calling\n          <code>concat</code> without specifying\n          <code>sep</code>.\n        </blockquote>")))
 (idp7365568
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But sometimes, passing in <code>Some</code> or\n          <code>None</code> explicitly is exactly what you want.\n          OCaml lets you do this by using <code>?</code> instead\n          of <code>~</code> to mark the argument. Thus, the\n          following two lines are equivalent ways of specifying the\n          <code>sep</code> argument to concat.\n        </blockquote>")))
 (idp7362416
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Under the covers, a function with an optional argument\n          receives <code>None</code> when the caller doesn't\n          provide the argument, and <code>Some</code> when it\n          does. But the <code>Some</code> and\n          <code>None</code> are normally not explicitly passed in\n          by the caller.\n        </blockquote>")))
 (idp7358720
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This means that rarely used functions should not have optional\n        arguments. A good rule of thumb is to avoid optional arguments\n        for functions internal to a module, <span><em>i.e.</em></span>,\n        functions that are not included in the module's interface, or\n        <code>mli</code> file. We'll learn more about\n        <code>mli</code>s in\n        <a href=\"files-modules-and-programs.html\">Chapter\194\1604, <i>Files, Modules and Programs</i></a>.\n      </blockquote>")))
 (idp7357984
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The downside is that the caller may be unaware that there is a\n        choice to be made, and so may unknowingly (and wrongly) pick the\n        default behavior. Optional arguments really only make sense when\n        the extra concision of omitting the argument outweighs the\n        corresponding loss of explicitness.\n      </blockquote>")))
 (idp7357120
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Optional arguments are very useful, but they're also easy to\n        abuse. The key advantage of optional arguments is that they let\n        you write functions with multiple arguments that users can\n        ignore most of the time, only worrying about them when they\n        specifically want to invoke those options. They also allow you\n        to extend an API with new functionality without changing\n        existing code that calls that function.\n      </blockquote>")))
 (idp7355120
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The above example needed a bit of boilerplate to choose a\n        default separator when none was provided. This is a common\n        enough pattern that there's an explicit syntax for providing a\n        default value, which allows us to write\n        <code>concat</code> more concisely.\n      </blockquote>")))
 (idp7349584
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here, <code>?</code> is used in the definition of the\n        function to mark <code>sep</code> as optional. And while\n        the caller can pass a value of type <code>string</code>\n        for <code>sep</code>, internally to the function,\n        <code>sep</code> is seen as a\n        <code>string option</code>, with <code>None</code>\n        appearing when <code>sep</code> is not provided by the\n        caller.\n      </blockquote>")))
 (idp7347632
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here's an example of a string concatenation function with an\n        optional separator. This function uses the <code>^</code>\n        operator for simple pairwise string concatenation.\n      </blockquote>")))
 (idp7346960
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        An optional argument is like a labeled argument that the caller\n        can choose whether or not to provide. Optional arguments are\n        passed in using the same syntax as labeled arguments, and, like\n        labeled arguments, can be provided in any order.\n      </blockquote>")))
 (idp7345216
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          As a result, when passing labeled functions as arguments, you\n          need to take care to be consistent in your ordering of labeled\n          arguments in higher-order contexts.\n        </blockquote>")))
 (idp7343408
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But, it works smoothly with the original\n          <code>apply_to_tuple</code>.\n        </blockquote>")))
 (idp7341600
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          we'll find that it can't be passed in to\n          <code>apply_to_tuple_2</code>.\n        </blockquote>")))
 (idp7340352
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          It turns out this order matters. In particular, if we define a\n          function that has a different order\n        </blockquote>")))
 (idp7336432
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Here, the definition of <code>apply_to_tuple</code> sets\n          up the expectation that its first argument is a function with\n          two labeled arguments, <code>first</code> and\n          <code>second</code>, listed in that order. We could have\n          defined <code>apply_to_tuple</code> differently to\n          change the order in which the labeled arguments were listed.\n        </blockquote>")))
 (idp7334592
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One surprising gotcha with labeled arguments is that while\n          order doesn't matter when calling a function with labeled\n          arguments, it does matter in a higher-order context,\n          <span><em>e.g.</em></span>, when passing a function with\n          labeled arguments to another function. Here's an example.\n        </blockquote>")))
 (idp7332672
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            This requires that we put the function argument first. In\n            other cases, you want to put the function argument second.\n            One common reason is readability. In particular, a\n            multi-line function passed as an argument to another\n            function is easiest to read when it is the final argument to\n            that function.\n          </blockquote>")))
 (idp7329872
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When you want flexibility on the order in which arguments\n            are passed. Consider a function like\n            <code>List.iter</code>, that takes two arguments: a\n            function, and a list of elements to call that function on. A\n            common pattern is to partially apply\n            <code>List.iter</code> by giving it just the function,\n            as in the following example from earlier in the chapter.\n          </blockquote>")))
 (idp7328224
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            This improves the readability of both the signature and of\n            client code that makes use of <code>substring</code>,\n            and makes it harder to accidentally swap the position and\n            the length.\n          </blockquote>")))
 (idp7326896
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            Here, the two ints are the starting position and length of\n            the substring to extract, respectively. We can can make this\n            fact more obvious from the signature by adding labels.\n          </blockquote>")))
 (idp7325488
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When defining functions that have multiple arguments that\n            might get confused with each other. This is most at issue\n            when the arguments are of the same type. For example,\n            consider this signature for a function that extracts a\n            substring.\n          </blockquote>")))
 (idp7324464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            Choosing label names well is especially important for\n            Boolean values, since it's often easy to get confused about\n            whether a value being true is meant ot enable or disable a\n            given feature.\n          </blockquote>")))
 (idp7323168
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            The above signature makes it hard to divine the meaning of\n            those two arguments. but with labeled arguments, we can make\n            the intent immediately clear.\n          </blockquote>")))
 (idp7321664
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When the meaning of a particular argument is unclear from\n            the type alone. Consider a function for creating a hash\n            table whose first argument is the initial size of the array\n            backing the hashtable, and the second is a Boolean flag\n            which indicates whether that array will ever shrink when\n            elements are removed.\n          </blockquote>")))
 (idp7320704
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When defining a function with lots of arguments. Beyond a\n            certain number, arguments are easier to remember by name\n            than by position.\n          </blockquote>")))
 (idp7319728
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Labeled arguments are useful in a few different cases:\n      </blockquote>")))
 (idp7317248
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml also supports <span><em>label punning</em></span>, meaning\n        that you get to drop the text after the <code>:</code> if\n        the name of the label and the name of the variable being used\n        are the same. We were actually already using label punning when\n        defining our labeled function above. The following shows how\n        punning can be used when invoking a function.\n      </blockquote>")))
 (idp7315968
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can then provide a labeled argument using a similar\n        convention. As you can see, the arguments can be provided in any\n        order.\n      </blockquote>")))
 (idp7313232
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Up until now, the functions we've defined have specified their\n        arguments positionally, <span><em>i.e.</em></span>, by the order\n        in which the arguments are passed to the function. OCaml also\n        supports labeled arguments, which let you identify a function\n        argument by name. Indeed, we've already encountered functions\n        from Core like <code>List.map</code> that use labeled\n        arguments. Labeled arguments are marked by a leading tilde, and\n        a label (followed by a colon) are put in front of the variable\n        to be labeled. Here's an example.\n      </blockquote>")))
 (idp7309760
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Also, note the use of partial application to generate the\n        function passed to <code>List.map</code>. In other words,\n        <code>some_or_default 100</code> is a function that was\n        created by feeding just the first argument to\n        <code>some_or_default</code>.\n      </blockquote>")))
 (idp7308400
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can also combine the different styles of function declaration\n        together, as in the following example where we declare a two\n        argument (curried) function with a pattern match on the second\n        argument.\n      </blockquote>")))
 (idp7306560
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This is equivalent to combining an ordinary function definition\n        with a <code>match</code>.\n      </blockquote>")))
 (idp7303920
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another way to define a function is using the\n        <code>function</code> keyword. Instead of having syntactic\n        support for declaring multi-argument (curried) functions,\n        <code>function</code> has built-in pattern matching.\n        Here's an example:\n      </blockquote>")))
 (idp7301840
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The type error aside, this example highlights the importance of\n        choosing the operator you use with care, particularly with\n        respect to associativity.\n      </blockquote>")))
 (idp7298656
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The above type error is a little bewildering at first glance.\n        What's going on is that, because <code>^&gt;</code> is\n        right associative, the operator is trying to feed the value\n        <code>List.dedup ~compare:String.compare</code> to the\n        function <code>List.iter ~f:print_endline</code>. But\n        <code>List.iter ~f:print_endline</code> expects a list of\n        strings as its input, not a function.\n      </blockquote>")))
 (idp7296560
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that <code>|&gt;</code> only works in the intended\n        way because it is left-associative. Indeed, let's see what\n        happens if we try using a right associative operator, like\n        (^&gt;).\n      </blockquote>")))
 (idp7295472
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It is this later form that we're using in the\n        <code>|&gt;</code> pipeline above.\n      </blockquote>")))
 (idp7294224
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or, we can pass it just the function argument, leaving us with a\n        function for printing out a list of strings.\n      </blockquote>")))
 (idp7291600
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        An important part of what's happening here is partial\n        application. For example, <code>List.iter</code> normally\n        takes two arguments: a function to be called on each element of\n        the list, and the list to iterate over. We can call\n        <code>List.iter</code> with all its arguments:\n      </blockquote>")))
 (idp7289872
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that we can do this without <code>|&gt;</code>, but\n        the result is a bit more verbose.\n      </blockquote>")))
 (idp7286944
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It's not quite obvious at first what the purpose of this\n        operator is: it just takes a value and a function, and applies\n        the function to the value. Despite that bland sounding\n        description, it has the useful role of a sequencing operator,\n        similar in spirit to using pipe in the UNIX shell. Consider, for\n        example, the following code for printing out the unique elements\n        of your <code>PATH</code>. Note that\n        <code>List.dedup</code> below removes duplicates from a\n        list by sorting the list using the provided comparison function.\n      </blockquote>")))
 (idp7285632
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here's an example of a very useful operator from the standard\n        library whose behavior depends critically on the precedence\n        rules described above. Here's the code.\n      </blockquote>")))
 (idp7285248
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        which obviously doesn't make sense.\n      </blockquote>")))
 (idp7284032
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here, OCaml is interpreting the second expression as equivalent\n        to:\n      </blockquote>")))
 (idp6489328
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        There's one important special case: <code>-</code> and\n        <code>-.</code>, which are the integer and floating-point\n        subtraction operators, can act as both prefix operators (for\n        negation) and infix operators (for subtraction), So, both\n        <code>-x</code> and <code>x - y</code> are\n        meaningful expressions. Another thing to remember about negation\n        is that it has lower precedence than function application, which\n        means that if you want to pass a negative value, you need to\n        wrap it in parentheses, as you can see below.\n      </blockquote>")))
 (idp6438544
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The syntactic role of an operator is typically determined by its\n        first character or two, though there are a few exceptions. This\n        table breaks the different operators and other syntactic forms\n        into groups from highest to lowest precedence, explaining how\n        each behaves syntactically. We write <code>!</code>... to\n        indicate the class of operators beginning with\n        <code>!</code>.\n      </blockquote>")))
 (idp6435984
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        What's going on is that <code>(***)</code> isn't\n        interpreted as an operator at all; it's read as a comment! To\n        get this to work properly, we need to put spaces around any\n        operator that begins or ends with <code>*</code>.\n      </blockquote>")))
 (idp6434144
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that you have to be careful when dealing with operators\n        containing <code>*</code>. Consider the following example.\n      </blockquote>")))
 (idp6432880
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can define (or redefine) the meaning of an operator. Here's\n        an example of a simple vector-addition operator on int pairs.\n      </blockquote>")))
 (idp6430912
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        or is one of a handful of pre-determined strings, including\n        <code>mod</code>, the modulus operator, and\n        <code>lsl</code>, for &quot;logical shift left&quot;, a\n        bit-shifting operation.\n      </blockquote>")))
 (idp6429552
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        A function is treated syntactically as an operator if the name\n        of that function is chosen from one of a specialized set of\n        identifiers. This set includes identifiers that are sequences of\n        characters from the following set:\n      </blockquote>")))
 (idp6427664
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In the second expression above, we've partially applied\n        <code>(+)</code> to gain a function that increments its\n        single argument by <code>3</code>, and then applied that\n        to all the elements of a list.\n      </blockquote>")))
 (idp6425584
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You might not have thought of the second example as an ordinary\n        function, but it very much is. Infix operators like\n        <code>+</code> really only differ syntactically from other\n        functions. In fact, if we put parentheses around an infix\n        operator, you can use it as an ordinary prefix function.\n      </blockquote>")))
 (idp6424368
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        So far, we've seen examples of functions used in both prefix and\n        infix style:\n      </blockquote>")))
 (idp6422784
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In addition, having a non-recursive form makes it easier to\n        create a new definition that extends and supersedes an existing\n        one by shadowing it.\n      </blockquote>")))
 (idp6421936
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        But this decision has some good effects. For one thing,\n        recursive (and especially mutually recursive) definitions are\n        harder to reason about than non-recursive definitions that\n        proceed in order, each building on top of what has already been\n        defined. It's therefore useful that, in the absence of an\n        explicit marker, new definitions can only build upon ones that\n        were previously defined.\n      </blockquote>")))
 (idp6419904
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml distinguishes between non-recursive definitions (using\n        <code>let</code>) and recursive definitions (using\n        <code>let rec</code>) largely for technical reasons: the\n        type-inference algorithm needs to know when a set of function\n        definitions are mutually recursive, and for reasons that don't\n        apply to a pure language like Haskell, these have to be marked\n        explicitly by the programmer.\n      </blockquote>")))
 (idp6417376
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can also define multiple mutually recursive values by using\n        <code>let rec</code> combined with the\n        <code>and</code> keyword. Here's a (gratuitously\n        inefficient) example.\n      </blockquote>")))
 (idp6413920
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that in the above, the pattern\n        <code>| [] | [_]</code> is what's called on\n        <span><em>or-pattern</em></span>, which is the combination of two\n        patterns. In this case, <code>[]</code>, matching the\n        empty list, and <code>[_]</code>, matching any single\n        element list. The <code>_</code> is there so we don't have\n        to put an explicit name on that single element.\n      </blockquote>")))
 (idp6411920
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In order to define a recursive function, you need to mark the\n        let binding as recursive with the <code>rec</code>\n        keyword, as shown in this function for finding the first\n        sequentially-repeated element in a list.\n      </blockquote>")))
 (idp6408896
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        A function is <span><em>recursive</em></span> if it refers to\n        itself in its definition. Recursion is important in any\n        programming language, but is particularly important in\n        functional languages, because it is the fundamental building\n        block that is used for building looping constructs. (As we'll\n        see in <a href=\"imperative-programming-1.html\">Chapter\194\1608, <i>Imperative Programming</i></a>,\n        OCaml also supports imperative looping constructs like\n        <code>for</code> and <code>while</code>, but these\n        are only useful when using OCaml's imperative features.)\n      </blockquote>")))
 (idp6407296
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        There are small tradeoffs between these two approaches, but most\n        of the time, one should stick to currying, since it's the\n        default style in the OCaml world.\n      </blockquote>")))
 (idp6406592
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml handles this calling convention efficiently as well. In\n        particular it does not generally have to allocate a tuple just\n        for the purpose of sending arguments to a tuple-style function.\n        (You can't, however, use partial application for this style of\n        function.)\n      </blockquote>")))
 (idp6405264
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Currying is not the only way of writing a multi-argument\n        function in OCaml. It's also possible to use the different parts\n        of a tuple as different arguments. So, we could write:\n      </blockquote>")))
 (idp6404576
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You might worry that curried functions are terribly expensive,\n        but this is not the case. In OCaml, there is no penalty for\n        calling a curried function with all of its arguments. (Partial\n        application, unsurprisingly, does have a small extra cost.)\n      </blockquote>")))
 (idp6402112
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that the <code>fun</code> keyword supports its own\n        syntax for currying, so the following definition of\n        <code>abs_diff</code> is equivalent to the definition\n        above.\n      </blockquote>")))
 (idp6401216
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The practice of applying some of the arguments of a curried\n        function to get a new function is called <span><em>partial\n        application</em></span>.\n      </blockquote>")))
 (idp6398528
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Currying is more than just a theoretical curiosity. You can make\n        use of currying to specialize a function by feeding in some of\n        the arguments. Here's an example where we create a specialized\n        version of <code>abs_diff</code> that measures the\n        distance of a given number from <code>3</code>.\n      </blockquote>")))
 (idp6398000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The parentheses above don't change the meaning of the signature,\n        but it makes it easier to see the currying.\n      </blockquote>")))
 (idp6394912
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This style of function is called a <span><em>curried</em></span>\n        function. (Currying is named after Haskell Curry, a logician who\n        had a significant impact on the design and theory of programming\n        languages.) The key to interpreting the type signature of a\n        curried function is the observation that\n        <code>-&gt;</code> is right-associative. The type\n        signature of <code>abs_diff</code> can therefore be\n        parenthesized as follows.\n      </blockquote>")))
 (idp6391728
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This rewrite makes it explicit that <code>abs_diff</code>\n        is actually a function of one argument that returns another\n        function of one argument, which itself returns the final result.\n        Because the functions are nested, the inner expression\n        <code>abs (x - y)</code> has access to both\n        <code>x</code>, which was bound by the first function\n        application, and <code>y</code>, which was bound by the\n        second one.\n      </blockquote>")))
 (idp6388624
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You may find the type signature of <code>abs_diff</code>\n        with all of its arrows a little hard to parse. To understand\n        what's going on, let's rewrite <code>abs_diff</code> in an\n        equivalent form, using the <code>fun</code> keyword:\n      </blockquote>")))
 (idp6387408
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml of course also supports multi-argument functions, for\n        example:\n      </blockquote>")))
 (idp6385248
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This connection is important, and will come up more when\n        programming in a monadic style, as we'll see in\n        <a href=\"concurrent-programming-with-async.html\">Chapter\194\16018, <i>Concurrent Programming with Async</i></a>.\n      </blockquote>")))
 (idp6383840
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Functions and let bindings have a lot to do with each other. In\n        some sense, you can think of the parameter of a function as a\n        variable being bound to the value passed by the caller. Indeed,\n        the following two expressions are nearly equivalent:\n      </blockquote>")))
 (idp6381360
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This is the most common and convenient way to declare a\n        function, but syntactic niceties aside, the two styles of\n        function definition are entirely equivalent.\n      </blockquote>")))
 (idp6379472
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Defining named functions is so common that there is some\n        syntactic sugar for it. Thus, the following definition of\n        <code>plusone</code> is equivalent to the definition\n        above.\n      </blockquote>")))
 (idp6377952
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The key thing to understand is that functions are ordinary\n        values in OCaml, and you can do everything with them that you'd\n        do with an ordinary value, including passing them to and\n        returning them from other functions and storing them in data\n        structures. We even name functions in the same way that we name\n        other values, by using a let binding.\n      </blockquote>")))
 (idp6373936
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It's worth stopping for a moment to puzzle this example out,\n        since this kind of higher-order use of functions can be a bit\n        obscure at first. The first thing to understand is the function\n        <code>(fun g -&gt; g 5)</code>, which takes a function as\n        its argument and applies that function to the number\n        <code>5</code>. The invocation of\n        <code>List.map</code> applies\n        <code>(fun g -&gt; g 5)</code> to the elements of the\n        <code>increments</code> list (which are themselves\n        functions) and returns the list containing the results of these\n        function applications.\n      </blockquote>")))
 (idp6372752
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You can even stuff them into a data structure.\n      </blockquote>")))
 (idp6370816
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or pass it to another function. Passing functions to iteration\n        functions like <code>List.map</code> is probably the most\n        common use-case for anonymous functions.\n      </blockquote>")))
 (idp6369504
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Anonymous functions aren't named, but they can be used for many\n        different purposes nonetheless. You can, for example, apply an\n        anonymous function to an argument.\n      </blockquote>")))
 (idp6367136
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We'll start by looking at the most basic style of function\n        declaration in OCaml: the <span><em>anonymous\n        function</em></span>. An anonymous function is a function value\n        that is declared without being named. They can be declared using\n        the <code>fun</code> keyword, as shown here.\n      </blockquote>")))
 (idp6365424
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Given that OCaml is a functional language, it's no surprise that\n      functions are important and pervasive. Indeed, functions have come\n      up in almost every example we've done so far. This section will go\n      into more depth, explaining the details of how OCaml's functions\n      work. As you'll see, functions in OCaml differ in a variety of\n      ways from what you'll find in most mainstream languages.\n    </blockquote>")))
 (idp6362640
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that this is our first use of <code>assert</code>,\n        which is useful for marking cases that should be impossible.\n        Asserts are discussed in more detail in\n        <a href=\"error-handling.html\">Chapter\194\1607, <i>Error Handling</i></a>.\n      </blockquote>")))
 (idp6360592
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This case can't really come up in practice, because\n        <code>String.split</code> always returns a list with at\n        least one element. But the compiler doesn't know this, and so it\n        emits the warning. It's generally better to use a match\n        statement to handle such cases explicitly:\n      </blockquote>")))
 (idp6358288
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Using a pattern in a let-binding makes the most sense for a\n        pattern that is <span><em>irrefutable</em></span>,\n        <span><em>i.e.</em></span>, where any value of the type in\n        question is guaranteed to match the pattern. Tuple and record\n        patterns are irrefutable, but list patterns are not. Consider\n        the following code that implements a function for up-casing the\n        first element of a comma-separated list.\n      </blockquote>")))
 (idp6355792
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here, <code>(ints,strings)</code> is a pattern, and the\n        <code>let</code> binding assigns values to both of the\n        identifiers that show up in that pattern. A pattern is\n        essentially a description of the shape of a data-structure,\n        where some components are identifiers to be bound. As we saw in\n        <a href=\"a-guided-tour.html#tuples-lists-options-and-pattern-matching\">the section called \226\128\156Tuples, lists, options and pattern matching\226\128\157</a>,\n        OCaml has patterns for a variety of different data-types.\n      </blockquote>")))
 (idp6353376
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another useful feature of let bindings is that they support the\n        use of <span><em>patterns</em></span> on the left-hand side.\n        Consider the following code, which uses\n        <code>List.unzip</code>, a function for converting a list\n        of pairs into a pair of lists.\n      </blockquote>")))
 (idp6351280
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      The same is true in a functional language. A function can be\n      applied to different inputs, and thus its variables will take on\n      different values, even without mutation.\n    </blockquote>")))
 (idp6347968
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      The answer to this is that variables in OCaml (and generally in\n      functional languages) are really more like variables in an\n      equation than a variable in an imperative language. If you think\n      about the mathematical equation\n      <code>x(y + z) = xy + xz</code>, there's no notion of\n      mutating the variables <code>x</code>, <code>y</code>\n      and <code>z</code>. They vary in the sense that you can\n      instantiate this equation with different numbers for those\n      variables, and it still holds.\n    </blockquote>")))
 (idp6347344
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      One source of confusion for people new to OCaml is the fact that\n      variables are immutable. This seems pretty surprising even on\n      linguistic terms. Isn't the whole point of a variable that it can\n      vary?\n    </blockquote>")))
 (idp6345648
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      In OCaml, let bindings are immutable. As we'll see in\n      <a href=\"imperative-programming-1.html\">Chapter\194\1608, <i>Imperative Programming</i></a>, there are\n      mutable values in OCaml, but no mutable variables.\n    </blockquote>")))
 (idp6339056
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Here, we redefined <code>pi</code> to be zero after the\n      definition of <code>area_of_circle</code>. You might think\n      that this would mean that the result of the computation would now\n      be zero, but in fact, the behavior of the function is unchanged.\n      That's because the original definition of <code>pi</code>\n      wasn't changed, it was just shadowed, which means that any\n      subsequent reference to <code>pi</code> would see the new\n      definition of <code>pi</code> as zero, but earlier\n      references would be unchanged. But there is no later use of\n      <code>pi</code>, so the binding of <code>0.</code> to\n      <code>pi</code> made no difference. This explains the\n      warning produced by the toplevel telling us that there is an\n      unused definition of <code>pi</code>.\n    </blockquote>")))
 (idp6337056
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      It's important not to confuse a sequence of let bindings with the\n      modification of a mutable variable. For example, consider how\n      <code>area_of_ring</code> would work if we had instead\n      written this purposefully confusing bit of code.\n    </blockquote>")))
 (idp6334512
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      One common idiom is to use a series of nested\n      <code>let</code>/<code>in</code> expressions to build\n      up the components of a larger computation. Thus, we might write:\n    </blockquote>")))
 (idp6330688
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      This time, in the inner scope we called the list of strings\n      <code>languages</code> instead of\n      <code>language_list</code>, thus hiding the original\n      definition of <code>languages</code>. But once the\n      definition of <code>dashed_languages</code> is complete, the\n      inner scope has closed and the original definition of languages\n      reappears.\n    </blockquote>")))
 (idp6328464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      A let binding in an inner scope can <span><em>shadow</em></span>,\n      or hide, the definition from an outer scope. So, for example, we\n      could have written the <code>dashed_languages</code> example\n      as follows:\n    </blockquote>")))
 (idp6326000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Note that the scope of <code>language_list</code> is just\n      the expression\n      <code>String.concat ~sep:&quot;-&quot; language_list</code>,\n      and is not available at the top level, as we can see if we try to\n      access it now.\n    </blockquote>")))
 (idp6321808
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      This first evaluates\n      <span><em><code>&lt;expr1&gt;</code></em></span> and then\n      evaluates <span><em><code>&lt;expr2&gt;</code></em></span>\n      with <span><em><code>&lt;variable&gt;</code></em></span>\n      bound to whatever value was produced by the evaluation of\n      <span><em><code>&lt;expr1&gt;</code></em></span>. Here's how\n      it looks in practice.\n    </blockquote>")))
 (idp6319936
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n<code>let</code> can also be used to create a variable\n      binding whose scope is limited to a particular expression, using\n      the following syntax.\n    </blockquote>")))
 (idp6318832
  ((file variables-and-functions.html)
   (html "<blockquote>\n      Here's a simple example.\n    </blockquote>")))
 (idp6317136
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Every variable binding has a <span><em>scope</em></span>, which is\n      the portion of the code that can refer to that binding. When using\n      <code>utop</code>, the scope of a top-level let binding is\n      everything that follows it in the session. When it shows up in a\n      module, the scope is the remainder of that module.\n    </blockquote>")))
 (idp6316080
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      As we'll see when we get to the module system in\n      <a href=\"files-modules-and-programs.html\">Chapter\194\1604, <i>Files, Modules and Programs</i></a>, this same\n      syntax is used for let bindings at the top-level of a module.\n    </blockquote>")))
 (idp6312400
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      At its simplest, a variable is an identifier whose meaning is\n      bound to a particular value. In OCaml these bindings are often\n      introduced using the <code>let</code> keyword. We can type a\n      so-called <span><em>top-level</em></span> <code>let</code>\n      binding into <code>utop</code> with the following syntax to\n      bind a new variable. Note that variable names must start with a\n      lowercase letter or an underscore.\n    </blockquote>")))
 (idp6310768
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n    Variables and functions are fundamental ideas that show up in\n    virtually all programming languages. But OCaml has a different take\n    on these basic concepts, so we'll spend some time digging into the\n    details so you can understand OCaml's variables and functions and\n    see how they differ from what you've encountered elsewhere.\n  </blockquote>")))
 (idp11669040
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      This chapter contains significant contributions from Stephen\n      Weeks.\n    </blockquote>")))
 (idp11667680
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      The finalizer can use all features of OCaml, including assignments\n      that make the value reachable again and thus prevent it from being\n      garbage collected. It can also loop forever, which will cause\n      other finalizers to be interleaved with it.\n    </blockquote>")))
 (idp11664176
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      After a garbage collection determines that a heap block\n      <code>b</code> is unreachable, it removes from the set of\n      finalizers all the functions associated with <code>b</code>,\n      and serially applies each of those functions to\n      <code>b</code>. Thus, every finalizer function attached to\n      <code>b</code> will run at most once. However, program\n      termination will not cause all the finalizers to be run before the\n      runtime exits.\n    </blockquote>")))
 (idp11661920
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      The GC calls the finalization functions in the order of the\n      deallocation. If several values become unreachable during the same\n      GC cycle, the finalization functions will be called in the reverse\n      order of the corresponding calls to\n      <code>add_finalizer</code>. Each call to\n      <code>add_finalizer</code> adds to the set of functions that\n      are run when the value becomes unreachable. You can have many\n      finalizers all pointing to the same heap block if you wish.\n    </blockquote>")))
 (idp11660736
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      Building and running this should show the following output.\n    </blockquote>")))
 (idp11659456
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      Let's explore this with a small example that finalizes values of\n      different types, some of which are heap-allocated and others which\n      are compile-time constants.\n    </blockquote>")))
 (idp11657376
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      Core provides a <code>Heap_block</code> module that\n      dynamically checks if a given value is suitable for finalizing.\n      This block is then passed to Async's\n      <code>Gc.add_finalizer</code> function that schedules the\n      finalizer safely with respect to all the other concurrent program\n      threads.\n    </blockquote>")))
 (idp11656304
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      For this reason, attach finalizers only to values that you are\n      explicitly sure are heap-allocated and aren't immutable. A common\n      use is to attach them to file descriptors to ensure it is closed.\n      However, the finalizer normally shouldn't be the primary way of\n      closing the file descriptor, since it depends on the garbage\n      collector running in order to collect the value. For a busy\n      system, you can easily run out of a scarce resource such as file\n      descriptors before the GC catches up.\n    </blockquote>")))
 (idp11654720
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      Some constant values can be heap-allocated but never deallocated\n      during the lifetime of the program, for example a list of integer\n      constants. <code>Heap_block</code> explicitly checks to see\n      if the value is in the major or minor heap, and rejects most\n      constant values. Compiler optimizations may also duplicate some\n      immutable values such as floating-point values in arrays. These\n      may be finalized while another duplicate copy is being used by the\n      program.\n    </blockquote>")))
 (idp11653168
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      Various values cannot have finalizers attached since they aren't\n      heap-allocated. Some examples of values that are not\n      heap-allocated are integers, constant constructors, booleans, the\n      empty array, the empty list and the unit value. The exact list of\n      what is heap-allocated or not is implementation-dependent, which\n      is why Core provides the <code>Heap_block</code> module to\n      explicitly check before attaching the finalizer.\n    </blockquote>")))
 (idp11651664
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      OCaml's automatic memory management guarantees that a value will\n      eventually be freed when it's no longer in use, either via the\n      garbage collector sweeping it or the program terminating. It's\n      sometimes useful to run extra code just before a value is freed by\n      the garbage collector, for example to check that a file descriptor\n      has been closed, or that a log message is recorded.\n    </blockquote>")))
 (idp11648000
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The <code>-no-compactions</code> and\n          <code>-stabilize-gc</code> options can help force a\n          situation where your application has fragmented memory. This\n          can simulate the behavior of a long-running application\n          without you having to actually wait that long to recreate the\n          behavior in a performance unit test.\n        </blockquote>")))
 (idp11645872
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The only way to know for sure is to benchmark your program\n          under real-world scenarios using\n          <code>Core_bench</code>, and experiment with the\n          tradeoffs. The command-line benchmark binaries have a number\n          of useful options that affect garbage collection behavior.\n        </blockquote>")))
 (idp11644912
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          There is a stark space/time tradeoff here. The mutable version\n          takes significantly longer to complete than the immutable one,\n          but allocates many fewer minor heap words than the immutable\n          version. Minor allocation in OCaml is very fast and so it is\n          often better to use immutable data structures in preference to\n          the more conventional mutable versions. On the other hand, if\n          you only rarely mutate a value, it can be faster to take the\n          write barrier hit and not allocate at all.\n        </blockquote>")))
 (idp11642160
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          This program defines a type <code>t1</code> that is\n          mutable and <code>t2</code> that is immutable. The\n          benchmark loop iterates over both fields and increments a\n          counter. Compile and execute this with some extra options to\n          show the amount of garbage collection occurring.\n        </blockquote>")))
 (idp11640144
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          Let's see this for ourselves with a simple test program.\n          You'll need to install the Core benchmarking suite via\n          <code>opam install core_bench</code> before you compile\n          this code.\n        </blockquote>")))
 (idp11638512
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The OCaml compiler keeps track of any mutable types and adds a\n          call to the runtime <code>caml_modify</code> function\n          before making the change. This checks the location of target\n          write and the value it's being changed to, and ensures that\n          the remembered set is consistent. Although the write barrier\n          is reasonably efficient, it can sometimes be slower than\n          simply allocating a fresh value on the fast minor heap and\n          doing some extra minor collections.\n        </blockquote>")))
 (idp11637808
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The write barrier can have profound implications for the\n          structure of your code. It's one of the reasons why using\n          immutable data structures and allocating a fresh copy with\n          changes can sometimes be faster than mutating a record\n          in-place.\n        </blockquote>")))
 (idp11635104
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        OCaml maintains a set of such <span><em>inter-generational\n        pointers</em></span> to avoid this dependency between a major and\n        minor heap collection. The compiler introduces a write barrier\n        to update this so-called <span><em>remembered set</em></span>\n        whenever a major-heap block is modified to point at a minor-heap\n        block.\n      </blockquote>")))
 (idp11634240
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        One complexity of generational collection arises from the fact\n        that minor heap sweeps are much more frequent than major heap\n        collections. In order to know which blocks in the minor heap are\n        live, the collector must track which minor-heap blocks are\n        directly pointed to by major-heap blocks. Without this\n        information, each minor collection would also require scanning\n        the much larger major heap.\n      </blockquote>")))
 (idp11630000
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        A value of <code>0</code> triggers a compaction after\n        every major garbage collection cycle, whereas the maximum value\n        of <code>1000000</code> disables heap compaction\n        completely. The default settings should be fine unless you have\n        unusual allocation patterns that are causing a higher-than-usual\n        rate of compactions.\n      </blockquote>")))
 (idp11628048
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The <code>max_overhead</code> setting in the\n        <code>Gc</code> module defines the connection between free\n        memory and allocated memory after which compaction is activated.\n      </blockquote>")))
 (idp11626576
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The heap compaction cycle avoids this by relocating all the\n        values in the major heap into a fresh heap that places them all\n        contiguously in memory again. A naive implementation of the\n        algorithm would require extra memory to store the new heap, but\n        OCaml performs the compaction in-place within the existing heap.\n      </blockquote>")))
 (idp11625792
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        After a certain number of major GC cycles have completed, the\n        heap may begin to be fragmented due to values being deallocated\n        out of order from how they were allocated. This makes it harder\n        for the GC to find a contiguous block of memory for fresh\n        allocations, which in turn would require the heap to be grown\n        unnecessarily.\n      </blockquote>")))
 (idp11621984
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The <code>space_overhead</code> setting controls how\n        aggressive the GC is about setting the slice size to a large\n        size. This represents the proportion of memory used for live\n        data that will be &quot;wasted&quot; because the GC doesn't\n        immediately collect unreachable blocks. Core defaults this to\n        <code>100</code> to reflect a typical system that isn't\n        overly memory-constrained. Set this even higher if you have lots\n        of memory, or lower to cause the GC to work harder and collect\n        blocks faster at the expense of using more CPU time.\n      </blockquote>")))
 (idp11619792
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        You can trigger a single slice of the major GC via the\n        <code>major_slice</code> call. This performs a minor\n        collection first, and then a single slice. The size of the slice\n        is normally automatically computed by the GC to an appropriate\n        value, and returns this value so that you can modify it in\n        future calls if necessary.\n      </blockquote>")))
 (idp11618080
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        To mark an impure heap, the GC first marks it as pure and walks\n        through the entire heap block-by-block in increasing order of\n        memory address. If it finds a gray block, it adds it to the gray\n        list and recursively marks it using the usual strategy for a\n        pure heap. Once the scan of the complete heap is finished, the\n        mark phase checks again whether the heap has again become\n        impure, and repeats the scan until it is pure again. These\n        full-heap scans will continue until a successful scan completes\n        without overflowing the gray list.\n      </blockquote>")))
 (idp11616688
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        This process is repeated until the gray value stack is empty and\n        there are no further values to mark. There's one important edge\n        case in this process, though. The gray value stack can only grow\n        to a certain size, after which the GC can no longer recurse into\n        intermediate values since it has nowhere to store them while it\n        follows their fields. If this happens, the heap is marked as\n        <span><em>impure</em></span> and a more expensive check is\n        initiated once the existing gray values have been processed.\n      </blockquote>")))
 (idp11614848
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The marking process starts with a set of\n        <span><em>root</em></span> values that are always live (such as\n        the application stack). All values on the heap are initially\n        marked as white values that are possibly reachable, but haven't\n        been scanned yet. It recursively follows all the fields in the\n        roots via a depth-first search, and pushes newly encountered\n        white blocks onto an intermediate stack of <span><em>gray\n        values</em></span> while it follows their fields. When a gray\n        value's fields have all been followed it is popped off the stack\n        and colored black.\n      </blockquote>")))
 (idp11613968
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The color tags in the value headers store most of the state of\n        the marking process, allowing it to be paused and resumed later.\n        The GC and application alternate between marking a slice of the\n        major heap and actually getting on with executing the program\n        logic. The OCaml runtime calculates a sensible value for the\n        size of each major heap slice based on the rate of allocation\n        and available memory (see below).\n      </blockquote>")))
 (idp11601680
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The marking process can take a long time to run over the\n        complete major heap, and has to pause the main application while\n        it's active. It therefore runs incrementally by marking the heap\n        in <span><em>slices</em></span>. Each value in the heap has a\n        2-bit <span><em>color</em></span> field in its header that is\n        used to store information about whether the value has been\n        marked, so that the GC can resume easily between slices.\n      </blockquote>")))
 (idp11597472
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The same behavior can be controlled at runtime by setting\n          <code>a=0</code> or <code>a=1</code> in\n          <code>OCAMLRUNPARAM</code>.\n        </blockquote>")))
 (idp11594848
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          You can set the heap allocation policy via the\n          <code>Gc.allocation_policy</code> field. A value of\n          <code>0</code> (the default) sets it to next-fit, and\n          <code>1</code> to the first-fit allocator.\n        </blockquote>")))
 (idp11593536
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          For some workloads that need more real-time behavior under\n          load, the reduction in the frequency in heap compaction will\n          outweigh the extra allocation cost.\n        </blockquote>")))
 (idp11592752
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          First-fit allocation focuses on reducing memory fragmentation\n          (and hence the number of compactions), but at the expense of\n          slower memory allocation. Every allocation scans the free list\n          from the beginning for a suitable free chunk, instead of\n          reusing the most recent heap chunk as the next-fit allocator\n          does.\n        </blockquote>")))
 (idp11592000
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          If your programs allocates values of many varied sizes, you\n          may sometimes find that your free list becomes fragmented. In\n          this situation, the GC is forced to perform an expensive\n          compaction despite there being free chunks, since none of the\n          chunks alone are big enough to satisfy the request.\n        </blockquote>")))
 (idp11590000
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          Next-fit allocation is the default allocation strategy. It's\n          quite a cheap allocation mechanism since the same heap chunk\n          can be reused across allocation requests until it runs out.\n          This in turn means that there is good memory locality to use\n          CPU caches better.\n        </blockquote>")))
 (idp11589264
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          Next-fit allocation keeps a pointer to the block in the free\n          list that was most recently used to satisfy a request. When a\n          new request comes in, the allocator searches from the next\n          block until the end of the free list, and then from the\n          beginning of the free list up to that block.\n        </blockquote>")))
 (idp11586656
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The free list of blocks is always checked first when allocating\n        a new block in the major heap. The default free list search is\n        called <span><em>next-fit allocation</em></span>, with an\n        alternative <span><em>first-fit</em></span> algorithm also\n        available.\n      </blockquote>")))
 (idp11585904
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The major heap does its best to manage memory allocation as\n        efficiently as possible, and relies on heap compaction to ensure\n        that memory stays contiguous and unfragmented. The default\n        allocation policy normally works fine for most applications, but\n        it's worth bearing in mind that there are other options too.\n      </blockquote>")))
 (idp11583680
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        Remember that most allocations to the major heap will go via the\n        minor heap, and only be promoted if they are still used by the\n        program after a minor collection. The one exception to this is\n        for values larger than 256 words (that is, 2kB on 64-bit\n        platforms). These will be allocated directly on the major heap\n        since an allocation on the minor heap would likely trigger an\n        immediate collection and copy it to the major heap anyway.\n      </blockquote>")))
 (idp11582848
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        Allocating an OCaml value on the major heap first checks the\n        free list of blocks for a suitable region to place it. If there\n        isn't enough room on the free list, the runtime expands the\n        major heap by allocating a fresh heap chunk that will be large\n        enough. That chunk is then added to the free list and the free\n        list is checked again (and this time will definitely succeed).\n      </blockquote>")))
 (idp11581184
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        If you anticipate allocating some large OCaml values, then\n        setting the heap increment to a larger value will let the\n        operating system return a contiguous block of memory. This is\n        preferable to lots of smaller heap chunks that may be spread\n        across different regions of virtual memory, and require more\n        housekeeping in the OCaml runtime to keep track of them.\n      </blockquote>")))
 (idp11579040
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The <code>Gc</code> module uses the\n        <code>major_heap_increment</code> value to control the\n        major heap growth. This defines the number of words to add to\n        the major heap per expansion, and is the only memory allocation\n        operation that the operating system observes from the OCaml\n        runtime after initial startup (since the minor is fixed in\n        size).\n      </blockquote>")))
 (idp11577616
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        Each chunk's data area starts on a page boundary and its size is\n        a multiple of the page size (4KB). It contains a contiguous\n        sequence of heap blocks which can be as small as one or two 4KB\n        pages, but are usually allocated in 1MB chunks (or 512KB on\n        32-bit architectures).\n      </blockquote>")))
 (idp11576896
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n            a link to the next heap chunk in the list.\n          </blockquote>")))
 (idp11575968
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n            an allocation size in bytes used during heap compaction to\n            merge small blocks to defragment the heap.\n          </blockquote>")))
 (idp11575120
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n            the size in bytes of the data area.\n          </blockquote>")))
 (idp11573808
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n            the <span><em>malloc</em></span>'ed virtual address of the\n            memory region containing the chunk.\n          </blockquote>")))
 (idp11572128
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The major heap consists of a singly-linked list of contiguous\n        memory chunks sorted in increasing order of virtual address.\n        Each chunk is a single memory region allocated via\n        <span><em>malloc(3)</em></span> and consists of a header and data\n        area which contains OCaml heap chunks. A heap chunk header\n        contains:\n      </blockquote>")))
 (idp11569360
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      A major garbage collection must <span><em>stop the\n      world</em></span> (that is, halt the application) to ensure that\n      blocks can be moved around without this being observed by the live\n      application. The mark-and-sweep phases run incrementally over\n      slices of the heap to avoid pausing the application for long\n      periods of time. Only the compaction phase touches all the memory\n      in one go, and is a relatively rare operation.\n    </blockquote>")))
 (idp11567968
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The <span><em>compact</em></span> phase relocates live blocks\n          into a freshly allocated heap to eliminate gaps in the free\n          list. This prevents the fragmentation of heap blocks in\n          long-running programs, and normally occurs much less\n          frequently than the mark and sweep phases.\n        </blockquote>")))
 (idp11566608
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The <span><em>sweep</em></span> phase sequentially scans the\n          heap chunks and identifies dead blocks that weren't marked\n          earlier.\n        </blockquote>")))
 (idp11564784
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          The <span><em>mark</em></span> phase scans the block graph and\n          marks all live blocks by setting a bit in the tag of the block\n          header (known as the <span><em>color</em></span> tag).\n        </blockquote>")))
 (idp11563648
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      The major heap is typically much larger than the minor heap and\n      can scale to gigabytes in size. It is cleaned via a mark-and-sweep\n      garbage collection algorithm that operates in several phases.\n    </blockquote>")))
 (idp11562784
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      The major heap is where the bulk of the longer-lived and larger\n      values in your program are stored. It consists of any number of\n      non-contiguous chunks of virtual memory, each containing live\n      blocks interspersed with regions of free memory. The runtime\n      system maintains a free-list data structure that indexes all the\n      free memory that it has allocated, and uses it to satisfy\n      allocation requests for OCaml blocks.\n    </blockquote>")))
 (idp11560480
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        Changing the GC size dynamically will trigger an immediate minor\n        heap collection. Note that Core increases the default minor heap\n        size from the standard OCaml installation quite significantly,\n        and you'll want to reduce this if running in very\n        memory-constrained environments.\n      </blockquote>")))
 (idp11556816
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The default minor heap size in OCaml is normally 2MB on 64-bit\n        platforms, but this is increased to 8MB if you use Core (which\n        generally improves performance but at the cost of a bigger\n        memory profile by default). This setting can be overridden\n        unless overridden by the <code>s=&lt;words&gt;</code>\n        argument to <code>OCAMLRUNPARAM</code>. You can change it\n        after the program has started by calling the\n        <code>Gc.set</code> function.\n      </blockquote>")))
 (idp11552560
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        You may wonder why <code>limit</code> is required at all,\n        since it always seems to equal <code>start</code>. It's\n        because the easiest way for the runtime to schedule a minor heap\n        collection is by setting <code>limit</code> to equal\n        <code>end</code>. The next allocation will never have\n        enough space after this is done and will always trigger a\n        garbage collection.\n      </blockquote>")))
 (idp11549648
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        Allocating a block in the minor heap just requires\n        <code>ptr</code> to be decremented by the size of the\n        block (including the header) and checking that it's not less\n        than <code>limit</code>. If there isn't enough space left\n        for the block without decrementing past the\n        <code>limit</code>, a minor garbage collection is\n        triggered. This is a very fast check (with no branching) on most\n        CPU architectures.\n      </blockquote>")))
 (idp11544896
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        In a fresh minor heap, the <code>limit</code> equals the\n        <code>start</code> and the current <code>ptr</code>\n        will equal the <code>end</code>. <code>ptr</code>\n        decreases as blocks are allocated until it reaches\n        <code>limit</code>, at which point a minor garbage\n        collection is triggered.\n      </blockquote>")))
 (idp11539152
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The runtime stores the boundaries of the minor heap in two\n        pointers that delimit the start and end of the heap region\n        (<code>caml_young_start</code> and\n        <code>caml_young_end</code>, but we will drop the\n        <code>caml_young</code> prefix for brevity). The\n        <code>base</code> is the memory address returned by the\n        system <code>malloc</code>, and <code>start</code>\n        is aligned against the next nearest word boundary from\n        <code>base</code> to make it easier to store OCaml values.\n      </blockquote>")))
 (idp11537872
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n        The minor heap is a contiguous chunk of virtual memory that is\n        usually a few megabytes in size so that it can be scanned\n        quickly.\n      </blockquote>")))
 (idp11535552
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      To garbage collect the minor heap, OCaml uses <span><em>copying\n      collection</em></span> to move all live blocks in the minor heap to\n      the major heap. This takes work proportional to the number of live\n      blocks in the minor heap, which is typically small according to\n      the generational hypothesis.\n    </blockquote>")))
 (idp11534832
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      The minor heap is where most of your short-lived values are held.\n      It consists of one contiguous chunk of virtual memory containing a\n      sequence of OCaml blocks. If there is space, allocating a new\n      block is a fast constant-time operation that requires just a\n      couple of CPU instructions.\n    </blockquote>")))
 (idp11530512
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      You can also control the behavior of OCaml programs by setting the\n      <code>OCAMLRUNPARAM</code> environment variable before\n      launching your application. This lets you set garbage collector\n      parameters without recompiling, for example to benchmark the\n      effects of different settings. The format of\n      <code>OCAMLRUNPARAM</code> is documented in the\n      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/manual024.html\" target=\"_top\">OCaml\n      manual</a>.\n    </blockquote>")))
 (idp11527616
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      OCaml provides several mechanisms to query and alter the behavior\n      of the runtime system. The <code>Gc</code> module provides\n      this functionality from within OCaml code, and we'll frequently\n      refer to it in the rest of the chapter. As with several other\n      standard library modules, Core alters the <code>Gc</code>\n      interface from the standard OCaml library. We'll assume that\n      you've opened <code>Core.Std</code> in our explanations.\n    </blockquote>")))
 (idp11524944
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      OCaml uses different memory layouts and garbage collection\n      algorithms for the major and minor heaps to account for this\n      generational difference. We'll explain how they differ in more\n      detail next.\n    </blockquote>")))
 (idp11523888
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      A typical functional programming style means that young blocks\n      tend to die young and old blocks tend to stay around for longer\n      than young ones. This is often referred to as the\n      <span><em>generational hypothesis</em></span>.\n    </blockquote>")))
 (idp11522704
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          a larger variable-sized <span><em>major heap</em></span> for\n          blocks that have been live longer.\n        </blockquote>")))
 (idp11521392
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n          a small fixed-size <span><em>minor heap</em></span> where most\n          blocks are initially allocated.\n        </blockquote>")))
 (idp11520304
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      A generational GC maintains separate memory regions to hold blocks\n      based on how long the blocks have been live. OCaml's heap is split\n      in two such regions:\n    </blockquote>")))
 (idp11519200
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      The usual OCaml programming style involves allocating many small\n      variables that are used for a short period of time and then never\n      accessed again. OCaml takes advantage of this fact to improve\n      performance by using a <span><em>generational</em></span> garbage\n      collector.\n    </blockquote>")))
 (idp11516720
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      All blocks reachable from the roots by following edges in the\n      graph must be retained, and unreachable blocks can be reused by\n      the application. The algorithm used by OCaml to perform this heap\n      traversal is commonly known as <span><em>mark and sweep</em></span>\n      garbage collection, and we'll explain it further now.\n    </blockquote>")))
 (idp11512672
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      The garbage collector doesn't keep constant track of values as\n      they are allocated and used. Instead, it regularly scans them by\n      starting from a set of <span><em>root</em></span> values that the\n      application always has access to (such as the stack). The GC\n      maintains a directed graph in which heap blocks are nodes, and\n      there is an edge from heap block <code>b1</code> to heap\n      block <code>b2</code> if some field of <code>b1</code>\n      is a pointer to <code>b2</code>.\n    </blockquote>")))
 (idp11510080
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n      When there isn't enough memory available to satisfy an allocation\n      request from the pool of allocated heap blocks, the runtime system\n      invokes the <span><em>garbage collector</em></span> (or GC). An\n      OCaml program can't explicitly free a value when it is done with\n      it. Instead, the GC regularly determines which values are\n      <span><em>live</em></span> and which values are\n      <span><em>dead</em></span>, <span><em>i.e.</em></span> no longer in\n      use. Dead values are collected and their memory made available for\n      reuse by the application.\n    </blockquote>")))
 (idp11507408
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n    The OCaml runtime is a C library that provides routines that can be\n    called from running OCaml programs. The runtime manages a\n    <span><em>heap</em></span>, which is a collection of memory regions\n    that it obtains from the operating system. The runtime uses this\n    memory to hold <span><em>heap blocks</em></span> that it fills up\n    with OCaml values in response to allocation requests by the OCaml\n    program.\n  </blockquote>")))
 (idp11505808
  ((file understanding-the-garbage-collector.html)
   (html
    "<blockquote>\n    We've described the runtime format of individual OCaml variables\n    earlier in\n    <a href=\"memory-representation-of-values.html\">Chapter\194\16020, <i>Memory Representation of Values</i></a>. When\n    you execute your program, OCaml manages the lifecycle of these\n    variables by regularly scanning allocated values and freeing them\n    when they're no longer needed. This in turn means that your\n    applications don't need to manually implement memory management and\n    greatly reduces the likelihood of memory leaks creeping into your\n    code.\n  </blockquote>")))
 (idp12052688
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        You'll rarely need to look at this raw output from the compiler\n        unless you're building IDE tools such as\n        <code>ocp-index</code>, or are hacking on extensions to\n        the core compiler itself. However, it's useful to know that this\n        intermediate form exists before we delve further into the code\n        generation process next in\n        <a href=\"the-compiler-backend-byte-code-and-native-code.html\">Chapter\194\16023, <i>The Compiler Backend: Byte-code and Native-code</i></a>.\n      </blockquote>")))
 (idp12050016
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The typed AST is more explicit than the untyped syntax tree. For\n        instance, the type declaration has been given a unique name\n        (<code>t/1008</code>), as has the <code>v</code>\n        value (<code>v/1011</code>).\n      </blockquote>")))
 (idp12047360
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The typed AST that is normally output as a compiled\n        <code>cmt</code> file can be displayed in a more\n        developer-readable form via the <code>-dtypedtree</code>\n        option.\n      </blockquote>")))
 (idp12046704
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Each portion of the AST is decorated with the precise location\n        information (including the filename and character location of\n        the token). This code hasn't been type checked yet, and so the\n        raw tokens are all included.\n      </blockquote>")))
 (idp12046112
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        This is rather a lot of output for a simple two-line program,\n        but it shows just how much structure the OCaml parser generates\n        even from a small source file.\n      </blockquote>")))
 (idp12044880
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Let's first look at the untyped syntax tree that's generated\n        from the parsing phase.\n      </blockquote>")))
 (idp12043008
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        We'll use our toy <code>typedef.ml</code> again.\n      </blockquote>")))
 (idp12042336
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The compiler has a couple of advanced flags that can dump the\n        raw output of the internal AST representation. You can't depend\n        on these flags to give the same output across compiler\n        revisions, but they are a useful learning tool.\n      </blockquote>")))
 (idp12038864
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        You need to pass\n        <code>ocp-indexz a set of directories to search for</code>cmt`\n        files in, and a fragment of text to autocomplete. As you can\n        imagine, autocompletion is invaluable on larger codebases. See\n        the\n        <a href=\"https://github.com/ocamlpro/ocp-index\" target=\"_top\">ocp-index</a>\n        homepage for more information on how to integrate it with your\n        favorite editor.\n      </blockquote>")))
 (idp12033952
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Let's refer back to our Ncurses binding example from the\n        beginning of\n        <a href=\"foreign-function-interface.html\">Chapter\194\16019, <i>Foreign Function Interface</i></a>. This\n        module defined bindings for the Ncurses library. First, compile\n        the interfaces with <code>-bin-annot</code> so that we can\n        obtain the <code>cmt</code> and <code>cmti</code>\n        files, and then run <code>ocp-index</code> in completion\n        mode.\n      </blockquote>")))
 (idp12031984
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        One such command-line tool to display auto-completion\n        information in your editor is <code>ocp-index</code>.\n        Install it via OPAM as follows.\n      </blockquote>")))
 (idp12029600
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The <code>cmt</code> files are particularly useful for IDE\n      tools to match up OCaml source code at a specific location to the\n      inferred or external types.\n    </blockquote>")))
 (idp12026832
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The compiler can output this as compiled <code>cmt</code>\n      and <code>cmti</code> files that contain the typed AST for\n      the implementation and signatures of a compilation unit. This is\n      activated by passing the <code>-bin-annot</code> flag to the\n      compiler.\n    </blockquote>")))
 (idp12025712
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      When the type checking process has successfully completed, it is\n      combined with the AST to form a <span><em>typed abstract syntax\n      tree</em></span>. This contains precise location information for\n      every token in the input file, and decorates each token with\n      concrete type information.\n    </blockquote>")))
 (idp12023008
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        You'll need to choose for yourself if you prefer short paths or\n        the default behavior in your own projects, and pass the\n        <code>-short-paths</code> flag to the compiler if you need\n        it.\n      </blockquote>")))
 (idp12021472
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The <code>utop</code> enhanced top-level activates short\n        paths by default, which is why you've not had to do this before\n        in our interactive examples. However, the compiler doesn't\n        default to the short path heuristic since there are some\n        situations where the type aliasing information is useful to\n        know, and would be lost in the error if the shortest module path\n        is always picked.\n      </blockquote>")))
 (idp12018960
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The compiler can remedy this via a so-called &quot;short\n        paths&quot; heuristic. This causes the compiler to search all\n        the type aliases for the shortest module path, and use that as\n        the preferred output type. The option is activated by passing\n        <code>-short-paths</code> to the compiler, and works on\n        the top-level too.\n      </blockquote>")))
 (idp12016960
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The default <code>List</code> module in OCaml is\n        overridden by <code>Core.Std.List</code>. The compiler\n        does its best to show the type equivalence, but at the cost of a\n        more verbose error message.\n      </blockquote>")))
 (idp12014992
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        This type error without <code>Core.Std</code> has a\n        straightforward type error. When we switch to Core, though, it\n        gets more verbose.\n      </blockquote>")))
 (idp12012976
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        There's one downside to this approach: type errors suddenly get\n        much more verbose. We can see this if you run the vanilla OCaml\n        top-level (not <code>utop</code>).\n      </blockquote>")))
 (idp12011552
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Core uses the OCaml module system quite extensively to provide a\n        complete replacement standard library. It collects these modules\n        into a single <code>Std</code> module which provides a\n        single module that needs to be opened to import the replacement\n        modules and functions.\n      </blockquote>")))
 (idp12009408
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        This mostly only happens with unit tests since they are built at\n        the same time as the library. You can avoid it by being aware of\n        the need to open the packed module from the test, or only using\n        the library after it has been installed (and hence not exposing\n        the intermediate compiled modules).\n      </blockquote>")))
 (idp12007024
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        However, the types of <code>A</code> and\n        <code>X.A</code> are <span><em>not</em></span>\n        automatically equivalent, and so the type checker will complain\n        if you attempt to mix-and-match the packed and unpacked versions\n        of the library.\n      </blockquote>")))
 (idp12004128
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        One very common build error that happens with packing is\n        confusion resulting from building the packed\n        <code>cmi</code> in the same directory as the sub-modules.\n        When you add this directory to your module search path, the\n        sub-modules are also visible. If you forget to include the\n        top-level prefix (e.g <code>X.A</code>) and instead use a\n        sub-module directly (<code>A</code>), then this will\n        compile and link fine.\n      </blockquote>")))
 (idp11998560
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        You can now compile this test module and see that its inferred\n        interface is the result of using the packed contents of\n        <code>X</code>. We further verify this by examining the\n        imported interfaces in <code>Test</code> and confirming\n        that neither <code>A</code> nor <code>B</code> are\n        mentioned in there and that only the packed <code>X</code>\n        module is used.\n      </blockquote>")))
 (idp11995216
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        You can now run <code>corebuild</code> to build the\n        <code>X.cmx</code> file directly, but let's create a new\n        module to link against <code>X</code> to complete the\n        example.\n      </blockquote>")))
 (idp11985808
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        First, create a couple of toy modules called\n        <code>A.ml</code> and <code>B.ml</code> that contain\n        a single value. You will also need a <code>_tags</code>\n        file that adds the <code>-for-pack</code> option for the\n        <code>cmx</code> files (but careful to exclude the pack\n        target itself). Finally, the <code>X.mlpack</code> file\n        contains the list of modules that are intended to be packed\n        under module <code>X</code>. There are special rules in\n        <code>ocamlbuild</code> that tell it how to map\n        <code>%.mlpack</code> files to the packed\n        <code>%.cmx</code> or <code>%.cmo</code> equivalent.\n      </blockquote>")))
 (idp11983600
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Packing for native code introduces an additional requirement:\n        the modules that are intended to be packed must be compiled with\n        the <code>-for-pack</code> argument that specifies the\n        eventual name of the pack. The easiest way to handle packing is\n        to let <code>ocamlbuild</code> figure out the command-line\n        arguments for you, so let's try that out next with a simple\n        example.\n      </blockquote>")))
 (idp11977856
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The <code>-pack</code> compiler option accepts a list of\n        compiled object files (<code>.cmo</code> in bytecode and\n        <code>.cmx</code> for native code) and their associated\n        <code>.cmi</code> compiled interfaces, and combines them\n        into a single module that contains them as sub-modules of the\n        output. Packing thus generates an entirely new\n        <code>.cmo</code> (or <code>.cmx</code> file) and\n        <code>.cmi</code> that includes the input modules.\n      </blockquote>")))
 (idp11977136
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The module-to-file mapping described so far rigidly enforces a\n        1:1 mapping between a top-level module and a file. It's often\n        convenient to split larger modules into separate files to make\n        editing and version control easier, but still compile them all\n        into a single OCaml module.\n      </blockquote>")))
 (idp11974784
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          This hash check is very conservative, but ensures that\n          separate compilation remains type-safe all the way up to the\n          final link phase. Your build system should ensure that you\n          never see the error messages above, but if you do run into it,\n          just clean out your intermediate files and recompile from\n          scratch.\n        </blockquote>")))
 (idp11973056
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          The long alphanumeric identifier beside each module name is a\n          hash calculated from all the types and values exported from\n          that compilation unit. It's used during type-checking and\n          linking to ensure that all of the compilation units have been\n          compiled consistently against each other. A difference in the\n          hashes means that a compilation unit with the same module name\n          may have conflicting type signatures in different modules. The\n          compiler will reject such programs with an error similar to\n          this:\n        </blockquote>")))
 (idp11969504
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>ocamlobjinfo</code> examines the compiled\n          interface and displays what other compilation units it depends\n          on. In this case, we don't use any external modules other than\n          <code>Pervasives</code>. Every module depends on\n          <code>Pervasives</code> by default, unless you use the\n          <code>-nopervasives</code> flag (this is an advanced\n          use-case, and you shouldn't normally need it).\n        </blockquote>")))
 (idp11966880
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          OCaml guards against this by recording a MD5 checksum in every\n          <code>cmi</code>. Let's examine our earlier\n          <code>typedef.ml</code> more closely.\n        </blockquote>")))
 (idp11965328
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          For separate compilation to be sound, we need to ensure that\n          all the <code>cmi</code> files used to type-check a\n          module are the same across compilation runs. If they vary,\n          this raises the possibility of two modules checking different\n          type signatures for a common module with the same name. This\n          in turn lets the program completely violate the static type\n          system and can lead to memory corruption and crashes.\n        </blockquote>")))
 (idp11960208
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          By default, only the current directory and the OCaml standard\n          library will be searched for <code>cmi</code> files. The\n          <code>Pervasives</code> module from the standard library\n          will also be opened by default in every compilation unit. The\n          standard library location is obtained by running\n          <code>ocamlc -where</code>, and can be overridden by\n          setting the <code>CAMLLIB</code> environment variable.\n          Needless to say, don't override the default path unless you\n          have a good reason to (such as setting up a cross-compilation\n          environment).\n        </blockquote>")))
 (idp11957920
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          The module search path is set by adding <code>-I</code>\n          flags to the compiler command-line with the directory\n          containing the <code>cmi</code> files as the argument.\n          Manually specifying these flags gets complex when you have\n          lots of libraries, and is the reason why the OCamlfind\n          frontend to the compiler exists. OCamlfind automates the\n          process of turning third-party package names and build\n          descriptions into command-line flags that are passed to the\n          compiler command-line.\n        </blockquote>")))
 (idp11954256
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          The type checker resolves such module references into concrete\n          structures and signatures in order to unify types across\n          module boundaries. It does this by searching a list of\n          directories for a compiled interface file matching that\n          module's name. For example, it will look for\n          <code>alice.cmi</code> and <code>bob.cmi</code> on\n          the search path, and use the first ones it encounters as the\n          interfaces for <code>Alice</code> and\n          <code>Bob</code>.\n        </blockquote>")))
 (idp11949392
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          In the example above, <code>Alice</code> also has a\n          reference to another module <code>Bob</code>. For the\n          overall type of <code>Alice</code> to be valid, the\n          compiler also needs to check that the <code>Bob</code>\n          module contains at least a <code>Bob.name</code> value\n          and defines a <code>Bob.t</code> type.\n        </blockquote>")))
 (idp11946128
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          These two files are exactly analogous to including the\n          following code directly in another module that references\n          <code>Alice</code>.\n        </blockquote>")))
 (idp11944960
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          and a corresponding signature file.\n        </blockquote>")))
 (idp11943056
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Create a file called <code>alice.ml</code> with the\n          following contents.\n        </blockquote>")))
 (idp11942384
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Individual compilation units provide a convenient way to break\n          up a big module hierarchy into a collection of files. The\n          relationship between files and modules can be explained\n          directly in terms of the module system.\n        </blockquote>")))
 (idp11939936
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        This section discusses how the compiler implements them in more\n        detail. Modules are essential for larger projects that consist\n        of many source files (also known as <span><em>compilation\n        units</em></span>). It's impractical to recompile every single\n        source file when changing just one or two files, and the module\n        system minimizes such recompilation while still encouraging code\n        reuse.\n      </blockquote>")))
 (idp11936992
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The OCaml module system enables smaller components to be reused\n        effectively in large projects while still retaining all the\n        benefits of static type safety. We covered the basics of using\n        modules earlier in\n        <a href=\"files-modules-and-programs.html\">Chapter\194\1604, <i>Files, Modules and Programs</i></a>. The\n        module language that operates over these signatures also extends\n        to functors and first-class modules, described in\n        <a href=\"functors.html\">Chapter\194\1609, <i>Functors</i></a> and\n        <a href=\"first-class-modules.html\">Chapter\194\16010, <i>First-Class Modules</i></a> respectively.\n      </blockquote>")))
 (idp11934144
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Bear in mind that the <code>cmi</code> files generated\n          in principal mode differ from the default mode. Try to ensure\n          that you compile your whole project with it activated. Getting\n          the files mixed up won't let you violate type safety, but can\n          result in the type checker failing unexpectedly very\n          occasionally. In this case, just recompile with a clean source\n          tree.\n        </blockquote>")))
 (idp11932752
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          As a result, the suggested approach is to only compile with\n          <code>-principal</code> occasionally to check if your\n          code is compliant. If compiling in principal mode works, it is\n          guaranteed that the program will pass type checking in\n          non-principal mode too.\n        </blockquote>")))
 (idp11930528
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Ideally, all code should systematically use\n          <code>-principal</code>. It reduces variance in type\n          inference and enforces the notion of a single known type.\n          However, there are drawbacks to this mode: type inference is\n          slower and the <code>cmi</code> files become larger.\n          This is generally only a problem if you use objects\n          extensively, which usually have larger type signature to cover\n          all their methods.\n        </blockquote>")))
 (idp11927072
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          The <code>ocamlbuild</code> equivalent is to add the tag\n          <code>principal</code> to your build. The\n          <code>corebuild</code> wrapper script actually adds this\n          by default, but it does no harm to explicitly repeat it, as\n          below.\n        </blockquote>")))
 (idp11925744
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          There is now no ambiguity about the inferred types, since\n          we've explicitly given the argument a type and the order of\n          inference of the sub-expressions no longer matters.\n        </blockquote>")))
 (idp11924480
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          You can fix this either by permuting the order of the type\n          declarations, or by adding an explicit type annotation.\n        </blockquote>")))
 (idp11919536
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          This example isn't principal since the inferred type for\n          <code>x.foo</code> is guided by the inferred type of\n          <code>x.bar</code>, whereas principal typing requires\n          that each sub-expression's type can be calculated\n          independently. If the <code>x.bar</code> use is removed\n          from the definition of <code>f</code>, its argument\n          would be of type <code>t</code> and not\n          <code>type s</code>.\n        </blockquote>")))
 (idp11917600
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Inferring the signature with <code>-principal</code>\n          will show you a new warning.\n        </blockquote>")))
 (idp11916368
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Here's an example of principality warnings when used with\n          record disambiguation.\n        </blockquote>")))
 (idp11915584
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n              automatic disambiguation of record field and constructor\n              names (since OCaml 4.1)\n            </blockquote>")))
 (idp11914688
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n              generalized algebraic data types (GADTs) present from\n              OCaml 4.0 onwards.\n            </blockquote>")))
 (idp11913840
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n              discarding optional labeled arguments.\n            </blockquote>")))
 (idp11912928
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n              permuting the order of labeled arguments in a function\n              from their type definition.\n            </blockquote>")))
 (idp11912080
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n              polymorphic methods for objects.\n            </blockquote>")))
 (idp11911088
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          The principality check only affects a few language features:\n        </blockquote>")))
 (idp11909152
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          The compiler also has a stricter <span><em>principal type\n          checking</em></span> mode that is activated via the\n          <code>-principal</code> flag. This warns about risky\n          uses of type information to ensure that the type inference has\n          one principal result. A type is considered risky if the\n          success or failure of type inference depends on the order in\n          which sub-expressions are typed.\n        </blockquote>")))
 (idp11907088
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          This error points directly to the correct line number that\n          contains the typo. Once you fix the problem, you can remove\n          the manual annotations if you prefer more succinct code. You\n          can also leave the annotations there of course, to help with\n          future refactoring and debugging.\n        </blockquote>")))
 (idp11904992
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          This code contains exactly the same error as before, but we've\n          added a closed type definition of the polymorphic variants,\n          and a type annotation to the <code>algebra</code>\n          definition. The compiler error we get is much more useful now.\n        </blockquote>")))
 (idp11903744
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Let's see what happens with an explicit type annotation to\n          help the compiler out.\n        </blockquote>")))
 (idp11902304
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          This is because the type checker doesn't have enough\n          information to match the inferred type of the\n          <code>algebra</code> definition to its application a few\n          lines down. It calculates types for both expressions\n          separately, and when they don't match up, outputs the\n          difference as best it can.\n        </blockquote>")))
 (idp11900880
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          The type error is perfectly accurate, but rather verbose and\n          with a line number that doesn't point to the exact location of\n          the incorrect variant name. The best the compiler can do is to\n          point you in the general direction of the\n          <code>algebra</code> function application.\n        </blockquote>")))
 (idp11898160
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          There's a single character typo in the code so that it uses\n          <code>Nu</code> instead of <code>Num</code>. The\n          resulting type error is impressive.\n        </blockquote>")))
 (idp11896912
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          For instance, consider this broken example that expresses some\n          simple algebraic operations over integers.\n        </blockquote>")))
 (idp11896176
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Manual type annotations are particularly useful if you use\n          lots of polymorphic variants or objects. Type inference with\n          row polymorphism can generate some very large signatures, and\n          errors tend to propagate more widely than if you are using\n          more explicitly typed variants or classes.\n        </blockquote>")))
 (idp11895312
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          There are a couple of tricks to make it easier to quickly\n          locate type errors in your code. The first is to introduce\n          manual type annotations to narrow down the source of your\n          error more accurately. These annotations shouldn't actually\n          change your types and can be removed once your code is\n          correct. However, they act as anchors to locate errors while\n          you're still writing your code.\n        </blockquote>")))
 (idp11894128
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          It's often said that the hardest part of writing OCaml code is\n          getting past the type checker -- but once the code does\n          compile, it works correctly the first time! This is an\n          exaggeration of course, but it can certainly feel true when\n          moving from a dynamically typed language. The OCaml static\n          type system protects you from certain classes of bugs such as\n          memory errors and abstraction violations by rejecting your\n          program at compilation time rather than by generating an error\n          at runtime. Learning how to navigate the type checker's\n          compile-time feedback is key to building robust libraries and\n          applications that take full advantage of these static checks.\n        </blockquote>")))
 (idp11891808
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        OCaml does have some language extensions which strain the limits\n        of principal type inference, but by and large most programs you\n        write will never <span><em>require</em></span> annotations\n        (although they sometimes help the compiler produce better error\n        messages).\n      </blockquote>")))
 (idp11890416
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        OCaml type inference is based on the Hindley-Milner algorithm,\n        which is notable for its ability to infer the most general type\n        for an expression without requiring any explicit type\n        annotations. The algorithm can deduce multiple types for an\n        expression, and has the notion of a <span><em>principal\n        type</em></span> that is the most general choice from the\n        possible inferences. Manual type annotations can specialize the\n        type explicitly, but the automatic inference selects the most\n        general type unless told otherwise.\n      </blockquote>")))
 (idp11889696
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Type inference is the process of determining the appropriate\n        types for expressions based on their use. It's a feature that's\n        partially present in many other languages such as Haskell and\n        Scala, but OCaml embeds it as a fundamental feature throughout\n        the core language.\n      </blockquote>")))
 (idp11886896
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Signature files provide a place to write succinct documentation\n        and to abstract internal details that shouldn't be exported.\n        Maintaining separate signature files also speeds up incremental\n        compilation in larger code-bases, since recompiling a\n        <code>mli</code> signature is much faster than a full\n        compilation of the implementation to native code.\n      </blockquote>")))
 (idp11883344
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        As with any such stylistic debate, you should experiment with\n        which system works best for you. Everyone agrees on one thing\n        though: no matter what order you write them, production code\n        should always explicitly define an <code>mli</code> file\n        for every <code>ml</code> file in the project. It's also\n        perfectly fine to have an <code>mli</code> file without a\n        corresponding <code>ml</code> file if you're only\n        declaring signatures (such as module types).\n      </blockquote>")))
 (idp11881872
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        If you're writing code that spans multiple files, it's sometimes\n        easier to start by writing all the <code>mli</code>\n        signatures and checking that they type check against each other.\n        Once the signatures are in place, you can write the\n        implementations with the confidence that they'll all glue\n        together correctly with no cyclic dependencies between the\n        modules.\n      </blockquote>")))
 (idp11879776
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        There are two schools of thought on which order OCaml code\n        should be written in. It's very easy to begin writing code by\n        starting with an <code>ml</code> file and using the type\n        inference to guide you as you build up your functions. The\n        <code>mli</code> file can then be generated as described\n        above, and the exported functions documented.\n      </blockquote>")))
 (idp11875056
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The compiler makes sure that your <code>ml</code> and\n        <code>mli</code> files have compatible signatures. The\n        type checker throws an immediate error if this isn't the case.\n      </blockquote>")))
 (idp11872368
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The compiler stores a compiled version of the interface as a\n        <code>cmi</code> file. This interface is either obtained\n        from compiling an <code>mli</code> signature file for a\n        module, or by the inferred type if there is only an\n        <code>ml</code> implementation present.\n      </blockquote>")))
 (idp11871008
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The output is the default signature for the module which\n        represents the input file. It's often useful to redirect this\n        output to an <code>mli</code> file to give you a starting\n        signature to edit the external interface without having to type\n        it all in by hand.\n      </blockquote>")))
 (idp11868976
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Now run the compiler with the <code>-i</code> flag to\n        infer the type signature for that file. This runs the type\n        checker but doesn't compile the code any further after\n        displaying the interface to the standard output.\n      </blockquote>")))
 (idp11867552
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        We've already seen how you can explore type inference directly\n        from the top-level. It's also possible to generate type\n        signatures for an entire file by asking the compiler to do the\n        work for you. Create a file with a single type definition and\n        value.\n      </blockquote>")))
 (idp11865024
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Subtyping in OCaml objects is always an explicit operation (via\n      the <code>:&gt;</code> operator). This means that it doesn't\n      complicate the core type inference engine and can be tested as a\n      separate concern.\n    </blockquote>")))
 (idp11864144
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Type inference doesn't scale to very large code bases that depend\n      on separate compilation of files. A small change in one module may\n      ripple through thousands of other files and libraries and require\n      all of them to be recompiled. The module system solves this by\n      providing the facility to combine and manipulate explicit type\n      signatures for modules within a large project, and also to reuse\n      them via functors and first-class modules.\n    </blockquote>")))
 (idp11863568
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Automatic type inference lets you write succinct code for a\n      particular task and have the compiler ensure that your use of\n      variables is locally consistent.\n    </blockquote>")))
 (idp11862432
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<span><em>explicit subtyping</em></span> checks for objects and\n          polymorphic variants.\n        </blockquote>")))
 (idp11861104
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          a <span><em>module system</em></span> that combines software\n          components with explicit knowledge of their type signatures.\n        </blockquote>")))
 (idp11859744
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          an <span><em>automatic type inference</em></span> algorithm\n          that calculates types for a module without requiring manual\n          type annotations.\n        </blockquote>")))
 (idp11858672
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Although type checking is done in a single pass in OCaml, it\n      actually consists of three distinct steps that happen\n      simultaneously:\n    </blockquote>")))
 (idp11858016
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      After obtaining a valid abstract syntax tree, the compiler has to\n      verify that the code obeys the rules of the OCaml type system.\n      Code that is syntactically correct but misuses values is rejected\n      with an explanation of the problem.\n    </blockquote>")))
 (idp11855904
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n            using OPAM to install existing Camlp4 extensions and\n            inspecting their source code.\n          </blockquote>")))
 (idp11854336
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n            the online\n            <a href=\"http://brion.inria.fr/gallium/index.php/Camlp4\" target=\"_top\">Camlp4\n            wiki</a>.\n          </blockquote>")))
 (idp11852656
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n            a series of\n            <a href=\"http://ambassadortothecomputers.blogspot.co.uk/p/reading-camlp4.html\" target=\"_top\">blog\n            posts</a> by Jake Donham describe the internals of\n            Camlp4 and its syntax extension mechanism.\n          </blockquote>")))
 (idp11851696
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The best resources to get started are:\n      </blockquote>")))
 (idp11851040
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        We've deliberately only shown you how to use Camlp4 extensions\n        here, and not how to build your own. The full details of\n        building new extensions are fairly daunting and could be the\n        subject of an entirely new book.\n      </blockquote>")))
 (idp11847408
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Another thing to consider before deploying your own syntax\n        extension is compatibility with other extensions. Two separate\n        extensions can create a grammar clash that leads to odd syntax\n        errors and hard-to-reproduce bugs. That's why most of Core's\n        syntax extensions go through <code>type_conv</code>, which\n        acts as a single point for extending the grammar via the\n        <code>with</code> keyword.\n      </blockquote>")))
 (idp11845952
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        While it's tempting to compress all your boiler-plate code into\n        Camlp4 extensions, it can make your source code much harder for\n        other people to quickly read and understand. Core mainly focuses\n        on type-driven code generation using the\n        <code>type_conv</code> extension and doesn't fundamentally\n        change the OCaml syntax.\n      </blockquote>")))
 (idp11844960
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Syntax extensions are a powerful extension mechanism that can\n        completely alter your source code's layout and style. Core\n        includes a very conservative set of extensions that take care to\n        minimize the syntax changes. There are a number of third-party\n        libraries that are much more ambitious --- some introduce\n        whitespace-sensitive indentation, while others build entirely\n        new embedded languages using OCaml as a host language, and yet\n        others introduce conditional compilation for macros or optional\n        logging.\n      </blockquote>")))
 (idp11842928
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The external signature generated by\n        <code>comparelib</code> is much simpler than the actual\n        code. Running Camlp4 directly on the original source code lets\n        you see these all these transformations precisely.\n      </blockquote>")))
 (idp11841664
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        If you rerun the Camlp4 dumper script now, you'll see that\n        different code is produced for signature files.\n      </blockquote>")))
 (idp11838944
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Another useful feature of <code>type_conv</code> is that\n        it can generate module signatures too. Copy the earlier type\n        definition into a <code>comparelib_test.mli</code> that's\n        got exactly the same content.\n      </blockquote>")))
 (idp11836256
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Although you don't use <code>_z</code> in your code, this\n        will never generate an unused variable warning.\n      </blockquote>")))
 (idp11834672
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        One other important reason for using wildcard matches is to bind\n        a variable name to something that you want to use in future\n        code, but don't want to use right away. This would normally\n        generate an &quot;unused value&quot; compiler warning. These\n        warnings are suppressed for any variable name that's prepended\n        with an underscore.\n      </blockquote>")))
 (idp11834128
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The last one is used to ignore Async expressions that should run\n        in the background rather than blocking in the current thread.\n      </blockquote>")))
 (idp11832912
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        If the expression has a different type, then write it\n        explicitly.\n      </blockquote>")))
 (idp11830288
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        This is fine for mechanically generated code from Type_conv, but\n        should be avoided in code that you write by hand. If it's a\n        unit-returning expression, then write a <code>unit</code>\n        binding explicitly instead. This will cause a type error if the\n        expression changes type in the future (<span><em>e.g.</em></span>\n        due to code refactoring).\n      </blockquote>")))
 (idp11828224
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        You may have noticed the <code>let _ = fun</code>\n        construct in the autogenerated code above. The underscore in a\n        <code>let</code> binding is just the same as a wildcard\n        underscore in a pattern match, and tells the compiler to accept\n        any return value and discard it immediately.\n      </blockquote>")))
 (idp11822448
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Note that although the generated code uses\n        <code>Pervasives.compare</code>, it is also annotated with\n        a <code>string</code> type. This lets the compiler use a\n        specialized string comparison function and not actually call the\n        runtime polymorphic comparison function. This has implications\n        for correctness too: recall from\n        <a href=\"maps-and-hash-tables.html\">Chapter\194\16013, <i>Maps and Hash Tables</i></a> that\n        <code>comparelib</code> provides reliable comparison\n        functions that work for values that are logically the same but\n        that have differing internal representations (e.g.\n        <code>Int.Set.t</code>).\n      </blockquote>")))
 (idp11821680
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The output contains the original type definition accompanied by\n        some automatically generated code that implements an explicit\n        comparison function for each field in the record. If you're\n        using the extension in your compiler command-line, this\n        generated code is then compiled as if you had typed it in\n        yourself.\n      </blockquote>")))
 (idp11818192
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The script uses the <code>ocamlfind</code> package manager\n        to list the include and library paths needed by\n        <code>comparelib</code>. It then invokes the\n        <code>camlp4o</code> preprocessor with these paths and\n        outputs the resulting AST to the standard output.\n      </blockquote>")))
 (idp11816896
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        We need to run the Camlp4 binary with the library paths to\n        Comparelib and Type_conv. Let's use a small shell script to wrap\n        this invocation.\n      </blockquote>")))
 (idp11814896
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Let's turn to the command-line to obtain the result of the\n        <code>comparelib</code> transformation instead. Create a\n        file that contains the type declaration from earlier.\n      </blockquote>")))
 (idp11813488
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The top-level is a quick way to examine the signatures generated\n        from the extensions, but how can we see what these new functions\n        actually do? You can't do this from <code>utop</code>\n        directly since it embeds the Camlp4 invocation as an automated\n        part of its operation.\n      </blockquote>")))
 (idp11809376
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The first definition of <code>t</code> is a standard OCaml\n        phrase and results in the expected output. The second one\n        includes the <code>with compare</code> directive. This is\n        intercepted by <code>comparelib</code> and transformed\n        into the original type definition with two new functions also\n        included.\n      </blockquote>")))
 (idp11806784
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Let's see how <code>comparelib</code> solves this problem\n        by running it in <code>utop</code>.\n      </blockquote>")))
 (idp11805248
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        OCaml provides a built-in polymorphic comparison operator that\n        inspects the runtime representation of two values to see if\n        they're equal. As we noted in\n        <a href=\"maps-and-hash-tables.html\">Chapter\194\16013, <i>Maps and Hash Tables</i></a>, the\n        polymorphic comparison is less efficient than defining explicit\n        comparison functions between values. However, it quickly become\n        tedious to manually define comparison functions for complex type\n        definitions.\n      </blockquote>")))
 (idp11801648
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The first directive loads the <code>ocamlfind</code>\n        top-level interface that lets you require\n        <code>ocamlfind</code> packages (including all their\n        dependent packages). The second directive instructs the\n        top-level to filter all phrases via Camlp4. You can now run\n        <code>utop</code> and load the syntax extensions in. We'll\n        use the <code>comparelib</code> syntax extension for our\n        experiments.\n      </blockquote>")))
 (idp11797504
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The <code>utop</code> top-level can run the phrases that\n        you type through <code>camlp4</code> automatically. You\n        should have at least these lines in your\n        <code>~/.ocamlinit</code> file in your home directory (see\n        <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a> for more information).\n      </blockquote>")))
 (idp11795504
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The syntax extensions accept an input AST and output a modified\n      one. If you're not familiar with the Camlp4 module in question,\n      how do you figure out what changes it's made to your code? The\n      obvious way is to read the documentation that accompanies the\n      extension. Another approach is to use the top-level to explore the\n      extension's behavior or run Camlp4 manually yourself to see the\n      transformation in action. We'll show you how to do both of these\n      now.\n    </blockquote>")))
 (idp11794624
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The two extensions generate boilerplate OCaml code based on the\n      type definition at compilation time. This avoids the performance\n      hit of doing the code generation dynamically and also doesn't\n      require a Just-In-Time (JIT) runtime that can be a source of\n      unpredictable dynamic behavior. Instead, all the extra code is\n      simply generated at compilation time via Camlp4, and type\n      information can be discarded from the runtime image.\n    </blockquote>")))
 (idp11792448
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Both Fieldslib and Sexplib need this new <code>with</code>\n      keyword, but they both can't register the same extension. Instead,\n      a library called Type_conv provides the common extension framework\n      for them to use. Type_conv registers the <code>with</code>\n      grammar extension to Camlp4, and the OCamlfind packaging ensures\n      that it's loaded before Variantslib or Sexplib.\n    </blockquote>")))
 (idp11789424
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The <code>-package</code> flag imports other OCaml\n      libraries. The <code>.syntax</code> suffix in the package\n      name is a convention that indicates these libraries are\n      preprocessors that should be run during parsing. The syntax\n      extension modules are dynamically loaded into the\n      <code>camlp4o</code> command which rewrites the input source\n      code into conventional OCaml code that has no trace of the new\n      keywords. The compiler then compiles this transformed code with no\n      knowledge of the preprocessor's actions.\n    </blockquote>")))
 (idp11786720
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      We've specified a couple of additional flags here. The\n      <code>-syntax</code> flag directs\n      <code>ocamlfind</code> to add the <code>-pp</code>\n      flag to the compiler command-line. This flag instructs the\n      compiler to run the preprocessor during its parsing phase.\n    </blockquote>")))
 (idp11784048
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Now add in the syntax extension packages for\n      <code>fieldslib</code> and <code>sexplib</code>, and\n      everything will compile again.\n    </blockquote>")))
 (idp11782032
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Compiling this code will normally give you a syntax error if you\n      do so without Camlp4 since the <code>with</code> keyword\n      isn't normally allowed after a type definition.\n    </blockquote>")))
 (idp11779936
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      These libraries all extend the language in quite a minimal way by\n      adding a <code>with</code> keyword to type declarations to\n      signify that extra code should be generated from that declaration.\n      For example, here's a trivial use of Sexplib and Fieldslib.\n    </blockquote>")))
 (idp11778528
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>Bin_prot</code> for efficient binary conversion\n          and parsing.\n        </blockquote>")))
 (idp11776992
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>Sexplib</code> to convert types to textual\n          s-expressions.\n        </blockquote>")))
 (idp11775440
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>Fieldslib</code> generates first-class values that\n          represent fields of a record.\n        </blockquote>")))
 (idp11774464
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      We've already seen several Core libraries that use Camlp4:\n    </blockquote>")))
 (idp11773584
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The OCaml distribution includes a system called Camlp4 for writing\n      extensible parsers. This provides some OCaml libraries that are\n      used to define grammars and also dynamically loadable syntax\n      extensions of such grammars. Camlp4 modules register new language\n      keywords and later transform these keywords (or indeed, any\n      portion of the input program) into conventional OCaml code that\n      can be understood by the rest of the compiler.\n    </blockquote>")))
 (idp11772176
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      One powerful feature in OCaml is a facility to extend the standard\n      language grammar without having to modify the compiler. You can\n      roughly think of it as a type-safe version to the\n      <code>cpp</code> preprocessor used in C/C++ to control\n      conditional compilation directives.\n    </blockquote>")))
 (idp11769168
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n            JSON output is available via a custom\n            <a href=\"https://github.com/xen-org/ocamldoc-json\" target=\"_top\">generator</a>\n            in Xen.\n          </blockquote>")))
 (idp11767472
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<a href=\"https://gitorious.org/ocamldoc-generators/ocamldoc-generators\" target=\"_top\">ocamldoc-generators</a>\n            add support for Bibtex references within comments and\n            generating literate documentation that embeds the code\n            alongside the comments.\n          </blockquote>")))
 (idp11765872
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<a href=\"http://argot.x9c.fr/\" target=\"_top\">Argot</a> is an\n            enhanced HTML generator that supports code folding and\n            searching by name or type definition.\n          </blockquote>")))
 (idp11764688
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The default HTML output stylesheets from OCamldoc are pretty\n        spartan and distinctly Web 1.0. The tool supports plugging in\n        custom documentation generators, and there are several available\n        that provide prettier or more detailed output.\n      </blockquote>")))
 (idp11761104
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        You should now have HTML files inside the\n        <code>html/</code> directory and also be able to view the\n        UNIX manual pages held in <code>man/man3</code>. There are\n        quite a few comment formats and options to control the output\n        for the various backends. Refer to the\n        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/manual029.html\" target=\"_top\">OCaml\n        manual</a> for the complete list.\n      </blockquote>")))
 (idp11759168
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Try compiling the HTML documentation and UNIX man pages by\n        running <code>ocamldoc</code> over the source file.\n      </blockquote>")))
 (idp11757760
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The OCamldoc comments are distinguished by beginning with the\n        double asterisk. There are formatting conventions for the\n        contents of the comment to mark metadata. For instance, the\n        <code>@tag</code> fields mark specific properties such as\n        the author of that section of code.\n      </blockquote>")))
 (idp11756528
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Here's a sample of some source code that's been annotated with\n        OCamldoc comments.\n      </blockquote>")))
 (idp11754976
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The OCamldoc tool uses specially formatted comments in the\n        source code to generate documentation bundles. These comments\n        are combined with the function definitions and signatures and\n        output as structured documentation in a variety of formats. It\n        can generate HTML pages, LaTeX and PDF documents, UNIX manual\n        pages and even module dependency graphs that can be viewed using\n        <a href=\"http://www.graphviz.org\" target=\"_top\">Graphviz</a>.\n      </blockquote>")))
 (idp11754320
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Whitespace and source code comments are removed during parsing\n        and aren't significant in determining the semantics of the\n        program. However, other tools in the OCaml distribution can\n        interpret comments for their own ends.\n      </blockquote>")))
 (idp11750880
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The <code>ocp-indent</code>\n<a href=\"https://github.com/OCamlPro/ocp-indent\" target=\"_top\">homepage</a>\n        documents how to integrate it with your favorite editor. All the\n        Core libraries are formatted using it to ensure consistency, and\n        it's a good idea to do this before publishing your own source\n        code online.\n      </blockquote>")))
 (idp11747360
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The <code>add_and_print</code> definition has been\n        indented as if it were part of the first\n        <code>concat_and_print</code> definition, and the errant\n        semicolon is now much easier to spot. We just need to remove\n        that semicolon and re-run <code>ocp-indent</code> to\n        verify that the syntax is correct.\n      </blockquote>")))
 (idp11745440
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Let's run our erroneous file through\n        <code>ocp-indent</code> and see how it processes it.\n      </blockquote>")))
 (idp11743936
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        This class of bug (due to a single errant character) can be hard\n        to spot in a large body of code. Luckily, there's a great tool\n        available via OPAM called <code>ocp-indent</code> that\n        applies structured indenting rules to your source code on a\n        line-by-line basis. This not only beautifies your code layout,\n        but it also makes this syntax error much easier to locate.\n      </blockquote>")))
 (idp11741312
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The line number in the error points to the end of the\n        <code>add_and_print</code> function, but the actual error\n        is at the end of the <span><em>first</em></span> function\n        definition. There's an extra semicolon at the end of the first\n        definition that causes the second definition to become part of\n        the first <code>let</code> binding. This eventually\n        results in a parsing error at the very end of the second\n        function.\n      </blockquote>")))
 (idp11740096
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        When you compile this file you'll get a syntax error again.\n      </blockquote>")))
 (idp11738784
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Sadly, syntax errors do get more inaccurate sometimes depending\n        on the nature of your mistake. Try to spot the deliberate error\n        in the following function definitions.\n      </blockquote>")))
 (idp11736128
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The syntax error points to the line and character number of the\n        first token that couldn't be parsed. In the broken example the\n        <code>module</code> keyword isn't a valid token at that\n        point in parsing, so the error location information is correct.\n      </blockquote>")))
 (idp11734160
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The correct version of this source code creates the\n        <code>MyString</code> module correctly via a local open,\n        and compiles successfully.\n      </blockquote>")))
 (idp11732960
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The above code results in a syntax error when compiled.\n      </blockquote>")))
 (idp11731696
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        Here's an example syntax error that we obtain by performing a\n        module assignment as a statement instead of as a let-binding.\n      </blockquote>")))
 (idp11730480
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        The OCaml parser's goal is to output a well-formed AST data\n        structure to the next phase of compilation, and so it rejects\n        any source code that doesn't match basic syntactic requirements.\n        The compiler emits a <span><em>syntax error</em></span> in this\n        situation, with a pointer to the filename and line and character\n        number that's as close to the error as possible.\n      </blockquote>")))
 (idp11727168
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      When a source file is passed to the OCaml compiler, its first task\n      is to parse the text into a more structured Abstract Syntax Tree\n      (AST). The parsing logic is implemented in OCaml itself using the\n      techniques described earlier in\n      <a href=\"parsing-with-ocamllex-and-menhir.html\">Chapter\194\16016, <i>Parsing with OCamllex and Menhir</i></a>. The\n      lexer and parser rules can be found in the\n      <code>parsing</code> directory in the source distribution.\n    </blockquote>")))
 (idp11725344
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      We'll go through each of the compilation stages now and explain\n      how that'll be useful to you during day-to-day OCaml development.\n    </blockquote>")))
 (idp11723808
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>testsuite/</code>: regression tests for the core\n          compiler.\n        </blockquote>")))
 (idp11721520
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>tools/</code>: command-line utilities such as\n          <code>ocamldep</code> that are installed with the\n          compiler.\n        </blockquote>")))
 (idp11719968
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>otherlibs/</code>: optional libraries such as the\n          Unix and graphics modules.\n        </blockquote>")))
 (idp11718416
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>ocamlbuild/</code>: build system that automates\n          common OCaml compilation modes.\n        </blockquote>")))
 (idp11716160
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>stdlib/</code>: the compiler standard library,\n          including the <code>Pervasives</code> module.\n        </blockquote>")))
 (idp11714192
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>emacs/</code>: a <span><em>caml-mode</em></span>\n          for the Emacs editor.\n        </blockquote>")))
 (idp11712672
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>toplevel/</code>: interactive top-level console.\n        </blockquote>")))
 (idp11711136
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>debugger/</code>: the interactive byte-code\n          debugger.\n        </blockquote>")))
 (idp11710128
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      There are a number of tools and scripts also built alongside the\n      core compiler:\n    </blockquote>")))
 (idp11708720
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>driver/</code>: command-line interfaces for the\n          compiler tools.\n        </blockquote>")))
 (idp11707184
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>camlp4/</code>: the source code macro\n          preprocessor.\n        </blockquote>")))
 (idp11705632
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>typing/</code>: the static type checking\n          implementation and type definitions.\n        </blockquote>")))
 (idp11704080
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>parsing/</code>: the OCaml lexer, parser and\n          libraries for manipulating them.\n        </blockquote>")))
 (idp11700992
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>asmcomp/</code> and <code>asmrun/</code>:\n          native-code compiler and runtime. The native runtime symlinks\n          many modules from the <code>byterun</code> directory to\n          share code, most notably the garbage collector.\n        </blockquote>")))
 (idp11698704
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>bytecomp/</code> and <code>byterun/</code>:\n          byte-code compiler and runtime, including the garbage\n          collector.\n        </blockquote>")))
 (idp11697120
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n<code>config/</code>: configuration directives to tailor\n          OCaml for your operating system and architecture.\n        </blockquote>")))
 (idp11696112
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The source tree is split up into sub-directories. The core\n      compiler consists of:\n    </blockquote>")))
 (idp11694576
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          A Git mirror of the Subversion repository with all the history\n          and development branches included, browsable online at\n          <a href=\"https://github.com/ocaml/ocaml\" target=\"_top\">Github</a>.\n        </blockquote>")))
 (idp11692912
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          A Subversion anonymous mirror of the main development sources\n          available on the\n          <a href=\"http://caml.inria.fr/ocaml/anonsvn.en.html\" target=\"_top\">development\n          resources</a> page online.\n        </blockquote>")))
 (idp11691312
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n          Stable releases as zip and tar archives from the\n          <a href=\"http://caml.inria.fr/download.en.html\" target=\"_top\">OCaml\n          download site</a>.\n        </blockquote>")))
 (idp11690144
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Although it's not necessary to understand the examples, you may\n      find it useful to have a copy of the OCaml source tree checked out\n      while you read through this chapter. The source code is available\n      from multiple places:\n    </blockquote>")))
 (idp11686272
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Notice that the pipeline branches towards the end. OCaml has\n      multiple compiler backends that reuse the early stages of\n      compilation, but produce very different final outputs. The\n      <span><em>bytecode</em></span> can be run by a portable\n      interpreter, and can even be transformed into JavaScript (via\n      <a href=\"http://ocsigen.org/js_of_ocaml\" target=\"_top\">js_of_ocaml</a>)\n      or C source code (via\n      <a href=\"https://github.com/ocaml-bytes/ocamlcc\" target=\"_top\">OCamlCC</a>).\n      The <span><em>native code</em></span> compiler generates\n      specialized executable binaries suitable for high-performance\n      applications.\n    </blockquote>")))
 (idp11685088
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The overall compilation pipeline looks like this:\n    </blockquote>")))
 (idp11683936
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      Each source file represents a <span><em>compilation\n      unit</em></span> that is built separately. The compiler generates\n      intermediate files with different filename extensions to use as it\n      advances through the compilation stages. The linker takes a\n      collection of compiled units and produces a standalone executable\n      or library archive that can be reused by other applications.\n    </blockquote>")))
 (idp11681072
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n      The OCaml tools accept textual source code as input, using\n      filename extensions of <code>.ml</code> and\n      <code>.mli</code> for modules and signatures respectively.\n      We explained the basics of the build process earlier in\n      <a href=\"files-modules-and-programs.html\">Chapter\194\1604, <i>Files, Modules and Programs</i></a>, so we'll\n      assume you've built a few OCaml programs already by this point.\n    </blockquote>")))
 (idp11678704
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n    The details of the compilation process into executable code can be\n    found next in\n    <a href=\"the-compiler-backend-byte-code-and-native-code.html\">Chapter\194\16023, <i>The Compiler Backend: Byte-code and Native-code</i></a>.\n  </blockquote>")))
 (idp11677984
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        the type-checking process, including module resolution.\n      </blockquote>")))
 (idp11677120
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        source preprocessing via Camlp4 and the intermediate forms.\n      </blockquote>")))
 (idp11676256
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n        the compilation pipeline and what each stage represents.\n      </blockquote>")))
 (idp11675280
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n    In this chapter, we'll cover the following topics:\n  </blockquote>")))
 (idp11673040
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n    You don't have to do all this manually, of course. The compiler\n    frontends (<code>ocamlc</code> and\n    <code>ocamlopt</code>) are invoked via the command-line and\n    chain the stages together for you. Sometimes though, you'll need to\n    dive into the toolchain to hunt down a bug or investigate a\n    performance problem. This chapter explains the compiler pipeline in\n    more depth so you understand how to harness the command-line tools\n    effectively.\n  </blockquote>")))
 (idp11671664
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n    OCaml has a strong emphasis on static type safety and rejects source\n    code that doesn't meet its requirements as early as possible. The\n    compiler does this by running the source code through a series of\n    checks and transformations. Each stage performs its job\n    (<span><em>e.g.</em></span> type checking, optimization or code\n    generation) and discards some information from the previous stage.\n    The final native code output is low-level assembly code that doesn't\n    know anything about the OCaml modules or objects that the compiler\n    started with.\n  </blockquote>")))
 (idp11670912
  ((file the-compiler-frontend-parsing-and-type-checking.html)
   (html
    "<blockquote>\n    Compiling source code into executable programs is a fairly complex\n    process that involves quite a few tools -- preprocessors, compilers,\n    runtime libraries, linkers and assemblers. It's important to\n    understand how these fit together to help with your day-to-day\n    workflow of developing, debugging and deploying applications.\n  </blockquote>")))
 (idp12322160
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The native code compiler generates some additional files.\n    </blockquote>")))
 (idp12302288
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      Here are the intermediate files generated by\n      <code>ocamlc</code>:\n    </blockquote>")))
 (idp12301712
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      We've seen how the compiler uses intermediate files to store\n      various stages of the compilation toolchain. Here's a cheat sheet\n      of all them in one place.\n    </blockquote>")))
 (idp12298128
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        If you get an error that <code>libasmrund.a</code> is not\n        found, then this is probably because you're using OCaml 4.00 and\n        not 4.01. It's only installed by default in the very latest\n        version, which you should be using via the\n        <code>4.01.0dev+trunk</code> OPAM switch.\n      </blockquote>")))
 (idp12296192
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        To use the debug library, just link your program with the\n        <code>-runtime-variant d</code> flag.\n      </blockquote>")))
 (idp12294592
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Despite your best efforts, it is easy to introduce a bug into\n        some components such as C bindings that causes heap invariants\n        to be violated. OCaml includes a <code>libasmrund.a</code>\n        variant of the runtime library that is compiled with extra\n        debugging checks that perform extra memory integrity checks\n        during every garbage collection cycle. Running these extra\n        checks will abort the program nearer the point of corruption and\n        help isolate the bug in the C code.\n      </blockquote>")))
 (idp12292400
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The <code>embed_native.o</code> is a standalone object\n        file that has no further references to OCaml code beyond the\n        runtime library, just as with the bytecode runtime. Do remember\n        that the link order of the libraries is significant on modern\n        GNU toolchains (especially as used in Ubuntu 11.10 upwards) that\n        resolve symbols from left-to-right in a single pass.\n      </blockquote>")))
 (idp12291120
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Try this custom linking by using the same source files from the\n        bytecode embedding example earlier in this chapter.\n      </blockquote>")))
 (idp12289840
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The native code runtime is a different library from the bytecode\n        one and is installed as <code>libasmrun.a</code> in the\n        OCaml standard library directory.\n      </blockquote>")))
 (idp12289168
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The native code compiler normally links a complete executable,\n        but can also output a standalone native object file just as the\n        bytecode compiler can. This object file has no further\n        dependencies on OCaml except for the runtime library.\n      </blockquote>")))
 (idp12286192
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Using the frame pointer changes the OCaml calling convention,\n          but OPAM takes care of recompiling all your libraries with the\n          new interface. You can read more about this on the OCamlPro\n          <a href=\"http://www.ocamlpro.com/blog/2012/08/08/profile-native-code.html\" target=\"_top\">blog</a>.\n        </blockquote>")))
 (idp12284960
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          OPAM provides a compiler switch that compiles OCaml with the\n          frame pointer activated.\n        </blockquote>")))
 (idp12284240
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Using the frame pointer in this fashion means a slowdown\n          (typically around 3-5%) since it's no longer available for\n          general-purpose use. OCaml 4.1 thus makes the frame pointer an\n          optional feature that can be used to improve the resolution of\n          Perf traces.\n        </blockquote>")))
 (idp12283056
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          OCaml stack frames are too complex for Perf to understand\n          directly, and so it needs the compiler to fall back to using\n          the same conventions as C for function calls. On 64-bit Intel\n          systems, this means that a special register known as the\n          <span><em>frame pointer</em></span> is used to record function\n          call history.\n        </blockquote>")))
 (idp12282400
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Although Perf doesn't require adding in explicit probes to the\n          binary, it does need to understand how to unwind function\n          calls so that the kernel can accurately record the function\n          backtrace for every event.\n        </blockquote>")))
 (idp12280368
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Perf has a growing collection of other commands that let you\n          archive these runs and compare them against each other. You\n          can read more on the\n          <a href=\"http://perf.wiki.kernel.org\" target=\"_top\">homepage</a>.\n        </blockquote>")))
 (idp12278240
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          This trace broadly reflects the results of the benchmark\n          itself. The mutable benchmark consists of the combination of\n          the call to <code>test_mutable</code> and the\n          <code>caml_modify</code> write barrier function in the\n          runtime. This adds up to slightly over half the execution time\n          of the application.\n        </blockquote>")))
 (idp12277024
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          When this completes, you can interactively explore the\n          results.\n        </blockquote>")))
 (idp12275696
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Run Perf on a compiled binary to record information first.\n          We'll use our write barrier benchmark from earlier which\n          measures memory allocation versus in-place modification.\n        </blockquote>")))
 (idp12275040
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Perf is a more modern alternative to Gprof that doesn't\n          require you to instrument the binary. Instead, it uses\n          hardware counters and debug information within the binary to\n          record information accurately.\n        </blockquote>")))
 (idp12271216
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Getting precise information out of Gprof requires passing the\n          <code>-p</code> flag to the native code compiler when\n          compiling <span><em>and</em></span> linking the binary. This\n          generates extra code that records profile information to a\n          file called <code>gmon.out</code> when the program is\n          executed. This profile information can then be examined using\n          Gprof.\n        </blockquote>")))
 (idp12270576
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Gprof produces an execution profile of an OCaml program by\n          recording a call graph of which functions call each other, and\n          recording the time these calls take during the program\n          execution.\n        </blockquote>")))
 (idp12268192
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Note that many other tools that operate on native binaries such\n        as Valgrind will work just fine with OCaml as long as the\n        program is linked with the <code>-g</code> flag to embed\n        debugging symbols.\n      </blockquote>")))
 (idp12266720
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n            The <a href=\"https://perf.wiki.kernel.org/\" target=\"_top\">Perf</a>\n            profiling framework in modern versions of Linux.\n          </blockquote>")))
 (idp12265856
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n            GNU Gprof to measure execution time and call graphs.\n          </blockquote>")))
 (idp12264800
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Most profiling tools benefit from having some instrumentation\n        included in the binary. OCaml supports two such tools:\n      </blockquote>")))
 (idp12263632
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The recording and analysis of where your application spends its\n        execution time is known as <span><em>performance\n        profiling</em></span>. OCaml native code binaries can be profiled\n        just like any other C binary, by using the name mangling\n        described earlier to map between OCaml variable names and the\n        profiler output.\n      </blockquote>")))
 (idp12261184
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          One very useful feature of OCaml native code is that C and\n          OCaml both share the same stack. This means that GDB\n          backtraces can give you a combined view of what's going on in\n          your program <span><em>and</em></span> runtime library. This\n          includes any calls to C libraries or even callbacks into OCaml\n          from the C layer if you're in an embedded environment.\n        </blockquote>")))
 (idp12257408
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The <code>cont</code> command resumes execution after a\n          breakpoint has paused it, <code>bt</code> displays a\n          stack backtrace, and <code>clear</code> deletes the\n          breakpoint so that the application can execute until\n          completion. GDB has a host of other features we won't cover\n          here, but you can view more guidelines via Mark Shinwell's\n          talk on\n          <a href=\"http://www.youtube.com/watch?v=NF2WpWnB-nk&lt;\" target=\"_top\">&quot;Real-world\n          debugging in OCaml&quot;</a>.\n        </blockquote>")))
 (idp12256032
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The binary has run until the first take invocation and\n          stopped, waiting for further instructions. GDB has lots of\n          features, so let's continue the program and check the\n          stacktrace after a couple of recursions.\n        </blockquote>")))
 (idp12254832
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Once you've set the breakpoint, start the program executing.\n        </blockquote>")))
 (idp12253424
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          We used the C symbol name by following the name mangling rules\n          defined earlier. A convenient way to figure out the full name\n          is by tab-completion. Just type in a portion of the name and\n          press the <code>&lt;tab&gt;</code> key to see a list of\n          possible completions.\n        </blockquote>")))
 (idp12250768
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The <code>gdb</code> prompt lets you enter debug\n          directives. Let's set the program to break just before the\n          first call to <code>take</code>.\n        </blockquote>")))
 (idp12248896
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Now we can run this interactively within\n          <code>gdb</code>.\n        </blockquote>")))
 (idp12247648
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Compile and run this with debugging symbols. You should see\n          the following output:\n        </blockquote>")))
 (idp12246288
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Let's write a mutually recursive function that selects\n          alternating values from a list. This isn't tail recursive and\n          so our stack size will grow as we single-step through the\n          execution.\n        </blockquote>")))
 (idp12245504
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          For OCaml 4.1, we'd recommend you do native code debugging on\n          an alternate platform such as Linux, or manually look at the\n          assembly code output to map the symbol names onto their\n          precise OCaml functions.\n        </blockquote>")))
 (idp12242608
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The examples here assume that you are running\n          <code>gdb</code> on either Linux or FreeBSD. MacOS X\n          does have <code>gdb</code> installed, but it's a rather\n          quirky experience that doesn't reliably interpret the\n          debugging information contained in the native binaries. This\n          can result in function names showing up as raw symbols such as\n          <code>.L101</code> instead of their more human-readable\n          form.\n        </blockquote>")))
 (idp12240064
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Let's see name mangling in action with some interactive\n          debugging in the GNU <code>gdb</code> debugger.\n        </blockquote>")))
 (idp12238016
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Anonymous functions are hard to predict without inspecting\n          intermediate compiler output. If you need to debug them it's\n          usually easier to modify the source code to let-bind the\n          anonymous function to a variable name.\n        </blockquote>")))
 (idp12234944
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n              The variable name is also suffixed by a\n              <code>_</code> and a number. This is the result of\n              the lambda compilation that replaces each variable name\n              with a unique value within the module. You can determine\n              this number by examining the <code>-dlambda</code>\n              output from <code>ocamlopt</code>.\n            </blockquote>")))
 (idp12233328
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n              This is followed by a double <code>__</code> suffix\n              and the variable name.\n            </blockquote>")))
 (idp12231696
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n              The symbol is prefixed by <code>caml</code> and the\n              local module name, with dots replaced by underscores.\n            </blockquote>")))
 (idp12230672
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The conversion follows some straightforward rules for named\n          variables and functions:\n        </blockquote>")))
 (idp12229792
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Each OCaml source file is compiled into a native object file\n          that must export a unique set of symbols to comply with the C\n          binary interface. This means that any OCaml values that may be\n          used by another compilation unit need to be mapped into a\n          symbol name. This mapping has to account for OCaml language\n          features such as nested modules, anonymous functions and\n          variable names that shadow each other.\n        </blockquote>")))
 (idp12228048
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          So how do you refer to OCaml functions in an interactive\n          debugger like <code>gdb</code>? The first thing you need\n          to know is how function names compile down to C symbols; a\n          procedure generally called <span><em>name mangling</em></span>.\n        </blockquote>")))
 (idp12224800
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Extra debugging information is inserted into the output assembly\n        when the library is compiled in debug mode. These include the\n        CFI stubs you will have noticed in the profiling output earlier\n        (<code>.cfi_start_proc</code> and\n        <code>.cfi_end_proc</code> to delimit an OCaml function\n        call, for example).\n      </blockquote>")))
 (idp12222752
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The native code compiler builds executables that can be debugged\n        using conventional system debuggers such as GNU\n        <code>gdb</code>. You need to compile your libraries with\n        the <code>-g</code> option to add the debug information to\n        the output, just as you need to with C compilers.\n      </blockquote>")))
 (idp12220400
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          We see that the polymorphic comparison is close to 20 times\n          slower! These results shouldn't be taken too seriously as this\n          is a very narrow test, which like all such microbenchmarks\n          aren't representative of more complex codebases. However, if\n          you're building numerical code that runs many iterations in a\n          tight inner loop, it's worth manually peering at the produced\n          assembly code to see if you can hand-optimize it.\n        </blockquote>")))
 (idp12219152
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Running this shows quite a significant runtime difference\n          between the two.\n        </blockquote>")))
 (idp12216992
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          You don't have to fully understand the intricacies of assembly\n          language to see that this polymorphic comparison is much\n          heavier than the simple monomorphic integer comparison from\n          earlier. Let's confirm this hypothesis again by writing a\n          quick <code>Core_bench</code> test with both functions.\n        </blockquote>")))
 (idp12212736
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          OCaml on x86_64 architectures caches the location of the minor\n          heap in the <code>%r15</code> register since it's so\n          frequently referenced in OCaml functions. The minor heap\n          pointer can also be changed by the C code that's being called\n          (e.g. when it allocates OCaml values), and so\n          <code>%r15</code> is restored after returning from the\n          <code>caml_greaterthan</code> call. Finally the return\n          value of the comparison is popped from the stack and returned.\n        </blockquote>")))
 (idp12208272
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The <code>.cfi</code> directives are assembler hints\n          that contain Call Frame Information that lets the GNU debugger\n          provide more sensible backtraces, and have no effect on\n          runtime performance. Notice that the rest of the\n          implementation is no longer a simple register comparison.\n          Instead, the arguments are pushed on the stack (the\n          <code>%rsp</code> register) and a C function call is\n          invoked by placing a pointer to\n          <code>caml_greaterthan</code> in <code>%rax</code>\n          and jumping to <code>caml_c_call</code>.\n        </blockquote>")))
 (idp12206336
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Compiling this code with <code>-S</code> results in a\n          significantly more complex assembly output for the same\n          function.\n        </blockquote>")))
 (idp12201664
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The arguments to <code>cmp</code> are passed in the\n          <code>%rbx</code> and <code>%rax</code> registers,\n          and compared using the <code>jle</code> &quot;jump if\n          less than or equal&quot; instruction. This requires both the\n          arguments to be immediate integers to work. Now let's see what\n          happens if our OCaml code omits the type annotations and is a\n          polymorphic comparison instead.\n        </blockquote>")))
 (idp12198128
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          The <code>_camlCompare_mono__cmp_1008</code> is an\n          assembly label that has been computed from the module name\n          (<code>Compare_mono</code>) and the function name\n          (<code>cmp_1008</code>). The numeric suffix for the\n          function name comes straight from the lambda form (which you\n          can inspect using <code>-dlambda</code>, but in this\n          case isn't necessary).\n        </blockquote>")))
 (idp12195984
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          If you've never seen assembly language before then the\n          contents may be rather scary. While you'll need to learn x86\n          assembly to fully understand it, we'll try to give you some\n          basic instructions to spot patterns in this section. The\n          excerpt of the implementation of the <code>cmp</code>\n          function can be found below.\n        </blockquote>")))
 (idp12193968
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          Now compile this into assembly and read the resulting\n          <code>compare_mono.S</code> file. This file extension\n          may be lowercase on some platforms such as Linux.\n        </blockquote>")))
 (idp12192704
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          First create a comparison function where we've explicitly\n          annotated the types, so the compiler knows that only integers\n          are being compared.\n        </blockquote>")))
 (idp12191376
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          We warned you earlier in\n          <a href=\"maps-and-hash-tables.html\">Chapter\194\16013, <i>Maps and Hash Tables</i></a> that using\n          polymorphic comparison is both convenient and perilous. Let's\n          look at precisely what the difference is at the assembly\n          language level now.\n        </blockquote>")))
 (idp12187792
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The assembly code is highly architecture specific, so the\n        discussion below assumes an Intel or AMD 64-bit platform. We've\n        generated the example code using <code>-inline 20</code>\n        and <code>-nodynlink</code> since it's best to generate\n        assembly code with the full optimizations that the compiler\n        supports. Even though these optimizations make the code a bit\n        harder to read, it will give you a more accurate picture of what\n        executes on the CPU. Don't forget that you can use the lambda\n        code from earlier to get a slightly higher level picture of the\n        code if you get lost in the more verbose assembly.\n      </blockquote>")))
 (idp12185712
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The native code compiler generates assembly language that is\n        then passed to the system assembler for compiling into object\n        files. You can get <code>ocamlopt</code> to output the\n        assembly by passing the <code>-S</code> flag to the\n        compiler command-line.\n      </blockquote>")))
 (idp12180224
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      Collections of <code>.cmx</code> and <code>.o</code>\n      files can also be be linked into a <code>.cmxa</code>\n      archive by passing the <code>-a</code> flag to the compiler.\n      However, unlike the bytecode version, you must keep the individual\n      <code>cmx</code> files in the compiler search path so that\n      they are available for cross-module inlining. If you don't do\n      this, the compilation will still succeed, but you will have missed\n      out on an important optimization and have slower binaries.\n    </blockquote>")))
 (idp12178848
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      When the compiler links modules together into an executable, it\n      uses the contents of the <code>cmx</code> files to perform\n      cross-module inlining across compilation units. This can be a\n      significant speedup for standard library functions that are\n      frequently used outside of their module.\n    </blockquote>")))
 (idp12177392
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          A <code>.cmi</code> compiled interface file that is the\n          same as the bytecode compiler.\n        </blockquote>")))
 (idp12175792
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          A <code>.cmx</code> file containing extra information\n          for linking and cross-module optimization.\n        </blockquote>")))
 (idp12174272
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n          A <code>.o</code> file containing native object code.\n        </blockquote>")))
 (idp12170432
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The <code>ocamlopt</code> command is the frontend to the\n      native code compiler, and has a very similar interface to\n      <code>ocamlc</code>. It also accepts <code>ml</code>\n      and <code>mli</code> files, but compiles them to:\n    </blockquote>")))
 (idp12169584
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The native code compiler is ultimately the tool that most\n      production OCaml code goes through. It compiles the lambda form\n      into fast native code executables, with cross-module inlining and\n      additional optimization passes that the bytecode interpreter\n      doesn't perform. Care is taken to ensure compatibility with the\n      bytecode runtime, so the same code should run identically when\n      compiled with either toolchain.\n    </blockquote>")))
 (idp12165888
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Embedding OCaml code like this lets you write OCaml that\n        interfaces with any environment that works with a C compiler.\n        You can even cross back from the C code into OCaml by using the\n        <code>Callback</code> module to register named entry\n        points in the OCaml code. This is explained in detail in the\n        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/manual033.html#toc149\" target=\"_top\">interfacing\n        with C</a> section of the OCaml manual.\n      </blockquote>")))
 (idp12160912
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        You can inspect the commands that <code>ocamlc</code> is\n        invoking by adding <code>-verbose</code> to the command\n        line to help figure out the GCC command-line if you get stuck.\n        You can even obtain the C source code to the\n        <code>-output-obj</code> result by specifying a\n        <code>.c</code> output file extension instead of the\n        <code>.o</code> we used earlier.\n      </blockquote>")))
 (idp12158160
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        After this point, you no longer need the OCaml compiler, as\n        <code>embed_out.o</code> has all of the OCaml code\n        compiled and linked into a single object file. Compile an output\n        binary using <code>gcc</code> to test this out.\n      </blockquote>")))
 (idp12156960
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Now compile the OCaml files into a standalone object file.\n      </blockquote>")))
 (idp12155776
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Next, create a C file which will be your main entry point.\n      </blockquote>")))
 (idp12153856
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Create two OCaml source files that contain a single print line.\n      </blockquote>")))
 (idp12152384
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        This object file can then be linked with C code using the\n        standard C compiler, and only needs the bytecode runtime library\n        (which is installed as <code>libcamlrun.a</code>).\n        Creating an executable just requires you to link the runtime\n        library with the bytecode object file. Here's an example to show\n        how it all fits together.\n      </blockquote>")))
 (idp12150272
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        This mode causes <code>ocamlc</code> to output a C object\n        file that containing the bytecode for the OCaml part of the\n        program, as well as a <code>caml_startup</code> function.\n        All of the OCaml modules are linked into this object file as\n        bytecode, just as they would be for an executable.\n      </blockquote>")))
 (idp12148160
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        A consequence of using the bytecode compiler is that the final\n        link phase must be performed by <code>ocamlc</code>.\n        However, you might sometimes want to embed your OCaml code\n        inside an existing C application. OCaml also supports this mode\n        of operation via the <code>-output-obj</code> directive.\n      </blockquote>")))
 (idp12145408
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The custom mode is the most similar mode to native code\n        compilation, as both generate standalone executables. There are\n        quite a few other options available for compiling bytecode\n        (notably with shared libraries or building custom runtimes).\n        Full details can be found in the\n        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/manual022.html\" target=\"_top\">manual</a>.\n      </blockquote>")))
 (idp12143328
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        OCamlbuild takes care of much of the details of this with its\n        built-in rules. The <code>%.byte</code> rule that you've\n        been using throughout the book builds a bytecode executable and\n        adding the <code>custom</code> tag will bundle the\n        interpreter with it too.\n      </blockquote>")))
 (idp12140864
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        You can also generate a complete standalone executable that\n        bundles the <code>ocamlrun</code> interpreter with the\n        bytecode in a single binary. This is known as a <span><em>custom\n        runtime</em></span> mode and is built as follows.\n      </blockquote>")))
 (idp12139456
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The <code>dllib</code> flag embeds the arguments in the\n        archive file. Any subsequent packages linking this archive will\n        also include the extra C linking directive. This in turn lets\n        the interpreter dynamically load the external library symbols\n        when it executes the bytecode.\n      </blockquote>")))
 (idp12138224
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Information about these extra libraries can be specified while\n        linking a bytecode archive.\n      </blockquote>")))
 (idp12137584
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The OCaml linker produces bytecode that targets the standard\n        OCaml runtime by default, and so needs to know about any C\n        functions that are referenced from other libraries that aren't\n        loaded by default.\n      </blockquote>")))
 (idp12136912
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The bytecode runtime comprises three parts: the bytecode\n        interpreter, garbage collector, and a set of C functions that\n        implement the primitive operations. The bytecode contains\n        instructions to call these C functions when required.\n      </blockquote>")))
 (idp12133440
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The bytecode files are then linked together with the OCaml\n        standard library to produce an executable program. The order in\n        which <code>.cmo</code> arguments are presented on the\n        command line defines the order in which compilation units are\n        initialized at runtime. Remember that OCaml has no single\n        <code>main</code> function like C, so this link order is\n        more important than in C programs.\n      </blockquote>")))
 (idp12129776
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The individual objects in the library are linked as regular\n        <code>cmo</code> files in the order specified when the\n        library file was built. If an object file within the library\n        isn't referenced elsewhere in the program, then it isn't\n        included in the final binary unless the\n        <code>-linkall</code> flag forces its inclusion. This\n        behavior is analogous to how C handles object files and archives\n        (<code>.o</code> and <code>.a</code> respectively).\n      </blockquote>")))
 (idp12126880
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        A typical OCaml library consists of multiple source files, and\n        hence multiple <code>cmo</code> files that all need to be\n        passed as command-line arguments to use the library from other\n        code. The compiler can combine these multiple files into a more\n        convenient single archive file by using the\n        <code>-a</code> flag. Bytecode archives are denoted by the\n        <code>cma</code> extension.\n      </blockquote>")))
 (idp12123424
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The <code>ocamlc</code> command compiles individual\n        <code>ml</code> files into bytecode files that have a\n        <code>cmo</code> extension. The compiled bytecode files\n        are matched with the associated <code>cmi</code> interface\n        which contains the type signature exported to other compilation\n        units.\n      </blockquote>")))
 (idp12121552
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      Understanding the reasoning behind the different implementations\n      of the bytecode interpreter and the native compiler is a very\n      useful exercise for any budding language hacker.\n    </blockquote>")))
 (idp12120720
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      This paper laid the theoretical basis for the implementation of an\n      instruction set for a strictly evaluated functional language such\n      as OCaml. The bytecode interpreter in modern OCaml is still based\n      on the ZINC model. The native code compiler uses a different model\n      since it uses CPU registers for function calls instead of always\n      passing arguments on the stack as the bytecode interpreter does.\n    </blockquote>")))
 (idp12119168
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The bytecode interpreter is much slower than compiled native code,\n      but is still remarkably performant for an interpreter without a\n      JIT compiler. Its efficiency can be traced back to Xavier Leroy's\n      ground-breaking work in 1990 on\n      <a href=\"http://hal.inria.fr/docs/00/07/00/49/PS/RT-0117.ps\" target=\"_top\">&quot;The\n      ZINC experiment: An Economical Implementation of the ML\n      Language&quot;</a>.\n    </blockquote>")))
 (idp12116656
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      There are around 140 instructions in total, but most are just\n      minor variants of commonly encountered operations\n      (<span><em>e.g.</em></span> function application at a specific\n      arity). You can find full details\n      <a href=\"http://cadmium.x9c.fr/distrib/caml-instructions.pdf\" target=\"_top\">online</a>.\n    </blockquote>")))
 (idp12116096
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The bytecode above has been simplified from the lambda form into a\n      set of simple instructions that are executed serially by the\n      interpreter.\n    </blockquote>")))
 (idp12113904
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The interpreter virtual machine only has seven registers in total:\n      the program counter, stack pointer, accumulator, exception and\n      argument pointers, and environment and global data. You can\n      display the bytecode instructions in textual form via\n      <code>-dinstr</code>. Try this on one of our earlier pattern\n      matching examples.\n    </blockquote>")))
 (idp12112752
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n<span><em>code offset</em></span> values that are relative to\n          the starting code address.\n        </blockquote>")))
 (idp12111392
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n<span><em>block</em></span> values that contain the block\n          header and a memory address with the data fields that contain\n          further OCaml values indexed by an integer.\n        </blockquote>")))
 (idp12109456
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n<span><em>long</em></span> values corresponding to an OCaml\n          <code>int</code> type.\n        </blockquote>")))
 (idp12108384
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The bytecode interpreter implements a stack-based virtual machine.\n      The OCaml stack and an associated accumulator stores values that\n      consist of:\n    </blockquote>")))
 (idp12107744
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The big advantage of using bytecode is simplicity, portability and\n      compilation speed. The mapping from the lambda form to bytecode is\n      straightforward, and this results in predictable (but slow)\n      execution speed.\n    </blockquote>")))
 (idp12106320
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n<code>ocamlrun</code> is a portable interpreter that\n          executes the bytecode.\n        </blockquote>")))
 (idp12104752
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n<code>ocamlc</code> compiles files into a bytecode that\n          is a close mapping to the lambda form.\n        </blockquote>")))
 (idp12103584
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      After the lambda form has been generated, we are very close to\n      having executable code. The OCaml tool-chain branches into two\n      separate compilers at this point. We'll describe the bytecode\n      compiler first, which consists of two pieces:\n    </blockquote>")))
 (idp12101408
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        It's not essential that you understand all of this just to use\n        pattern matching of course, but it'll give you insight as to why\n        pattern matching is such a lightweight language construct to use\n        in OCaml code.\n      </blockquote>")))
 (idp12100720
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The paper describes the backtracking algorithm used in classical\n        pattern matching compilation, and also several OCaml-specific\n        optimizations such as the use of exhaustiveness information and\n        control flow optimizations via static exceptions.\n      </blockquote>")))
 (idp12099200
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Pattern matching is an important part of OCaml programming.\n        You'll often encounter deeply nested pattern matches over\n        complex data structures in real code. A good paper that\n        describes the fundamental algorithms implemented in OCaml is\n        <a href=\"http://dl.acm.org/citation.cfm?id=507641\" target=\"_top\">&quot;Optimizing\n        pattern matching&quot;</a> by Fabrice Le Fessant and Luc\n        Maranget.\n      </blockquote>")))
 (idp12097808
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The lambda form is primarily a stepping stone to the bytecode\n        executable format that we'll cover next. It's often easier to\n        look at the textual output from this stage than to wade through\n        the native assembly code from compiled executables.\n      </blockquote>")))
 (idp12096928
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        These results confirm our earlier performance hypothesis\n        obtained from inspecting the lambda code. The shortest running\n        time comes from the exhaustive pattern match and polymorphic\n        variant pattern matching is the slowest. There isn't a hugely\n        significant difference in these examples, but you can use the\n        same techniques to peer into the innards of your own source code\n        and narrow down any performance hotspots.\n      </blockquote>")))
 (idp12095632
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Building and executing this example will run for around 30\n        seconds by default, and you'll see the results summarized in a\n        neat table.\n      </blockquote>")))
 (idp12092848
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Let's benchmark these three pattern matching techniques to\n        quantify their runtime costs more accurately. The\n        <code>Core_bench</code> module runs the tests thousands of\n        times and also calculates statistical variance of the results.\n        You'll need to <code>opam install core_bench</code> to get\n        the library.\n      </blockquote>")))
 (idp12090064
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        We mentioned earlier in <a href=\"variants.html\">Chapter\194\1606, <i>Variants</i></a>\n        that pattern matching over polymorphic variants is slightly less\n        efficient, and it should be clearer why this is the case now.\n        Polymorphic variants have a runtime value that's calculated by\n        hashing the variant name, and so the compiler has to test each\n        of these possible hash values in sequence.\n      </blockquote>")))
 (idp12088832
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The lambda form for this reveals the most inefficient result\n        yet.\n      </blockquote>")))
 (idp12087600
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Finally, let's look at the same code, but with polymorphic\n        variants instead of normal variants.\n      </blockquote>")))
 (idp12086544
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Exhaustive pattern matching is thus a better coding style at\n        several levels. It rewards you with more useful compile-time\n        warnings when you modify type definitions\n        <span><em>and</em></span> generates more efficient runtime code\n        too.\n      </blockquote>")))
 (idp12083776
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The compiler has reverted to testing the value as a set of\n        nested conditionals. The lambda code above first checks to see\n        if the value is <code>Alice</code>, then if it's\n        <code>Bob</code> and finally falls back to the default\n        <code>102</code> return value for everything else.\n      </blockquote>")))
 (idp12082560
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The lambda output for this code is now quite different.\n      </blockquote>")))
 (idp12080352
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The first pattern match is <span><em>exhaustive</em></span>, so\n        there are no unknown match cases that the compiler needs to\n        check for (<span><em>e.g.</em></span> a value greater than 3).\n        What happens if we modify the code to use an incomplete pattern\n        match instead?\n      </blockquote>")))
 (idp12077408
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n            Values are addressed by a unique name that distinguished\n            shadowed values by appending a number\n            (<span><em>e.g.</em></span> <code>v/1014</code>). The\n            type safety checks in the earlier phase ensure that these\n            low-level accesses never violate runtime memory safety, so\n            this layer doesn't do any dynamic checks. Unwise use of\n            unsafe features such as the <code>Obj.magic</code>\n            module can still easily induce crashes at this level.\n          </blockquote>")))
 (idp12075536
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n            The pattern match has turned into a switch case that jumps\n            to the right case depending on the header tag of\n            <code>v</code>. Recall that variants without\n            parameters are stored in memory as integers in the order\n            which they appear. The pattern matching engine knows this\n            and has transformed the pattern into an efficient jump\n            table.\n          </blockquote>")))
 (idp12072336
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n            There are no mention of modules or types any more. Global\n            values are created via <code>setglobal</code> and\n            OCaml values are constructed by\n            <code>makeblock</code>. The blocks are the runtime\n            values you should remember from\n            <a href=\"memory-representation-of-values.html\">Chapter\194\16020, <i>Memory Representation of Values</i></a>.\n          </blockquote>")))
 (idp12071168
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        It's not important to understand every detail of this internal\n        form and it is explicitly undocumented since it can change\n        across compiler revisions. Despite these caveats, some\n        interesting points emerge from reading it.\n      </blockquote>")))
 (idp12069952
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The lambda output for this code looks like this.\n      </blockquote>")))
 (idp12068704
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        Let's start by creating a straightforward exhaustive pattern\n        match using normal variants.\n      </blockquote>")))
 (idp12067280
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        The compiler dumps the lambda form in an s-expression syntax if\n        you add the <code>-dlambda</code> directive to the\n        command-line. Let's use this to learn more about how the OCaml\n        pattern matching engine works by building three different\n        pattern matches and comparing their lambda forms.\n      </blockquote>")))
 (idp12064720
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The lambda form is the key stage that discards the OCaml type\n      information and maps the source code to the runtime memory model\n      described in\n      <a href=\"memory-representation-of-values.html\">Chapter\194\16020, <i>Memory Representation of Values</i></a>. This\n      stage also performs some optimizations, most notably converting\n      pattern match statements into more optimized but low-level\n      statements.\n    </blockquote>")))
 (idp12063520
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n      The first code generation phase eliminates all the static type\n      information into a simpler intermediate <span><em>lambda\n      form</em></span>. The lambda form discards higher-level constructs\n      such as modules and objects and replaces them with simpler values\n      such as records and function pointers. Pattern matches are also\n      analyzed and compiled into highly optimized automata.\n    </blockquote>")))
 (idp12060960
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        the native code <code>ocamlopt</code> code generator, and\n        debugging and profiling native code.\n      </blockquote>")))
 (idp12058720
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        the bytecode <code>ocamlc</code> compiler and\n        <code>ocamlrun</code> interpreter.\n      </blockquote>")))
 (idp12057840
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n        the untyped intermediate lambda code where pattern matching is\n        optimized.\n      </blockquote>")))
 (idp12056864
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n    In this chapter, we'll cover the following topics:\n  </blockquote>")))
 (idp12056272
  ((file the-compiler-backend-byte-code-and-native-code.html)
   (html
    "<blockquote>\n    Once OCaml has passed the type checking stage, it can stop emitting\n    syntax and type errors and begin the process of compiling the\n    well-formed modules into executable code.\n  </blockquote>")))
 (idp7996784
  ((file records.html)
   (html
    "<blockquote>\n      This exhaustion guarantee is a valuable one. Field iterators are\n      useful for a variety of record-related tasks, from building record\n      validation functions to scaffolding the definition of a web-form\n      from a record type, and such applications can benefit from the\n      guarantee that all fields of the record type in question have been\n      considered.\n    </blockquote>")))
 (idp7994160
  ((file records.html)
   (html
    "<blockquote>\n      One nice side effect of this approach is that it helps you adapt\n      your code when the fields of a record change. If you were to add a\n      field to <code>Logon.t</code>, the type of\n      <code>Logon.Fields.iter</code> would change along with it,\n      acquiring a new argument. Any code using\n      <code>Logon.Fields.iter</code> won't compile until it's\n      fixed to take this new argument into account.\n    </blockquote>")))
 (idp7991200
  ((file records.html)
   (html
    "<blockquote>\n      Now, let's use <code>Logon.Fields.iter</code> and\n      <code>show_field</code> to print out all the fields of a\n      <code>Logon</code> record.\n    </blockquote>")))
 (idp7988480
  ((file records.html)
   (html
    "<blockquote>\n      This is a bit daunting to look at, largely because of the access\n      control markers, but the structure is actually pretty simple. Each\n      labeled argument is a function that takes a first-class field of\n      the necessary type as an argument. Note that\n      <code>iter</code> passes each of these callbacks the\n      <code>Field.t</code>, not the contents of the specific\n      record field. The contents of the field, though, can be looked up\n      using the combination of the record and the\n      <code>Field.t</code>.\n    </blockquote>")))
 (idp7984784
  ((file records.html)
   (html
    "<blockquote>\n<code>fieldslib</code> also provides higher-level operators,\n      like <code>Fields.fold</code> and\n      <code>Fields.iter</code>, which let you iterate over all the\n      fields of a record. So, for example, in the case of\n      <code>Logon.t</code>, the field iterator has the following\n      type.\n    </blockquote>")))
 (idp7982784
  ((file records.html)
   (html
    "<blockquote>\n      As a side note, the above is our first use of the\n      <code>Fn</code> module (short for &quot;function&quot;)\n      which provides a collection of useful primitives for dealing with\n      functions. <code>Fn.id</code> is the identity function.\n    </blockquote>")))
 (idp7981072
  ((file records.html)
   (html
    "<blockquote>\n      Here's an example of <code>show_field</code> in action.\n    </blockquote>")))
 (idp7979904
  ((file records.html)
   (html
    "<blockquote>\n      This takes three arguments: the <code>Field.t</code>, a\n      function for converting the contents of the field in question to a\n      string, and a record from which the field can be grabbed.\n    </blockquote>")))
 (idp7978672
  ((file records.html)
   (html
    "<blockquote>\n      We can use first-class fields to do things like write a generic\n      function for displaying a record field.\n    </blockquote>")))
 (idp7976800
  ((file records.html)
   (html
    "<blockquote>\n      The type is <code>Field.t_with_perm</code> rather than a\n      simple <code>Field.t</code> because fields have a notion of\n      access control associated with them because there are some special\n      cases where we may expose the ability to read a field but not the\n      ability to do a functional update.\n    </blockquote>")))
 (idp7974960
  ((file records.html)
   (html
    "<blockquote>\n      The type of <code>Field.get</code> is a little more\n      complicated than you might naively expect from the above, as you\n      can see below.\n    </blockquote>")))
 (idp7972560
  ((file records.html)
   (html
    "<blockquote>\n      Thus, first parameter of the <code>Field.t</code>\n      corresponds to the record you pass to <code>get</code>, and\n      the second argument corresponds to the value contained in the\n      field, which is also the return type of <code>get</code>.\n    </blockquote>")))
 (idp7965680
  ((file records.html)
   (html
    "<blockquote>\n      A <code>Field.t</code> has two type parameters: the first\n      for the type of the record, and the second for the type of the\n      field in question. Thus, the type of\n      <code>Logon.Fields.session_id</code> is\n      <code>(Logon.t, string) Field.t</code>, whereas the type of\n      <code>Logon.Fields.time</code> is\n      <code>(Logon.t, Time.t) Field.t</code>. Thus, if you call\n      <code>Field.get</code> on\n      <code>Logon.Fields.user</code>, you'll get a function for\n      extracting the <code>user</code> field from a\n      <code>Logon.t</code>.\n    </blockquote>")))
 (idp7962464
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.setter</code>, which returns\n          <code>None</code> if the field is not mutable or\n          <code>Some f</code> if it is, where <code>f</code>\n          is a function for mutating that field.\n        </blockquote>")))
 (idp7960992
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.fset</code>, which does a functional update\n          of a field\n        </blockquote>")))
 (idp7959520
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.get</code>, which returns the content of a\n          field\n        </blockquote>")))
 (idp7958128
  ((file records.html)
   (html
    "<blockquote>\n<code>Field.name</code>, which returns the name of a\n          field\n        </blockquote>")))
 (idp7954544
  ((file records.html)
   (html
    "<blockquote>\n      In addition to generating field accessor functions,\n      <code>fieldslib</code> also creates a sub-module called\n      <code>Fields</code> that contains a first-class\n      representative of each field, in the form of a value of type\n      <code>Field.t</code>. The <code>Field</code> module\n      provides the following functions:\n    </blockquote>")))
 (idp7952736
  ((file records.html)
   (html
    "<blockquote>\n      One of the functions we obtain is <code>Logon.user</code>,\n      which we can use to extract the user field from a logon message.\n    </blockquote>")))
 (idp7950496
  ((file records.html)
   (html
    "<blockquote>\n      Note that this will generate a <span><em>lot</em></span> of output,\n      because <code>fieldslib</code> generates a large collection\n      of helper functions for working with record fields. We'll only\n      discuss a few of these; you can learn about the remainder from the\n      documentation that comes with <code>fieldslib</code>.\n    </blockquote>")))
 (idp7948032
  ((file records.html)
   (html
    "<blockquote>\n      The <code>with fields</code> annotation at the end of the\n      declaration of a record type will cause the extension to be\n      applied to a given type declaration. So, for example, we could\n      have defined <code>Logon</code> as follows.\n    </blockquote>")))
 (idp7944912
  ((file records.html)
   (html
    "<blockquote>\n      Here, we wrote a small function\n      <code>(fun x -&gt; x.Logon.user)</code> to access the\n      <code>user</code> field. This kind of accessor function is a\n      common enough pattern that it would be convenient to generate them\n      automatically. The <code>fieldslib</code> syntax extension\n      that ships with <code>Core</code> does just that.\n    </blockquote>")))
 (idp7943088
  ((file records.html)
   (html
    "<blockquote>\n      Consider the following function for extracting the usernames from\n      a list of <code>Logon</code> messages.\n    </blockquote>")))
 (idp7940976
  ((file records.html)
   (html
    "<blockquote>\n      OCaml's policy of immutable-by-default is a good one, but\n      imperative programming does have its place. We'll discuss more\n      about how (and when) to use OCaml's imperative features in\n      <a href=\"a-guided-tour.html#imperative-programming\">the section called \226\128\156Imperative programming\226\128\157</a>.\n    </blockquote>")))
 (idp7939712
  ((file records.html)
   (html
    "<blockquote>\n      Note that mutable assignment, and thus the\n      <code>&lt;-</code> operator, is not needed for\n      initialization, because all fields of a record, including mutable\n      ones, are specified when the record is created.\n    </blockquote>")))
 (idp7937280
  ((file records.html)
   (html
    "<blockquote>\n      We then use the <code>&lt;-</code> operator for actually\n      changing the state. The side-effecting version of\n      <code>register_heartbeat</code> would be written as follows.\n    </blockquote>")))
 (idp7935360
  ((file records.html)
   (html
    "<blockquote>\n      Like most OCaml values, records are immutable by default. You can,\n      however, declare individual record fields as mutable. In the\n      following, we've made the last two fields of\n      <code>client_info</code> mutable.\n    </blockquote>")))
 (idp7932304
  ((file records.html)
   (html
    "<blockquote>\n      The original implementation of\n      <code>register_heartbeat</code> would now be invalid, and\n      thus the compiler would warn us to think about how to handle this\n      new field. But the version using a functional update continues to\n      compile as is, even though it incorrectly ignores the new field.\n      The correct thing to do would be to update the code as follows.\n    </blockquote>")))
 (idp7930688
  ((file records.html)
   (html
    "<blockquote>\n      Functional updates make your code independent of the identity of\n      the fields in the record that are not changing. This is often what\n      you want, but it has downsides as well. In particular, if you\n      change the definition of your record to have more fields, the type\n      system will not prompt you to reconsider whether your update code\n      should affect those fields. Consider what happens if we decided to\n      add a field for the status message received on the last heartbeat.\n    </blockquote>")))
 (idp7928976
  ((file records.html)
   (html
    "<blockquote>\n      Given this, we can rewrite <code>register_heartbeat</code>\n      more concisely.\n    </blockquote>")))
 (idp7928416
  ((file records.html)
   (html
    "<blockquote>\n      The purpose of the functional update is to create a new record\n      based on an existing one, with a set of field changes layered on\n      top.\n    </blockquote>")))
 (idp7926032
  ((file records.html)
   (html
    "<blockquote>\n      This is fairly verbose, given that there's only one field that we\n      actually want to change, and all the others are just being copied\n      over from <code>t</code>. We can use OCaml's\n      <span><em>functional update</em></span> syntax to do this more\n      tersely. The syntax of a functional update is as follows.\n    </blockquote>")))
 (idp7924416
  ((file records.html)
   (html
    "<blockquote>\n      Fairly often, you will find yourself wanting to create a new\n      record that differs from an existing record in only a subset of\n      the fields. For example, imagine our logging server had a record\n      type for representing the state of a given client, including when\n      the last heartbeat was received from that client. The following\n      defines a type for representing this information, as well as a\n      function for updating the client information when a new heartbeat\n      arrives.\n    </blockquote>")))
 (idp7922880
  ((file records.html)
   (html
    "<blockquote>\n      For functions defined within the module where a given record is\n      defined, the module qualification goes away entirely.\n    </blockquote>")))
 (idp7920128
  ((file records.html)
   (html
    "<blockquote>\n      The syntax here is a little surprising when you first encounter\n      it. The thing to keep in mind is that the dot is being used in two\n      ways: the first dot is a record field access, with everything to\n      the right of the dot being interpreted as a field name; the second\n      dot is accessing the contents of a module, referring to the record\n      field <code>important</code> from within the module\n      <code>Log_entry</code>. The fact that\n      <code>Log_entry</code> is capitalized and so can't be a\n      field name is what disambiguates the two uses.\n    </blockquote>")))
 (idp7918912
  ((file records.html)
   (html
    "<blockquote>\n      When using dot-notation for accessing record fields, we can\n      qualify the field by the module directly.\n    </blockquote>")))
 (idp7917696
  ((file records.html)
   (html
    "<blockquote>\n      This is not restricted to constructing a record; we can use the\n      same trick when pattern matching.\n    </blockquote>")))
 (idp7914960
  ((file records.html)
   (html
    "<blockquote>\n      The module name <code>Log_entry</code> is required to\n      qualify the fields, because this function is outside of the\n      <code>Log_entry</code> module where the record was defined.\n      OCaml only requires the module qualification for one record field,\n      however, so we can write this more concisely. Note that we are\n      allowed to insert whitespace between the module-path and the field\n      name.\n    </blockquote>")))
 (idp7913776
  ((file records.html)
   (html
    "<blockquote>\n      Now, our log-entry-creation function can be rendered as follows.\n    </blockquote>")))
 (idp7911600
  ((file records.html)
   (html
    "<blockquote>\n      We can avoid this ambiguity altogether, either by using\n      non-overlapping field names or, more generally, by minting a\n      module for each type. Packing types into modules is a broadly\n      useful idiom (and one used quite extensively by Core), providing\n      for each type a name-space within which to put related values.\n      When using this style, it is standard practice to name the type\n      associated with the module <code>t</code>. Using this style\n      we would write:\n    </blockquote>")))
 (idp7907712
  ((file records.html)
   (html
    "<blockquote>\n      Why did the first definition succeed without a type annotation and\n      the second one fail? The difference is that in the first case, the\n      type-checker considered the <code>status_message</code>\n      field first and thus concluded that the record was a\n      <code>heartbeat</code>. When the order was switched, the\n      <code>session_id</code> field was considered first, and so\n      that drove the type to be considered to be a\n      <code>logon</code>, at which point\n      <code>t.status_message</code> no longer made sense.\n    </blockquote>")))
 (idp7906368
  ((file records.html)
   (html
    "<blockquote>\n      While it's possible to resolve ambiguous field names using type\n      annotations, the ambiguity can be a bit confusing. Consider the\n      following functions for grabbing the session id and status from a\n      heartbeat.\n    </blockquote>")))
 (idp7904464
  ((file records.html)
   (html
    "<blockquote>\n      In this case, OCaml just picks the most recent definition of that\n      record field. We can force OCaml to assume we're dealing with a\n      different type (say, a <code>heartbeat</code>) using a type\n      annotation.\n    </blockquote>")))
 (idp7903184
  ((file records.html)
   (html
    "<blockquote>\n      Reusing field names can lead to some ambiguity. For example, if we\n      want to write a function to grab the session_id from a record,\n      what type will it have?\n    </blockquote>")))
 (idp7897856
  ((file records.html)
   (html
    "<blockquote>\n      We'll describe three message types: <code>log_entry</code>,\n      <code>heartbeat</code> and <code>logon</code>. The\n      <code>log_entry</code> message is used to deliver a log\n      entry to the server; the <code>logon</code> message is sent\n      to initiate a connection, and includes the identity of the user\n      connecting and credentials used for authentication; and the\n      <code>heartbeat</code> message is periodically sent by the\n      client to demonstrate to the server that the client is alive and\n      connected. All of these messages include a session id and the time\n      the message was generated.\n    </blockquote>")))
 (idp7897264
  ((file records.html)
   (html
    "<blockquote>\n      Defining records with the same field names can be problematic.\n      Let's consider a simple example: building types to represent the\n      protocol used for a logging server.\n    </blockquote>")))
 (idp7895552
  ((file records.html)
   (html
    "<blockquote>\n      Together, labeled arguments, field names, and field and label\n      punning, encourage a style where you propagate the same names\n      throughout your code-base. This is generally good practice, since\n      it encourages consistent naming, which makes it easier to navigate\n      the source.\n    </blockquote>")))
 (idp7894352
  ((file records.html)
   (html
    "<blockquote>\n      This is considerably more concise than what you would get without\n      punning at all.\n    </blockquote>")))
 (idp7893072
  ((file records.html)
   (html
    "<blockquote>\n      You can take advantage of both field punning and label punning\n      when writing a function for constructing a record from labeled\n      arguments, as shown below.\n    </blockquote>")))
 (idp7892480
  ((file records.html)
   (html
    "<blockquote>\n      In the above code, we defined variables corresponding to the\n      record fields first, and then the record declaration itself simply\n      listed the fields that needed to be included.\n    </blockquote>")))
 (idp7890640
  ((file records.html)
   (html
    "<blockquote>\n      Field punning can also be used to construct a record. Consider the\n      following code for generating a <code>host_info</code>\n      record.\n    </blockquote>")))
 (idp7888944
  ((file records.html)
   (html
    "<blockquote>\n      When the name of a variable coincides with the name of a record\n      field, OCaml provides some handy syntactic shortcuts. For example,\n      the pattern in the following function binds all of the fields in\n      question to variables of the same name. This is called\n      <span><em>field punning</em></span>.\n    </blockquote>")))
 (idp7886592
  ((file records.html)
   (html
    "<blockquote>\n      Treating warnings as errors (<span><em>i.e.</em></span>, making\n      OCaml fail to compile any code that triggers a warning) is good\n      practice, since without it, warnings are too often ignored during\n      development. When preparing a package for distribution, however,\n      this is a bad idea, since the list of warnings may grow from one\n      release of the compiler to another, and so this may lead your\n      package to fail to compile on newer compiler releases.\n    </blockquote>")))
 (idp7884736
  ((file records.html)
   (html
    "<blockquote>\n      The syntax of this can be found by running\n      <code>ocaml -help</code>, but this particular invocation\n      turns on all warnings as errors, disabling only the numbers listed\n      explicitly after the <code>A</code>.\n    </blockquote>")))
 (idp7883600
  ((file records.html)
   (html
    "<blockquote>\n      The warnings used for building the examples in this book are\n      specified with the following flag:\n      <code>-w @A-4-33-41-42-43-34-44</code>.\n    </blockquote>")))
 (idp7882928
  ((file records.html)
   (html
    "<blockquote>\n      You should think of OCaml's warnings as a powerful set of optional\n      static analysis tools, and eagerly enable them in your build\n      environment. You don't typically enable all warnings, but the\n      defaults that ship with the compiler are pretty good.\n    </blockquote>")))
 (idp7881696
  ((file records.html)
   (html
    "<blockquote>\n      The OCaml compiler is packed full of useful warnings that can be\n      enabled and disabled separately. For example, we could have found\n      out about warning 9, which was discussed above, as follows:\n    </blockquote>")))
 (idp7879904
  ((file records.html)
   (html
    "<blockquote>\n      It's a good idea to enable the warning for incomplete record\n      matches, and to explicitly disable it with an <code>_</code>\n      where necessary.\n    </blockquote>")))
 (idp7878672
  ((file records.html)
   (html
    "<blockquote>\n      We can disable the warning for a given pattern by explicitly\n      acknowledging that we are ignoring extra fields. This is done by\n      adding an underscore to the pattern, as shown below.\n    </blockquote>")))
 (idp7876768
  ((file records.html)
   (html
    "<blockquote>\n      Happily, OCaml does offer an optional warning for missing fields\n      in a record pattern. With that warning turned on (which you can do\n      in the toplevel by typing\n      <code>#warnings &quot;+9&quot;</code>), the compiler will\n      warn about the missing field.\n    </blockquote>")))
 (idp7874256
  ((file records.html)
   (html
    "<blockquote>\n      The code for <code>host_info_to_string</code> would continue\n      to compile without change. In this particular case, it's pretty\n      clear that you might want to update\n      <code>host_info_to_string</code> in order to include\n      <code>os_release</code>, and it would be nice if the type\n      system would give you a warning about the change.\n    </blockquote>")))
 (idp7871904
  ((file records.html)
   (html
    "<blockquote>\n      As an example, imagine that we wanted to add a new field to our\n      <code>host_info</code> record called\n      <code>os_release</code>, as shown below.\n    </blockquote>")))
 (idp7871072
  ((file records.html)
   (html
    "<blockquote>\n      Another important characteristic of record patterns is that they\n      don't need to be complete; a pattern can mention only a subset of\n      the fields in the record. This can be convenient, but it can also\n      be error prone. In particular, this means that when new fields are\n      added to the record, code that should be updated to react to the\n      presence of those new fields will not be flagged by the compiler.\n    </blockquote>")))
 (idp7869104
  ((file records.html)
   (html
    "<blockquote>\n      Note that the pattern that we used had only a single case, rather\n      than using several cases separated by <code>|</code>'s. We\n      needed only one pattern because record patterns are\n      <span><em>irrefutable</em></span>, meaning that a record pattern\n      match will never fail at runtime. This makes sense, because the\n      set of fields available in a record is always the same. In\n      general, patterns for types with a fixed structure, like records\n      and tuples, are irrefutable, unlike types with variable structure\n      like lists and variants.\n    </blockquote>")))
 (idp7867328
  ((file records.html)
   (html
    "<blockquote>\n      Another way of getting information out of a record is by using a\n      pattern match, as in the definition of\n      <code>host_info_to_string</code> below.\n    </blockquote>")))
 (idp7865328
  ((file records.html)
   (html
    "<blockquote>\n    We can then write polymorphic functions that operate over this\n    parameterized type.\n  </blockquote>")))
 (idp7864064
  ((file records.html)
   (html
    "<blockquote>\n    When declaring an OCaml type, you always have the option of\n    parameterizing it by a polymorphic type. Records are no different in\n    this regard. So, for example, here's a type one might use to\n    timestamp arbitrary items.\n  </blockquote>")))
 (idp7862928
  ((file records.html)
   (html
    "<blockquote>\n    Once we have a record value in hand, we can extract elements from\n    the record field using dot-notation.\n  </blockquote>")))
 (idp7860960
  ((file records.html)
   (html
    "<blockquote>\n    You might wonder how the compiler inferred that\n    <code>my_host</code> is of type <code>host_info</code>.\n    The hook that the compiler uses in this case to figure out the type\n    is the record field name. Later in the chapter, we'll talk about\n    what happens when there is more than one record type in scope with\n    the same field name.\n  </blockquote>")))
 (idp7856688
  ((file records.html)
   (html
    "<blockquote>\n    We can construct a <code>host_info</code> just as easily. The\n    following code uses the <code>Shell</code> module from\n    <code>Core_extended</code> to dispatch commands to the shell\n    to extract the information we need about the computer we're running\n    on, and the <code>Time.now</code> call from Core's\n    <code>Time</code> module.\n  </blockquote>")))
 (idp7854976
  ((file records.html)
   (html
    "<blockquote>\n    Here's a simple example, a <code>host_info</code> record that\n    summarizes information about a given computer.\n  </blockquote>")))
 (idp7854496
  ((file records.html)
   (html
    "<blockquote>\n    Note that record field names must start with a lower-case letter.\n  </blockquote>")))
 (idp7853264
  ((file records.html)
   (html
    "<blockquote>\n    A record represents a collection of values stored together as one,\n    where each component is identified by a different field name. The\n    basic syntax for a record type declaration is as follows.\n  </blockquote>")))
 (idp7851984
  ((file records.html)
   (html
    "<blockquote>\n    One of OCaml's best features is its concise and expressive system\n    for declaring new datatypes, and records are a key element of that\n    system. We discussed records briefly in\n    <a href=\"a-guided-tour.html\">Chapter\194\1601, <i>A Guided Tour</i></a>, but this chapter will go\n    into more depth, covering the details of how records work, as well\n    as advice on how to use them effectively in your software designs.\n  </blockquote>")))
 (idp192832
  ((file prologue.html)
   (html
    "<blockquote>\n        Prior to joining Google, Jason was an Assistant Professor of\n        Computer Science at Caltech, where he researched reliable and\n        fault-tolerant computing systems, including programming language\n        design, formal methods, compilers, and new models of distributed\n        computation. He obtained his PhD in Computer Science from\n        Cornell University, where he studied programming languages. He\n        is the author of the MetaPRL system, a logical framework for\n        design and analysis of large software systems; and OMake, an\n        advanced build system for large software projects. He is the\n        author of the textbook, <span><em>An Introduction to Objective\n        Caml</em></span> (unpublished).\n      </blockquote>")))
 (idp192448
  ((file prologue.html)
   (html
    "<blockquote>\n        Jason Hickey is a Software Engineer at Google Inc. in Mountain\n        View, California. He is part of the team that designs and\n        develops the global computing infrastructure used to support\n        Google services, including the software systems for managing and\n        scheduling massively distributed computing resources.\n      </blockquote>")))
 (idp190336
  ((file prologue.html)
   (html
    "<blockquote>\n        Prior to obtaining his PhD in 2006 from the University of\n        Cambridge, Anil had a diverse background in industry at NetApp,\n        NASA, and Internet Vision. He is an active member of the\n        open-source development community with the OpenBSD operating\n        system, is on the steering committee of the ACM Commercial Uses\n        of Functional Programming workshop, and serves on the boards of\n        startup companies where OCaml is extensively used. He has also\n        developed the Mirage unikernel system that is written entirely\n        in OCaml from the device drivers up.\n      </blockquote>")))
 (idp189456
  ((file prologue.html)
   (html
    "<blockquote>\n        Anil Madhavapeddy is a Senior Research Fellow at the University\n        of Cambridge, based in the Systems Research Group. He was on the\n        original team that developed the Xen hypervisor and helped\n        develop an industry-leading cloud management toolstack written\n        entirely in OCaml. This XenServer product has been deployed on\n        millions of physical hosts, and drives critical infrastructure\n        for many Fortune 500 companies.\n      </blockquote>")))
 (idp187424
  ((file prologue.html)
   (html
    "<blockquote>\n        Yaron obtained his PhD in Computer Science from Cornell\n        University, where he studied distributed systems. Yaron has\n        lectured, blogged and written about OCaml for years, with\n        articles published in Communications of the ACM and the Journal\n        of Functional Programming. He chairs the steering committee of\n        the Commercial Users of Functional Programming, and is a member\n        of the steering committee for the International Conference on\n        Functional Programming.\n      </blockquote>")))
 (idp186592
  ((file prologue.html)
   (html
    "<blockquote>\n        Yaron Minsky heads the Technology group at Jane Street, a\n        proprietary trading firm that is the largest industrial user of\n        OCaml. He was responsible for introducing OCaml to the company\n        and for managing the company's transition to using OCaml for all\n        of its core infrastructure. Today, billions of dollars worth of\n        securities transactions flow each day through those systems.\n      </blockquote>")))
 (idp266576
  ((file prologue.html)
   (html
    "<blockquote>\n        At this stage, the Windows operating system is unsupported, and\n        only Mac OS X, Linux, FreeBSD and OpenBSD can be expected to\n        work reliably. We realize this is a concern; there are no\n        fundamental barriers to Windows support, but we're focused on\n        getting the main content finished before getting stuck into the\n        porting effort.\n      </blockquote>")))
 (idp265072
  ((file prologue.html)
   (html
    "<blockquote>\n        Real World OCaml uses some tools that we've developed while\n        writing this book. Some of these resulted in improvements to the\n        OCaml compiler, which means that you will need to ensure that\n        you have an up-to-date development environment (using the 4.01.0\n        compiler). We've automated everything you need to do via the\n        OPAM package manager, so please do follow the installation\n        instructions in <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a>\n        carefully.\n      </blockquote>")))
 (idp262528
  ((file prologue.html)
   (html
    "<blockquote>\n            Part III discusses OCaml's runtime system and compiler\n            toolchain. It is remarkably simple when compared to some\n            other language implementations (such as Java's or .NET's\n            CLR). Reading this part will enable you to build very high\n            performance systems, or to interface with C libraries. This\n            is also where we talk about profiling and debugging\n            techniques using tools such as GNU <code>gdb</code>.\n          </blockquote>")))
 (idp261280
  ((file prologue.html)
   (html
    "<blockquote>\n            Part II builds on the basics by working through useful tools\n            and techniques for addressing common practical applications,\n            from command-line parsing to asynchronous network\n            programming. Along the way, you'll see how some of the\n            concepts from Part I are glued together into real libraries\n            and tools that combine different features of the language to\n            good effect.\n          </blockquote>")))
 (idp260064
  ((file prologue.html)
   (html
    "<blockquote>\n            After covering the core language, Part I then moves onto\n            more advanced features like modules, functors and objects,\n            which may take some time to digest. Understanding these\n            concepts is important, though. These ideas will put you in\n            good stead even beyond OCaml when switching to other modern\n            languages, many of which have drawn inspiration from ML.\n          </blockquote>")))
 (idp259248
  ((file prologue.html)
   (html
    "<blockquote>\n            Part I covers the language itself, opening with a guided\n            tour designed to provide a quick sketch of the language.\n            Don't expect to understand everything in the tour; it's\n            meant to give you a taste of many different aspects of the\n            language, but the ideas covered there will be explained in\n            more depth in the chapters that follow.\n          </blockquote>")))
 (idp214704
  ((file prologue.html)
   (html
    "<blockquote>\n        Real World OCaml is split into three parts:\n      </blockquote>")))
 (idp212544
  ((file prologue.html)
   (html
    "<blockquote>\n      If you've learned some OCaml before, this book may surprise you\n      with some differences from your experience. Core redefines most of\n      the standard modules to be much more consistent, so you'll need to\n      adapt older code to work with Core. We believe the Core model is\n      worth learning; it's been successfully used on large,\n      multi-million-line codebases and removes a big barrier to building\n      sophisticated applications in OCaml. Code that uses only the\n      traditional compiler standard library will always exist, but there\n      are other online resources to learn how that works. Real World\n      OCaml focuses on the techniques the authors have used in their\n      personal experience to construct scalable, robust software\n      systems.\n    </blockquote>")))
 (idp211200
  ((file prologue.html)
   (html
    "<blockquote>\n      Real World OCaml is aimed at programmers who have some experience\n      with conventional programming languages, but not specifically with\n      statically-typed functional programming. Depending on your\n      background, many of the concepts we cover will be new, including\n      traditional functional-programming techniques like higher-order\n      functions and immutable data types, as well as aspects of OCaml's\n      powerful type and module systems.\n    </blockquote>")))
 (idp207888
  ((file prologue.html)
   (html
    "<blockquote>\n        We'll also use OPAM for installing the <code>utop</code>\n        command-line interface. This is a modern interactive tool that\n        supports command history, macro expansion, module completion,\n        and other niceties that make it much more pleasant to work with\n        the language. We'll be using <code>utop</code> throughout\n        the book instead of the normal OCaml toplevel.\n      </blockquote>")))
 (idp305856
  ((file prologue.html)
   (html
    "<blockquote>\n        The installation and management of these third-party libraries\n        is made much easier via a package management tool known as OPAM.\n        We'll explain more about OPAM as the book unfolds, but it forms\n        the basis of the Platform, which is a set of tools and libraries\n        that, along with the OCaml compiler, let you build real-world\n        applications quickly and effectively.\n      </blockquote>")))
 (idp305072
  ((file prologue.html)
   (html
    "<blockquote>\n        Core is a comprehensive and effective standard library, but\n        there's much more OCaml software out there. A large community of\n        programmers have been using OCaml since its first release in\n        1996 and have generated many useful libraries and tools. We'll\n        introduce some of these libraries in the course of the examples\n        presented in the book.\n      </blockquote>")))
 (idp303088
  ((file prologue.html)
   (html
    "<blockquote>\n        Core is distributed with syntax extensions which provide useful\n        new functionality to OCaml, and there are additional libraries\n        such as the Async network communications library that extend the\n        reach of Core into building complex distributed systems. All of\n        these libraries are distributed under a liberal Apache 2 license\n        to permit free use in hobby, academic and commercial settings.\n      </blockquote>")))
 (idp302320
  ((file prologue.html)
   (html
    "<blockquote>\n        Jane Street, a company that has been using OCaml for more than a\n        decade, developed Core for its own internal use, but designed it\n        from the start with an eye towards being a general-purpose\n        standard library. Like the OCaml language itself, Core is\n        engineered with correctness, reliability and performance in\n        mind.\n      </blockquote>")))
 (idp301680
  ((file prologue.html)
   (html
    "<blockquote>\n        Happily, in the world of open-source software nothing stops\n        alternative libraries from being written to supplement the\n        compiler-supplied standard library, and this is exactly what the\n        Core distribution is.\n      </blockquote>")))
 (idp300704
  ((file prologue.html)
   (html
    "<blockquote>\n        A language on its own isn't enough. You also need a rich set of\n        libraries to base your applications on. A common source of\n        frustration for those learning OCaml is that the standard\n        library that ships with the compiler is limited, covering only a\n        small subset of the functionality you would expect from a\n        general-purpose standard library. That's because the standard\n        library isn't a general-purpose tool; it was developed for use\n        in bootstrapping the compiler, and is purposefully kept small\n        and simple.\n      </blockquote>")))
 (idp370160
  ((file prologue.html)
   (html
    "<blockquote>\n        The last decade has seen OCaml attract a significant user base.\n        Language improvements have been steadily added to support the\n        growing commercial and academic codebases written in OCaml.\n        First-class modules, Generalized Algebraic Data Types (GADTs)\n        and dynamic linking have improved the flexibility of the\n        language and there is fast native code support for x86_64, ARM,\n        PowerPC, and Sparc, making OCaml a good choice for systems where\n        resource usage, predictability, and performance all matter.\n      </blockquote>")))
 (idp232464
  ((file prologue.html)
   (html
    "<blockquote>\n        The modern OCaml emerged in 1996, when a powerful and elegant\n        object system was implemented by Didier R\195\169my and J\195\169r\195\180me\n        Vouillon. This object system was notable for supporting many\n        common OO idioms in a statically type-safe way, whereas the same\n        idioms required runtime checks in languages such as C++ or Java.\n        In 2000, Jacques Garrigue extended OCaml with several new\n        features such as polymorphic methods and variants and labeled\n        and optional arguments.\n      </blockquote>")))
 (idp231552
  ((file prologue.html)
   (html
    "<blockquote>\n        Xavier Leroy continued extending Caml Light with new features,\n        which resulted in the 1995 release of Caml Special Light. This\n        improved the executable efficiency significantly by adding a\n        fast native code compiler that made Caml's performance\n        competitive with mainstream languages such as C++. A module\n        system inspired by Standard ML also provided powerful facilities\n        for abstraction and made larger-scale programs easier to\n        construct.\n      </blockquote>")))
 (idp230592
  ((file prologue.html)
   (html
    "<blockquote>\n        The first implementation of Caml appeared in 1987, initially\n        created by Ascander Saurez and later continued by Pierre Weis\n        and Michel Mauny. In 1990, Xavier Leroy and Damien Doligez built\n        a new implementation called Caml Light that was based on a\n        bytecode interpreter with a fast sequential garbage collector.\n        Over the next few years useful libraries appeared, such as\n        Michel Mauny's syntax manipulation tools, and this helped\n        promote the use of Caml in education and research teams.\n      </blockquote>")))
 (idp229424
  ((file prologue.html)
   (html
    "<blockquote>\n        ML was originally the <span><em>meta language</em></span> of the\n        LCF proof assistant released by Robin Milner in 1972 (at\n        Stanford, and later at Cambridge). ML was turned into a compiler\n        in order to make it easier to use LCF on different machines, and\n        gradually turned into a fully fledged system of its own by the\n        1980s.\n      </blockquote>")))
 (idp228432
  ((file prologue.html)
   (html
    "<blockquote>\n        OCaml was written in 1996 by Xavier Leroy, J\195\169r\195\180me Vouillon,\n        Damien Doligez and Didier R\195\169my at INRIA in France. It was\n        inspired by a long line of research into ML starting in the\n        1960s, and continues to have deep links to the academic\n        community.\n      </blockquote>")))
 (idp5012240
  ((file prologue.html)
   (html
    "<blockquote>\n      All of this makes OCaml a great choice for programmers who want to\n      step up to a better programming language, and at the same time get\n      practical work done.\n    </blockquote>")))
 (idp4651648
  ((file prologue.html)
   (html
    "<blockquote>\n      Among this worthy set of languages, OCaml stands apart because it\n      manages to provide a great deal of power while remaining highly\n      pragmatic. The compiler has a straightforward compilation strategy\n      that produces performant code without requiring heavy optimization\n      and without the complexities of dynamic JIT compilation. This,\n      along with OCaml's strict evaluation model, makes runtime behavior\n      easy to predict. The garbage collector is\n      <span><em>incremental</em></span>, letting you avoid large\n      GC-related pauses, and <span><em>precise</em></span>, meaning it\n      will collect all unreferenced data (unlike many reference-counting\n      collectors), and the runtime is simple and highly portable.\n    </blockquote>")))
 (idp4117264
  ((file prologue.html)
   (html
    "<blockquote>\n      Some of you will know and love these features, and others will be\n      completely new to them. Most of you will have seen\n      <span><em>some</em></span> of them in other languages that you've\n      used. As we'll demonstrate over the course of this book, there is\n      something transformative about having them all together and able\n      to interact in a single language. Despite their importance, these\n      ideas have made only limited inroads into mainstream languages and\n      when they do arrive there, like higher-order functions in C# or\n      parametric polymorphism in Java, it's typically in a limited and\n      awkward form. The only languages that completely embody these\n      ideas are <span><em>statically-typed functional programming\n      languages</em></span> like OCaml, F#, Haskell, Scala and Standard\n      ML.\n    </blockquote>")))
 (idp4135568
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Algebraic datatypes</em></span> and <span><em>pattern\n          matching</em></span> to define and manipulate complex data\n          structures. Available in Scala and F#.\n        </blockquote>")))
 (idp4078976
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Automatic type inference</em></span> to avoid having\n          to laboriously define the type of every single variable in a\n          program and instead have them inferred based on how a value is\n          used. Available in C# with implicitly typed local variables\n          and in a limited form in C++11 with its\n          <code>auto</code> keyword.\n        </blockquote>")))
 (idp5070928
  ((file prologue.html)
   (html
    "<blockquote>\n          Good support for <span><em>immutable programming</em></span>,\n          <span><em>i.e.</em></span>, programming without making\n          destructive updates to data-structures. This is present in\n          traditional functional languages like Scheme, and is also\n          found in distributed big data frameworks like Hadoop.\n        </blockquote>")))
 (idp5441408
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Parametric polymorphism</em></span>, which enables\n          the construction of abstractions that work across different\n          datatypes, similar to generics in Java and C# and templates in\n          C++.\n        </blockquote>")))
 (idp4338992
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Static type-checking</em></span> to increase\n          performance and reduce the number of runtime errors, as found\n          in Java and C#.\n        </blockquote>")))
 (idp5018592
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>First-class functions</em></span> that can be passed\n          around like ordinary values, as seen in JavaScript and C#.\n        </blockquote>")))
 (idp4672000
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>Garbage collection</em></span> for automatic memory\n          management, now a feature of almost every modern high-level\n          language.\n        </blockquote>")))
 (idp2080240
  ((file prologue.html)
   (html
    "<blockquote>\n      But not all ideas about how to design a programming language are\n      created equal. Over the last 40 years, a few key language features\n      have emerged that together form a kind of sweet-spot in language\n      design. These features include:\n    </blockquote>")))
 (idp4093520
  ((file prologue.html)
   (html
    "<blockquote>\n      The programming languages that you use affect the software you\n      create. They influence your software's reliability, security and\n      efficiency, and how easy it is to read, refactor, and extend. The\n      languages you know can also deeply affect how you think about\n      programming and software design.\n    </blockquote>")))
 (idp10506128
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      That wraps up our parsing tutorial. As an aside, notice that the\n      JSON polymorphic variant type that we defined in this chapter is\n      actually structurally compatible with the Yojson representation\n      explained earlier in\n      <a href=\"handling-json-data.html\">Chapter\194\16015, <i>Handling JSON data</i></a>. That means that\n      you can take this parser and use it with the helper functions in\n      Yojson to build more sophisticated applications.\n    </blockquote>")))
 (idp10504864
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      With our simple error handling scheme, errors are fatal and cause\n      the program to terminate with a non-zero exit code.\n    </blockquote>")))
 (idp10503632
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      Now build and run the example using this file, and you you can see\n      the full parser in action.\n    </blockquote>")))
 (idp10502432
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      Here's a test input file we can use to test the code we just\n      wrote.\n    </blockquote>")))
 (idp10493856
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      The standard lexing library <code>Lexing</code> provides a\n      function <code>from_channel</code> to read the input from a\n      channel. The following function describes the structure, where the\n      <code>Lexing.from_channel</code> function is used to\n      construct a <code>lexbuf</code>, which is passed with the\n      lexing function <code>Lexer.read</code> to the\n      <code>Parser.prog</code> function.\n      <code>Parsing.prog</code> returns <code>None</code>\n      when it reaches end of file. We define a function\n      <code>Json.output_value</code>, not shown here, to print a\n      <code>Json.value</code>.\n    </blockquote>")))
 (idp10491856
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      The &quot;give up on the first error&quot; approach is easy to\n      implement but isn't very friendly. In general, error handling can\n      be pretty intricate, and we won't discuss it here. However, the\n      Menhir parser defines additional mechanisms you can use to try and\n      recover from errors. These are described in detail in its\n      reference\n      <a href=\"http://gallium.inria.fr/~fpottier/menhir/\" target=\"_top\">manual</a>.\n    </blockquote>")))
 (idp10489056
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      Before we start with the lexing, let's first define some functions\n      to handle parsing errors. There are currently two errors:\n      <code>Parser.Error</code> and\n      <code>Lexer.SyntaxError</code>. A simple solution when\n      encountering an error is to print the error and give up, which we\n      do below.\n    </blockquote>")))
 (idp10485600
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      For the final part, we need to compose the lexer and parser. As we\n      saw in the type definition in <code>parser.mli</code>, the\n      parsing function expects a lexer of type\n      <code>Lexing.lexbuf -&gt; token</code>, and it also expects\n      a <code>lexbuf</code>.\n    </blockquote>")))
 (idp10483584
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        All of these libraries are available via OPAM under their\n        respective names.\n      </blockquote>")))
 (idp10479664
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n<a href=\"http://erratique.ch/software/uutf\" target=\"_top\">Uutf</a>\n            is a non-blocking streaming Unicode codec for OCaml,\n            available as a standalone library. It is accompanied by the\n            <a href=\"http://erratique.ch/software/uunf\" target=\"_top\">Uunf</a>\n            text normalization and\n            <a href=\"http://erratique.ch/software/uucd\" target=\"_top\">Uucd</a>\n            Unicode character database libraries. There is also a robust\n            parser for\n            <a href=\"http://erratique.ch/software/jsonm\" target=\"_top\">JSON</a>\n            available that illustrates the use of Uutf in your own\n            libraries.\n          </blockquote>")))
 (idp10477344
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n<a href=\"http://www.cduce.org/ulex\" target=\"_top\">Ulex</a> is a\n            lexer generator for Unicode that can serve as a\n            Unicode-aware replacement for <code>ocamllex</code>.\n          </blockquote>")))
 (idp10475664
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n<a href=\"http://camomile.sourceforge.net\" target=\"_top\">Camomile</a>\n            supports the full spectrum of Unicode character types,\n            conversion from around 200 encodings, and collation and\n            locale-sensitive case mappings.\n          </blockquote>")))
 (idp10474464
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        We've glossed over an important detail here: parsing Unicode\n        characters to handle the full spectrum of the world's writing\n        systems. OCaml has several third-party solutions to handling\n        Unicode, with varying degrees of flexibility and complexity.\n      </blockquote>")))
 (idp10473248
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        That covers the lexer. Next, we need to combine the lexer with\n        the parser to bring it all together.\n      </blockquote>")))
 (idp10471088
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The other cases are for handling the string contents. The action\n        <code>[^ '&quot;' '\\\\']+ { ... }</code> matches normal\n        input that does not contain a double-quote or backslash. The\n        actions beginning with a backslash <code>\\</code> define\n        what to do for escape sequences. In each of these cases, the\n        final step includes a recursive call to the lexer.\n      </blockquote>")))
 (idp10468384
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        This rule takes a <code>buf : Buffer.t</code> as an\n        argument. If we reach the terminating double quote\n        <code>&quot;</code>, then we return the contents of the\n        buffer as a <code>STRING</code>.\n      </blockquote>")))
 (idp10466288
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Unlike many other lexer generators, <code>ocamllex</code>\n        allows the definition of multiple lexers in the same file, and\n        the definitions can be recursive. In this case, we use recursion\n        to match string literals using the following rule definition.\n      </blockquote>")))
 (idp10460656
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n            If all matches have the same length, then the first action\n            wins. If the input were <code>true: 167</code>, then\n            both <code>&quot;true&quot;</code> and\n            <code>id</code> match the first 4 characters;\n            <code>&quot;true&quot;</code> is first, so the return\n            value is <code>TRUE</code>.\n          </blockquote>")))
 (idp10456800
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n            The longest match always wins. For example, the first input\n            <code>trueX:   167</code> matches the regular\n            expression <code>&quot;true&quot;</code> for 4\n            characters, and it matches <code>id</code> for 5\n            characters. The longer match wins, and the return value is\n            <code>ID &quot;trueX&quot;</code>.\n          </blockquote>")))
 (idp10453568
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Some of these patterns overlap. For example, the regular\n        expression <code>&quot;true&quot;</code> is also matched\n        by the <code>id</code> pattern.\n        <code>ocamllex</code> used the following disambiguation\n        when a prefix of the input is matched by more than one pattern.\n      </blockquote>")))
 (idp10451520
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        There are actions for each different kind of token. The string\n        expressions like <code>&quot;true&quot; { TRUE }</code>\n        are used for keywords, and the special characters have actions\n        too, like <code>'{' { LEFT_BRACE }</code>.\n      </blockquote>")))
 (idp10447936
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        This action specifies that when the input matches the\n        <code>int</code> regular expression, then the lexer should\n        return the expression\n        <code>INT (int_of_string (Lexing.lexeme lexbuf))</code>.\n        The expression <code>Lexing.lexeme lexbuf</code> returns\n        the complete string matched by the regular expression. In this\n        case, the string represents a number, so we use the\n        <code>int_of_string</code> function to convert it to a\n        number.\n      </blockquote>")))
 (idp10445024
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The first <code>white { read lexbuf }</code> calls the\n        lexer recursively. That is, it skips the input whitespace and\n        returns the following token. The action\n        <code>newline { next_line lexbuf; read lexbuf }</code> is\n        similar, but we use it to advance the line number for the lexer\n        using the utility function that we defined at the top of the\n        file. Let's skip to the third action.\n      </blockquote>")))
 (idp10443456
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The rules are structured very similarly to pattern matches,\n        except that the variants are replaced by regular expressions on\n        the left hand side. The right hand side clause is the parsed\n        OCaml return value of that rule. The OCaml code for the rules\n        has a parameter called <code>lexbuf</code> that defines\n        the input, including the position in the input file, as well as\n        the text that was matched by the regular expression.\n      </blockquote>")))
 (idp10440704
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The lexing rules are specified as a set of\n        <code>parse</code> rules. A <code>parse</code> rule\n        has a regular expression followed by OCaml code that defines a\n        semantic action. Let's write the rule for JSON next.\n      </blockquote>")))
 (idp10438192
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Finally, let's define identifiers and whitespace. An identifier\n        (label), is an alphanumeric sequence not beginning with a digit.\n      </blockquote>")))
 (idp10432624
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The <code>digits</code> expression defines a single\n        character regexp in the range 0-9. A fractional part\n        <code>frac</code> has a compulsary decimal point followed\n        by some optional digits; an exponent <code>exp</code>\n        begins with an <code>e</code> followed by some digits; and\n        a <code>float</code> has an integer part, and one, both or\n        none of a <code>frac</code> and <code>exp</code>\n        part.\n      </blockquote>")))
 (idp10431328
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Floating-point numbers are similar, but we deal with decimal\n        points and exponents. We can use multiple let-definitions for\n        the different parts.\n      </blockquote>")))
 (idp10427584
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        An integer is a sequence of digits, optionally preceded by a\n        minus sign. Leading zeroes are not allowed. The question mark\n        means that the preceding symbol <code>-</code> is\n        optional. The square brackets ['1'-'9'] define a character\n        range, meaning that the first digit of the integer should be\n        1-9. The final range <code>['0'-'9']*</code> includes the\n        star <code>*</code>, which means zero-or-more occurrences\n        of the characters 0-9. Read formally then, an\n        <code>int</code> has an optional minus sign, followed by a\n        digit in the range 1-9, followed by zero or more digits in the\n        range 0-9.\n      </blockquote>")))
 (idp10426160
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        To get started with our rules, we know that we'll need to match\n        numbers and strings, so let's define names for the regular\n        expressions that specify their form.\n      </blockquote>")))
 (idp10422544
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The <code>Lexing</code> module defines a\n        <code>lexbuf</code> structure that holds all of the lexer\n        state, including the current location within the source file.\n        The <code>next_line</code> function simply accesses the\n        <code>lex_curr_p</code> field that holds the current\n        location and updates its line number. This is intended to be\n        called from within the lexing regular expressions that we'll\n        define next.\n      </blockquote>")))
 (idp10421072
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The OCaml code for the header and trailer is optional. The\n        let-definitions are used to ease the definition of regular\n        expressions by defining utility functions. They are optional,\n        but very useful. To get started, let's define a utility function\n        that can track the location of tokens across line breaks.\n      </blockquote>")))
 (idp10416320
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      For the next part, we need to define a lexer to tokenize the input\n      text, meaning that we break the input into a sequence of words or\n      tokens. For this, we'll define a lexer using\n      <code>ocamllex</code>. In this case, the specification is\n      placed in a file with a <code>.mll</code> suffix (we'll use\n      the name <code>lexer.mll</code>). A lexer file has several\n      parts in the following sequence.\n    </blockquote>")))
 (idp10409440
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        We can invoke <code>menhir</code> by using\n        <code>corebuild</code> with the\n        <code>-use-menhir</code> flag. This tells the build system\n        to switch to using <code>menhir</code> instead of\n        <code>ocamlyacc</code> to handle files with the\n        <code>.mly</code> suffix.\n      </blockquote>")))
 (idp10407424
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        A version of the JSON grammar using these more succinct Menhir\n        rules is shown below. Notice the use of\n        <code>separated_list</code> to parse both JSON objects and\n        lists with one rule.\n      </blockquote>")))
 (idp10406512
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Assembling lists like this is a pretty common requirement in\n        most realistic grammars, and the above rules (while useful for\n        illustrating how parsing works) are rather verbose. Menhir\n        features an extended standard library of built-in rules to\n        simplify this handling. These rules are detailed in the Menhir\n        manual, and include optional values, pairs of values with\n        optional separators, and lists of elements (also with optional\n        separators).\n      </blockquote>")))
 (idp10405072
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Alternatively, we could keep the left-recursive definition and\n        simply construct the returned value in left-to-right order. This\n        is is even less efficient, since the complexity of building thes\n        list incrementally in this way is quadratic in the length of the\n        list.\n      </blockquote>")))
 (idp10402848
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The rules are structured as they are because\n        <code>menhir</code> generates left-recursive parsers,\n        which means that the constructed pushdown automaton uses less\n        stack space with left-recursive definitions. The following\n        right-recursive rule accepts the same input, but during parsing\n        it requires linear stack space to read object field definitions.\n      </blockquote>")))
 (idp10398480
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The rule for <code>object_fields</code> is shown below,\n        and is really just a thin wrapper that reverses the list\n        returned by the following rule for\n        <code>rev_object_fields</code>. Note that the first\n        production in <code>rev_object_fields</code> has an empty\n        left-hand side. That's because what we're matching on in this\n        case is an empty sequence of tokens. The comment\n        <code>/* empty */</code> is used to make this clear.\n        C-style comment syntax is used within the body of a rule.\n      </blockquote>")))
 (idp10395120
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        In each of the productions, the OCaml code in curly-braces shows\n        what to transform the object in question to. Note that we still\n        have two non-terminals whose definitions we depend on here, but\n        have not yet defined: <code>object_fields</code> and\n        <code>array_values</code>. We'll look at how these are\n        parsed next.\n      </blockquote>")))
 (idp10394400
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n            a string, integer, float, bool, or null value.\n          </blockquote>")))
 (idp10393552
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n            an array bracketed by square braces,\n          </blockquote>")))
 (idp10392704
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n            an object bracketed by curly braces,\n          </blockquote>")))
 (idp10391008
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        According to these rules, a JSON <code>value</code> is\n        either:\n      </blockquote>")))
 (idp10389088
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Now let's consider a more complicated example, the rule for the\n        <code>value</code> symbol.\n      </blockquote>")))
 (idp10381520
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The syntax for this is reminiscent of an OCaml match statement.\n        The pipes separate the individual productions, and the code in\n        curly-braces is OCaml code that generates the OCaml value\n        corresponding to the production in question. In the case of\n        <code>prog</code>, we have two cases: either there's an\n        <code>EOF</code>, which means the text is empty, and so\n        there's no JSON value to read, and so we return the OCaml value\n        <code>None</code>; or we have an instance of the\n        <code>value</code> non-terminal, which corresponds to a\n        well-formed JSON value, in which case we wrap the corresponding\n        <code>Json.value</code> in a <code>Some</code> tag.\n        Note that in the <code>value</code> case, we wrote\n        <code>v = value</code> to bind the OCaml value that\n        corresponds to to the variable <code>v</code>, which we\n        can then use within the curly-braces for that production.\n      </blockquote>")))
 (idp10378288
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        Once that's in place, we can start specifying the productions.\n        In <code>menhir</code>, productions are organized into\n        <span><em>rules</em></span>, where each rule lists all the\n        possible productions for a given non-terminal. Here, for\n        example, is the rule for <code>prog</code>.\n      </blockquote>")))
 (idp10374048
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        We'll start describing the JSON grammar by declaring the\n        start-symbol to be the non-terminal symbol\n        <code>prog</code>, and by declaring that when parsed, a\n        <code>prog</code> value should be converted into an OCaml\n        value of type <code>Json.value option</code>. We then end\n        the declaration section of the parser with a\n        <code>%%</code>.\n      </blockquote>")))
 (idp10370160
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n        The next thing we need to do is to specify the grammar of a JSON\n        expression. <code>menhir</code>, like many parsers,\n        expresses grammars as <span><em>context free\n        grammars</em></span>. (More precisely, <code>menhir</code>\n        supports LR(1) grammars, but we will ignore that technical\n        distinction here.) You can think of a context-free grammar as a\n        set of abstract names, called <span><em>non-terminal\n        symbols</em></span>, along with a collection of rules for\n        transforming a non-terminal symbol into a sequence, where each\n        element of the sequence is either a token or another\n        non-terminal symbol. A sequence of tokens is parsable by a\n        grammar if you can apply the grammar's rules to produce a series\n        of transformations, starting at a distinguished <span><em>start\n        symbol</em></span>, that produces the token sequence in question.\n      </blockquote>")))
 (idp10359536
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      The\n      <code>&lt;</code><span><em>type</em></span><code>&gt;</code>\n      specifications mean that a token carries a value. The\n      <code>INT</code> token carries an integer value with it,\n      <code>FLOAT</code> has a <code>float</code> value, and\n      both <code>ID</code> and <code>STRING</code> carry a\n      <code>string</code> value. The remaining tokens, such as\n      <code>TRUE</code>, <code>FALSE</code> or the\n      punctuation, aren't associated with any value and so we can omit\n      the\n      <code>&lt;</code><span><em>type</em></span><code>&gt;</code>\n      specification.\n    </blockquote>")))
 (idp10355072
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      We'll start by declaring the list of tokens. A token is declared\n      using the syntax\n      <code>%token &lt;</code><span><em>type</em></span><code>&gt;</code>\n<span><em>uid</em></span>, where the\n      <code>&lt;type&gt;</code> is optional, and\n      <span><em>uid</em></span> is a capitalized identifier. For JSON, we\n      need tokens for numbers, strings, identifiers, and punctuation.\n    </blockquote>")))
 (idp10352800
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      A parser-specification file has suffix <code>.mly</code> and\n      contains several sections that are broken up by separator lines\n      consisting of the characters <code>%%</code> on a line by\n      themselves. The first section of the file is for declarations,\n      including token and type specifications, precedence directives,\n      and other output directives, and the second section is for\n      specifying the grammar of the language to be parsed.\n    </blockquote>")))
 (idp10350048
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      This representation is much richer than our token stream,\n      capturing the fact that JSON values can be nested inside each\n      other, and that JSON has a variety of value types, including\n      numbers, strings, arrays, and objects. The above type is\n      effectively an AST, and the job of the parser we'll write will be\n      to convert a token stream into a value of this type, as shown\n      below.\n    </blockquote>")))
 (idp10347968
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      This kind of representation is easier to work with than the\n      original text, since it gets rid of some unimportant syntactic\n      details and adds useful structure. But it's still a good deal more\n      low-level than the simple AST we used for representing JSON data\n      in <a href=\"handling-json-data.html\">Chapter\194\16015, <i>Handling JSON data</i></a>, shown below.\n    </blockquote>")))
 (idp10346752
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      If we converted the above example into a list of these tokens, it\n      would look something like this.\n    </blockquote>")))
 (idp10346048
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      Note that this representation loses some information about the\n      original text. For example, white space is not represented. It's\n      common, and indeed useful, for the token stream to forget some\n      details of the original text that are not required for\n      understanding its meaning.\n    </blockquote>")))
 (idp10344624
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      At a syntactic level, we can think of a JSON file as a series of\n      simple logical units, like curly braces, square brackets, commas,\n      colons, identifiers, numbers, and quoted strings. Thus, we could\n      represent our JSON text as a sequence of tokens of the following\n      type.\n    </blockquote>")))
 (idp10342512
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      Let's consider lexing and parsing in the context of the JSON\n      format. Here's an example of a snippet of text that represents a\n      JSON object containing a string labeled <code>title</code>,\n      and an array containing two objects, each with a name and array of\n      zip codes.\n    </blockquote>")))
 (idp10341776
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      It's confusing that the term parsing is applied to both the\n      overall process of converting textual data to structured data, and\n      also more specifically to the second phase of converting a stream\n      of tokens to an AST, so from here on in, we'll use the term\n      parsing to refer only to this second phase.\n    </blockquote>")))
 (idp10340128
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n      Parsing is traditionally broken down into two parts:\n      <span><em>lexical analysis</em></span>, which is a kind of\n      simplified parsing phase that converts a stream of characters into\n      a stream of logical tokens; and full-on parsing, which involves\n      converting a stream of tokens into the final representation, which\n      is often in the form of a tree-like data-structure called an\n      <span><em>abstract syntax-tree</em></span>, or AST.\n    </blockquote>")))
 (idp10337744
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    Menhir isn't distributed directly with OCaml, but is available\n    through OPAM by running <code>opam install menhir</code>.\n  </blockquote>")))
 (idp10336320
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    The biggest advantage of Menhir is that its error messages are\n    generally more human-comprehensible, and the parsers that it\n    generates are fully reentrant and can be parameterized in OCaml\n    modules more easily. We recommend that any new code you develop\n    should use Menhir instead of <code>ocamlyacc</code>.\n  </blockquote>")))
 (idp10334176
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    Menhir is an alternative parser generator that is generally superior\n    to the venerable <code>ocamlyacc</code>, which dates back\n    quite a few years. Menhir is mostly compatible with\n    <code>ocamlyacc</code> grammars, and so you can usually just\n    switch to Menhir and expect older code to work (with some minor\n    differences described in the Menhir manual).\n  </blockquote>")))
 (idp10331824
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    Parsing is a broad and often intricate topic, and our purpose here\n    is not to teach all of the theoretical issues, but to provide a\n    pragmatic introduction of how to build a parser in OCaml.\n  </blockquote>")))
 (idp10325424
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    Parser generators have a long history, including tools like\n    <code>lex</code> and <code>yacc</code> that date back to\n    the early 1970's. OCaml has its own alternatives, including\n    <code>ocamllex</code>, which replaces <code>lex</code>,\n    and <code>ocamlyacc</code> and <code>menhir</code>,\n    which are replacements for <code>yacc</code>. We'll explore\n    these tools in the course of walking through the implementation of a\n    parser for the JSON serialization format that we discussed in\n    <a href=\"handling-json-data.html\">Chapter\194\16015, <i>Handling JSON data</i></a>.\n  </blockquote>")))
 (idp10324256
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    Often, you can find an existing parsing library that handles these\n    issues for you. But there are tools to help simplify the task when\n    you do need to write a parser, in the form of <span><em>parser\n    generators</em></span>. A parser generator creates a parser from a\n    specification of the data format that you want to parse, and uses\n    that to generate a parser.\n  </blockquote>")))
 (idp10323504
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    But this simplistic approach tends to fall down when parsing more\n    complicated data, particularly data with the kind of recursive\n    structure you find in full-blown programming languages or flexible\n    data formats like JSON and XML. Parsing such formats accurately and\n    efficiently while providing useful error messages is a complex task.\n  </blockquote>")))
 (idp10322256
  ((file parsing-with-ocamllex-and-menhir.html)
   (html
    "<blockquote>\n    Many programming tasks start with the interpretion of some form of\n    structured textual data. <span><em>Parsing</em></span> is the process\n    of converting such data into data structures that are easy to\n    program against. For simple formats, it's often enough to parse the\n    data in an ad-hoc way, say, by breaking up the data into lines, and\n    then using regular expressions for breaking those lines down into\n    their component pieces.\n  </blockquote>")))
 (idp9362176
  ((file objects.html)
   (html
    "<blockquote>\n        This chapter contains significant external contributions from\n        Leo White.\n      </blockquote>")))
 (idp9360288
  ((file objects.html)
   (html
    "<blockquote>\n        In both these cases we must use subtyping:\n      </blockquote>")))
 (idp9359040
  ((file objects.html)
   (html
    "<blockquote>\n        Since row polymorphism is a form of polymorphism, it also does\n        not work well with references:\n      </blockquote>")))
 (idp9357712
  ((file objects.html)
   (html
    "<blockquote>\n        However, there are some situations where we cannot use row\n        polymorphism. For example, lists of heterogeneous elements can\n        not be created using row polymorphism:\n      </blockquote>")))
 (idp9355648
  ((file objects.html)
   (html
    "<blockquote>\n        Writing a similar function with a closed type and applying it\n        using subtyping does not preserve the methods of the argument:\n        the returned object is only known to have an\n        <code>area</code> method.\n      </blockquote>")))
 (idp9354336
  ((file objects.html)
   (html
    "<blockquote>\n        The return type of this function is built from the open object\n        type of its argument, preserving any additional methods that it\n        may have.\n      </blockquote>")))
 (idp9352896
  ((file objects.html)
   (html
    "<blockquote>\n        There is a great deal of overlap between subtyping and row\n        polymorphism. Row polymorphism is in general preferred over\n        subtyping because it does not require explicit coercions, and it\n        preserves more type information, allowing functions like the\n        following:\n      </blockquote>")))
 (idp9350912
  ((file objects.html)
   (html
    "<blockquote>\n        This pattern works, but it has drawbacks. In particular, the\n        recursive type definition should make it clear that this pattern\n        is essentially equivalent to using variants, and that objects do\n        not provide much value here.\n      </blockquote>")))
 (idp9348848
  ((file objects.html)
   (html
    "<blockquote>\n        Regardless, there is a solution if you find yourself in this\n        situation, which is to augment the classes with variants. You\n        can define a method <code>variant</code> that injects the\n        actual object into a variant type.\n      </blockquote>")))
 (idp9346736
  ((file objects.html)
   (html
    "<blockquote>\n        In this case, it is much less clear how to augment the\n        <code>Shape</code> class to support this kind of pattern\n        analysis. It is also not obvious that object-oriented\n        programming is well-suited for this situation. Pattern matching\n        seems like a better fit.\n      </blockquote>")))
 (idp9343824
  ((file objects.html)
   (html
    "<blockquote>\n        However, the situation is not always so obvious. The following\n        code checks whether an array of shapes looks like a\n        &quot;barbell,&quot; composed of two <code>Circle</code>\n        objects separated by a <code>Line</code>, where the\n        circles have the same radius.\n      </blockquote>")))
 (idp9341344
  ((file objects.html)
   (html
    "<blockquote>\n        Most programmers would consider this code to be\n        &quot;wrong.&quot; Instead of performing a case analysis on the\n        type of object, it would be better to define a method to return\n        the name of the shape. Instead of calling\n        <code>GetShapeName(s)</code>, we should call\n        <code>s.Name()</code> instead.\n      </blockquote>")))
 (idp9340064
  ((file objects.html)
   (html
    "<blockquote>\n        More commonly, narrowing leads to poor object-oriented style.\n        Consider the following Java code, which returns the name of a\n        shape object.\n      </blockquote>")))
 (idp9337152
  ((file objects.html)
   (html
    "<blockquote>\n        The design argument is this: narrowing violates abstraction. In\n        fact, with a structural typing system like in OCaml, narrowing\n        would essentially provide the ability to enumerate the methods\n        in an object. To check whether an object <code>obj</code>\n        has some method <code>foo : int</code>, one would attempt\n        a coercion <code>(obj :&gt; &lt; foo : int &gt;)</code>.\n      </blockquote>")))
 (idp9336560
  ((file objects.html)
   (html
    "<blockquote>\n        Why? There are two reasonable explanations, one based on a\n        design principle, and another technical (the technical reason is\n        simple: it is hard to implement).\n      </blockquote>")))
 (idp9335680
  ((file objects.html)
   (html
    "<blockquote>\n        Narrowing is <span><em>not permitted</em></span> in OCaml.\n        Period.\n      </blockquote>")))
 (idp9328864
  ((file objects.html)
   (html
    "<blockquote>\n        Narrowing, also called <span><em>down casting</em></span>, is the\n        ability to coerce an object to one of its subtypes. For example,\n        if we have a list of shapes <code>shape list</code>, we\n        might know (for some reason) what the actual type of each shape\n        is. Perhaps we know that all objects in the list have type\n        <code>square</code>. In this case,\n        <span><em>narrowing</em></span> would allow the re-casting of the\n        object from type <code>shape</code> to type\n        <code>square</code>. Many languages support narrowing\n        through dynamic type checking. For example, in Java, a coercion\n        <code>(Square) x</code> is allowed if the value\n        <code>x</code> has type <code>Square</code> or one\n        of its subtypes; otherwise the coercion throws an exception.\n      </blockquote>")))
 (idp9323344
  ((file objects.html)
   (html
    "<blockquote>\n        Aspects of this section may seem fairly complicated, but it\n        should be pointed out that this typing\n        <span><em>works</em></span>, and in the end the type annotations\n        are fairly minor. In most typed object-oriented languages, these\n        coercions would simply not be possible. For example, in C++, a\n        STL type <code>list&lt;T&gt;</code> is invariant in\n        <code>T</code>, it is simply not possible to use\n        <code>list&lt;square&gt;</code> where\n        <code>list&lt;shape&gt;</code> is expected (at least\n        safely). The situation is similar in Java, although Java has an\n        escape hatch that allows the program to fall back to dynamic\n        typing. The situation in OCaml is much better; it works, it is\n        statically checked, and the annotations are pretty simple.\n      </blockquote>")))
 (idp9319744
  ((file objects.html)
   (html
    "<blockquote>\n        Still, the <code>total_area</code> function should be\n        fine, in principle. It doesn't call <code>push</code>, so\n        it isn't making that error. To make it work, we need to use a\n        more precise type that indicates we are not going to be using\n        the set method. We define a type\n        <code>readonly_stack</code> and confirm that we can coerce\n        the list of stacks to it.\n      </blockquote>")))
 (idp9316176
  ((file objects.html)
   (html
    "<blockquote>\n        Another way of looking at this is that\n        <code>&lt; push: 'a -&gt; unit; .. &gt;</code> is\n        contravariant in <code>'a</code>, so\n        <code>&lt; push: square -&gt; unit; pop: square option &gt;</code>\n        cannot be a subtype of\n        <code>&lt; push: shape -&gt; unit; pop: shape option &gt;</code>.\n      </blockquote>")))
 (idp9308400
  ((file objects.html)
   (html
    "<blockquote>\n        As you can see, <code>square stack</code> and\n        <code>circle stack</code> are not subtypes of\n        <code>shape stack</code>. The problem is with the\n        <code>push</code> method. For\n        <code>shape stack</code>, the <code>push</code>\n        method takes an arbitrary <code>shape</code>. So if we\n        could coerce a <code>square stack</code> to a\n        <code>shape stack</code>, then it would be possible to\n        push an arbitrary shape onto <code>square stack</code>,\n        which would be an error.\n      </blockquote>")))
 (idp9307168
  ((file objects.html)
   (html
    "<blockquote>\n        However, when we try to apply this function to our objects we\n        get an error:\n      </blockquote>")))
 (idp9305888
  ((file objects.html)
   (html
    "<blockquote>\n        If we wanted to write a function that took a list of such stacks\n        and found the total area of their shapes, we might try:\n      </blockquote>")))
 (idp9303872
  ((file objects.html)
   (html
    "<blockquote>\n        For a more concrete example of variance, let's create some\n        stacks containing shapes by applying our\n        <code>stack</code> function to some squares and some\n        circles.\n      </blockquote>")))
 (idp9300672
  ((file objects.html)
   (html
    "<blockquote>\n        We can fix this by adding <span><em>variance\n        annotations</em></span> to the type's parameters in the\n        signature: <code>+</code> for covariance or\n        <code>-</code> for contravariance.\n      </blockquote>")))
 (idp9299408
  ((file objects.html)
   (html
    "<blockquote>\n        However, if the definition is hidden by a signature then OCaml\n        is forced to assume that the type is invariant.\n      </blockquote>")))
 (idp9298176
  ((file objects.html)
   (html
    "<blockquote>\n        OCaml works out the variance of a type using that type's\n        definition.\n      </blockquote>")))
 (idp9295088
  ((file objects.html)
   (html
    "<blockquote>\n        We say that <code>'a -&gt; string</code> is\n        <span><em>contravariant</em></span> in <code>'a</code>. In\n        general, function types are contravariant in their arguments and\n        covariant in their results.\n      </blockquote>")))
 (idp9289024
  ((file objects.html)
   (html
    "<blockquote>\n        Subtyping function types requires a third class of variance. A\n        function with type <code>square -&gt; string</code> cannot\n        be used with type <code>shape -&gt; string</code> because\n        it expects its argument to be a <code>square</code> and\n        would not know what to do with a <code>circle</code>.\n        However, a function with type\n        <code>shape -&gt; string</code> <span><em>can</em></span>\n        safely be used with type <code>square -&gt; string</code>.\n      </blockquote>")))
 (idp9285584
  ((file objects.html)
   (html
    "<blockquote>\n        We say that <code>'a list</code> is\n        <span><em>covariant</em></span> (in <code>'a</code>),\n        whilst <code>'a array</code> is\n        <span><em>invariant</em></span>.\n      </blockquote>")))
 (idp9282752
  ((file objects.html)
   (html
    "<blockquote>\n        Note that this relies on lists being immutable. It would not be\n        safe to treat a <code>square array</code> as a\n        <code>shape array</code> because it would allow you to\n        store non-square shapes into what should be an array of squares.\n        OCaml recognizes this and does not allow the coercion.\n      </blockquote>")))
 (idp9278624
  ((file objects.html)
   (html
    "<blockquote>\n        What about types built from object types? If a\n        <code>square</code> is a <code>shape</code>, we\n        expect a <code>square list</code> to be a\n        <code>shape list</code>. OCaml does indeed allow such\n        coercions:\n      </blockquote>")))
 (idp9276080
  ((file objects.html)
   (html
    "<blockquote>\n        Subtyping can also be used to coerce a polymorphic variant into\n        a larger polymorphic variant type.\n      </blockquote>")))
 (idp9271344
  ((file objects.html)
   (html
    "<blockquote>\n        Both these objects have a <code>shape</code> method whose\n        type is a subtype of the <code>shape</code> type, so they\n        can both be coerced into the object type\n        <code>&lt; shape : shape &gt;</code>\n</blockquote>")))
 (idp9269424
  ((file objects.html)
   (html
    "<blockquote>\n        For example, we can create two objects with a\n        <code>shape</code> method:\n      </blockquote>")))
 (idp9265552
  ((file objects.html)
   (html
    "<blockquote>\n        We can also use <span><em>depth</em></span> subtyping with\n        objects. Depth subtyping, in its most general form, says that an\n        object type <code>&lt; m: t1 &gt;</code> is a subtype of\n        <code>&lt; m: t2 &gt;</code> iff <code>t1</code> is\n        a subtype of <code>t2</code>.\n      </blockquote>")))
 (idp9258720
  ((file objects.html)
   (html
    "<blockquote>\n        This form of object subtyping is called\n        <span><em>width</em></span> subtyping. Width subtyping means that\n        an object type <span><em>A</em></span> is a subtype of\n        <span><em>B</em></span>, if <span><em>A</em></span> has all of the\n        methods of <span><em>B</em></span>, and possibly more. A\n        <code>square</code> is a subtype of\n        <code>shape</code> because it implements all of the\n        methods of <code>shape</code> (the <code>area</code>\n        method).\n      </blockquote>")))
 (idp9252464
  ((file objects.html)
   (html
    "<blockquote>\n        A <code>square</code> has a method <code>area</code>\n        just like a <code>shape</code>, and an additional method\n        <code>width</code>. Still, we expect a\n        <code>square</code> to be a <code>shape</code>, and\n        it is. The coercion <code>:&gt;</code> must be explicit.\n      </blockquote>")))
 (idp9249024
  ((file objects.html)
   (html
    "<blockquote>\n        To explore this, let's define some simple object types for\n        geometric shapes. The generic type <code>shape</code> has\n        a method to compute the area, and <code>square</code> and\n        <code>circle</code> are specific kinds of shape.\n      </blockquote>")))
 (idp9241584
  ((file objects.html)
   (html
    "<blockquote>\n      Subtyping is a central concept in object-oriented programming. It\n      governs when an object with one type <span><em>A</em></span> can be\n      used in an expression that expects an object of another type\n      <span><em>B</em></span>. When this is true, we say that\n      <span><em>A</em></span> is a <span><em>subtype</em></span> of\n      <span><em>B</em></span>. Actually, more concretely, subtyping\n      determines when the coercion operator <code>e :&gt; t</code>\n      can be applied. This coercion works only if the expression\n      <code>e</code> has some type <code>s</code> and\n      <code>s</code> is a subtype of <code>t</code>.\n    </blockquote>")))
 (idp9239152
  ((file objects.html)
   (html
    "<blockquote>\n      We'll introduce you to classes, and examples using open recursion,\n      in <a href=\"classes.html\">Chapter\194\16012, <i>Classes</i></a>.\n    </blockquote>")))
 (idp9236752
  ((file objects.html)
   (html
    "<blockquote>\n      In general, a rule of thumb is: use classes and objects in\n      situations where open recursion is a big win. Two good examples\n      are Xavier Leroy's\n      <a href=\"http://gallium.inria.fr/~xleroy/software.html#cryptokit\" target=\"_top\">Cryptokit</a>,\n      which provides a variety of cryptographic primitives that can be\n      combined in building-block style, and the\n      <a href=\"http://cristal.inria.fr/camlimages/\" target=\"_top\">Camlimages</a>\n      library which manipulates various graphical file formats.\n      Camlimages also provides a module-based version of the same\n      library, letting you choose between functional and object-oriented\n      styles depending on your problem domain.\n    </blockquote>")))
 (idp9236064
  ((file objects.html)
   (html
    "<blockquote>\n      In contrast, modules use static binding. If you want to\n      parameterize your module code so that some part of it can be\n      implemented later, you would write a function or functor. This is\n      more explicit, but often more verbose than overriding a method in\n      a class.\n    </blockquote>")))
 (idp9234720
  ((file objects.html)
   (html
    "<blockquote>\n      The real benefits of objects come from the class system. Classes\n      support inheritance and open recursion. Open recursion allows\n      interdependent parts of an object to be defined separately. This\n      works because calls between the methods of an object are\n      determined when the object is instantiated, a form of\n      <span><em>dynamic</em></span> binding. This makes it possible (and\n      necessary) for one method to refer to other methods in the object\n      without knowing statically how they will be implemented.\n    </blockquote>")))
 (idp9234032
  ((file objects.html)
   (html
    "<blockquote>\n      Objects have some advantages over records: they don't require type\n      definitions and their support for row polymorphism makes them more\n      flexible. However, the heavy syntax and additional runtime cost\n      means that objects are rarely used in place of records.\n    </blockquote>")))
 (idp9233168
  ((file objects.html)
   (html
    "<blockquote>\n      You might wonder when to use objects in OCaml, which has a\n      multitude of alternative mechanisms to express the similar\n      concepts. First-class modules are more expressive (a module can\n      include types, while classes and objects cannot). Modules,\n      functors, and datatypes also offer a wide range of ways to express\n      program structure. In fact, many seasoned OCaml programmers rarely\n      use classes and objects, if at all.\n    </blockquote>")))
 (idp9230608
  ((file objects.html)
   (html
    "<blockquote>\n      There are some restriction on the use of the expression\n      <code>{&lt; ... &gt;}</code>. It can be used only within a\n      method body, and only the values of fields may be updated. Method\n      implementations are fixed at the time the object is created, they\n      cannot be changed dynamically.\n    </blockquote>")))
 (idp9224960
  ((file objects.html)
   (html
    "<blockquote>\n      The key parts of this implementation are in the\n      <code>pop</code> and <code>push</code> methods. The\n      expression <code>{&lt; ... &gt;}</code> produces a copy of\n      the current object, with the same type, and the specified fields\n      updated. In other words, the <code>push hd</code> method\n      produces a copy of the object, with <code>v</code> replaced\n      by <code>hd :: v</code>. The original object is not\n      modified.\n    </blockquote>")))
 (idp9223664
  ((file objects.html)
   (html
    "<blockquote>\n      Indeed, in many programs, this makes sense, but it is by no means\n      required. Let's define a function that creates immutable stack\n      objects.\n    </blockquote>")))
 (idp9223008
  ((file objects.html)
   (html
    "<blockquote>\n      Many people consider object-oriented programming to be\n      intrinsically imperative, where an object is like a state machine.\n      Sending a message to an object causes it to change state, possibly\n      sending messages to other objects.\n    </blockquote>")))
 (idp9218304
  ((file objects.html)
   (html
    "<blockquote>\n      An object of type\n      <code>&lt; pop : int option; .. &gt;</code> can be any\n      object with a method <code>pop : int option</code>, it\n      doesn't matter how it is implemented. When the method\n      <code>#pop</code> is invoked, the actual method that is run\n      is determined by the object.\n    </blockquote>")))
 (idp9217040
  ((file objects.html)
   (html
    "<blockquote>\n      This kind of typing scheme using row variables is called\n      <span><em>row polymorphism</em></span>. Row polymorphism is also\n      used in polymorphic variant types, and there is a close\n      relationship between objects and polymorphic variants: objects are\n      to records what polymorphic variants are to ordinary variants.\n    </blockquote>")))
 (idp9215440
  ((file objects.html)
   (html
    "<blockquote>\n      This is because <code>..</code> is really a special kind of\n      type variable called a <span><em>row variable</em></span>.\n    </blockquote>")))
 (idp9213040
  ((file objects.html)
   (html
    "<blockquote>\n      The <code>..</code> in an open object type is an elision,\n      standing for &quot;possibly more methods.&quot; It may not be\n      apparent from the syntax, but an elided object type is actually\n      polymorphic. For example, if we try to write a type definition, we\n      get an &quot;unbound type variable&quot; error.\n    </blockquote>")))
 (idp9210720
  ((file objects.html)
   (html
    "<blockquote>\n      We can manually <span><em>close</em></span> an object type using a\n      type annotation:\n    </blockquote>")))
 (idp9207424
  ((file objects.html)
   (html
    "<blockquote>\n      The <code>..</code> in the inferred object types are\n      ellipses, standing for other unspecified methods that the object\n      may have. The type <code>&lt; width : float; .. &gt;</code>\n      specifies an object that must have at least an\n      <code>width</code> method, and possibly some others as well.\n      Such object types are said to be <span><em>open</em></span>.\n    </blockquote>")))
 (idp9206192
  ((file objects.html)
   (html
    "<blockquote>\n      The type system will complain if it sees incompatible uses of the\n      same method:\n    </blockquote>")))
 (idp9205680
  ((file objects.html)
   (html
    "<blockquote>\n      As you can see object types are inferred automatically from the\n      methods that are invoked on them.\n    </blockquote>")))
 (idp9204448
  ((file objects.html)
   (html
    "<blockquote>\n      Like polymorphic variants, methods can be used without an explicit\n      type declaration.\n    </blockquote>")))
 (idp9199104
  ((file objects.html)
   (html
    "<blockquote>\n      Note that the types of the function <code>stack</code> and\n      the returned object now use the polymorphic type\n      <code>'a</code>. When <code>stack</code> is invoked on\n      a concrete value <code>[3; 2; 1]</code>, we get the same\n      object type as before, with type <code>int</code> for the\n      values on the stack.\n    </blockquote>")))
 (idp9197776
  ((file objects.html)
   (html
    "<blockquote>\n      Objects can also be constructed by functions. If we want to\n      specify the initial value of the object, we can define a function\n      that takes the value and returns an object.\n    </blockquote>")))
 (idp9195024
  ((file objects.html)
   (html
    "<blockquote>\n      Note that unlike functions, methods can have zero parameters,\n      since the method call is routed to a concrete object instance.\n      That's why the <code>push</code> and <code>pop</code>\n      methods do not have a <code>unit</code> argument, as the\n      equivalent functional versions would.\n    </blockquote>")))
 (idp9191520
  ((file objects.html)
   (html
    "<blockquote>\n      The object type is enclosed in angle brackets\n      <code>&lt; ... &gt;</code>, containing just the types of the\n      methods. Fields, like <code>v</code>, are not part of the\n      public interface of an object. All interaction with an object is\n      through its methods. The syntax for a method invocation uses the\n      <code>#</code> character.\n    </blockquote>")))
 (idp9187456
  ((file objects.html)
   (html
    "<blockquote>\n      The object has an integer list value <code>v</code>, a\n      method <code>pop</code> that returns the head of\n      <code>v</code>, and a method <code>push</code> that\n      adds an integer to the head of <code>v</code>.\n    </blockquote>")))
 (idp9185600
  ((file objects.html)
   (html
    "<blockquote>\n      OCaml is entirely different. Classes are used to construct objects\n      and support inheritance, but classes are not types. Instead,\n      objects have <span><em>object types</em></span>, and if you want to\n      use objects, you aren't required to use classes at all. Here's an\n      example of a simple object.\n    </blockquote>")))
 (idp9183168
  ((file objects.html)
   (html
    "<blockquote>\n      If you already know about object oriented programming in a\n      language like Java or C++, the OCaml object system may come as a\n      surprise. Foremost is the complete separation of objects, and\n      their types, from the class system in OCaml. In a language like\n      Java, a class name is also used as the type of objects created by\n      instantiating it, and the relationships between these object types\n      correspond to inheritance. For example, if we implement a class\n      <code>Deque</code> in Java by inheriting from a class\n      <code>Stack</code>, we would be allowed to pass a deque\n      anywhere a stack is expected.\n    </blockquote>")))
 (idp9181360
  ((file objects.html)
   (html
    "<blockquote>\n    Almost every notable modern programming language has been influenced\n    by OOP, and you'll have run across these terms if you've ever used\n    C++, Java, C#, Ruby, Python or JavaScript.\n  </blockquote>")))
 (idp9178560
  ((file objects.html)
   (html
    "<blockquote>\n<span><em>Open recursion</em></span>: an object's methods can\n        invoke another method in the same object using a special\n        variable (often called <code>self</code> or\n        <code>this</code>). These calls use dynamic lookup,\n        allowing a method defined in one object to invoke methods\n        defined in another object that inherits from the first.\n      </blockquote>")))
 (idp9177152
  ((file objects.html)
   (html
    "<blockquote>\n<span><em>Inheritance</em></span>: the definition of one kind of\n        object can be reused to produce a new kind of object. This new\n        definition can override some behavior, but also share code with\n        its parent.\n      </blockquote>")))
 (idp9173088
  ((file objects.html)
   (html
    "<blockquote>\n<span><em>Subtyping</em></span>: if an object\n        <code>a</code> has all the functionality of an object\n        <code>b</code>, then we may use <code>a</code> in\n        any context where <code>b</code> is expected.\n      </blockquote>")))
 (idp9171600
  ((file objects.html)
   (html
    "<blockquote>\n<span><em>Dynamic lookup</em></span>: when a message is sent to\n        an object, the method to be executed is determined by the\n        implementation of the object, not by some static property of the\n        program. In other words, different objects may react to the same\n        message in different ways.\n      </blockquote>")))
 (idp9170240
  ((file objects.html)
   (html
    "<blockquote>\n<span><em>Abstraction</em></span>: the details of the\n        implementation are hidden in the object, and the external\n        interface is just the set of publicly-accessible methods.\n      </blockquote>")))
 (idp9169232
  ((file objects.html)
   (html
    "<blockquote>\n    There are five fundamental properties that differentiate OOP from\n    other styles:\n  </blockquote>")))
 (idp9166608
  ((file objects.html)
   (html
    "<blockquote>\n    Object-oriented programming (often shorted to OOP) is a programming\n    style that encapsulates computation and data within logical\n    <span><em>objects</em></span>. Each object contains some data stored\n    in <span><em>fields</em></span>, and has <span><em>method</em></span>\n    functions that can be invoked against the data within the object\n    (also called &quot;sending a message&quot; to the object). The code\n    definition behind an object is called a <span><em>class</em></span>,\n    and objects are constructed from a class definition by calling a\n    constructor with the data that the object will use to build itself.\n  </blockquote>")))
 (idp9164352
  ((file objects.html)
   (html
    "<blockquote>\n    We've already seen several tools that OCaml provides for organizing\n    programs, particularly modules. In addition, OCaml also supports\n    object-oriented programming. There are objects, classes, and their\n    associated types. In this chapter, we'll introduce you to OCaml\n    objects and subtyping. In the next chapter\n    <a href=\"classes.html\">Chapter\194\16012, <i>Classes</i></a>, we'll introduce you to classes\n    and inheritance.\n  </blockquote>")))
 (idp11502896
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        The\n        <a href=\"https://bitbucket.org/mmottl/lacaml\" target=\"_top\">Lacaml</a>\n        library isn't part of Core, but provides the recommended\n        interfaces to the widely used BLAS and LAPACK mathematical\n        Fortran libraries. These allow developers to write\n        high-performance numerical code for applications that require\n        linear algebra. It supports large vectors and matrices, but with\n        static typing safety of OCaml to make it easier to write safe\n        algorithms.\n      </blockquote>")))
 (idp11499184
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n            The <code>Bigstring</code> module provides a\n            <code>String</code>-like interface that uses\n            <code>Bigarray</code> internally. The\n            <code>Bigbuffer</code> collects these into extensible\n            string buffers that can operate entirely on external system\n            memory.\n          </blockquote>")))
 (idp11497296
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n            The <code>Iobuf</code> module maps I/O buffers as a\n            1-dimensional array of bytes. It provides a sliding window\n            interface that lets consumer processes read from the buffer\n            while it's being filled by producers. This lets OCaml use\n            I/O buffers that have been externally allocated by the\n            operating system without any extra data copying.\n          </blockquote>")))
 (idp11496240
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        Bigarray sees a lot of use beyond just scientific computing, and\n        several Core libraries use it for general-purpose I/O:\n      </blockquote>")))
 (idp11495328
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        A common use of custom blocks is to manage external system\n        memory directly from within OCaml. The Bigarray interface was\n        originally intended to exchange data with Fortran code, and maps\n        a block of system memory as a multi-dimensional array that can\n        be accessed from OCaml. Bigarray operations work directly on the\n        external memory without requiring it to be copied into the OCaml\n        heap (which is a potentially expensive operation for large\n        arrays).\n      </blockquote>")))
 (idp11490752
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The custom operations specify how the runtime should perform\n      polymorphic comparison, hashing and binary marshalling. They also\n      optionally contain a <span><em>finalizer</em></span> that the\n      runtime calls just before the block is garbage collected. This\n      finalizer has nothing to do with ordinary OCaml finalizers (as\n      created by <code>Gc.finalize</code> and explained in\n      <a href=\"understanding-the-garbage-collector.html\">Chapter\194\16021, <i>Understanding the Garbage Collector</i></a>).\n      They are instead used to call C cleanup functions such as\n      <code>free</code>.\n    </blockquote>")))
 (idp11488720
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The first word of the data within the custom block is a C pointer\n      to a <code>struct</code> of custom operations. The custom\n      block cannot have pointers to OCaml blocks and is opaque to the\n      garbage collector.\n    </blockquote>")))
 (idp11485424
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      OCaml supports <span><em>custom</em></span> heap blocks via a\n      <code>Custom_tag</code> that let the runtime perform\n      user-defined operations over OCaml values. A custom block lives in\n      the OCaml heap like an ordinary block and can be of whatever size\n      the user desires. The <code>Custom_tag</code> (255) is\n      higher than <code>No_scan_tag</code> and so isn't scanned by\n      the garbage collector.\n    </blockquote>")))
 (idp11479168
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Care should be taken that any C library functions that receive\n      these buffers can also cope with arbitrary bytes within the buffer\n      contents and are not expecting C strings. For instance, the C\n      <code>memcopy</code> or <code>memmove</code> standard\n      library functions can operate on arbitrary data, but\n      <code>strlen</code> or <code>strcpy</code> both\n      require a <code>NULL</code> terminated buffer and has no\n      mechanism for encoding a <code>NULL</code> value within its\n      contents.\n    </blockquote>")))
 (idp11477136
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The guaranteed <code>NULL</code>-termination comes in handy\n      when passing a string to C, but is not relied upon to compute the\n      length from OCaml code. OCaml strings can thus contain\n      <code>NULL</code> bytes at any point within the string.\n    </blockquote>")))
 (idp11475744
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      This string representation is a clever way to ensure that the\n      contents are always zero-terminated by the padding word, and still\n      compute its length efficiently without scanning the whole string.\n      The following formula is used:\n    </blockquote>")))
 (idp11463312
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      On a 32-bit machine, the padding is calculated based on the modulo\n      of the string length and word size to ensure the result is\n      word-aligned. A 64-bit machine extends the potential padding up to\n      7 bytes instead of 3.\n    </blockquote>")))
 (idp11460416
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Strings are standard OCaml blocks with the header size defining\n      the size of the string in machine words. The\n      <code>String_tag</code> (252) is higher than the\n      <code>No_scan_tag</code>, indicating that the contents of\n      the block are opaque to the collector. The block contents are the\n      contents of the string, with padding bytes to align the block on a\n      word boundary.\n    </blockquote>")))
 (idp11458240
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The extra space usage is generally not significant in a typical\n      application, and polymorphic variants offer a great deal more\n      flexibility than normal variants. However, if you're writing code\n      that demands high performance or must run within tight memory\n      bounds, the runtime layout is at least very predictable. The OCaml\n      compiler never switches memory representation due to optimization\n      passes. This lets you predict the precise runtime layout by\n      referring to these guidelines and your source code.\n    </blockquote>")))
 (idp11457200
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Another inefficiency over normal variants is when a polymorphic\n      variant constructor has more than one parameter. Normal variants\n      hold parameters as a single flat block with multiple fields for\n      each entry, but polymorphic variants must adopt a more flexible\n      uniform memory representation since they may be reused in a\n      different context across compilation units. They allocate a tuple\n      block for the parameters that is pointed to from the argument\n      field of the variant. There are thus three additional words for\n      such variants, along with an extra memory indirection due to the\n      tuple.\n    </blockquote>")))
 (idp11455584
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Polymorphic variants use more memory space than normal variants\n      when parameters are included in the datatype constructors. Normal\n      variants use the tag byte to encode the variant value and save the\n      fields for the contents, but this single byte is insufficient to\n      encode the hashed value for polymorphic variants. They must\n      allocate a new block (with tag <code>0</code>) and store the\n      value in there instead. Polymorphic variants with constructors\n      thus use one word of memory more than normal variant constructors.\n    </blockquote>")))
 (idp11454992
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The hash function is designed to give the same results on 32-bit\n      and 64-bit architectures, so the memory representation is stable\n      across different CPUs and host types.\n    </blockquote>")))
 (idp11452320
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      A polymorphic variant without any parameters is stored as an\n      unboxed integer and so only takes up one word of memory, just like\n      a normal variant. This integer value is determined by applying a\n      hash function to the <span><em>name</em></span> of the variant. The\n      hash function isn't exposed directly by the compiler, but the\n      <code>type_conv</code> library from Core provides an\n      alternative implementation.\n    </blockquote>")))
 (idp11451664
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Polymorphic variants are more flexible than normal variants when\n      writing code, but are slightly less efficient at runtime. This is\n      because there isn't as much static compile-time information\n      available to optimize their memory layout.\n    </blockquote>")))
 (idp11449648
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Due to this encoding, there is a limit around 240 variants with\n      parameters that applies to each type definition, but the only\n      limit on the number of variants without parameters is the size of\n      the native integer (either 31- or 63-bits). This limit arises\n      because of the size of the tag byte, and that some of the high\n      numbered tags are reserved.\n    </blockquote>")))
 (idp11447488
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Some theorem provers such as Coq do output code which uses\n      <code>Obj</code> internally, but the external module\n      signatures never expose it. Unless you too have a machine proof of\n      correctness to accompany your use of <code>Obj</code>, stay\n      away from it except for debugging!\n    </blockquote>")))
 (idp11445568
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The <code>Obj</code> module is an undocumented module that\n      exposes the internals of the OCaml compiler and runtime. It is\n      very useful for examining and understanding how your code will\n      behave at runtime, but should <span><em>never</em></span> be used\n      for production code unless you understand the implications. The\n      module bypasses the OCaml type system, making memory corruption\n      and segmentation faults possible.\n    </blockquote>")))
 (idp11440080
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Lists are stored with a representation that is exactly the same as\n      if the list was written as a variant type with\n      <code>Head</code> and <code>Cons</code>. The empty\n      list <code>[]</code> is an integer <code>0</code>, and\n      subsequent blocks have tag <code>0</code> and two\n      parameters: a block with the current value, and a pointer to the\n      rest of the list.\n    </blockquote>")))
 (idp11431616
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      In the above example, the <code>Apple</code> and\n      <code>Kiwi</code> values are still stored as normal OCaml\n      integers with values <code>0</code> and <code>1</code>\n      respectively. The <code>Orange</code> and\n      <code>Pear</code> values both have parameters, and are\n      stored as blocks whose tags ascend from <code>0</code> (and\n      so <code>Pear</code> has a tag of <code>1</code>, as\n      the use of <code>Obj.tag</code> verifies). Finally, the\n      parameters are fields which contain OCaml values within the block,\n      and <code>Obj.field</code> can be used to retrieve them.\n    </blockquote>")))
 (idp11429792
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Variants that have parameters arguments are a little more complex.\n      They are stored as blocks, with the value\n      <span><em>tags</em></span> ascending from 0 (counting from leftmost\n      variants with parameters). The parameters are stored as words in\n      the block.\n    </blockquote>")))
 (idp11426416
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n<code>Obj.magic</code> unsafely forces a type cast between\n      any two OCaml types; in this example the <code>int</code>\n      type hint retrieves the runtime integer value. The\n      <code>Obj.is_block</code> confirms that the value isn't a\n      more complex block, but just an OCaml <code>int</code>.\n    </blockquote>")))
 (idp11424416
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Basic variant types with no extra parameters for any of their\n      branches are simply stored as an OCaml integer, starting with\n      <code>0</code> for the first option and in ascending order.\n    </blockquote>")))
 (idp11422528
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        Only records and arrays can have the float array optimization,\n        and for records every single field must be a float.\n      </blockquote>")))
 (idp11421424
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        The first thing we tested above was that a float array has the\n        correct unboxed float array tag value (254). However, the next\n        line tests a tuple of floating point values instead, which are\n        <span><em>not</em></span> optimized in the same way and have the\n        normal tuple tag value (0).\n      </blockquote>")))
 (idp11418592
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        This tells us that float arrays have a tag value of 254. Now\n        let's test some sample values using the\n        <code>Obj.tag</code> function to check that the allocated\n        block has the expected runtime tag, and also use\n        <code>Obj.double_field</code> to retrieve a float from\n        within the block.\n      </blockquote>")))
 (idp11417328
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        First, let's check that float arrays do in fact have a different\n        tag number from normal floating-point values.\n      </blockquote>")))
 (idp11413904
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        Since each floating-point value is boxed in a separate memory\n        block, it can be inefficient to handle large arrays of floats in\n        comparison to unboxed integers. OCaml therefore special-cases\n        records or arrays that contain <span><em>only</em></span>\n<code>float</code> types. These are stored in a block that\n        contains the floats packed directly in the data section, with\n        the <code>Double_array_tag</code> set to signal to the\n        collector that the contents are not OCaml values.\n      </blockquote>")))
 (idp11411712
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        Floating point numbers in OCaml are always stored as full\n        double-precision values. Individual floating-point values are\n        stored as a block with a single field that contains the number.\n        This block has the <code>Double_tag</code> set which\n        signals to the collector that the floating-point value is not to\n        be scanned.\n      </blockquote>")))
 (idp11408496
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The <code>Obj.repr</code> function retrieves the runtime\n      representation of any OCaml value. <code>Obj.is_block</code>\n      checks the bottom bit to determine if the value is a block header\n      or an unboxed integer.\n    </blockquote>")))
 (idp11406512
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      You can check the difference between a block and a direct integer\n      yourself using the <code>Obj</code> module, which exposes\n      the internal representation of values to OCaml code.\n    </blockquote>")))
 (idp11405056
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      Tuples, records and arrays are all represented identically at\n      runtime as a block with tag <code>0</code>. Tuples and\n      records have constant sizes determined at compile-time, whereas\n      arrays can be of variable length. While arrays are restricted to\n      containing a single type of element in the OCaml type system, this\n      is not required by the memory representation.\n    </blockquote>")))
 (idp11400704
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        These basic types such as empty lists and\n        <code>unit</code> are very efficient to use since integers\n        are never allocated on the heap. They can be passed directly in\n        registers and not appear on the stack if you don't have too many\n        parameters to your functions. Modern architectures such as\n        <code>x86_64</code> have a lot of spare registers to\n        further improve the efficiency of using unboxed integers.\n      </blockquote>")))
 (idp11395104
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        Many basic types are efficiently stored as unboxed integers at\n        runtime. The native <code>int</code> type is the most\n        obvious, although it drops a single bit of precision due to the\n        tag bit. Other atomic types such as <code>unit</code> and\n        empty list <code>[]</code> value are stored as constant\n        integers. Boolean values have a value of <code>0</code>\n        and <code>1</code> for <code>true</code> and\n        <code>false</code> respectively.\n      </blockquote>")))
 (idp11363264
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The exact representation of values inside a block depends on their\n      static OCaml type. All OCaml types are distilled down into\n      <code>values</code>, and summarized in the table below.\n    </blockquote>")))
 (idp11361056
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      A block's tag byte is multi-purpose, and indicates whether the\n      data array represents opaque bytes or fields. If a block's tag is\n      greater than or equal to <code>No_scan_tag</code> (251),\n      then the block's data are all opaque bytes, and are not scanned by\n      the collector. The most common such block is the\n      <code>string</code> type, which we describe in more detail\n      later in this chapter.\n    </blockquote>")))
 (idp11358976
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The 2-bit <code>color</code> field is used by the garbage\n      collector to keep track of its state during mark-and-sweep\n      collection. We'll come back to this field in\n      <a href=\"understanding-the-garbage-collector.html\">Chapter\194\16021, <i>Understanding the Garbage Collector</i></a>.\n      This tag isn't exposed to OCaml source code in any case.\n    </blockquote>")))
 (idp11356864
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The <code>size</code> field records the length of the block\n      in memory words. This is 22 bits on 32-bit platforms, which is the\n      reason why OCaml strings are limited to 16MB on that architecture.\n      If you need bigger strings, either switch to a 64-bit host, or use\n      the <code>Bigarray</code> module.\n    </blockquote>")))
 (idp11355424
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The garbage collector never inspects opaque bytes. If the tag\n      indicates an array of OCaml fields are present, their contents are\n      all treated as more valid OCaml values. The garbage collector\n      always inspects fields and follows them as part of the collection\n      process described earlier.\n    </blockquote>")))
 (idp11353760
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      An OCaml <span><em>block</em></span> is the basic unit of\n      allocation on the heap. A block consists of a one-word header\n      (either 32- or 64-bits depending on the CPU architecture) followed\n      by variable-length data that is either opaque bytes or an array of\n      <span><em>fields</em></span>. The header has a multi-purpose tag\n      byte that defines whether to interpret the subsequent data as\n      opaque bytes or OCaml fields.\n    </blockquote>")))
 (idp11350528
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        An even more alert reader will be wondering about the\n        performance implications are for integer arithmetic using this\n        tagged representation. Since the bottom bit is set, any\n        operation on the integer has to shift the bottom bit right to\n        recover the &quot;native&quot; value. The native code OCaml\n        compiler generates efficient x86 assembly code in this case,\n        taking advantage of modern processor instructions to hide the\n        extra shifts where possible. Addition is a single\n        <code>LEA</code> x86 instruction, subtraction can be two\n        instructions, and multiplication is only a few more.\n      </blockquote>")))
 (idp11349648
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        Modern CISC processors such as the Intel x86 do support\n        unaligned memory accesses, but the chip still runs faster if\n        accesses are word-aligned. OCaml therefore simply mandates that\n        all pointers be word-aligned, which guarantees that the bottom\n        few bits of any valid pointer will be zero. Setting the bottom\n        bit to a non-zero value is a simple way to mark an integer, at\n        the cost of losing that single bit of precision.\n      </blockquote>")))
 (idp11348752
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        The alert reader may be wondering how OCaml can guarantee that\n        all of its pointers are word-aligned. In the old days when RISC\n        chips such as Sparc, MIPS and Alpha were commonplace, unaligned\n        memory accesses were forbidden by the instruction set\n        architecture and would result in a CPU exception that terminated\n        the program. Thus, all pointers were historically rounded off to\n        the architecture word-size (usually 32- or 64-bits).\n      </blockquote>")))
 (idp11347200
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        The mechanism for this is simple, since the runtime system keeps\n        track of the heap blocks it has allocated for OCaml values. If\n        the pointer is inside a heap chunk that is marked as being\n        managed by the OCaml runtime, it is assumed to point to an OCaml\n        value. If it points outside the OCaml runtime area, it is\n        treated as an opaque C pointer to some other system resource.\n      </blockquote>")))
 (idp11346512
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        The only problem that remains with this memory representation is\n        distinguishing between pointers to OCaml values (which should be\n        followed by the garbage collector) and pointers into the system\n        heap to C values (which shouldn't be followed).\n      </blockquote>")))
 (idp11345856
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        A value is treated as a memory pointer if its lowest bit is\n        zero. A pointer value can still be stored unmodified despite\n        this, since pointers are guaranteed to be word-aligned (with the\n        bottom bits always being zero).\n      </blockquote>")))
 (idp11345120
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        This representations means that integers are unboxed runtime\n        values in OCaml so that they can be stored directly without\n        having to allocate a wrapper block. They can be passed directly\n        to other function calls in registers and are generally the\n        cheapest and fastest values to use in OCaml.\n      </blockquote>")))
 (idp11342160
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        OCaml values don't all have to be boxed at runtime. Instead,\n        values use a single tag bit per word to distinguish integers and\n        pointers at runtime. The value is an integer if the lowest bit\n        of the block word is non-zero, and a pointer if the lowest bit\n        of the block word is zero. Several OCaml types map onto this\n        integer representation, including <code>bool</code>,\n        <code>int</code>, the empty list, <code>unit</code>,\n        and variants without constructors.\n      </blockquote>")))
 (idp11340960
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n        Wrapping primitives types (such as integers) inside another data\n        structure that records extra metadata about the value is known\n        as <span><em>boxing</em></span>. Values are boxed in order to\n        make it easier for the garbage collector to do its job, but at\n        the expense of an extra level of indirection to access the data\n        within the boxed value.\n      </blockquote>")))
 (idp11338416
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      OCaml uses a uniform memory representation in which every OCaml\n      variable is stored as a <span><em>value</em></span>. An OCaml value\n      is a single memory word that is either an immediate integer or a\n      pointer to some other memory. The OCaml runtime tracks all values\n      so that it can free them when they are no longer needed. It thus\n      needs to be able to distinguish between integer and pointer\n      values, since it scans pointers to find further values but doesn't\n      follow integers that don't point to anything meaningful beyond\n      their immediate value.\n    </blockquote>")))
 (idp11334928
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      The type declaration <code>t</code> doesn't take up any\n      memory at runtime, but the subsequent <code>let</code>\n      binding allocates a new block of memory with two words of\n      available space. One word holds the <code>foo</code> field\n      and the other word holds the <code>bar</code> field. The\n      OCaml compiler translates such an expression into an explicit\n      allocation for the block from OCaml's runtime system.\n    </blockquote>")))
 (idp11333088
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n      A running OCaml program uses blocks of memory\n      (<span><em>i.e.</em></span> contiguous sequences of words in RAM)\n      to represent values such as tuples, records, closures or arrays.\n      An OCaml program implicitly allocates a block of memory when such\n      a value is created.\n    </blockquote>")))
 (idp11330624
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n    This chapter covers the precise mapping from OCaml types to runtime\n    values and walks you through them via the toplevel. We'll cover how\n    these values are managed by the runtime later on in\n    <a href=\"understanding-the-garbage-collector.html\">Chapter\194\16021, <i>Understanding the Garbage Collector</i></a>.\n  </blockquote>")))
 (idp11328432
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n    We'll explain this compilation pipeline in more detail in\n    <a href=\"the-compiler-frontend-parsing-and-type-checking.html\">Chapter\194\16022, <i>The Compiler Frontend: Parsing and Type Checking</i></a>\n    and\n    <a href=\"the-compiler-backend-byte-code-and-native-code.html\">Chapter\194\16023, <i>The Compiler Backend: Byte-code and Native-code</i></a>.\n  </blockquote>")))
 (idp11326896
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n    Since OCaml verifies these properties at compile time, it doesn't\n    need to keep track of as much information at runtime. Thus, later\n    stages of the compiler can discard and simplify the type\n    declarations to a much more minimal subset that's actually required\n    to distinguish polymorphic values at runtime. This is a major\n    performance win versus something like a Java or .NET method call,\n    where the runtime must look up the concrete instance of the object\n    and dispatch the method call. Those languages amortize some of the\n    cost via &quot;Just-in-Time&quot; dynamic patching, but OCaml\n    prefers runtime simplicity instead.\n  </blockquote>")))
 (idp11323600
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n    The OCaml compiler runs through several phases during the\n    compilation process. The first phase is syntax checking, during\n    which source files are parsed into Abstract Syntax Trees (ASTs). The\n    next stage is a <span><em>type checking</em></span> pass over the\n    AST. In a validly typed program, a function cannot be applied with\n    an unexpected type. For example, the\n    <code>print_endline</code> function must receive a single\n    <code>string</code> argument, and an <code>int</code>\n    will result in a type error.\n  </blockquote>")))
 (idp11322144
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n    Luckily, the OCaml toolchain is very predictable. The compiler\n    minimizes the amount of optimization magic that it performs, and\n    relies instead on its straightforward execution model for good\n    performance. With some experience, you can know rather precisely\n    where a block of performance-critical OCaml code is spending its\n    time.\n  </blockquote>")))
 (idp11320640
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n    However, knowledge of the OCaml internals is useful beyond just\n    writing foreign function interfaces. As you build and maintain more\n    complex OCaml applications, you'll need to interface with various\n    external system tools that operate on compiled OCaml binaries. For\n    example, profiling tools report output based on the runtime memory\n    layout and debuggers execute binaries without any knowledge of the\n    static OCaml types. To use these tools effectively, you'll need to\n    do some translation between the OCaml and C worlds.\n  </blockquote>")))
 (idp11318944
  ((file memory-representation-of-values.html)
   (html
    "<blockquote>\n    The FFI interface we described in\n    <a href=\"foreign-function-interface.html\">Chapter\194\16019, <i>Foreign Function Interface</i></a> hides the\n    precise details of how values are exchanged across C libraries and\n    the OCaml runtime. There is a simple reason for this: using this\n    interface directly is a delicate operation that requires\n    understanding a few different moving parts before you can get it\n    right. You first need to know the mapping between OCaml types and\n    their runtime memory representation. You also need to ensure that\n    your code is interfacing correctly with OCaml runtime's memory\n    management.\n  </blockquote>")))
 (idp9772064
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      As you can see, the relative performance of trees and maps depends\n      a great deal on the details of how they're used, and so whether to\n      choose one data structure or the other will depend on the details\n      of the application.\n    </blockquote>")))
 (idp9771536
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      These numbers can be made more extreme by increasing the size of\n      the tables or the length of the list.\n    </blockquote>")))
 (idp9770256
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Unsurprisingly, maps perform far better than hash tables on this\n      benchmark, in this case by more than a factor of ten.\n    </blockquote>")))
 (idp9768128
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Here's a benchmark to demonstrates this. In it, we create a list\n      of maps (or hash tables) that are built up by iteratively applying\n      updates, starting from an empty map. In the hash table\n      implementation, we do this by calling\n      <code>Hashtbl.copy</code> to get the list entries.\n    </blockquote>")))
 (idp9763632
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Hash tables are not always the faster choice, though. In\n      particular, maps are often more performant in situations where you\n      need to keep multiple related versions of the data structure in\n      memory at once. In particular, if you create map\n      <code>m'</code> by calling <code>Map.add</code> on\n      some other map <code>m</code>, then <code>m</code> and\n      <code>m'</code> can be used independently, and in fact share\n      most of their underlying storage. Thus, if you need to keep in\n      memory at the same time multiple different related collections of\n      key/value pairs, then a map is typically a much more efficient\n      data structure to do it with.\n    </blockquote>")))
 (idp9762912
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      We can make the speedup smaller or larger depending on the details\n      of the test; for example, it will vary with the number of distinct\n      keys. But overall, for code that is heavy on sequences of querying\n      and updating a set of key/value pairs, hash tables will\n      significantly outperform maps.\n    </blockquote>")))
 (idp9761648
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      The results, shown below, show the hash table version to be around\n      four times faster than the map version.\n    </blockquote>")))
 (idp9757920
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      The best way of answering a performance question is by running a\n      benchmark, so let's do just that. The following benchmark uses the\n      <code>core_bench</code> library, and it compares maps and\n      hash tables under a very simple workload. Here, we're keeping\n      track of a set of 1000 different integer keys, and cycling over\n      the keys and updating the values they contain. Note that we use\n      the <code>Map.change</code> and\n      <code>Hashtbl.change</code> functions to update the\n      respective data structures.\n    </blockquote>")))
 (idp9757232
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Programming idioms aside, there are significant performance\n      differences between maps and hash tables as well. For code that is\n      dominated by updates and lookups, hash tables are a clear\n      performance win, and the win is clearer the larger the size of the\n      tables.\n    </blockquote>")))
 (idp9756448
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Maps and hash tables overlap enough in functionality that it's not\n      always clear when to choose one or the other. Maps, by virtue of\n      being immutable, are generally the default choice in OCaml. OCaml\n      also has good support for imperative programming, though, and when\n      programming in an imperative idiom, hash tables are often the more\n      natural choice.\n    </blockquote>")))
 (idp9753008
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        There is currently no analogue of <code>comparelib</code>\n        for auto-generation of hash-functions, so you do need to either\n        write the hash-function by hand, or use the built-in polymorphic\n        hash function, <code>Hashtbl.hash</code>.\n      </blockquote>")))
 (idp9752256
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Note that in order to satisfy hashable, one also needs to\n        provide a comparison function. That's because Core's hash tables\n        use an ordered binary tree data-structure for the hash-buckets,\n        so that performance of the table degrades gracefully in the case\n        of pathologically bad choice of hash function.\n      </blockquote>")))
 (idp9747456
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Most types in Core satisfy the <code>Hashable.S</code>\n        interface, but as with the <code>Comparable.S</code>\n        interface, the question remains of how one should satisfy this\n        interface with a new type. Again, the answer is to use a functor\n        to build the necessary functionality; in this case,\n        <code>Hashable.Make</code>. Note that we use OCaml's\n        <code>lxor</code> operator for doing the\n        &quot;logical&quot; (<span><em>i.e.</em></span>, bit-wise)\n        exclusive-or of the hashes from the component values.\n      </blockquote>")))
 (idp9744272
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      As you can see, the hash function stops after the first 10\n      elements. The same can happen with any large data structure,\n      including records and arrays. When building hash functions over\n      large custom data-structures, it is generally a good idea to write\n      one's own hash function, <span><em>e.g.</em></span>,\n    </blockquote>")))
 (idp9742000
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      The bound on the traversal, means that the hash function may\n      ignore part of the data-structure, and this can lead to\n      pathological cases where every value you store has the same hash\n      value. By default, OCaml's hash function will stop after it has\n      found ten nodes it can extract data from. We'll demonstrate this\n      below, using the function <code>List.range</code> to\n      allocate lists of integers of different length.\n    </blockquote>")))
 (idp9741120
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      OCaml's polymorphic hash function works by walking over the\n      data-structure its given using a breadth-first traversal that is\n      bounded in the number of nodes its willing to traverse. By\n      default, that bound is set at 10 &quot;meaningful&quot; nodes,\n      essentially...\n    </blockquote>")))
 (idp9737504
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Note that, unlike the comparators used with maps and sets,\n      hashables don't show up in the type of a\n      <code>Hashtbl.t</code>. That's because hash tables don't\n      have operations that operate on multiple hash tables that depend\n      on those tables having the same hash function, in the way that\n      <code>Map.symmetric_diff</code> and\n      <code>Set.union</code> depend on their arguments using the\n      same comparison function.\n    </blockquote>")))
 (idp9736336
  ((file maps-and-hash-tables.html)
   (html "<blockquote>\n      Or, equivalently:\n    </blockquote>")))
 (idp9734288
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      There is also a polymorphic <code>hashable</code> value,\n      corresponding to the polymorphic hash function provided by the\n      OCaml runtime, for cases where you don't have a hash function for\n      your specific type.\n    </blockquote>")))
 (idp9730144
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      The <code>hashable</code> value is included as part of the\n      <code>Hashable.S</code> interface, which is satisfied by\n      most types in Core. The <code>Hashable.S</code> interface\n      also includes a <code>Table</code> sub-module which provides\n      more convenient creation functions.\n    </blockquote>")))
 (idp9728352
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      When creating a hash table, we need to provide a value of type\n      <span><em>hashable</em></span> which includes among other things\n      the function for hashing the key type. This is analogous to the\n      comparator used for creating maps.\n    </blockquote>")))
 (idp9727264
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      The logarithmic behavior of Core's hash tables in the presence of\n      hash collisions also helps protect against some denial-of-service\n      attacks. One well-known type of attack is to send queries to a\n      service with carefully chosen keys to cause many collisions. This,\n      in combination with the the quadratic behavior of hash tables, can\n      cause the service to become unresponsive due to high CPU load.\n      Core's hash tables would be much less susceptible to such an\n      attack, because the amount of degradation would be far less.\n    </blockquote>")))
 (idp9726336
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Another hidden cost of hash tables has to do with the hash\n      function you use. If you end up with a pathologically bad hash\n      function that hashes all of your data to the same number, then all\n      of your insertions will hash to the same underlying bucket,\n      meaning you no longer get constant-time access at all. Core's hash\n      table implementation uses binary trees for the hash-buckets, so\n      this case only leads to logarithmic time, rather than quadratic\n      for a traditional hash table.\n    </blockquote>")))
 (idp9724912
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      The statement that hash tables provide constant-time access hides\n      some complexities. First of all, any hash table implementation,\n      OCaml's included, needs to resize the table when it gets too full.\n      A resize requires allocating a new backing array for the hash\n      table and copying over all entries, and so it is quite an\n      expensive operation. That means adding a new element to the table\n      is only <span><em>amortized</em></span> constant, which is to say,\n      it's constant on average over a long sequence of additions, but\n      some of the individual additions can be quite expensive.\n    </blockquote>")))
 (idp9722288
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Hash tables differ from maps in a few key ways. First, hash tables\n      are mutable, meaning that adding a key/value pair to a hash table\n      modifies the table, rather than creating a new table with the\n      binding added. Second, hash tables generally have better\n      time-complexity than maps, providing constant time lookup and\n      modifications as opposed to logarithmic for maps. And finally,\n      just as maps depend on having a comparison function for creating\n      the ordered binary tree that underlies a map, hash tables depend\n      on having a <span><em>hash function</em></span>,\n      <span><em>i.e.</em></span>, a function for converting a key to an\n      integer.\n    </blockquote>")))
 (idp9720128
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Hash tables are the imperative cousin of maps. We walked over a\n      basic hash table implementation in\n      <a href=\"imperative-programming-1.html\">Chapter\194\1608, <i>Imperative Programming</i></a>, so in this\n      section we'll mostly discuss the pragmatics of Core's\n      <code>Hashtbl</code> module. We'll cover this material more\n      briefly than we did with maps, because many of the concepts are\n      shared.\n    </blockquote>")))
 (idp9718272
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        That said, for reasons we discussed earlier, polymorphic compare\n        should be used sparingly.\n      </blockquote>")))
 (idp9716352
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        You can also satisfy the <code>Comparable.S</code>\n        interface using polymorphic compare.\n      </blockquote>")))
 (idp9714976
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        If you want your comparison function to behave in a specific\n        way, you should still write your own comparison function by\n        hand; but if all you want is a total order suitable for creating\n        maps and sets with, then <code>comparelib</code> is a good\n        way to go.\n      </blockquote>")))
 (idp9712192
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The comparison function created by <code>comparelib</code>\n        for a given type will call out to the comparison functions for\n        its component types. As a result, the <code>foo</code>\n        field will be compared using <code>Int.Set.compare</code>.\n        This is different, and saner, than the structural comparison\n        done by polymorphic compare.\n      </blockquote>")))
 (idp9710048
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        In the above, we wrote the comparison function by hand, but this\n        isn't strictly necessary. Core ships with a syntax extension\n        called <code>comparelib</code> which will create a\n        comparison function from a type definition. Using it, we can\n        rewrite the above example as follows.\n      </blockquote>")))
 (idp9708096
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        We don't include the full response from the top-level because it\n        is quite lengthy, but <code>Foo_and_bar</code> does\n        satisfy <code>Comparable.S</code>.\n      </blockquote>")))
 (idp9706128
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The following example shows how this all fits together,\n        following the same basic pattern for using functors described in\n        <a href=\"functors.html#extending-modules\">the section called \226\128\156Extending modules\226\128\157</a>.\n      </blockquote>")))
 (idp9702640
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        In other words, it expects a type with a comparison function as\n        well as functions for converting to and from\n        <span><em>s-expressions</em></span>. S-expressions are a\n        serialization format used commonly in Core, and are required\n        here to enable better error messages. We'll discuss\n        s-expressions more in\n        <a href=\"data-serialization-with-s-expressions.html\">Chapter\194\16017, <i>Data Serialization with S-Expressions</i></a>,\n        but in the meantime, we can just use the\n        <code>with sexp</code> declaration that comes from the\n        <code>sexplib</code> syntax extension to create\n        s-expression converters for us.\n      </blockquote>")))
 (idp9699888
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The module <code>Comparable</code> contains a number of\n        functors to help you do just this. The simplest one of these is\n        <code>Comparable.Make</code>, which takes as an input any\n        module that satisfies the following interface:\n      </blockquote>")))
 (idp9698512
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n<code>Comparable.S</code> is satisfied by most of the\n        types in Core, but the question arises of how to satisfy the\n        comparable interface for a new type that you design. Certainly\n        implementing all of the required functionality from scratch\n        would be an absurd amount of work.\n      </blockquote>")))
 (idp9695120
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Core's <code>Comparable.S</code> interface includes a lot\n        of useful functionality, including support for working with maps\n        and sets. In particular, <code>Comparable.S</code>\n        requires the presence of the <code>Map</code> and\n        <code>Set</code> sub-modules as well as a comparator.\n      </blockquote>")))
 (idp9692512
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        For this reason, it's preferable to avoid polymorphic compare\n        for serious applications.\n      </blockquote>")))
 (idp9691632
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        This can cause real and quite subtle bugs. If, for example, you\n        use a map whose keys contain sets, then the map built with the\n        polymorphic comparator will behave incorrectly, separating out\n        keys that should be aggregated together. Even worse, it will\n        work sometimes and fail others, since if the sets are built in a\n        consistent order, then they will work as expected, but once the\n        order changes, the behavior will change.\n      </blockquote>")))
 (idp9689664
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        We can however use the function <code>Set.to_tree</code>\n        to expose the underlying tree without the attached comparator.\n      </blockquote>")))
 (idp9687584
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Let's see what happens if we use polymorphic compare to test for\n        equality by way of the <code>=</code> operator. Comparing\n        the maps directly will fail at runtime because the comparators\n        stored within the sets contain function values.\n      </blockquote>")))
 (idp9686944
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        But because the elements were added in different orders, the\n        layout of the trees underlying the sets will be different. As\n        such, a structural comparison function will conclude that\n        they're different.\n      </blockquote>")))
 (idp9684976
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Logically, these two sets should be equal, and that's the result\n        that you get if you call <code>Set.equal</code> on them.\n      </blockquote>")))
 (idp9683680
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        But sometimes, a structural comparison is not what you want.\n        Sets are a great example of this. Consider the following two\n        sets.\n      </blockquote>")))
 (idp9681408
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        This is convenient because it provides a comparison function\n        that works for most OCaml values, and largely behaves as you\n        would expect. For example, on <code>int</code>s and\n        <code>float</code>s it acts as you would expect a numeric\n        comparison function to act. For simple containers like strings\n        and lists and arrays it operates as a lexicographic comparison.\n        And except for closures and values from outside of the OCaml\n        heap, it works on almost every OCaml type.\n      </blockquote>")))
 (idp9680240
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        To understand what's wrong with polymorphic compare, you need to\n        understand a bit about how it works. Polymorphic compare is\n        <span><em>structural</em></span>, in that it operates directly on\n        the runtime-representation of OCaml values, walking the\n        structure of the values in question without regard for their\n        type.\n      </blockquote>")))
 (idp9679536
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Polymorphic compare is highly convenient, but it has serious\n        downsides as well, and should be used with care. In particular,\n        polymorphic compare has a fixed algorithm for comparing values\n        of any type, and that algorithm can sometimes yield surprising\n        results.\n      </blockquote>")))
 (idp9678112
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        In addition to the operators you would expect to have for maps,\n        sets support the traditional set operations, including union,\n        intersection and set difference. And, as with maps, we can\n        create sets based on type-specific comparators or on the\n        polymorphic comparator.\n      </blockquote>")))
 (idp9675744
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Sometimes, instead of keeping track of a set of key/value pairs,\n        you just want a data-type for keeping track of a set of keys.\n        You could build this on top of a map by representing a set of\n        values by a map whose data type is <code>unit</code>. But\n        a more idiomatic (and efficient) solution is to use Core's set\n        type, which is similar in design and spirit to the map type,\n        while having an API better tuned to working with sets, and a\n        lower memory footprint. Here's a simple example:\n      </blockquote>")))
 (idp9673072
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        If you feel like hanging your OCaml interpreter, you can verify\n        what happens with recursive values and structural equality for\n        yourself:\n      </blockquote>")))
 (idp9667584
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        It's quite easy to mix up the use of <code>=</code> and\n        <code>==</code>, so Core disables the\n        <code>==</code> operator and provides the more explicit\n        <code>phys_equal</code> function instead. You'll see a\n        type error if you use <code>==</code> anywhere in code\n        that opens <code>Core.Std</code>.\n      </blockquote>")))
 (idp9665328
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The <code>=</code> structural equality operator\n        recursively inspects each field in the two values and tests them\n        individually for equality. Crucially, if your data structure is\n        cyclical (that is, a value recursively points back to another\n        field within the same structure), the <code>=</code>\n        operator will never terminate, and your program will hang! You\n        therefore must use the physical equality operator or write a\n        custom comparison function when comparing recursive values.\n      </blockquote>")))
 (idp9664000
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The physical equality test will match if two data structures\n        have precisely the same pointer in memory. Two data structures\n        that have identical contents but are constructed separately will\n        not match using <code>==</code>.\n      </blockquote>")))
 (idp9660464
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        If you come from a C/C++ background, you'll probably reflexively\n        use <code>==</code> to test two values for equality. In\n        OCaml, the <code>==</code> operator tests for\n        <span><em>physical</em></span> equality while the\n        <code>=</code> operator tests for\n        <span><em>structural</em></span> equality.\n      </blockquote>")))
 (idp9657088
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        This is rejected for good reason: there's no guarantee that the\n        comparator associated with a given type will order things in the\n        same way that polymorphic compare does.\n      </blockquote>")))
 (idp9655712
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Note that maps based on the polymorphic comparator are not\n        equivalent to those based on the type-specific comparators from\n        the point of view of the type system. Thus, the compiler rejects\n        the following:\n      </blockquote>")))
 (idp9654544
  ((file maps-and-hash-tables.html)
   (html "<blockquote>\n        Or, equivalently:\n      </blockquote>")))
 (idp9651728
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        We don't need to generate specialized comparators for every type\n        we want to build a map on. We can instead use a comparator based\n        on OCaml's built-in polymorphic comparison function, which was\n        discussed in <a href=\"lists-and-patterns.html\">Chapter\194\1603, <i>Lists and Patterns</i></a>.\n        This comparator is found in the\n        <code>Comparator.Poly</code> module, allowing us to write:\n      </blockquote>")))
 (idp9648304
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The algorithm of <code>Map.Tree.find</code> depends on the\n        fact that it's using the same comparator when looking a value up\n        as you were when you stored it. That's the invariant that the\n        phantom type is there to enforce. As you can see below, using\n        the wrong comparator will lead to a type error.\n      </blockquote>")))
 (idp9646992
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Since the comparator isn't included in the tree, we need to\n        provide the comparator explicitly when we, say, search for a\n        key, as shown below.\n      </blockquote>")))
 (idp9645072
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Even though a <code>Map.Tree.t</code> doesn't physically\n        include a comparator, it does include the comparator in its\n        type. This is what is known as a <span><em>phantom type\n        parameter</em></span>, because it reflects something about the\n        logic of the value in question, even though it doesn't\n        correspond to any values directly represented in the underlying\n        physical structure of the value.\n      </blockquote>")))
 (idp9642816
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        As we've discussed, maps carry within them the comparator that\n        they were created with. Sometimes, often for space efficiency\n        reasons, you want a version of the map data structure that\n        doesn't include the comparator. You can get such a\n        representation with <code>Map.to_tree</code>, which\n        returns just the tree that the map is built out of, and not\n        including the comparator.\n      </blockquote>")))
 (idp9639632
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        And accordingly, if we try to use\n        <code>Map.symmetric_diff</code> on these two maps, we'll\n        get a compile-timer error.\n      </blockquote>")))
 (idp9637648
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n<code>Map.min_elt</code> returns the key and value for the\n        smallest key in the map, which lets us see that these two maps\n        do indeed use different comparison functions.\n      </blockquote>")))
 (idp9634288
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        As you can see below, both <code>Reverse.comparator</code>\n        and <code>String.comparator</code> can be used to create\n        maps with a key type of <code>string</code>.\n      </blockquote>")))
 (idp9632032
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        We can create a new comparator using the\n        <code>Comparator.Make</code> functor, which takes as its\n        input a module containing the type of the object to be compared,\n        sexp-converter functions, and a comparison function. The sexp\n        converters are included in the comparator to make it possible\n        for users of the comparator to generate better error messages.\n        Here's an example.\n      </blockquote>")))
 (idp9630768
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        This constraint is important because the algorithm that\n        <code>Map.symmetric_diff</code> uses depends on the fact\n        that both maps have the same comparator.\n      </blockquote>")))
 (idp9628688
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The type of <code>Map.symmetric_diff</code>, shown below,\n        requires that the two maps it compares have the same comparator\n        type. Each comparator has a fresh abstract type, so the type of\n        a comparator identifies the comparator uniquely.\n      </blockquote>")))
 (idp9626544
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        Including the comparator in the type is important because\n        operations that work on multiple maps at the same time often\n        require that the maps share their comparison function. Consider,\n        for example, <code>Map.symmetric_diff</code>, which\n        computes a summary of the differences between two maps.\n      </blockquote>")))
 (idp9623840
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The type <code>Map.t</code> has three type parameters: one\n        for the key, one for the value, and one to identify the\n        comparator. Indeed, the type <code>'a Int.Map.t</code> is\n        just a type alias for\n        <code>(int,'a,Int.comparator) Map.t</code>\n</blockquote>")))
 (idp9622496
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The comparator is only required for operations that create maps\n        from scratch. Operations that update an existing map simply\n        inherit the comparator of the map they start with.\n      </blockquote>")))
 (idp9621232
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The above uses <code>Map.of_alist_exn</code> which creates\n        a map from an association list, throwing an exception if there\n        are duplicate keys in the list.\n      </blockquote>")))
 (idp9617312
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n        The specialized <code>Map</code> sub-module is convenient,\n        but it's not the only way of creating a\n        <code>Map.t</code>. The information required to compare\n        values of a given type is wrapped up in a value called a\n        <span><em>comparator</em></span>, that can be used to create maps\n        using the <code>Map</code> module directly.\n      </blockquote>")))
 (idp9611168
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      But in order to get a map in the first place, you need to get your\n      hands on the comparison function somehow. For this reason, modules\n      like <code>String</code> contain a <code>Map</code>\n      sub-module that have values like\n      <code>String.Map.empty</code> and\n      <code>String.Map.of_alist</code> that are specialized to\n      strings, and thus have access to a string comparison function.\n      Such a <code>Map</code> sub-module is included in every\n      module that satisfies the <code>Comparable.S</code>\n      interface from Core.\n    </blockquote>")))
 (idp9609040
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      To deal with this, a map, once created, stores the necessary\n      comparison function within the data structure. Thus, operations\n      like <code>Map.find</code> or <code>Map.add</code>\n      that access the contents of a map or create a new map from an\n      existing one, do so by using the comparison function embedded\n      within the map.\n    </blockquote>")))
 (idp9607008
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Note that in some places the above code refers to\n      <code>String.Map.t</code>, and in others\n      <code>Map.t</code>. This has to do with the fact that maps\n      are implemented as ordered binary trees, and as such, need a way\n      of comparing keys.\n    </blockquote>")))
 (idp9605840
  ((file maps-and-hash-tables.html)
   (html "<blockquote>\n      Here's the implementation.\n    </blockquote>")))
 (idp9603072
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      The intended behavior here is straightforward.\n      <code>Counter.empty</code> represents an empty collection of\n      frequency counts; <code>touch</code> increments the\n      frequency count of the specified string by 1; and\n      <code>to_list</code> returns the list of non-zero\n      frequencies.\n    </blockquote>")))
 (idp9600352
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n      Let's consider an example of how one might use a map in practice.\n      In <a href=\"files-modules-and-programs.html\">Chapter\194\1604, <i>Files, Modules and Programs</i></a>, we\n      showed a module <code>Counter</code> for keeping frequency\n      counts on a set of strings. Here's the interface.\n    </blockquote>")))
 (idp9597584
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n    In this chapter, we'll talk about two more efficient alternatives to\n    association lists: <span><em>maps</em></span> and <span><em>hash\n    tables</em></span>. A map is an immutable tree-based data structure\n    where most operations take time logarithmic in the size of the map,\n    whereas a hash table is a mutable data structure where most\n    operations have constant time complexity. We'll describe both of\n    these data structures in detail, and provide some advice as to how\n    to choose between them.\n  </blockquote>")))
 (idp9596976
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n    Association lists are simple and easy to use, but their performance\n    is not ideal, since almost every non-trivial operation on an\n    association list requires a linear-time scan of the list.\n  </blockquote>")))
 (idp9595056
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n    We can use functions from the <code>List.Assoc</code> module\n    to manipulate such an association list.\n  </blockquote>")))
 (idp9593168
  ((file maps-and-hash-tables.html)
   (html
    "<blockquote>\n    Lots of programming problems require dealing with data organized as\n    key/value pairs. Maybe the simplest way of representing such data in\n    OCaml is an <span><em>association list</em></span>, which is simply a\n    list of pairs of keys and values. For example, you could represent a\n    mapping between the 10 digits and their English names as follows.\n  </blockquote>")))
 (idp7635504
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      As a side note, the above implementation of\n      <code>count_some</code> is longer than necessary, and even\n      worse is not tail recursive. In real life, you would probably just\n      use the <code>List.count</code> function from\n      <code>Core</code>:\n    </blockquote>")))
 (idp7634304
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The takeaway from all of this is that, while\n      <code>when</code> clauses can be useful, one should prefer\n      patterns wherever they are sufficient.\n    </blockquote>")))
 (idp118928
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      This is a little less clear, however, than the direct pattern\n      matching solution, where the meaning of each pattern is clearer on\n      its own.\n    </blockquote>")))
 (idp117008
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Probably a better approach is to simply drop the second\n      <code>when</code> clause.\n    </blockquote>")))
 (idp115056
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      If we add another redundant case without a <code>when</code>\n      clause, the compiler will stop complaining about exhaustiveness,\n      and won't produce a warning about the redundancy.\n    </blockquote>")))
 (idp113856
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Despite the warning, the function does work fine.\n    </blockquote>")))
 (idp111136
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Consider the following function which takes a list of optional\n      values, and returns the number of those values that are\n      <code>Some</code>. Because this implementation uses\n      <code>when</code> clauses, the compiler can't tell that the\n      code is exhaustive.\n    </blockquote>")))
 (idp7615568
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Note that <code>when</code> clauses have some downsides. As\n      we noted earlier, the static checks associated with pattern\n      matches rely on the fact that patterns are restricted in what they\n      can express. Once we add the ability to add an arbitrary condition\n      to a pattern, something will be lost. In particular, the ability\n      for the compiler to determine if a match is exhaustive, or if some\n      case is redundant, is compromised.\n    </blockquote>")))
 (idp7614240
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Sometimes, however, the type-ignoring nature of polymorphic\n      compare is a problem, particularly when you have your own notion\n      of equality and ordering that you want to impose. We'll discuss\n      this issue more, as well as some of the other downsides of\n      polymorphic compare, in\n      <a href=\"maps-and-hash-tables.html\">Chapter\194\16013, <i>Maps and Hash Tables</i></a>.\n    </blockquote>")))
 (idp7613568
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      For simple atomic types, polymorphic compare has the semantics you\n      would expect: for floating-point numbers and integer, polymorphic\n      compare corresponds to the expected numerical comparison\n      functions. For strings, it's a lexicographic comparison.\n    </blockquote>")))
 (idp7612976
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Similarly, it will fail on values that come from outside the OCaml\n      heap, like values from C-bindings. But it will work in a\n      reasonable way for other kinds of values.\n    </blockquote>")))
 (idp7611728
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Polymorphic compare does have some limitations. For example, it\n      will fail at runtime if it encounters a function value.\n    </blockquote>")))
 (idp7610400
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      You might wonder how you could build functions like these yourself\n      if OCaml didn't come with them built-in. It turns out that you\n      <span><em>can't</em></span> build these functions on your own.\n      OCaml's polymorphic comparison functions are actually built-in to\n      the runtime to a low level. These comparisons are polymorphic on\n      the basis of ignoring almost everything about the types of the\n      values that are being compared, paying attention only to the\n      structure of the values as they're laid out in memory.\n    </blockquote>")))
 (idp7605584
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      OCaml actually comes with a whole family of polymorphic comparison\n      operators, including the standard infix comparators,\n      <code>&lt;</code>, <code>&gt;=</code>,\n      <span><em>etc.</em></span>, as well as the function\n      <code>compare</code> that returns <code>-1</code>,\n      <code>0</code> or <code>1</code> to flag whether the\n      first operand is smaller than, equal to, or greater than the\n      second, respectively.\n    </blockquote>")))
 (idp7604368
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Indeed, if we look at the type of the equality operator, we'll see\n      that it is polymorphic:\n    </blockquote>")))
 (idp7601888
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      In the <code>destutter</code> example above, we made use of\n      the fact that OCaml lets us test equality between values of any\n      type, using the <code>=</code> operator. Thus, we can write:\n    </blockquote>")))
 (idp7598592
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      We can make the code slightly terser now by using a\n      <code>when</code> clause. A <code>when</code> clause\n      allows one to add an extra precondition on a pattern in the form\n      of an arbitrary OCaml expression. In this case, we can use it to\n      include the check on whether the first two elements are equal.\n    </blockquote>")))
 (idp7597376
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      We can further collapse this by combining the first two cases into\n      one, using an or-pattern.\n    </blockquote>")))
 (idp7593088
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      First, let's consider efficiency. One problem with the\n      <code>destutter</code> code above is that it in some cases\n      recreates on the right-hand side of the arrow a value that already\n      existed on the left hand side. Thus, the pattern\n      <code>[hd] -&gt; [hd]</code> actually allocates a new list\n      element, which really, it should be able to just return the list\n      being matched. We can reduce allocation here by using an\n      <code>as</code> pattern, which allows us to declare a name\n      for the thing matched by a pattern or sub-pattern. While we're at\n      it, we'll use the <code>function</code> keyword to eliminate\n      the need for an explicit match.\n    </blockquote>")))
 (idp7592592
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      We'll consider some ways of making this code more concise and more\n      efficient.\n    </blockquote>")))
 (idp7590112
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Now that we know more about how lists and patterns work, let's\n      consider how we can improve on an example from\n      <a href=\"a-guided-tour.html#recursive-list-functions\">the section called \226\128\156Recursive list functions\226\128\157</a>: the function\n      <code>destutter</code>, which removes sequential duplicates\n      from a list. Here's the implementation that was described earlier.\n    </blockquote>")))
 (idp7588256
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Tail recursion is important for more than just lists. Ordinary\n      (non-tail) recursive calls are reasonable when dealing with\n      data-structures like binary trees where the depth of the tree is\n      logarithmic in the size of your data. But when dealing with\n      situations where the depth of the sequence of nested calls is on\n      the order of the size of your data, tail recursion is usually the\n      right approach.\n    </blockquote>")))
 (idp7586496
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      So when is a call a tail call? Let's think about the situation of\n      one function (the <span><em>caller</em></span>) invokes another\n      (the <span><em>callee</em></span>). The invocation is considered a\n      tail call when the caller doesn't do anything with the value\n      returned by the callee except to return it. The tail-call\n      optimization makes sense because, when a caller makes a tail call,\n      the caller's stack frame need never be used again, and so you\n      don't need to keep it around. Thus, instead of allocating a new\n      stack frame for the callee, the compiler is free to reuse the\n      caller's stack frame.\n    </blockquote>")))
 (idp7581968
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The advantage of this approach is that the recursive call in\n      <code>length_plus_n</code> is a <span><em>tail\n      call</em></span>. We'll explain more precisely what it means to be\n      a tail call shortly, but the reason it's important is that tail\n      calls don't require the allocation of a new stack frame, due to\n      what is called the <span><em>tail-call optimization</em></span>. A\n      recursive function is said to be <span><em>tail\n      recursive</em></span> if all of its recursive calls are tail calls.\n      <code>length_plus_n</code> is indeed tail recursive, and as\n      a result, <code>length</code> can take a long list as input\n      without blowing the stack.\n    </blockquote>")))
 (idp7578656
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      This implementation depends on a helper function,\n      <code>length_plus_n</code>, that computes the length of a\n      given list plus a given <code>n</code>. In practice,\n      <code>n</code> acts as an accumulator in which the answer is\n      built up, step by step. As a result, we can do the additions along\n      the way rather than doing them as we unwind the nested sequence of\n      function calls, as we did in our first implementation of\n      <code>length</code>.\n    </blockquote>")))
 (idp7576720
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      And that's the problem with our call to <code>length</code>:\n      it tried to allocate ten million stack frames, which exhausted the\n      available stack space. Happily, there's a way around this problem.\n      Consider the following alternative implementation.\n    </blockquote>")))
 (idp7575328
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      To understand what went wrong, you need to learn a bit more about\n      how function calls work. Typically, a function call needs some\n      space to keep track of information associated with the call, such\n      as the arguments passed to the function, or the location of the\n      code that needs to start executing when the function call is\n      complete. To allow for nested function calls, this information is\n      typically organized in a stack, where a new <span><em>stack\n      frame</em></span> is allocated for each nested function call, and\n      then deallocated when the function call is complete.\n    </blockquote>")))
 (idp7569584
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      This looks simple enough, but you'll discover that this\n      implementation runs into problems on very large lists. Here are\n      some examples, using another useful function from the\n      <code>List</code> module, <code>List.init</code>, to\n      create the lists. <code>List.init</code> takes an integer\n      <code>n</code> and a function <code>f</code> and\n      creates a list of length <code>n</code> where the data for\n      each element is created by calling <code>f</code> on the\n      index of that element.\n    </blockquote>")))
 (idp7568224
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The only way to compute the length of an OCaml list is to walk the\n      list from beginning to end. As a result, computing the length of a\n      list takes time linear in the size of the list. Here's a simple\n      function for doing so.\n    </blockquote>")))
 (idp7565152
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Note that <code>^/</code> is an infix operator provided\n          by Core for adding a new element to a string representing a\n          file path. It is equivalent to Core's\n          <code>Filename.concat</code>.\n        </blockquote>")))
 (idp7562096
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          The above combination of <code>List.map</code> and\n          <code>List.concat</code> is common enough that there is\n          a function <code>List.concat_map</code> that combines\n          these into one, more efficient operation.\n        </blockquote>")))
 (idp7559680
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Here's an example of using <code>List.concat</code>\n          along with <code>List.map</code> to compute a recursive\n          listing of a directory tree.\n        </blockquote>")))
 (idp7557968
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          In addition, there is <code>List.concat</code>, for\n          concatenating a list of lists.\n        </blockquote>")))
 (idp7555632
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          There's also <code>@</code>, an operator equivalent of\n          <code>List.append</code>.\n        </blockquote>")))
 (idp7553728
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Another very common operation on lists is concatenation. The\n          list module actually comes with a few different ways of doing\n          this. First, there's <code>List.append</code>, for\n          concatenating a pair of lists.\n        </blockquote>")))
 (idp7551632
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Note the use of a nested or-pattern in\n          <code>is_ocaml_source</code>.\n        </blockquote>")))
 (idp7547216
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Another function that is similar to <code>filter</code>\n          is <code>partition_tf</code>, which takes a list and\n          partitions it into a pair of lists based on a boolean\n          condition. <code>tf</code> is a mnemonic to remind the\n          reader that <code>true</code> elements go to the first\n          bucket and <code>false</code> ones go to the second.\n          Thus, one could write:\n        </blockquote>")))
 (idp7544384
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          The above is also an example of an or-patterns, which allows\n          you to have multiple sub-patterns within a larger pattern. In\n          this case, <code>None | Some (&quot;&quot;,_)</code> is\n          an or-pattern. As we'll see later, or-patterns can be nested\n          anywhere within larger patterns.\n        </blockquote>")))
 (idp7540992
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Here's an example. The following expression computes the list\n          of file extensions in the current directory, piping the\n          results through <code>List.dedup</code> to remove\n          duplicates. Note that this example also uses some functions\n          from other modules, including <code>Sys.ls_dir</code> to\n          get a directory listing, and <code>String.rsplit2</code>\n          to split a string on the rightmost appearance of a given\n          character.\n        </blockquote>")))
 (idp7537904
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Sometimes, you want to both transform and filter as part of\n          the same computation. <code>List.filter_map</code>\n          allows you to do just that. The function passed to\n          <code>List.filter_map</code> returns an optional value,\n          and <code>List.filter_map</code> drops all elements for\n          which <code>None</code> is returned.\n        </blockquote>")))
 (idp7536320
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Note that the <code>mod</code> used above is an infix\n          operator, as described in\n          <a href=\"variables-and-functions.html\">Chapter\194\1602, <i>Variables and Functions</i></a>.\n        </blockquote>")))
 (idp7534464
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Very often when processing lists, one wants to restrict\n          attention to just a subset of values. The\n          <code>List.filter</code> function does just that.\n        </blockquote>")))
 (idp7531248
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Now we can see reduce in action.\n        </blockquote>")))
 (idp7529616
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n<code>reduce</code> returns an optional result,\n          returning <code>None</code> when the input list is\n          empty.\n        </blockquote>")))
 (idp7528528
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n          Here's the type signature:\n        </blockquote>")))
 (idp7525744
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n<code>List.fold</code>, which we described earlier, is a\n          very general and powerful function. Sometimes, however, you\n          want something more that's simpler and thereby easier to use.\n          One such function is <code>List.reduce</code>, which is\n          essentially a specialized version of\n          <code>List.fold</code> that doesn't require an explicit\n          starting value, and whose accumulator has to consume and\n          produce values of the same type as the elements of the list it\n          applies to.\n        </blockquote>")))
 (idp7523088
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        The example we worked through above only touched on three of the\n        function in <code>List</code>. We won't cover the entire\n        interface, but there are a few more functions that are useful\n        enough to mention here.\n      </blockquote>")))
 (idp7521008
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Now we can bring this all together in a single function that\n      renders the table.\n    </blockquote>")))
 (idp7519088
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      We can render a row of data by merging together the padded\n      strings. Again, we'll use <code>List.map2_exn</code> for\n      combining the list of data in the row with the list of widths.\n    </blockquote>")))
 (idp7517152
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Now we need code for rendering a row with data in it. We'll first\n      write a function <code>pad</code> for padding out a string\n      to a specified length plus one blank space on either side.\n    </blockquote>")))
 (idp7516400
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      allocates one string of size 7, as well as a list of length 7. At\n      these small sizes, the differences don't amount to much, but for\n      assembling of large strings, it can be a serious performance\n      issue.\n    </blockquote>")))
 (idp7515200
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      will allocate strings of length 2, 3, 4, 5, 6 and 7, whereas this\n      code:\n    </blockquote>")))
 (idp7512000
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      In the above, we're using two different ways of concatenating\n      strings, <code>String.concat</code>, which operates on lists\n      of strings, and <code>^</code>, which is a pairwise\n      operator. You should avoid <code>^</code> for joining long\n      numbers of strings, since, it allocates a new string every time it\n      runs. Thus, the following code:\n    </blockquote>")))
 (idp7509568
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Note that we make the line of dashes two larger than the provided\n      width to provide some whitespace around each entry in the table.\n    </blockquote>")))
 (idp7505984
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Now that we know how to compute column widths, we can write the\n      code to generate the line that separates the header from the rest\n      of the text table. We'll do this in part by mapping\n      <code>String.make</code> over the lengths of the columns to\n      generate a string of dashes of the appropriate length. We'll then\n      join these sequences of dashes together using\n      <code>String.concat</code>, which concatenates a list of\n      strings with an optional separator string, and\n      <code>^</code>, which is a pairwise string concatenation\n      function, to add the delimiters on the outside.\n    </blockquote>")))
 (idp7502832
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Using <code>List.map</code> we define the function\n      <code>lengths</code> which converts a list of strings to a\n      list of integer lengths. <code>List.fold</code> is then used\n      to iterate over the rows, using <code>map2_exn</code> to\n      take the max of the accumulator with the lengths of the strings in\n      each row of the table, with the accumulator initialized to the\n      lengths of the header row.\n    </blockquote>")))
 (idp7501632
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Let's bring our three functions together to compute the maximum\n      column widths.\n    </blockquote>")))
 (idp7498976
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      This example is particularly simple because the accumulator and\n      the list elements are of the same type. But\n      <code>fold</code> is not limited to such cases. We can for\n      example use <code>fold</code> to reverse a list, in which\n      case the accumulator is itself a list.\n    </blockquote>")))
 (idp7497184
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      We can use <code>List.fold</code> for something as simple as\n      summing up a list:\n    </blockquote>")))
 (idp7493744
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n<code>List.fold</code> is the most complicated of the three,\n      taking three arguments: a list to process, an initial accumulator\n      value, and a function for updating the accumulator with the\n      information from a list element. <code>List.fold</code>\n      walks over the list from left to right, updating the accumulator\n      at each step and returning the final value of the accumulator when\n      it's done. You can see some of this by looking at the\n      type-signature for <code>fold</code>.\n    </blockquote>")))
 (idp7491920
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The <code>_exn</code> is there because the function throws\n      an exception if the lists are of mismatched length.\n    </blockquote>")))
 (idp7489472
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n<code>List.map2_exn</code> is similar to\n      <code>List.map</code>, except that it takes two lists and a\n      function for combining them. Thus, we might write:\n    </blockquote>")))
 (idp7487552
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n<code>List.map</code> is the simplest to explain. It takes a\n      list and a function for transforming elements of that list, and\n      returns a new list with the transformed elements. Thus, we can\n      write:\n    </blockquote>")))
 (idp7484224
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The first step is to write a function to compute the maximum width\n      of each column of data. We can do this by converting the header\n      and each row into a list of integer lengths, and then taking the\n      element-wise max of those lists of lengths. Writing the code for\n      all of this directly would be a bit of a chore, but we can do it\n      quite concisely by making use of three functions from the\n      <code>List</code> module: <code>map</code>,\n      <code>map2_exn</code>, and <code>fold</code>.\n    </blockquote>")))
 (idp7482256
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Let's work through a concrete example to see this in action. We'll\n      write a function <code>render_table</code> that, given a\n      list of column headers and a list of rows, prints them out in a\n      well formatted text table, as follows.\n    </blockquote>")))
 (idp7480912
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      We've so far written a fair amount of list-munging code using\n      pattern matching and recursive functions. But in real life, you're\n      usually better off using the <code>List</code> module, which\n      is full of reusable functions that abstract out common patterns\n      for computing with lists.\n    </blockquote>")))
 (idp7477776
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        For simple examples like this, exhaustiveness checks are useful\n        enough. But as we'll see in\n        <a href=\"variants.html\">Chapter\194\1606, <i>Variants</i></a>, as you get to more\n        complicated examples, especially those involving user-defined\n        types, exhaustiveness checks become a lot more valuable. In\n        addition to catching outright errors, they act as a sort of\n        refactoring tool, guiding you to the locations where you need to\n        adapt your code to deal with changing types.\n      </blockquote>")))
 (idp7475712
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        OCaml also checks match statements for exhaustiveness. Consider\n        what happens if we modify <code>drop_zero</code> by\n        deleting the handler for one of the cases. As you can see, the\n        compiler will produce a warning that we've missed a case, along\n        with an example of an unmatched pattern.\n      </blockquote>")))
 (idp7474144
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        The error-detecting capabilities of match statements are if\n        anything more important than their performance. We've already\n        seen one example of OCaml's ability to find problems in a\n        pattern match: in our broken implementation of\n        <code>drop_value</code>, OCaml warned us that the final\n        case was redundant. There are no algorithms for determining if a\n        predicate written in a general-purpose language is redundant,\n        but it can be solved reliably in the context of patterns.\n      </blockquote>")))
 (idp7472352
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        Generally, pattern matching is more efficient than the\n        alternatives you might code by hand. One notable exception is\n        matches over strings, which are in fact tested sequentially, so\n        matches containing a long sequence of strings can be\n        outperformed by a hash table. But most of the time, pattern\n        matching is a clear performance win.\n      </blockquote>")))
 (idp7470272
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        In this case, the <code>match</code>-based implementation\n        is more than three times faster than the one using\n        <code>if</code>. The difference comes because we need to\n        effectively do the same work multiple times, since each function\n        we call has to re-examine the first element of the list to\n        determine whether or not it's the empty cell. With a match\n        statement, this work happens exactly once per list element.\n      </blockquote>")))
 (idp7469104
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        Again, we can benchmark these to see the difference.\n      </blockquote>")))
 (idp7463856
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        Here's another less artificial example. We can rewrite the\n        <code>sum</code> function we described earlier in the\n        chapter using an <code>if</code> statement rather than a\n        match. We can then use the functions\n        <code>is_empty</code>, <code>hd_exn</code> and\n        <code>tl_exn</code> from the <code>List</code>\n        module to deconstruct the list, allowing us to implement the\n        entire function without pattern matching.\n      </blockquote>")))
 (idp7459968
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        If you benchmark these functions, you'll see that\n        <code>plus_one_if</code> is considerably slower than\n        <code>plus_one_match</code>, and the advantage gets larger\n        as the number of cases increases. Here, we'll benchmark these\n        functions using the <code>core_bench</code> library, which\n        can be installed by running\n        <code>opam install core_bench</code> from the\n        command-line.\n      </blockquote>")))
 (idp7458784
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        Note the use of <code>_</code> in the above match. This is\n        a wild-card pattern that matches any value, but without binding\n        a variable name to the value in question.\n      </blockquote>")))
 (idp7457440
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        As an example, consider the following rather silly functions for\n        incrementing an integer by one. The first is implemented with a\n        match statement, and the second with a sequence of if\n        statements.\n      </blockquote>")))
 (idp7456000
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n        Naively, you might think that it would be necessary to check\n        each case in a <code>match</code> in sequence to figure\n        out which one fires. If the cases of a match were guarded by\n        arbitrary code, that would be the case. But OCaml is often able\n        to generate machine code that jumps directly to the matched case\n        based on an efficiently chosen set of runtime checks.\n      </blockquote>")))
 (idp7454224
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      You can think of patterns as a specialized sub-language that can\n      express a limited (though still quite rich) set of conditions. The\n      fact that the pattern language is limited turns out to be a very\n      good thing, making it possible to build better support for\n      patterns in the compiler. In particular, both the efficiency of\n      match statements and the ability of the compiler to detect errors\n      in matches depend on the constrained nature of patterns.\n    </blockquote>")))
 (idp7452752
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The above example highlights an important fact about patterns,\n      which is that they can't be used to express arbitrary conditions.\n      Patterns can characterize the layout of a data-structure, and can\n      even include literals as in the <code>drop_zero</code>\n      example, but that's where they stop. A pattern can check if a list\n      has two elements, but it can't check if the first two elements are\n      equal to each other.\n    </blockquote>")))
 (idp7449824
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Note that if we wanted to drop a particular literal value (rather\n      than a value that was passed in), we could do this using something\n      like our original implementation of <code>drop_value</code>.\n    </blockquote>")))
 (idp7447872
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      A better way to write this code is not to use pattern matching for\n      determining whether the first element is equal to\n      <code>to_drop</code>, but to instead use an ordinary\n      if-statement.\n    </blockquote>")))
 (idp7443904
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The key observation is that the appearance of\n      <code>to_drop</code> in the second case doesn't imply a\n      check that the first element is equal to the value\n      <code>to_drop</code> passed in as an argument to\n      <code>drop_value</code>. Instead, it just causes a new\n      variable <code>to_drop</code> to be bound to whatever\n      happens to be in the first element of the list, shadowing the\n      earlier definition of <code>to_drop</code>. The third case\n      is unused because it is essentially the same pattern as we had in\n      the second case.\n    </blockquote>")))
 (idp7443520
  ((file lists-and-patterns.html)
   (html "<blockquote>\n      So, what's going on?\n    </blockquote>")))
 (idp7442224
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Moreover, the function clearly does the wrong thing, filtering out\n      all elements of the list rather than just those equal to the\n      provided value, as you can see below.\n    </blockquote>")))
 (idp7440736
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The fact that match statements can be used to bind new variables\n      can be a source of confusion. To see how, imagine we wanted to\n      write a function that filtered out from a list all elements equal\n      to a particular value. You might be tempted to write that code as\n      follows, but when you do, the compiler will immediately warn you\n      that something is wrong.\n    </blockquote>")))
 (idp7437952
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The match statement in <code>sum</code> is really doing two\n      things: first, it's acting as a case-analysis tool, breaking down\n      the possibilities into a pattern-indexed list of cases. Second, it\n      lets you name sub-structures within the data-structure being\n      matched. In this case, the variables <code>hd</code> and\n      <code>tl</code> are bound by the pattern that defines the\n      first case of the match statement. Variables that are bound in\n      this way can be used in the expression to the right of the arrow\n      for the pattern in question.\n    </blockquote>")))
 (idp7436240
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      This code follows the convention of using <code>hd</code> to\n      represent the first element (or head) of the list, and\n      <code>tl</code> to represent the remainder (or tail).\n    </blockquote>")))
 (idp7434960
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      We can read data out of a list using a match statement. Here's a\n      simple example of a recursive function that computes the sum of\n      all elements of a list.\n    </blockquote>")))
 (idp7431216
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      Each <code>::</code> essentially adds a new block to the\n      picture above. Such a block contains two things: a reference to\n      the data in that list element, and a reference to the remainder of\n      the list. This is why <code>::</code> can extend a list\n      without modifying it; extension allocates a new list element but\n      doesn't need to change any of the existing ones, as you can see:\n    </blockquote>")))
 (idp7427936
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      The <code>::</code> operator conveys something important\n      about the nature of lists, which is that they are implemented as\n      singly-linked lists. The following is a rough graphical\n      representation of how the list\n      <code>1 :: 2 :: 3 :: []</code> is laid out as a\n      data-structure. The final arrow (from the box containing\n      <code>3</code>) points to the empty list.\n    </blockquote>")))
 (idp7425312
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      As you can see, the <code>::</code> operator is\n      right-associative, which means that we can build up lists without\n      parentheses. The empty list <code>[]</code> is used to\n      terminate a list. Note that the empty list is polymorphic, meaning\n      it can be used with elements of any type.\n    </blockquote>")))
 (idp7423520
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      And they can also be generated using the equivalent\n      <code>::</code> notation.\n    </blockquote>")))
 (idp7422224
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n      An OCaml list is an immutable, finite sequence of elements of the\n      same type. As we've seen, OCaml lists can be generated using a\n      bracket-and-semicolon notation:\n    </blockquote>")))
 (idp7420160
  ((file lists-and-patterns.html)
   (html
    "<blockquote>\n    This chapter will focus on two common elements of programming in\n    OCaml: lists and pattern matching. Both of these were discussed in\n    <a href=\"a-guided-tour.html\">Chapter\194\1601, <i>A Guided Tour</i></a>, but we'll go into more\n    depth here, presenting the two topics together and using one to help\n    illustrate the other.\n  </blockquote>")))
 (idp12487680
  ((file installation.html)
   (html
    "<blockquote>\n          ODT is distributed as a set of plugins for the Eclipse IDE\n          environment from the\n          <a href=\"http://ocamldt.free.fr\" target=\"_top\">homepage</a>. You just\n          have to copy these plugins into your Eclipse distribution in\n          order to access the new OCaml facilities.\n        </blockquote>")))
 (idp12487008
  ((file installation.html)
   (html
    "<blockquote>\n          Eclipse is a popular IDE usually used for Java development.\n          The OCaml Development Tools (ODT) project provides equivalent\n          IDE features for editing and compiling OCaml code, such as\n          automatic compilation and name completion.\n        </blockquote>")))
 (idp12484544
  ((file installation.html)
   (html
    "<blockquote>\n          TODO: Vim users can use the built-in style, and\n          <a href=\"http://github.com/avsm/ocaml-annot\" target=\"_top\">ocaml-annot</a>\n          may also be useful.\n        </blockquote>")))
 (idp12481264
  ((file installation.html)
   (html
    "<blockquote>\n          Once this successfully loads in Emacs, you can run utop by\n          executing the command <code>utop</code> in Emacs. There\n          are more details instructions at the\n          <a href=\"https://github.com/diml/utop#integration-with-emacs\" target=\"_top\">utop\n          homepage</a>.\n        </blockquote>")))
 (idp12476320
  ((file installation.html)
   (html
    "<blockquote>\n          You also need to make the <code>utop.el</code> file\n          available to your Emacs installation. The OPAM version of\n          <code>utop</code> installs it into the\n          <code>~/.opam</code> hierarchy, for example in\n          <code>~/.opam/system/share/emacs/site-lisp/utop.el</code>.\n          You may need to replace <code>system</code> with your\n          current compiler switch, such as\n          <code>4.01.0dev+trunk</code>.\n        </blockquote>")))
 (idp12473360
  ((file installation.html)
   (html
    "<blockquote>\n          To use <code>utop</code> directly in Emacs, add the\n          following line to your <code>~/.emacs</code> file:\n        </blockquote>")))
 (idp12472192
  ((file installation.html)
   (html
    "<blockquote>\n          TODO: Emacs users have tuareg and\n          <a href=\"http://www.typerex.org/\" target=\"_top\">Typerex</a>.\n        </blockquote>")))
 (idp12469856
  ((file installation.html)
   (html
    "<blockquote>\n        The instructions for editor setup are still being compiled. If\n        you have a relevant tip or HOWTO, then we'd\n        <span><em>really</em></span> appreciate you leaving a note here\n        with a pointer or direct instructions.\n      </blockquote>")))
 (idp12465872
  ((file installation.html)
   (html
    "<blockquote>\n        When you run <code>utop</code> with these initialization\n        rules, it should start up with Core opened and ready to use. If\n        you don't open <code>Core.Std</code> by default, then you\n        must remember to open it before running any of the interactive\n        examples in the book.\n      </blockquote>")))
 (idp12463504
  ((file installation.html)
   (html
    "<blockquote>\n        If you only use Core libraries (and this will be the case for\n        beginners who are working their way through Real World OCaml as\n        their first taste of the language), then you can also open the\n        Core module by default. Just append this line to the\n        <code>.ocamlinit</code> file.\n      </blockquote>")))
 (idp12459664
  ((file installation.html)
   (html
    "<blockquote>\n        The <code>~/.ocamlinit</code> file in your home directory\n        initialises <code>utop</code> with common libraries and\n        syntax extensions so you don't need to type them in every time.\n        Now that you have Core installed, you should update it to load\n        it every time you start <code>utop</code>, by adding this\n        to it:\n      </blockquote>")))
 (idp12456592
  ((file installation.html)
   (html
    "<blockquote>\n        The <code>utop</code> tool provides a convenient\n        interactive toplevel, with full command history, command macros\n        and module name completion. When you first run\n        <code>utop</code>, you'll find yourself at an interactive\n        prompt with a bar at the bottom of the screen. The bottom bar\n        dynamically updates as you write text, and contains the possible\n        names of modules or variables that are valid at that point in\n        the phrase you are entering. You can press the\n        <code>&lt;tab&gt;</code> key to complete the phrase with\n        the first choice.\n      </blockquote>")))
 (idp12451808
  ((file installation.html)
   (html
    "<blockquote>\n      Remember from earlier that OPAM never installs files directly into\n      your system directories, and this applies to\n      <code>utop</code> too. You'll find the binary in\n      <code>~/.opam/4.01.0dev+trunk/bin</code>. However, typing in\n      <code>utop</code> from your shell should just work, due to\n      the <code>opam config env</code> step that configures your\n      shell. Don't forget to automate this as described earlier as it\n      makes life much easier when developing OCaml code!\n    </blockquote>")))
 (idp12450480
  ((file installation.html)
   (html
    "<blockquote>\n      The <code>utop</code> package is an interactive command-line\n      interface to OCaml that has tab-completion, persistent history and\n      integration with Emacs so that you can run it within your editing\n      environment.\n    </blockquote>")))
 (idp12448400
  ((file installation.html)
   (html
    "<blockquote>\n      There's one last tool you need before getting started on the\n      examples. The default <code>ocaml</code> command gives us an\n      interactive command-line to experiment with code without compiling\n      it. However, it's quite a spartan experience and so we use a more\n      modern alternative.\n    </blockquote>")))
 (idp12445600
  ((file installation.html)
   (html
    "<blockquote>\n<code>async</code> is the network programming library\n          that we use in Part II to communicate with other hosts. You\n          can skip this for the initial installation until you get to\n          Part II, if you prefer.\n        </blockquote>")))
 (idp12443920
  ((file installation.html)
   (html
    "<blockquote>\n<code>core_extended</code> contains a number of\n          experimental, but useful, extension libraries that are under\n          review for inclusion in Core. We use some of these in places,\n          but much less than Core itself.\n        </blockquote>")))
 (idp12442304
  ((file installation.html)
   (html
    "<blockquote>\n<code>core_bench</code> is a benchmarking library that\n          makes it easy to test the performance profile of functions via\n          a command-line interface.\n        </blockquote>")))
 (idp12440752
  ((file installation.html)
   (html
    "<blockquote>\n<code>core</code> is the main, well-supported Core\n          distribution from Jane Street.\n        </blockquote>")))
 (idp12439616
  ((file installation.html)
   (html
    "<blockquote>\n      This will take about five or ten minutes to build, and will\n      install a series of packages. OPAM figures out the dependencies\n      you need automatically, but the three packages that really matter\n      are:\n    </blockquote>")))
 (idp12438416
  ((file installation.html)
   (html
    "<blockquote>\n      Finally, we're ready to install the Core libraries. Run this:\n    </blockquote>")))
 (idp12436272
  ((file installation.html)
   (html
    "<blockquote>\n      The new compiler will be installed into\n      <code>~/.opam/4.01.0dev+trunk</code> and any libraries you\n      install for it will be tracked separately from your system\n      installation. You can have any number of compilers installed\n      simultaneously, but only one can be active at any time. Browse\n      through the available compilers by running\n      <code>opam switch list</code>.\n    </blockquote>")))
 (idp12434592
  ((file installation.html)
   (html
    "<blockquote>\n      This step will take around ten or fifteen minutes on a modern\n      machine, and will download and install the OCaml compiler within\n      the <code>~/.opam</code> directory). OPAM supports multiple\n      compiler installations, and you'll find this very useful if you\n      ever decide to hack on the internals of the compiler or want to\n      experiment with the latest release without sacrificing your\n      current installation. You only need to install this compiler once,\n      and future updates will be much faster as they only recompile\n      libraries within the compiler installation.\n    </blockquote>")))
 (idp12432288
  ((file installation.html)
   (html
    "<blockquote>\n      The most important package we need to install is Core, which is\n      the replacement standard library that all of the examples in this\n      book use. Before doing this, let's make sure you have exactly the\n      right compiler version you need. We've made some minor\n      modifications to the way the OCaml compiler displays type\n      signatures, and the next command will install a patched\n      <code>4.01.0</code> compiler with this functionality\n      enabled.\n    </blockquote>")))
 (idp12427968
  ((file installation.html)
   (html
    "<blockquote>\n      OPAM 1.0.0 places the login commands into your\n      <code>~/.profile</code> directory, which isn't always\n      executed if your shell is <code>bash</code>. This has been\n      fixed in subsequent versions, but for now you'll need to manually\n      copy the contents of <code>~/.profile</code> over to\n      <code>~/.bash_profile</code> via:\n    </blockquote>")))
 (idp12424624
  ((file installation.html)
   (html
    "<blockquote>\n      If you answered <code>yes</code> to the auto-complete\n      scripts question during <code>opam init</code>, this should\n      have all been set up for you. You can verify this worked by\n      listing the available packages:\n    </blockquote>")))
 (idp12420304
  ((file installation.html)
   (html
    "<blockquote>\n      This evaluates the results of running\n      <code>opam config env</code> in your current shell and sets\n      the variables so that subsequent commands will use them. This\n      <span><em>only</em></span> works with your current shell and it can\n      be only be automated for future shells by adding the line to your\n      login scripts. On Mac OS X or Debian, this is usually the\n      <code>~/.bash_profile</code> file if you're using the\n      default shell. If you've switched to another shell, it might be\n      <code>~/.zshrc</code> instead. OPAM isn't unusual in this\n      approach; the SSH <code>ssh-agent</code> also works\n      similarly, so if you're having any problems just hunt around in\n      your configuration scripts to see how that's being invoked.\n    </blockquote>")))
 (idp12419008
  ((file installation.html)
   (html
    "<blockquote>\n      If you choose not to follow the OPAM instructions to add itself to\n      your shell profile, you can still configure it on-the-fly in your\n      current shell with just one command.\n    </blockquote>")))
 (idp12416784
  ((file installation.html)
   (html
    "<blockquote>\n      When the <code>init</code> command finishes, you'll see some\n      instructions about environment variables. OPAM never installs\n      files into your system directories (which would require\n      administrator privileges). Instead, it puts them into your home\n      directory by default, and can output a set of shell commands which\n      configures your shell with the right <code>PATH</code>\n      variables so that packages will just work.\n    </blockquote>")))
 (idp12415504
  ((file installation.html)
   (html
    "<blockquote>\n      You only need to run this command once, and it will create the\n      <code>~/.opam</code> directory and sync with the latest\n      package list from the online OPAM database.\n    </blockquote>")))
 (idp12413056
  ((file installation.html)
   (html
    "<blockquote>\n      Let's begin by initialising the OPAM package database. This will\n      require an active Internet connection, and ask you a few\n      interactive questions at the end. It's safe to answer yes to these\n      unless you want to manually control the configuration steps\n      yourself as an advanced user.\n    </blockquote>")))
 (idp12409360
  ((file installation.html)
   (html
    "<blockquote>\n      The entire OPAM package database is held in the\n      <code>.opam</code> directory in your home directory,\n      including compiler installations. On Linux and Mac OS X, this will\n      be the <code>~/.opam</code> directory. You shouldn't switch\n      to an admin user to install packages as nothing will be installed\n      outside of this directory. If you run into problems, just delete\n      the whole <code>~/.opam</code> directory and follow the\n      installations instructions from the <code>opam init</code>\n      stage again.\n    </blockquote>")))
 (idp12407200
  ((file installation.html)
   (html
    "<blockquote>\n        The OPAM instructions will be simplified when integrated\n        upstream into Debian and Fedora, which is ongoing. Until then,\n        we're leaving source-code installation instructions here. Please\n        leave a comment with any amended instructions you encounter.\n      </blockquote>")))
 (idp12404272
  ((file installation.html)
   (html
    "<blockquote>\n        The distribution only requires the OCaml compiler to be\n        installed, so this should be straightforward. Download the\n        latest version from the\n        <a href=\"https://github.com/OCamlPro/opam/tags\" target=\"_top\">homepage</a>.\n      </blockquote>")))
 (idp12402912
  ((file installation.html)
   (html
    "<blockquote>\n        If the binary packages aren't available for your system, you'll\n        need to install the latest OPAM release from source. You can\n        follow the online\n        <a href=\"http://opam.ocamlpro.com/doc/Quick_Install.html\" target=\"_top\">quick\n        install guide</a> or read the summary below.\n      </blockquote>")))
 (idp12400304
  ((file installation.html)
   (html
    "<blockquote>\n        Run these commands to install the stable OPAM package:\n      </blockquote>")))
 (idp12398784
  ((file installation.html)
   (html
    "<blockquote>\n<code>opam-git</code> builds the package from the\n            latest upstream source, and should only be used if you are\n            looking for a specific bleeding-edge feature.\n          </blockquote>")))
 (idp12397216
  ((file installation.html)
   (html
    "<blockquote>\n<code>opam</code> contains the most recent stable\n            release, and is the recommended package.\n          </blockquote>")))
 (idp12394752
  ((file installation.html)
   (html
    "<blockquote>\n        OPAM is available in the Arch User Repository (AUR) in two\n        packages. You'll need both <code>ocaml</code> and the\n        <code>base-devel</code> packages installed first:\n      </blockquote>")))
 (idp12392960
  ((file installation.html)
   (html
    "<blockquote>\n        There is currently no RPM available for Fedora or Red Hat, so\n        please install OPAM via the source code instructions for the\n        moment.\n      </blockquote>")))
 (idp12390432
  ((file installation.html)
   (html
    "<blockquote>\n        OPAM is available as a Personal Package Archive on Ubuntu Raring\n        for both i386 and x86_64. To install it, just run:\n      </blockquote>")))
 (idp12387696
  ((file installation.html)
   (html
    "<blockquote>\n        The binary packages for OPAM are not yet available as of the 5th\n        August 2013, but the package is in the <code>NEW</code>\n        queue. It should be available by the the time the book is\n        released, and these instructions will be updated accordingly.\n      </blockquote>")))
 (idp12384192
  ((file installation.html)
   (html
    "<blockquote>\n        OPAM has recently been packaged for Debian and will soon be part\n        of the unstable distribution. If you're on an earlier stable\n        distribution such as <code>wheezy</code>, you can either\n        compile from source, or cherry-pick just the OPAM binary package\n        from <code>unstable</code> by:\n      </blockquote>")))
 (idp12381824
  ((file installation.html)
   (html
    "<blockquote>\n        And on MacPorts, install it like this:\n      </blockquote>")))
 (idp12380576
  ((file installation.html)
   (html
    "<blockquote>\n        Source installation of OPAM will take a minute or so on a modern\n        machine. There is a Homebrew package for the latest OPAM:\n      </blockquote>")))
 (idp12377248
  ((file installation.html)
   (html
    "<blockquote>\n      Before installing OPAM, make sure that you have the OCaml compiler\n      installed as described above. Once installed, the entire OPAM\n      database is held in your home directory (normally\n      <code>$HOME/.opam</code>). If something goes wrong, just\n      delete this <code>.opam</code> directory and start over from\n      a clean slate. If you're using a beta version of OPAM, please\n      upgrade it to at least version 1.0.0 or greater before proceeding.\n    </blockquote>")))
 (idp12376528
  ((file installation.html)
   (html
    "<blockquote>\n      OPAM manages multiple simultaneous OCaml compiler and library\n      installations, tracks library versions across upgrades, and\n      recompiles dependencies automatically if they get out of date.\n      It's used throughout Real World OCaml as the mechanism to retrieve\n      and use third-party libraries.\n    </blockquote>")))
 (idp12373952
  ((file installation.html)
   (html
    "<blockquote>\n        We instruct you to install the unreleased 4.01 branch version of\n        OCaml in these instructions, as we take advantage of some recent\n        additions to the language that simplify explanations in the\n        book. The 4.01 release will happen before the book is released,\n        but you may run into &quot;bleeding edge&quot; bugs with the\n        release. Leave a comment here if you do and we'll address them.\n      </blockquote>")))
 (idp12370448
  ((file installation.html)
   (html
    "<blockquote>\n        Once the installation is completed into this custom location,\n        you will need to add <code>$HOME/my-ocaml/bin</code> to\n        your <code>PATH</code>, normally by editing the\n        <code>~/.bash_profile</code> file. You shouldn't really to\n        do this unless you have special reasons, so try to install\n        binary packages before trying a source installation.\n      </blockquote>")))
 (idp12368416
  ((file installation.html)
   (html
    "<blockquote>\n        The final step requires administrator privilege to install in\n        your system directory. You can also install it in your home\n        directory by passing the <code>prefix</code> option to the\n        configuration script:\n      </blockquote>")))
 (idp12365648
  ((file installation.html)
   (html
    "<blockquote>\n        To install OCaml from source code, first make sure that you have\n        a C compilation environment (usually either\n        <code>gcc</code> or <code>llvm</code> installed).\n      </blockquote>")))
 (idp12363792
  ((file installation.html)
   (html
    "<blockquote>\n        Windows is not currently supported by the examples in Real World\n        OCaml, although it is being worked on. Until that's ready, we\n        recommend using a virtual machine running Debian Linux on your\n        local machine.\n      </blockquote>")))
 (idp12360560
  ((file installation.html)
   (html
    "<blockquote>\n        Arch Linux provides OCaml 4.00.1 (or later) in the standard\n        repositories, so the easiest method of installation is using\n        <code>pacman</code>:\n      </blockquote>")))
 (idp12358816
  ((file installation.html)
   (html
    "<blockquote>\n        The PCRE package is used by Core and is just included here for\n        convenience later.\n      </blockquote>")))
 (idp12357536
  ((file installation.html)
   (html
    "<blockquote>\n        OCaml has been included in the basic distribution since Fedora\n        8. To install the latest compiler, just run:\n      </blockquote>")))
 (idp12354832
  ((file installation.html)
   (html
    "<blockquote>\n        Notice that we've installed a few more packages than just the\n        OCaml compiler here. The second command line installs enough\n        system packages to let you build your own OCaml packages. You\n        may find that some OCaml libraries require more system libraries\n        (for example, <code>libssl-dev</code>), but we'll\n        highlight these in the book when we introduce the library.\n      </blockquote>")))
 (idp12353200
  ((file installation.html)
   (html
    "<blockquote>\n        On Debian Linux, you should install OCaml via binary packages.\n        You'll need at least OCaml version 3.12.1 to bootstrap OPAM,\n        which means using Debian Wheezy or greater. Don't worry about\n        getting the absolute latest version of the compiler, as you just\n        need one new enough to compile the OPAM package manager, after\n        which you'll use OPAM to manage your compiler installation.\n      </blockquote>")))
 (idp12349872
  ((file installation.html)
   (html
    "<blockquote>\n        Another popular package manager on Mac OS X is\n        <a href=\"http://macports.org\" target=\"_top\">MacPorts</a>, which also\n        has an OCaml port. As with Homebrew, make sure you have XCode\n        installed and have followed the rest of the MacPorts\n        installation instructions, and then type in:\n      </blockquote>")))
 (idp12349232
  ((file installation.html)
   (html
    "<blockquote>\n        The Perl-compatible Regular Expression library (PCRE) is used by\n        the Core suite. It's not strictly needed to use OCaml, but is a\n        commonly used library that we're installing now to save time\n        later.\n      </blockquote>")))
 (idp12347056
  ((file installation.html)
   (html
    "<blockquote>\n        The\n        <a href=\"http://github.com/mxcl/homebrew\" target=\"_top\">Homebrew</a>\n        package manager has an OCaml installer, which is usually updated\n        pretty quickly to the latest stable release. Make sure that you\n        have the latest XCode (and Command Line Tools for XCode)\n        installed from the App Store before starting the OCaml\n        installation.\n      </blockquote>")))
 (idp12345264
  ((file installation.html)
   (html
    "<blockquote>\n      The OCaml compiler is available as a binary distribution on many\n      operating systems. This is the simplest and preferred installation\n      route, but we'll also describe how to do a manual installation as\n      a last resort.\n    </blockquote>")))
 (idp12342864
  ((file installation.html)
   (html
    "<blockquote>\n    Let's get started with how to install OCaml on various operating\n    systems, and we'll get OPAM and <code>utop</code> running\n    after that.\n  </blockquote>")))
 (idp12341376
  ((file installation.html)
   (html
    "<blockquote>\n        The <code>utop</code> interactive toplevel, a modern\n        interactive toplevel with command history and tab completion.\n      </blockquote>")))
 (idp12340480
  ((file installation.html)
   (html
    "<blockquote>\n        The OPAM source package manager, through which we'll install\n        several extra libraries.\n      </blockquote>")))
 (idp12339648
  ((file installation.html)
   (html
    "<blockquote>\n        The OCaml compiler itself.\n      </blockquote>")))
 (idp12338640
  ((file installation.html)
   (html
    "<blockquote>\n    To work through Real World OCaml, you'll need three major components\n    installed:\n  </blockquote>")))
 (idp12337792
  ((file installation.html)
   (html
    "<blockquote>\n    An important difference between OCaml and scripting languages such\n    as Python or Ruby is the static type safety that means that you\n    can't just mix-and-match compiled libraries. Interfaces are checked\n    when libraries are compiled, so when an interface is changed, all\n    the dependent libraries must also be recompiled. Source-based\n    package managers automate this process for you and make development\n    life much easier.\n  </blockquote>")))
 (idp12337088
  ((file installation.html)
   (html
    "<blockquote>\n    The easiest way to use OCaml is via the binary packages available\n    for many operating systems. For day-to-day code development however,\n    it's much easier to use a source-code manager that lets you modify\n    individual libraries and automatically recompile all the\n    dependencies.\n  </blockquote>")))
 (idp8840752
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Thus, if we replace <code>type 'a t</code> in the\n        interface with <code>type +'a t</code>, that will make it\n        explicit in the interface that the data-structure doesn't\n        contain any persistent references to values of type\n        <code>'a</code>, at which point, OCaml can infer\n        polymorphic types for expressions of this type that are not\n        simple values.\n      </blockquote>")))
 (idp8836848
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The issue here is that the signature, by virtue of being\n        abstract, has obscured the fact that\n        <code>Concat_list.t</code> is in fact an immutable\n        data-type. We can resolve this in one of two ways: either by\n        making the type concrete (<span><em>i.e.</em></span>, exposing\n        the implementation in the <code>mli</code>), which is\n        often not desirable; or by marking the type variable in question\n        as <span><em>covariant</em></span>. We'll learn more about\n        variance and covariance in <a href=\"objects.html\">Chapter\194\16011, <i>Objects</i></a>,\n        but for now, you can think of it as an annotation which can be\n        put in the interface of a pure data structure.\n      </blockquote>")))
 (idp8834736
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The details of the implementation don't matter so much, but it's\n        important to note that a <code>Concat_list.t</code> is\n        unquestionably an immutable value. However, when it comes to the\n        value restriction, OCaml treats it as if it were mutable.\n      </blockquote>")))
 (idp8833360
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        A more important example of this comes up when defining abstract\n        data types. Consider the following simple data-structure for an\n        immutable list type that supports constant-time concatenation.\n      </blockquote>")))
 (idp8832080
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        On the other hand, if the returned type is potentially mutable,\n        then the result will be weakly polymorphic.\n      </blockquote>")))
 (idp8830752
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        But that's not always the case. When the type of the returned\n        value is immutable, then OCaml can typically infer a fully\n        polymorphic type.\n      </blockquote>")))
 (idp8829360
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        For example, we saw above that a function application, even a\n        simple application of the identity function, is not a simple\n        value and thus can turn a polymorphic value into a weakly\n        polymorphic one.\n      </blockquote>")))
 (idp8828752
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        But OCaml actually has a relaxed version of the value\n        restriction that can make some use of type information to allow\n        polymorphic types for things that are not simple values.\n      </blockquote>")))
 (idp8828016
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        OCaml is actually a little better at inferring polymorphic types\n        than is implied above. The value restriction as we described it\n        above is basically a syntactic check: there are a few operations\n        that you can do that count as simple values, and anything that's\n        a simple value can be generalized.\n      </blockquote>")))
 (idp8825760
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This transformation is referred to as <span><em>eta\n        expansion</em></span>, and is often useful to resolve problems\n        that arise from the value restriction.\n      </blockquote>")))
 (idp8822064
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        As you can see, we now infer a weakly polymorphic type for the\n        resulting function, and for good reason. There's nothing that\n        tells us that <code>List.init</code> isn't creating a\n        persistent <code>ref</code> somewhere inside of it that\n        would be shared across multiple calls to\n        <code>list_init_10</code>. We can eliminate this\n        possibility, and at the same time get the compiler to infer a\n        polymorphic type, by using explicit variables rather than\n        partial application.\n      </blockquote>")))
 (idp8820032
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Imagine we wanted to create a specialized version of\n        <code>List.init</code> that always created lists of length\n        10. We could do that using partial application, as follows.\n      </blockquote>")))
 (idp8818016
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Consider the <code>List.init</code> function, which is\n        used for creating lists where each element is created by calling\n        a function on the index of that element.\n      </blockquote>")))
 (idp8816144
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Most of the time, when the value restriction kicks in, it's for\n        a good reason, <span><em>i.e.</em></span>, it's because the value\n        in question can actually only safely be used with a single type.\n        But sometimes, the value restriction kicks in when you don't\n        want it. The most common such case is partially applied\n        functions. A partially applied function, like any function\n        application, is not a simple value, and as such, functions\n        created by partial application are sometimes less general than\n        you might expect.\n      </blockquote>")))
 (idp8814288
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        But a function that has a mutable cache that persists across\n        calls, like memoize, can only be weakly polymorphic.\n      </blockquote>")))
 (idp8812384
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The value restriction doesn't require that there is no mutable\n        state, only that there is no <span><em>persistent</em></span>\n        mutable state that could share values between uses of the same\n        function. Thus, a function that produces a fresh reference every\n        time it's called can have a fully polymorphic type:\n      </blockquote>")))
 (idp8811776
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        It would be safe to infer a weakly polymorphic variable here,\n        but because OCaml's type system doesn't distinguish between pure\n        and impure functions, it can't separate those two cases.\n      </blockquote>")))
 (idp8810240
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The memoized version of the function does in fact need to be\n        restricted to a single type, because it uses mutable state\n        behind the scenes to cache values returned by previous\n        invocations of the function. But OCaml would make the same\n        determination even if the function in question did no such\n        thing. Consider this example:\n      </blockquote>")))
 (idp8808848
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        But, if we write down an expression that isn't a simple value by\n        the above definition, we'll get different results. For example,\n        consider what happens if we try to memoize the function defined\n        above.\n      </blockquote>")))
 (idp8807520
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Thus, the following expression is a simple value, and as a\n        result, the types of values contained within it are allowed to\n        be polymorphic.\n      </blockquote>")))
 (idp8803936
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>let</code> bindings of the form\n            <code>let var = &lt;expr1&gt; in &lt;expr2&gt;</code>,\n            where both <code>&lt;expr1&gt;</code> and\n            <code>&lt;expr2&gt;</code> are simple values.\n          </blockquote>")))
 (idp8800480
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            Function declarations, <span><em>i.e.</em></span>,\n            expressions that begin with <code>fun</code> or\n            <code>function</code>, or, the equivalent let binding,\n            <code>let f x = ...</code>.\n          </blockquote>")))
 (idp8799616
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            Constructors that contain only other simple values\n          </blockquote>")))
 (idp8798288
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            Constants (<span><em>i.e.</em></span>, things like integer\n            and floating-point literals)\n          </blockquote>")))
 (idp8797216
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The core of the value restriction is the observation that some\n        kinds of simple values by their nature can't contain refs,\n        including:\n      </blockquote>")))
 (idp8795392
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        So, when does the compiler infer weakly polymorphic types? As\n        we've seen, we need weakly polymorphic types when a value of\n        unknown type is stored in a persistent mutable cell. Because the\n        type system isn't precise enough to determine all cases where\n        this might happen, OCaml uses a rough rule to flag cases where\n        it's sure there are no persistent refs, and to only infer\n        polymorphic types in those cases. This rule is called\n        <span><em>the value restriction</em></span>.\n      </blockquote>")))
 (idp8791680
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note that the type of <code>remember</code> was settled by\n      the definition of <code>remember_three</code>, even though\n      <code>remember_three</code> was never called!\n    </blockquote>")))
 (idp8790352
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      OCaml will convert a weakly polymorphic variable to a concrete\n      type as soon as it gets a clue as to what concrete type it is to\n      be used as, as you can see below.\n    </blockquote>")))
 (idp8786640
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The underscore in the type variable <code>'_a</code> tells\n      us that the variable is only <span><em>weakly\n      polymorphic</em></span>, which is to say that it can be used with\n      any <span><em>single</em></span> type. That makes sense, because,\n      unlike <code>identity</code>, <code>remember</code>\n      always returns the value it was passed on its first invocation,\n      which means it can only be used with one type.\n    </blockquote>")))
 (idp8783152
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This is not what happens with <code>remember</code>, though.\n      As you can see from the <code>utop</code> output above, the\n      type that OCaml infers for <code>remember</code>, which\n      looks almost, but not quite, like the type of the identity\n      function. Here it is again:\n    </blockquote>")))
 (idp8781936
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      As you can see, the polymorphic type of\n      <code>identity</code> lets it operate on values with\n      different types.\n    </blockquote>")))
 (idp8775408
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      On its first call, <code>remember</code> returns the same\n      value its passed, which means its input type and return type\n      should match. Accordingly, <code>remember</code> should have\n      the type <code>t -&gt; t</code> for some type\n      <code>t</code>. There's nothing about\n      <code>remember</code> that ties the choice of\n      <code>t</code> to any particular type, so you might expect\n      OCaml to generalize, replacing <code>t</code> with a\n      polymorphic type variable. It's this kind of generalization that\n      gives us polymorphic types in the first place. The identity\n      function, as an example, gets a polymorphic type in this way.\n    </blockquote>")))
 (idp8774208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>remember</code> is not a terribly useful function, but\n      it raises an interesting question: what type should it have?\n    </blockquote>")))
 (idp8770768
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>remember</code> simply caches the first value that's\n      passed to it, returning that value on every call. Note that we've\n      carefully written <code>remember</code> so that\n      <code>cache</code> is created and initialized once, and is\n      shared across invocations of <code>remember</code>.\n    </blockquote>")))
 (idp8769568
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Consider the following simple imperative function.\n    </blockquote>")))
 (idp8766848
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Here, you can see that the sub-expression that came last was\n      actually evaluated first! This is generally the case for many\n      different kinds of expressions. If you want to make sure of the\n      evaluation order of different sub-expressions, you should express\n      them as a series of <code>let</code> bindings.\n    </blockquote>")))
 (idp8765664
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Consider the following example.\n    </blockquote>")))
 (idp8764320
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      In a strict language, we know that expressions that are bound by a\n      sequence of let-bindings will be evaluated in the order that\n      they're defined. But what about the evaluation order within a\n      single expression? Officially, the answer is that evaluation order\n      within an expression is undefined. In practice, OCaml has only one\n      compiler, and that behavior is a kind of <span><em>de\n      facto</em></span> standard. Unfortunately, the evaluation order in\n      this case is often the opposite of what one might expect.\n    </blockquote>")))
 (idp8763568
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      OCaml is strict by default for a good reason: Lazy evaluation and\n      imperative programming generally don't mix well, because laziness\n      makes it harder to reason about when a given side effect is going\n      to occur. Understanding the order of side-effects is essential to\n      reasoning about the behavior of an imperative program.\n    </blockquote>")))
 (idp8761648
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We can confirm that fact by a few well placed\n      <code>printf</code>s.\n    </blockquote>")))
 (idp8758960
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      It doesn't have to be this way. Using the <code>lazy</code>\n      keyword, we can write the original computation so that\n      <code>sin 128.</code> won't ever be computed.\n    </blockquote>")))
 (idp8756272
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      In some sense, we don't really need to compute the\n      <code>sin 128.</code>, because <code>sin 75.</code> is\n      negative, so we could know the answer before even computing\n      <code>sin 128.</code>.\n    </blockquote>")))
 (idp8754208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Consider the following simple example. Here, we have a collection\n      of angles and we want to determine if any of them have a negative\n      <code>sin</code>. The following snippet of code would answer\n      that question.\n    </blockquote>")))
 (idp8752784
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The order in which expressions are evaluated is an important part\n      of the definition of a programming language, and it is\n      particularly important when programming imperatively. Most\n      programming languages you're likely to have encountered are\n      <span><em>strict</em></span>, and OCaml is too. In a strict\n      language, when you bind an identifier to the result of some\n      expression, the expression is evaluated before the variable is\n      defined. Similarly, if you call a function on a set of arguments,\n      those arguments are evaluated before they are passed to the\n      function.\n    </blockquote>")))
 (idp8749440
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This is just a taste of the functionality of\n        <code>In_channel</code> and\n        <code>Out_channel</code>. To get a fuller understanding\n        you should review the API documentation for those modules.\n      </blockquote>")))
 (idp8746608
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Another misfeature of our implementation of\n        <code>sum_file</code> is that we read the entire file into\n        memory before processing it. For a large file, it's more\n        efficient to process a line at a time. You can use the\n        <code>In_channel.fold_lines</code> function to do just\n        that.\n      </blockquote>")))
 (idp8743808
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>In_channel</code> also supports some idioms that\n        handle some of the details of this for you. For example, the\n        <code>with_file</code> function takes a filename and a\n        function for processing that file, and takes care of the opening\n        and closing of the file transparently.\n      </blockquote>")))
 (idp8743168
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This is really an example of a more general complexity of\n        imperative programming. When programming imperatively, you need\n        to be quite careful to make sure that exceptions don't leave you\n        in an awkward state.\n      </blockquote>")))
 (idp8741968
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And now, the file descriptor leak is gone:\n      </blockquote>")))
 (idp8739296
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        To avoid this, we need to make sure that our code cleans up\n        after itself. We can do this using the\n        <code>protect</code> function described in\n        <a href=\"error-handling.html\">Chapter\194\1607, <i>Error Handling</i></a>, as follows.\n      </blockquote>")))
 (idp8738784
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And now, you'll need to restart your toplevel if you want to\n        open any more files!\n      </blockquote>")))
 (idp8737536
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And if we do this over and over in a loop, we'll eventually run\n        out of file descriptors.\n      </blockquote>")))
 (idp8736144
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        One problem with the code above is that if it throws an\n        exception in the middle of its work, it won't actually close the\n        file. If we try to read a file that doesn't actually contain\n        numbers, we'll see such an error:\n      </blockquote>")))
 (idp8735408
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        For both of these functions we followed the same basic sequence:\n        we first create the channel, then use the channel, and finally\n        close the channel. The closing of the channel is important,\n        since without it, we won't release resources associated with the\n        file back to the operating system.\n      </blockquote>")))
 (idp8732608
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Another common use of <code>in_channel</code>s and\n        <code>out_channel</code>s is for working with files.\n        Here's a couple of functions, one that creates a file full of\n        numbers, and the other that reads in such a file and returns the\n        sum of those numbers.\n      </blockquote>")))
 (idp8730144
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        All of this, and a good deal more, is described in the API\n        documentation for the <code>Printf</code> module in the\n        OCaml Manual.\n      </blockquote>")))
 (idp8728752
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>sprintf</code>, which returns a formatted string\n          </blockquote>")))
 (idp8726544
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>fprintf</code>, which prints to an arbitrary\n            <code>out_channel</code>\n</blockquote>")))
 (idp8724320
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>eprintf</code>, which prints to\n            <code>stderr</code>.\n          </blockquote>")))
 (idp8721888
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        There are also <code>printf</code>-style functions that\n        target outputs other than <code>stdout</code>, including:\n      </blockquote>")))
 (idp8721184
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            precision of float conversions\n          </blockquote>")))
 (idp8720304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            whether numbers should be formatted in decimal, hex or\n            binary\n          </blockquote>")))
 (idp8719472
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            escaping rules for strings\n          </blockquote>")))
 (idp8718640
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            alignment and padding\n          </blockquote>")))
 (idp8716912
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>printf</code>'s formatting directives offer a\n        significant amount of control, allowing you to specify things\n        like:\n      </blockquote>")))
 (idp8714304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        In the above example, we've used only two formatting directives:\n        <code>%s</code>, for including a string, and\n        <code>%!</code> which causes <code>printf</code> to\n        flush the channel.\n      </blockquote>")))
 (idp8712336
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Now let's see how we can rewrite our time conversion program to\n        be a little more concise using <code>printf</code>.\n      </blockquote>")))
 (idp8710672
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        If this looks different from everything else you've seen so far,\n        that's because it is. This is really a special case in the type\n        system. Most of the time, you don't need to worry about this\n        special handling of format strings --- you can just use\n        <code>printf</code> and not worry about the details. But\n        it's useful to keep the broad outlines of the story in the back\n        of your head.\n      </blockquote>")))
 (idp8708752
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And accordingly, we can pass it to <code>printf</code>.\n      </blockquote>")))
 (idp8707232
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        If OCaml infers that a given string literal is a format string,\n        then it parses it at compile time as such, choosing its type in\n        accordance with the formatting directives it finds. Thus, if we\n        add a type-annotation indicating that the string we're defining\n        is actually a format string, it will be interpreted as such:\n      </blockquote>")))
 (idp8705072
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        To check this, OCaml needs to analyze the contents of the format\n        string at compile time, which means the format string needs to\n        be available as a string literal at compile time. Indeed, if you\n        try to pass an ordinary string to <code>printf</code>, the\n        compiler will complain.\n      </blockquote>")))
 (idp8702880
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The format strings used by <code>printf</code> turn out to\n        be quite different from ordinary strings. This difference ties\n        to the fact that OCaml format strings, unlike their equivalent\n        in C, are type-safe. In particular, the compiler checks that the\n        types referred to by the format string match the types of the\n        rest of the arguments passed to <code>printf</code>.\n      </blockquote>")))
 (idp8699392
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Importantly, and unlike C's <code>printf</code>, the\n        <code>printf</code> in OCaml is type-safe. In particular,\n        if we provide an argument whose type doesn't match what's\n        presented in the format string, we'll get a type error.\n      </blockquote>")))
 (idp8694608
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Generating output with functions like\n        <code>Out_channel.output_string</code> is simple and easy\n        to understand, but can be a bit verbose. OCaml also supports\n        formatted output using the <code>printf</code> function,\n        which is modeled after <code>printf</code> in the C\n        standard library. <code>printf</code> takes a\n        <span><em>format string</em></span> that describe what to print\n        and how to format it, as well as arguments to be printed, as\n        determined by the formatting directives embedded in the format\n        string. So, for example, we can write:\n      </blockquote>")))
 (idp8688832
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that <code>In_channel.input_line</code> returns a\n        <code>string option</code>, with <code>None</code>\n        indicating that the input stream has ended\n        (<span><em>i.e.</em></span>, an end-of-file condition).\n        <code>Out_channel.output_string</code> is used to print\n        the final output, and <code>Out_channel.flush</code> is\n        called to flush that output to the screen. The final flush is\n        not technically required, since the program ends after that\n        instruction, at which point all remaining output will be flushed\n        anyway, but the flush is nonetheless good practice.\n      </blockquote>")))
 (idp8685520
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We called <code>Out_channel.flush</code> on\n        <code>stdout</code> because\n        <code>out_channel</code>s are buffered, which is to say\n        that OCaml doesn't immediately do a write every time you call\n        <code>output_string</code>. Instead, writes are buffered\n        until either enough has been written to trigger the flushing of\n        the buffers, or until a flush is explicitly requested. This\n        greatly increases the efficiency of the writing process, by\n        reducing the number of system calls.\n      </blockquote>")))
 (idp8684272
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        You can then type in the name of a timezone and hit return, and\n        it will print out the current time in the timezone in question.\n      </blockquote>")))
 (idp8681344
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can build this program (using <code>ocamlbuild</code>\n        with the <code>_tags</code> file described in\n        <a href=\"files-modules-and-programs.html#single-file-programs\">the section called \226\128\156Single file programs\226\128\157</a>) and run it,\n        you'll see that it prompts you for input, as follows:\n      </blockquote>")))
 (idp8678016
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Let's see this in action in a simple interactive application.\n        The following program, <code>time_converter</code>,\n        prompts the user for a timezone, and then prints out the current\n        time in that timezone. Here, we use Core's\n        <code>Zone</code> module for looking up a timezone, and\n        the <code>Time</code> module for computing the current\n        time and printing it out in the timezone in question.\n      </blockquote>")))
 (idp8674368
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The values <code>stdin</code>, <code>stdout</code>\n        and <code>stderr</code> are useful enough that they are\n        also available in the global name-space directly, without having\n        to go through the <code>In_channel</code> and\n        <code>Out_channel</code> modules.\n      </blockquote>")))
 (idp8672304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>Out_channel.stderr</code>. The &quot;standard\n            error&quot; channel. This is similar to\n            <code>stdout</code>, but is intended for error\n            messages.\n          </blockquote>")))
 (idp8670000
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>Out_channel.stdout</code>. The &quot;standard\n            output&quot; channel. By default, output written to\n            <code>stdout</code> appears on the user terminal.\n          </blockquote>")))
 (idp8668208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>In_channel.stdin</code>. The &quot;standard\n            input&quot; channel. By default, input comes from the\n            terminal, which handles keyboard input.\n          </blockquote>")))
 (idp8667040
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We'll start our discussion of I/O by focusing on the terminal.\n        Following the UNIX model, communication with the terminal is\n        organized around three channels, which correspond to the three\n        standard file descriptors in Unix:\n      </blockquote>")))
 (idp8663264
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        OCaml's buffered I/O library is organized around two types:\n        <code>in_channel</code>, for channels you read from, and\n        <code>out_channel</code>, for channels you write to.\n        <code>In_channel</code> and <code>Out_channel</code>\n        modules only have direct support for channels corresponding to\n        files and terminals; other kinds of channels can be created\n        through the <code>Unix</code> module.\n      </blockquote>")))
 (idp8656688
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There are multiple I/O libraries in OCaml. In this section we'll\n      discuss OCaml's buffered I/O library that can be used through the\n      <code>In_channel</code> and <code>Out_channel</code>\n      modules in Core. Other I/O primitives are also available through\n      the <code>Unix</code> module in Core as well as\n      <code>Async</code>, the asynchronous I/O library that is\n      covered in\n      <a href=\"concurrent-programming-with-async.html\">Chapter\194\16018, <i>Concurrent Programming with Async</i></a>.\n      Most of the functionality in Core's <code>In_channel</code>,\n      <code>Out_channel</code> (and in Core's\n      <code>Unix</code> module) derives from the standard library,\n      but we'll use Core's interfaces here.\n    </blockquote>")))
 (idp8655312
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Imperative programming is about more than modifying in-memory\n      data-structures. Any function that doesn't boil down to a\n      deterministic transformation from its arguments to its return\n      value is imperative in nature. That includes not only things that\n      mutate your program's data, but also operations that interact with\n      the world outside of your program. An important example of this\n      kind of interaction is I/O, <span><em>i.e.</em></span>, operations\n      for reading or writing data to things like files, terminal input\n      and output, and network sockets.\n    </blockquote>")))
 (idp8653488
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Laziness is more constrained than explicit mutation, and so in\n        some cases can lead to code whose behavior is easier to think\n        about.\n      </blockquote>")))
 (idp8650960
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        But we can also create useful recursive definitions with\n        <code>lazy</code>. In particular, we can use laziness to\n        make our definition of <code>memo_rec</code> work without\n        explicit mutation.\n      </blockquote>")))
 (idp8649008
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Of course, actually trying to compute this will fail. OCaml's\n        <code>lazy</code> throws an exception when a lazy value\n        tries to force itself as part of its own evaluation.\n      </blockquote>")))
 (idp8647104
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        It's worth noting that these restrictions don't show up in a\n        lazy language like Haskell. Indeed, we can make something like\n        our definition of <code>x</code> work if we use OCaml's\n        laziness:\n      </blockquote>")))
 (idp8644416
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        To avoid such cases, the compiler only allows three possible\n        constructs to show up on the right-hand side of a\n        <code>let rec</code>: a function definition, a\n        constructor, or the lazy keyword. This excludes some reasonable\n        things, like our definition of <code>memo_rec</code>, but\n        it also blocks things that don't make sense, like our definition\n        of <code>x</code>.\n      </blockquote>")))
 (idp8643136
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that <code>x</code> is an ordinary value, not a\n        function. As such, it's not clear how to execute this code. In\n        some sense, you could imagine it compiling down to an infinite\n        loop, but there's no looping control structure to make that\n        happen.\n      </blockquote>")))
 (idp8641232
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        OCaml rejects the definition because OCaml, as a strict\n        language, has limits on what it can put on the right hand side\n        of a <code>let rec</code>. In particular, imagine how the\n        following code snippet would be compiled.\n      </blockquote>")))
 (idp8638080
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        You might wonder why we didn't tie the recursive knot in\n        <code>memo_rec</code> using <code>let rec</code>, as\n        we did for <code>make_rec</code> earlier. Here's code that\n        tries to do just that:\n      </blockquote>")))
 (idp8634912
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This new version of <code>edit_distance</code> is much\n        more efficient than the one we started with; the following call\n        is about ten thousand times faster than it was without\n        memoization.\n      </blockquote>")))
 (idp8629552
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        But memoization is a good approach for optimizing\n        <code>edit_distance</code>, and we can apply the same\n        approach we used on <code>fib</code> here. We will need to\n        change <code>edit_distance</code> to take a pair of\n        strings as a single argument, since <code>memo_rec</code>\n        only works on single-argument functions. (We can always recover\n        the original interface with a wrapper function.) With just that\n        change and the addition of the <code>memo_rec</code> call,\n        we can get a memoized version of\n        <code>edit_distance</code>:\n      </blockquote>")))
 (idp8627584
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Memoization is overkill for implementing Fibonacci, and indeed,\n        the <code>fib</code> defined above is not especially\n        efficient, allocating space linear in the number passed in to\n        <code>fib</code>. It's easy enough to write a Fibonacci\n        function that takes a constant amount of space.\n      </blockquote>")))
 (idp8625120
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can use <code>memo_rec</code> as part of a single\n        declaration that makes this look like it's little more than a\n        special form of <code>let rec</code>.\n      </blockquote>")))
 (idp8620432
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The memory behavior here is important. If you look back at the\n        definition of <code>memo_rec</code>, you'll see that the\n        call to memo_rec does not trigger a call to\n        <code>memoize</code>. Only when the final argument to\n        <code>fib</code> is presented does\n        <code>memoize</code> get called, and the result of that\n        call falls out of scope when the <code>fib</code> call\n        returns. That means that, unlike ordinary memoization, calling\n        <code>memo_rec</code> on a function does not create a\n        memory leak --- the memoization table is collected after the\n        computation completes.\n      </blockquote>")))
 (idp8619952
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And as you can see, the exponential time complexity is now gone.\n      </blockquote>")))
 (idp8617616
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Using <code>memo_rec</code>, we can now build an efficient\n        version of <code>fib</code>.\n      </blockquote>")))
 (idp8616400
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We're using the reference here as a way of tying the recursive\n        knot without using a <code>let rec</code>, which for\n        reasons we'll describe later wouldn't work here.\n      </blockquote>")))
 (idp8614768
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that <code>memo_rec</code> has the same signature as\n        <code>make_rec</code>.\n      </blockquote>")))
 (idp8612128
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This is clever enough, but all we've really done is find a new\n        way to implement the same old slow Fibonacci function. To make\n        it faster, we need variant on <code>make_rec</code> that\n        inserts memoization when it ties the recursive knot. We'll call\n        that function <code>memo_rec</code>.\n      </blockquote>")))
 (idp8608256
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This is a pretty strange piece of code, and it may take a few\n        minutes of thought to figure out what's going on. Like\n        <code>fib_norec</code>, the function\n        <code>f_norec</code> passed into\n        <code>make_rec</code> is a function that isn't recursive,\n        but takes as an argument a function that it will call. What\n        <code>make_rec</code> does is to essentially feed\n        <code>f_norec</code> to itself, thus making it a true\n        recursive function.\n      </blockquote>")))
 (idp8606352
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can even write a polymorphic function that we'll call\n        <code>make_rec</code> that can tie the recursive knot for\n        any function of this form.\n      </blockquote>")))
 (idp8605120
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can now turn this back into an ordinary Fibonacci function by\n        tying the recursive knot, as shown below.\n      </blockquote>")))
 (idp8601920
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        In order to make <code>fib</code> fast, our first step\n        will be to rewrite <code>fib</code> in a way that unwinds\n        the recursion. The following version expects as its first\n        argument a function (called <code>fib</code>) that will be\n        called in lieu of the usual recursive call.\n      </blockquote>")))
 (idp8598560
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        So, how can we use memoization to make this faster? The tricky\n        bit is that we need to insert the memoization before the\n        recursive calls within <code>fib</code>. We can't just\n        define <code>fib</code> in the ordinary way and memoize it\n        after the fact and expect the first call to\n        <code>fib</code> to be improved (though of course repeated\n        calls will be improved).\n      </blockquote>")))
 (idp8596464
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Here, <code>fib 40</code> takes almost a minute to\n        compute, as opposed to five <span><em>milliseconds</em></span>\n        for <code>fib 20</code>.\n      </blockquote>")))
 (idp8593872
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This is, however, exponentially slow, for the same reason that\n        <code>edit_distance</code> was slow: we end up making many\n        redundant calls to <code>fib</code>. It shows up quite\n        dramatically in the performance.\n      </blockquote>")))
 (idp8589936
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Memoization would be a huge help here, but to fix the problem,\n        we need to memoize the calls that\n        <code>edit_distance</code> makes to itself. This technique\n        is sometimes referred to as <span><em>dynamic\n        programming</em></span>. To see how to do this, let's step away\n        from <code>edit_distance</code>, and instead consider a\n        much simpler example: computing the nth element of the Fibonacci\n        sequence. The Fibonacci sequence by definition starts out with\n        two <code>1</code>'s, with every subsequent element being\n        the sum of the previous two. The classic recursive definition of\n        Fibonacci is as follows:\n      </blockquote>")))
 (idp8589440
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Just those few extra characters made it almost four thousand\n        times slower!\n      </blockquote>")))
 (idp8588272
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And now we can use this to try out some examples.\n      </blockquote>")))
 (idp8585520
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        As you can see, some of these calls are repeats. For example,\n        there are two different calls to\n        <code>edit_distance &quot;OCam&quot; &quot;oca&quot;</code>.\n        The number of redundant calls grows exponentially with the size\n        of the strings, meaning that our implementation of\n        <code>edit_distance</code> is brutally slow for large\n        strings. We can see this by writing a small timing function.\n      </blockquote>")))
 (idp8584352
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        And these calls will in turn dispatch other calls:\n      </blockquote>")))
 (idp8582560
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The thing to note is that if you call\n        <code>edit_distance &quot;OCaml&quot; &quot;ocaml&quot;</code>,\n        then that will in turn dispatch the following calls:\n      </blockquote>")))
 (idp8581248
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Consider the following code for computing the edit distance.\n        Understanding the algorithm isn't important here, but you should\n        pay attention to the structure of the recursive calls.\n      </blockquote>")))
 (idp8579888
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Memoization is also useful for efficiently implementing some\n        recursive algorithms. One good example is the algorithm for\n        computing the <span><em>edit distance</em></span> (also called\n        the Levenshtein distance) between two strings. The edit distance\n        is the number of single-character changes (including letter\n        switches, insertions and deletions) required to convert one\n        string to the other. This kind of distance metric can be useful\n        for a variety of approximate string matching problems, like\n        spell checkers.\n      </blockquote>")))
 (idp8579072
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Memoization can be useful whenever you have a function that is\n        expensive to recompute, and you don't mind caching old values\n        indefinitely. One important caution: every time you create a\n        memoized function, there's something of a built-in memory leak.\n        As long as you hold on to the memoized function, you're holding\n        every result it has returned thus far.\n      </blockquote>")))
 (idp8572880
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The code above is a bit tricky. <code>memoize</code> takes\n        as its argument a function <code>f</code>, and then\n        allocates a hash table (called <code>table</code>) and\n        returns a new function as the memoized version of\n        <code>f</code>. When called, this new function looks in\n        <code>table</code> first, and if it fails to find a value,\n        calls <code>f</code> and stashes the result in\n        <code>table</code>. Note that <code>table</code>\n        doesn't go out of scope as long as the function returned by\n        <code>memoize</code> is in scope.\n      </blockquote>")))
 (idp8570352
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Here's a function that takes as an argument an arbitrary\n        single-argument function and returns a memoized version of that\n        function. Here we'll use Core's <code>Hashtbl</code>\n        module, rather than our toy <code>Dictionary</code>.\n      </blockquote>")))
 (idp8569360
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Another benign effect is <span><em>memoization</em></span>. A\n        memoized function remembers the result of previous invocations\n        of the function so that they can be returned without further\n        computation when the same arguments are presented again.\n      </blockquote>")))
 (idp8566064
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The main user-visible difference between our implementation of\n      laziness and the built-in version is syntax. Rather than writing\n      <code>create_lazy (fun () -&gt; sqrt 16.)</code>, we can\n      with the built-in <code>lazy</code> just write\n      <code>lazy (sqrt 16.)</code>.\n    </blockquote>")))
 (idp8564352
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Which we can use in the same way we used\n      <code>Lazy.force</code>:\n    </blockquote>")))
 (idp8563152
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now we just need a way to force a lazy value. The following\n      function does just that.\n    </blockquote>")))
 (idp8561440
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We can create a lazy value based on a thunk,\n      <span><em>i.e.</em></span>, a function that takes a unit argument.\n      Wrapping an expression in a thunk is another way to suspend the\n      computation of an expression.\n    </blockquote>")))
 (idp8553760
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      A <code>lazy_state</code> represents the possible states of\n      a lazy value. A lazy value is <code>Delayed</code> before it\n      has been run, where <code>Delayed</code> holds a function\n      for computing the value in question. A lazy value is in the\n      <code>Value</code> state when it has been forced and the\n      computation ended normally. The <code>Exn</code> case is for\n      when the lazy value has been forced, but the computation ended\n      with an exception. A lazy value is simply a <code>ref</code>\n      containing a <code>lazy_state</code>, where the\n      <code>ref</code> makes it possible to change from being in\n      the <code>Delayed</code> state to being in the\n      <code>Value</code> or <code>Exn</code> states.\n    </blockquote>")))
 (idp8552480
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      To better understand how laziness works, let's walk through the\n      implementation of our own lazy type. We'll start by declaring\n      types to represent a lazy value.\n    </blockquote>")))
 (idp8551344
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      You can see from the print statement that the actual computation\n      was performed only once, and only after <code>force</code>\n      had been called.\n    </blockquote>")))
 (idp8547648
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      One of the simplest benign effect is\n      <span><em>laziness</em></span>. A lazy value is one that is not\n      computed until it is actually needed. In OCaml, lazy values are\n      created using the <code>lazy</code> keyword, which can be\n      used to prefix any expression, returning a value of type\n      <code>'a Lazy.t</code>. The evaluation of that expression is\n      delayed until forced with the <code>Lazy.force</code>\n      function.\n    </blockquote>")))
 (idp8546416
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There are many instances where you basically want to program in a\n      pure style, but you want to make limited use of side-effects to\n      improve the performance of your code, without really changing\n      anything else. Such side effects are sometimes called\n      <span><em>benign effects</em></span>, and they are a useful way of\n      leveraging OCaml's imperative features while still maintaining\n      most of the benefits of pure programming.\n    </blockquote>")))
 (idp8538192
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>Dlist</code> has two such iterators:\n        <code>iter</code>, the goal of which is to call a\n        <code>unit</code> producing function on every element of\n        the list, in order; and <code>find_el</code>, which runs a\n        provided test function on each values stored in the list,\n        returning the first <code>element</code> that passes the\n        test. Both <code>iter</code> and\n        <code>find_el</code> are implemented using simple\n        recursive loops that use <code>next</code> to walk from\n        element to element, and <code>value</code> to extract the\n        element from a given node.\n      </blockquote>")))
 (idp8535664
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        When defining containers like lists, dictionaries and trees,\n        you'll typically want to define a set of iteration functions,\n        like <code>iter</code>, <code>map</code>, and\n        <code>fold</code>, which let you concisely express common\n        iteration patterns.\n      </blockquote>")))
 (idp8533056
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        This shouldn't be a big surprise. Complex imperative data\n        structures can be quite tricky; considerably trickier than their\n        pure equivalents. The issues described above can be dealt with\n        by more careful error detection, and such error correction is\n        taken care of in modules like Core's\n        <code>Doubly_linked</code>. You should use imperative data\n        structures from a well-designed library when you can. And when\n        you can't, you should make sure that the code you write is\n        careful about error detection.\n      </blockquote>")))
 (idp8531648
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        These functions are more fragile than they may seem. In\n        particular, misuse of the interface may lead to corrupted data.\n        For example, double-removing an element will cause the main list\n        reference to be set to <code>None</code>, thus emptying\n        the list. Similar problems arise from removing an element from a\n        list it doesn't belong to.\n      </blockquote>")))
 (idp8529072
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that the above code is careful to change the\n        <code>prev</code> pointer of the following element, and\n        the <code>next</code> pointer of the previous element, if\n        they exist. If there's no previous element, then the list\n        pointer itself is updated. In any case, the next and previous\n        pointers of the element itself are set to\n        <code>None</code>.\n      </blockquote>")))
 (idp8527360
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Finally, we need a <code>remove</code> function.\n      </blockquote>")))
 (idp8524304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can use <code>insert_after</code> to insert elements\n        later in the list. <code>insert_after</code> takes as\n        arguments both an <code>element</code> after which to\n        insert the new node, and a value to insert.\n      </blockquote>")))
 (idp8519136
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>insert_first</code> first defines a new element\n        <code>new_elt</code>, and then links it into the list,\n        finally setting the list itself to point to\n        <code>new_elt</code>. Note that the precedence of a\n        <code>match</code> expression is very low, so to separate\n        it from the following assignment\n        (<code>t := Some new_elt</code>) we surround the match\n        with <code>begin ... end</code>. We could have used\n        parenthesis for the same purpose. Without some kind of\n        bracketing, the final assignment would incorrectly become part\n        of the <code>None -&gt; ...</code> case.\n      </blockquote>")))
 (idp8517232
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Now, we'll start considering operations that mutate the list,\n        starting with <code>insert_first</code>, which inserts an\n        element at the front of the list.\n      </blockquote>")))
 (idp8515712
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This approach is quite limited, however. General purpose cyclic\n      data structures require mutation.\n    </blockquote>")))
 (idp8513856
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There is an exception to this, though: you can construct\n      fixed-size cyclic data-structures using\n      <code>let rec</code>.\n    </blockquote>")))
 (idp8513088
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Doubly-linked lists are a cyclic data structure, meaning that it\n      is possible to follow a nontrivial sequence of pointers that\n      closes in on itself. In general, building cyclic data structures\n      requires the use of side-effects. This is done by constructing the\n      data elements first, and then adding cycles using assignment\n      afterwards.\n    </blockquote>")))
 (idp8512080
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      These all follow relatively straight-forwardly from our type\n      definitions.\n    </blockquote>")))
 (idp8510880
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now we can define a few basic functions that operate on lists and\n      elements.\n    </blockquote>")))
 (idp8508000
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The type of the list itself, <code>'a t</code>, is a mutable\n      reference to an optional <code>element</code>. This\n      reference is <code>None</code> if the list is empty, and\n      <code>Some</code> otherwise.\n    </blockquote>")))
 (idp8504288
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      An <code>'a element</code> is a record containing the value\n      to be stored in that node as well as optional (and mutable) fields\n      pointing to the previous and next elements. At the beginning of\n      the list, the <code>prev</code> field is\n      <code>None</code>, and at the end of the list, the\n      <code>next</code> field is <code>None</code>.\n    </blockquote>")))
 (idp8501856
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now let's look at the implementation. We'll start by defining\n      <code>'a element</code> and <code>'a t</code>.\n    </blockquote>")))
 (idp8499936
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note that there are two types defined here:\n      <code>'a t</code>, the type of a list, and\n      <code>'a element</code>, the type of an element. Elements\n      act as pointers to the interior of a list, and allow us to\n      navigate the list and give us a point at which to apply mutating\n      operations.\n    </blockquote>")))
 (idp8498304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Here's the <code>mli</code> of the module we'll build.\n    </blockquote>")))
 (idp8496896
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Another common imperative data structure is the doubly-linked\n      list. Doubly-linked lists can be traversed in both directions and\n      elements can be added and removed from the list in constant time.\n      Core defines a doubly-linked list (the module is called\n      <code>Doubly_linked</code>), but we'll define our own linked\n      list library as an illustration.\n    </blockquote>")))
 (idp8493536
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      In the above, we used <code>incr</code> and\n      <code>decr</code>, which are build-in functions for\n      incrementing and decrementing an <code>int ref</code> by\n      one, respectively.\n    </blockquote>")))
 (idp8491536
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      OCaml also supports <code>while</code> loops, which include\n      a condition and a body. The loop first evaluates the condition,\n      and then, if it evaluates to true, evaluates the body and starts\n      the loop again. Here's a simple example of a function for\n      reversing an array in-place.\n    </blockquote>")))
 (idp8489088
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note that the loop variable of a <code>for</code> loop,\n      <code>i</code> in this case, is immutable in the scope of\n      the loop, and is also local to the loop, <code>i.e.</code>,\n      it can't be referenced outside of the loop.\n    </blockquote>")))
 (idp8487280
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      As you can see, the upper and lower bounds are inclusive. We can\n      also use <code>downto</code> to iterate in the other\n      direction.\n    </blockquote>")))
 (idp8482992
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The <code>for</code> loop is the simpler of the two. Indeed,\n      we've already seen the <code>for</code> loop in action ---\n      the <code>iter</code> function in\n      <code>Dictionary</code> is built using it. Here's a simple\n      example of <code>for</code>.\n    </blockquote>")))
 (idp8481248
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Nonetheless, explicit <code>for</code> and\n      <code>while</code> loops are both more idiomatic for\n      imperative programming and often more concise.\n    </blockquote>")))
 (idp8478656
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      OCaml provides support for traditional imperative looping\n      constructs, in particular, <code>for</code> and\n      <code>while</code> loops, even though neither of them is\n      strictly necessary. Anything you can do with such a loop you can\n      also do with a recursive function, and you can also write\n      higher-order functions like <code>Array.iter</code> that\n      cover much of the same ground.\n    </blockquote>")))
 (idp8474288
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Another source of imperative operations in OCaml is resources\n        that come from interfacing with external libraries through\n        OCaml's foreign function interface (FFI). The FFI opens OCaml up\n        to imperative constructs that are exported by system calls or\n        other external libraries. Many of these come built in, like\n        access to the <code>write</code> system call, or to the\n        <code>clock</code>; while others come from user libraries,\n        like LAPACK bindings.\n      </blockquote>")))
 (idp8471936
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          The above are just ordinary OCaml functions which could be\n          defined as follows.\n        </blockquote>")))
 (idp8470848
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          You can see these in action below.\n        </blockquote>")))
 (idp8469488
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>refcell := expr</code> replaces the contents\n              of the reference cell.\n            </blockquote>")))
 (idp8468016
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>!refcell</code> returns the contents of the\n              reference cell.\n            </blockquote>")))
 (idp8465872
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>ref expr</code> constructs a reference cell\n              containing the value defined by the expression\n              <code>expr</code>.\n            </blockquote>")))
 (idp8464848
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          The standard library defines the following operators for\n          working with refs.\n        </blockquote>")))
 (idp8463680
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          The definition for the ref type is as follows:\n        </blockquote>")))
 (idp8462176
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          Variables in OCaml are never mutable --- they can refer to\n          mutable data, but what the variable points to can't be\n          changed. Sometimes, though, you want to do exactly what you\n          would do with a mutable variable in another language: define a\n          single, mutable value. In OCaml this is typically achieved\n          using a <code>ref</code>, which is essentially a\n          container with a single mutable polymorphic field.\n        </blockquote>")))
 (idp8460256
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        As we'll see in <a href=\"objects.html\">Chapter\194\16011, <i>Objects</i></a>, fields of\n        an object can similarly be declared as mutable, and can then be\n        modified in much the same way as record fields.\n      </blockquote>")))
 (idp8458048
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        As we've seen, records are immutable by default, but individual\n        record fields can be declared as mutable. These mutable fields\n        can be set using the <code>&lt;-</code> operator,\n        <span><em>i.e.</em></span>,\n        <code>record.field &lt;- expr</code>.\n      </blockquote>")))
 (idp8454400
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          A <code>Bigarray.t</code> is a handle to a block of\n          memory stored outside of the OCaml heap. These are mostly\n          useful for interacting with C or Fortran libraries, and are\n          discussed in\n          <a href=\"memory-representation-of-values.html\">Chapter\194\16020, <i>Memory Representation of Values</i></a>.\n          Bigarrays too have their own getting and setting syntax:\n        </blockquote>")))
 (idp8452192
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          And string literals are bounded by quotes. There's also a\n          module <code>String</code> where you'll find useful\n          functions for working with strings.\n        </blockquote>")))
 (idp8450992
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          Strings also come with their own syntax for getting and\n          setting values:\n        </blockquote>")))
 (idp8448304
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          Strings are essentially byte-arrays which are often used for\n          textual data. The main advantage of using a\n          <code>string</code> in place of a\n          <code>Char.t array</code> (a <code>Char.t</code>\n          is an 8-bit character) is that the former is considerably more\n          space efficient; an array uses one word --- 8 bytes on a\n          64-bit machine --- to store a single entry, whereas strings\n          use one byte per character.\n        </blockquote>")))
 (idp8445040
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          Array literals are written using <code>[|</code> and\n          <code>|]</code> as delimiters. Thus,\n          <code>[| 1; 2; 3 |]</code> is a literal integer array.\n        </blockquote>")))
 (idp8444480
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          Out-of-bounds accesses for arrays (and indeed for all the\n          array-like data structures) will lead to an exception being\n          thrown.\n        </blockquote>")))
 (idp8443312
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          and for setting an element in an array:\n        </blockquote>")))
 (idp8442096
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          Arrays also come with special syntax for retrieving an element\n          from an array:\n        </blockquote>")))
 (idp8438848
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n          The <code>array</code> type is used for general purpose\n          polymorphic arrays. The <code>Array</code> module has a\n          variety of utility functions for interacting with arrays,\n          including a number of mutating operations. These include\n          <code>Array.set</code>, for setting an individual\n          element, and <code>Array.blit</code>, for efficiently\n          copying values from one range of indices to another.\n        </blockquote>")))
 (idp8436944
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        OCaml supports a number of array-like data structures;\n        <span><em>i.e.</em></span>, mutable integer-indexed containers\n        that provide constant-time access to their elements. We'll\n        discuss several of them below.\n      </blockquote>")))
 (idp8435280
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now that we've looked at a complete example, let's take a more\n      systematic look at imperative programming in OCaml. We encountered\n      two different forms of mutable data above: records with mutable\n      fields and arrays. We'll now discuss these in more detail, along\n      with the other primitive forms of mutable data that are available\n      in OCaml.\n    </blockquote>")))
 (idp8433584
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note also that we do all of the side-effecting operations at the\n      very end of each function. This is good practice because it\n      minimizes the chance that such operations will be interrupted with\n      an exception, leaving the data structure in an inconsistent state.\n    </blockquote>")))
 (idp8427264
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      When a sequence expression <code>expr1; expr2</code> is\n      evaluated, <code>expr1</code> is evaluated first, and then\n      <code>expr2</code>. The expression <code>expr1</code>\n      should have type <code>unit</code> (though this is a warning\n      rather than a hard restriction), and the value of\n      <code>expr2</code> is returned as the value of the entire\n      sequence. For example, the sequence\n      <code>print_string &quot;hello world&quot;; 1 + 2</code>\n      first prints the string\n      <code>&quot;hello world&quot;</code>, then returns the\n      integer <code>3</code>.\n    </blockquote>")))
 (idp8426176
  ((file imperative-programming-1.html)
   (html "<blockquote>\n      is equivalent to\n    </blockquote>")))
 (idp8424384
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      but <code>;</code> is more concise and idiomatic. More\n      generally,\n    </blockquote>")))
 (idp8422448
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We also use a single semicolon, <code>;</code>, as a\n      sequencing operator, to allow us to do a sequence of\n      side-effecting operations in a row: first, update the bucket, then\n      update the count. We could have done this using let bindings:\n    </blockquote>")))
 (idp8418944
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Another piece of syntax shows up in both <code>add</code>\n      and <code>remove</code>: the use of the\n      <code>&lt;-</code> operator to update elements of an array\n      (<code>array.(i) &lt;- expr</code>) and for updating a\n      record field (<code>record.field &lt;- expression</code>).\n    </blockquote>")))
 (idp8417120
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This above code is made more complicated by the fact that we need\n      to detect whether we are overwriting or removing an existing\n      binding, so we can decide whether <code>t.length</code>\n      needs to be changed. The helper function\n      <code>bucket_has_key</code> is used for this purpose.\n    </blockquote>")))
 (idp8415920
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The following code is for adding and removing mappings from the\n      dictionary.\n    </blockquote>")))
 (idp8412032
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The code for <code>iter</code> uses two forms of iteration:\n      a <code>for</code> loop to walk over the array of buckets;\n      and within that loop a call to <code>List.iter</code> to\n      walk over the values in a given bucket. We could have done the\n      outer loop with a recursive function instead of a\n      <code>for</code> loop, but <code>for</code> loops are\n      syntactically convenient, and are more familiar and idiomatic in\n      the context of imperative code.\n    </blockquote>")))
 (idp8406432
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>iter</code> is designed to walk over all the entries\n      in the dictionary. In particular, <code>iter t ~f</code>\n      will call <code>f</code> for each key/value pair in\n      dictionary <code>t</code>. Note that <code>f</code>\n      must return <code>unit</code>, since it is expected to work\n      by side effect rather than by returning a value, and the overall\n      <code>iter</code> function returns <code>unit</code>\n      as well.\n    </blockquote>")))
 (idp8404720
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now let's look at the implementation of <code>iter</code>:\n    </blockquote>")))
 (idp8398096
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>List.find_map</code> iterates over the elements of the\n      list, calling <code>f</code> on each one until a\n      <code>Some</code> is returned by <code>f</code>, at\n      which point the value returned by <code>f</code> is returned\n      by <code>find_map</code>. If <code>f</code> returns\n      <code>None</code> on all values, then\n      <code>None</code> is returned by\n      <code>find_map</code>.\n    </blockquote>")))
 (idp8394400
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Another bit of syntax has popped up in <code>find</code>: we\n      write <code>array.(index)</code> to grab a value from an\n      array. Also, <code>find</code> uses\n      <code>List.find_map</code>, which you can see the type of by\n      typing it into the toplevel:\n    </blockquote>")))
 (idp8393008
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>find</code> looks for a matching key in the table\n          and returns the corresponding value if found as an option.\n        </blockquote>")))
 (idp8391456
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>length</code> grabs the length from the\n          corresponding record field, thus returning the number of\n          entries stored in the dictionary.\n        </blockquote>")))
 (idp8390064
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>create</code> creates an empty dictionary.\n        </blockquote>")))
 (idp8389072
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The other functions defined above are fairly straightforward:\n    </blockquote>")))
 (idp8386464
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The function <code>hash_bucket</code> is used throughout the\n      rest of the module to choose the position in the array that a\n      given key should be stored at. It is implemented on top of\n      <code>Hashtbl.hash</code>, which is a hash function provided\n      by the OCaml runtime that can be applied to values of any type.\n      Thus, its own type is polymorphic:\n      <code>'a -&gt; int</code>.\n    </blockquote>")))
 (idp8385168
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note that <code>num_buckets</code> is a constant. That's\n      because, for simplicity's sake, we're using a fixed-length bucket\n      array. For a practical implementation, the length of the array\n      would have to be able to grow as the number of elements in the\n      dictionary increases.\n    </blockquote>")))
 (idp8383968
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now we'll start putting together the basic functions for\n      manipulating a dictionary.\n    </blockquote>")))
 (idp8382032
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The first field, <code>length</code> is declared as mutable.\n      In OCaml, records are immutable by default, but individual fields\n      are mutable when marked as such. The second field,\n      <code>buckets</code>, is immutable, but contains an array,\n      which is itself a mutable data structure, as we'll see.\n    </blockquote>")))
 (idp8380832
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Our first step is to define the type of a dictionary as a record\n      with two fields.\n    </blockquote>")))
 (idp8379616
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We'll now walk through the implementation (contained in the\n      corresponding <code>ml</code> file) piece by piece,\n      explaining different imperative constructs as they come up.\n    </blockquote>")))
 (idp8377616
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The <code>mli</code> also includes a collection of helper\n      functions whose purpose and behavior should be largely inferrable\n      from their names and type signatures. Notice that a number of the\n      functions, in particular, ones like <code>add</code> that\n      modify the dictionary, return unit. This is typical of functions\n      that act by side-effect.\n    </blockquote>")))
 (idp8373952
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Here's the interface we'll match, provided as an\n      <code>mli</code>. Here, the type\n      <code>('a, 'b) t</code> is used for a dictionary with keys\n      of type <code>'a</code> and data of type\n      <code>'b</code>.\n    </blockquote>")))
 (idp8372832
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Our dictionary, like those in Core and the standard library, will\n      be implemented as a hash table. In particular, we'll use an\n      <span><em>open hashing</em></span> scheme, which is to say the hash\n      table will be an array of buckets, each bucket containing a list\n      of key/value pairs that have been hashed into that bucket.\n    </blockquote>")))
 (idp8371136
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We'll start with the implementation of a simple imperative\n      dictionary, <span><em>i.e.</em></span>, a mutable mapping from keys\n      to values. This is really for illustration purposes; both Core and\n      the standard library provide imperative dictionaries, and for most\n      real world tasks, you should use one of those implementations.\n      There's more advice on using Core's implementation in particular\n      in <a href=\"maps-and-hash-tables.html\">Chapter\194\16013, <i>Maps and Hash Tables</i></a>.\n    </blockquote>")))
 (idp8369552
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    OCaml offers a happy compromise here, making it easy and natural to\n    program in a pure style, but also providing great support for\n    imperative programming where you need it. This chapter will walk you\n    through OCaml's imperative features, and help you use them to their\n    fullest.\n  </blockquote>")))
 (idp8368576
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    Pure code is the default in OCaml, and for good reason --- it's\n    generally easier to reason about, less error prone and more\n    composable. But imperative code is of fundamental importance to any\n    practical programming language because real-world tasks require that\n    you interact with the outside world, which is by its nature\n    imperative. Imperative programming can also be important for\n    performance. While pure code is quite efficient in OCaml, there are\n    many algorithms that can only be implemented efficiently using\n    imperative techniques.\n  </blockquote>")))
 (idp8366624
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    Most of the code shown so far in this book, and indeed, most OCaml\n    code in general, is <span><em>pure</em></span>. Pure code works\n    without mutating the program's internal state, performing I/O,\n    reading the clock, or in any other way interacting with changeable\n    parts of the world. Thus, a pure function behaves like a\n    mathematical function, always returning the same results when given\n    the same inputs, and never affecting the world except insofar as it\n    returns the value of its computation.\n    <span><em>Imperative</em></span> code, on the other hand, operates by\n    side-effects that modify a program's internal state or interact with\n    the outside world. An imperative function has a new effect, and\n    potentially returns different results, every time it's called.\n  </blockquote>")))
 (idp10318768
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Our example shells out to <code>curl</code> on the\n        command-line to obtain the JSON, which is rather inefficient.\n        We'll explain how to integrate the HTTP fetch directly into your\n        OCaml application later on in\n        <a href=\"concurrent-programming-with-async.html\">Chapter\194\16018, <i>Concurrent Programming with Async</i></a>.\n      </blockquote>")))
 (idp10316944
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        While this tool is obviously quite simple, the ability to\n        specify optional and default fields is very powerful. Take a\n        look at the full ATD specification for the GitHub API in the\n        <a href=\"http://github.com/avsm/ocaml-github\" target=\"_top\"><code>ocaml-github</code></a>\n        repository online, which has lots of quirks typical in\n        real-world web APIs.\n      </blockquote>")))
 (idp10314016
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The JSON returned from the <code>janestreet</code> query\n        is missing an organization name, but this is explicitly\n        reflected in the OCaml type since the ATD spec marked\n        <code>name</code> as an optional field. Our OCaml code\n        explicitly handles this case and doesn't have to worry about\n        null-pointer exceptions. Similarly, the JSON integer for the\n        <code>id</code> is mapped into a native OCaml integer via\n        the ATD conversion.\n      </blockquote>")))
 (idp10312656
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        You can now run the command-line tool with a single argument to\n        specify the name of the organization, and it will dynamically\n        fetch the JSON from the web, parse it, and render the summary to\n        your console.\n      </blockquote>")))
 (idp10311408
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Below is a short shell script that generates all of the OCaml\n        code and also builds the final executable.\n      </blockquote>")))
 (idp10308528
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The code below calls the cURL command-line utility by using the\n        <code>Core_extended.Shell</code> interface to run an\n        external command and capture its output. You'll need to ensure\n        that you have cURL installed on your system before running the\n        example. You might also need to\n        <code>opam install core_extended</code> if you haven't\n        installed it previously.\n      </blockquote>")))
 (idp10307936
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        All we need to complete our example is an OCaml program that\n        fetches the JSON and uses these modules to output a one-line\n        summary. Our example below does just that.\n      </blockquote>")))
 (idp10305040
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>Github_org_j</code> serializer interface\n        contains everything we need to map to-and-from the OCaml types\n        and JSON. The easiest way to use this interface is by using the\n        <code>string_of_org</code> and\n        <code>org_of_string</code> functions, but there are also\n        more advanced low-level buffer functions available if you need\n        higher performance (but we won't go into that in this tutorial).\n      </blockquote>")))
 (idp10302240
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The OCaml type has an obvious mapping to the ATD spec, but we\n        still need the logic to convert JSON buffers to and from this\n        type. Calling <code>atdgen -j</code> will generate this\n        serialization code for us in a new file called\n        <code>github_org_j.ml</code>.\n      </blockquote>")))
 (idp10300288
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Let's build the OCaml type declaration first by calling\n        <code>atdgen -t</code> on the specification file.\n      </blockquote>")))
 (idp10298912
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Now create an ATD file that covers the fields we need. Any extra\n        fields present in the response will be ignored by the ATD\n        parser, so we don't need a completely exhaustive specification\n        of every field that GitHub might send back.\n      </blockquote>")))
 (idp10297456
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Let's finish up with an example of some live JSON parsing from\n        GitHub, and build a tool to query organization information via\n        their API. Start by looking at the online\n        <a href=\"http://developer.github.com/v3/orgs/\" target=\"_top\">API\n        documentation</a> for GitHub to see what the JSON schema for\n        retrieving the organization information looks like.\n      </blockquote>")))
 (idp10293968
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        There are also several similar projects that automate the code\n        generation process. <a href=\"http://piqi.org\" target=\"_top\">Piqi</a>\n        supports conversions between XML. JSON, and the Google protobuf\n        format, and <a href=\"http://thrift.apache.org\" target=\"_top\">Thrift</a>\n        supports many other programming languages and includes OCaml\n        bindings.\n      </blockquote>")))
 (idp10292560
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The full\n        <a href=\"http://mjambon.com/atdgen/atdgen-manual.html\" target=\"_top\">ATD\n        specification</a> is quite sophisticated and documented\n        online. The ATD compiler can also target formats other than JSON\n        and outputs code for other languages (such as Java) if you need\n        more interoperability.\n      </blockquote>")))
 (idp10291040
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>-j-defaults</code>: always explicitly output a\n            JSON value if possible. This requires the default value for\n            that field to be defined in the ATD specification.\n          </blockquote>")))
 (idp10289408
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>-j-custom-fields FUNCTION</code>: call a custom\n            function for every unknown field encountered, instead of\n            raising a parsing exception.\n          </blockquote>")))
 (idp10287712
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>-j-std</code>: Convert tuples and variants into\n            standard JSON and refuse to print NaN and infinities. You\n            should specify this if you intend to interoperate with\n            services that aren't using ATD.\n          </blockquote>")))
 (idp10285760
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        This is pretty convenient! We've now written a single ATD file,\n        and all the OCaml boilerplate to convert between JSON and a\n        strongly typed record has been generated for us. You can control\n        various aspects of the serializer by passing flags to\n        <code>atdgen</code>. The important ones for JSON are:\n      </blockquote>")))
 (idp10282176
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>Github_t</code> module only contains the type\n        definitions, while <code>Github_j</code> provides\n        serialization functions to and from JSON. You can read the\n        <code>github_j.mli</code> to see the full interface, but\n        the important functions for most uses are the conversion\n        functions to and from a string. For our example above, this\n        looks like:\n      </blockquote>")))
 (idp10279200
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        There is an obvious correspondence to the ATD definition. Note\n        that field names in OCaml records in the same module cannot\n        shadow each other, and so we instruct ATDgen to prefix every\n        field with a name that distinguishes it from other records in\n        the same module. For example,\n        <code>&lt;ocaml field_prefix=&quot;auth_req_&quot;&gt;</code>\n        in the ATD spec prefixes every field name in the generated\n        <code>authorization_request</code> record with\n        <code>auth_req</code>.\n      </blockquote>")))
 (idp10275760
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The <code>atdgen</code> command will generate some new\n        files in your current directory. <code>Github_t.ml</code>\n        and <code>Github_t.mli</code> will contain an OCaml module\n        with types defines that correspond to the ATD file.\n      </blockquote>")))
 (idp10274336
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The ATD specification we defined above can be compiled to OCaml\n        code using the <code>atdgen</code> command-line tool.\n        Let's run the compiler twice, to generate some OCaml type\n        definitions and also a JSON serializing module that converts\n        between input data and those type definitions.\n      </blockquote>")))
 (idp10269104
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The annotation\n        <code>&lt;json name=&quot;user&quot;&gt;</code> signals\n        that the JSON value of the field is <code>user</code>, but\n        that the variable name of the parsed variant in OCaml should be\n        <code>User</code>. These annotations are often useful to\n        map JSON values to reserved keywords in OCaml\n        (<span><em>e.g.</em></span> <code>type</code>).\n      </blockquote>")))
 (idp10267664
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        For example, the GitHub <code>scope</code> field above is\n        defined as a variant type with each option starting with an\n        uppercase letter as is conventional for OCaml variants. However,\n        the the JSON values that come back from GitHub are actually\n        lowercase, and so aren't exactly the same as the option name.\n      </blockquote>")))
 (idp10266976
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        ATD deviates significantly from OCaml syntax due to its support\n        for annotations within the specification. The annotations can\n        customize the code that is generated for a particular target (of\n        which the OCaml backend is of most interest to us).\n      </blockquote>")))
 (idp10262832
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The ATD specification syntax is deliberately quite similar to\n        OCaml type definitions. Every JSON record is assigned a type\n        name (<span><em>e.g.</em></span> <code>app</code> in the\n        example above). You can also define variants that are similar to\n        OCaml's variant types (<span><em>e.g.</em></span>\n<code>scope</code> in the example).\n      </blockquote>")))
 (idp10260608
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        Let's go straight into looking at an example of how this works,\n        by using a small portion of the GitHub API. GitHub is a popular\n        code hosting and sharing website that provides a JSON-based web\n        <a href=\"http://developer.github.com\" target=\"_top\">API</a>. The ATD\n        code fragment below describes the GitHub authorization API\n        (which is based on a pseudo-standard web protocol known as\n        OAuth).\n      </blockquote>")))
 (idp10259168
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        The idea behind ATD is to specify the format of the JSON in a\n        separate file, and then run a compiler\n        (<code>atdgen</code>) that outputs OCaml code to construct\n        and parse JSON values. This means that you don't need to write\n        any OCaml parsing code at all, as it will all be autogenerated\n        for you.\n      </blockquote>")))
 (idp10254608
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The command-line tool will be installed within your\n      <code>~/.opam</code> directory, and should already be on\n      your <code>PATH</code> from running\n      <code>opam config env</code>. See\n      <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a> if this isn't working.\n    </blockquote>")))
 (idp10253312
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      ATDgen installs some OCaml libraries that interface with Yojson,\n      and also a command-line tool that generates code. It can all be\n      installed via OPAM:\n    </blockquote>")))
 (idp10250720
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      We'll cover an alternative JSON processing method that is better\n      for larger-scale JSON handling now, using the\n      <a href=\"http://mjambon.com/atd-biniou-intro.html\" target=\"_top\">ATD</a>\n      tool. This will introduce our first <span><em>Domain Specific\n      Language</em></span> that compiles JSON specifications into OCaml\n      modules, which are then used throughout your application.\n    </blockquote>")))
 (idp10249952
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The combinators described earlier make it easy to write functions\n      that extract fields from JSON records, but the process is still\n      pretty manual. When you implement larger specifications, it's much\n      easier to generate the mappings from JSON schemas to OCaml values\n      more mechanically than writing conversion functions individually.\n    </blockquote>")))
 (idp10245216
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      You can convert a <code>Safe.json</code> to a\n      <code>Basic.json</code> type by using the\n      <code>to_basic</code> function as follows.\n    </blockquote>")))
 (idp10244496
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The only purpose of these extensions is to have greater control\n      over how OCaml values are represented in JSON (for instance,\n      storing a floating-pointer number as a JSON string). The output\n      still obeys the same standard format that can be easily exchanged\n      with other languages.\n    </blockquote>")))
 (idp10241584
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The <code>Variant</code> type encodes OCaml variants\n          more explicitly, as <code>&lt;&quot;Foo&quot;&gt;</code>\n          or <code>&lt;&quot;Bar&quot;:123&gt;</code> for a\n          variant with parameters.\n        </blockquote>")))
 (idp10239312
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The <code>Tuple</code> type is stored as\n          <code>(&quot;abc&quot;, 123)</code> instead of a list.\n        </blockquote>")))
 (idp10235568
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The <code>lit</code> suffix denotes that the value is\n          stored as a JSON string. For example, a\n          <code>Floatlit</code> will be stored as\n          <code>&quot;1.234&quot;</code> instead of\n          <code>1.234</code>.\n        </blockquote>")))
 (idp10234592
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Yojson supports the following JSON extensions:\n    </blockquote>")))
 (idp10229536
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The <code>Safe.json</code> type includes all of the variants\n      from <code>Basic.json</code> and extends it with a few more\n      useful ones. A standard JSON type such as a\n      <code>String</code> will type-check against both the\n      <code>Basic</code> module and also the non-standard\n      <code>Safe</code> module. If you use the extended values\n      with the <code>Basic</code> module however, the compiler\n      will reject your code until you make it compliant with the\n      portable subset of JSON.\n    </blockquote>")))
 (idp10226208
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The standard JSON types are <span><em>really</em></span> basic, and\n      OCaml types are far more expressive. Yojson supports an extended\n      JSON format for those times when you're not interoperating with\n      external systems and just want a convenient human-readable local\n      format. The <code>Yojson.Safe.json</code> type is a superset\n      of the <code>Basic</code> polymorphic variant, and looks\n      like this:\n    </blockquote>")))
 (idp10223552
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      We'll discuss more techniques like this that help you interpret\n      type errors more easily in\n      <a href=\"the-compiler-frontend-parsing-and-type-checking.html\">Chapter\194\16022, <i>The Compiler Frontend: Parsing and Type Checking</i></a>.\n    </blockquote>")))
 (idp10220560
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      We've annotated <code>person</code> as being of type\n      <code>Yojson.Basic.json</code>, and as a result the compiler\n      spots that the argument to the <code>Assoc</code> variant\n      has the incorrect type. This illustrates the strengths and\n      weaknesses of polymorphic variants: they make it possible to\n      easily subtype across module boundaries, but the error messages\n      can be more confusing. However, a bit of careful manual type\n      annotation is all it takes to make tracking down such issues much\n      easier.\n    </blockquote>")))
 (idp10219136
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The type error above is more verbose than it needs to be, which\n      can be inconvenient to wade through for larger values. You can\n      help the compiler to narrow down this error to a shorter form by\n      adding explicit type annotations as a hint about your intentions.\n    </blockquote>")))
 (idp10217008
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      One difficulty you will encounter is that type errors involving\n      polymorphic variants can be quite verbose if you make a mistake in\n      your code. For example, suppose you build an\n      <code>Assoc</code> and mistakenly include a single value\n      instead of a list of keys:\n    </blockquote>")))
 (idp10213392
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      In this case, there are no problems. Our <code>person</code>\n      value has an inferred type that is a valid sub-type of\n      <code>json</code>, and so the conversion to a string just\n      works without us ever having to explicitly specify a type for\n      <code>person</code>. Type inference lets you write more\n      succinct code without sacrificing runtime reliability, as all the\n      uses of polymorphic variants are still checked at compile-time.\n    </blockquote>")))
 (idp10207760
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The <code>pretty_to_string</code> function has a more\n      explicit signature that requires an argument of type\n      <code>Yojson.Basic.json</code>. When\n      <code>person</code> is applied to\n      <code>pretty_to_string</code>, the inferred type of\n      <code>person</code> is statically checked against the\n      structure of the <code>json</code> type to ensure that\n      they're compatible.\n    </blockquote>")))
 (idp10202320
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The OCaml type system infers a type for <code>person</code>\n      based on how you construct its value. In this case, only the\n      <code>Assoc</code> and <code>String</code> variants\n      are used to define the record, and so the inferred type only\n      contains these fields without knowledge of the other possible\n      allowed variants in JSON records that you haven't used yet\n      (<span><em>e.g.</em></span> <code>Int</code> or\n      <code>Null</code>).\n    </blockquote>")))
 (idp10200960
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      In the example above, we've constructed a simple JSON object that\n      represents a single person. We haven't actually defined the type\n      of <code>person</code> explicitly, as we're relying on the\n      magic of polymorphic variants to make this all work.\n    </blockquote>")))
 (idp10198960
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      We can directly build a JSON value against this type and use the\n      pretty-printing functions in the <code>Yojson.Basic</code>\n      module to display JSON output.\n    </blockquote>")))
 (idp10194800
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Building and printing JSON values is pretty straightforward given\n      the <code>Yojson.Basic.json</code> type. You can just\n      construct values of type <code>json</code> and call the\n      <code>to_string</code> function on them. Let's remind\n      ourselves of the <code>Yojson.Basic.json</code> type again.\n    </blockquote>")))
 (idp10192800
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      This technique of using chained parsing functions is very powerful\n      in combination with the OCaml type system. Many errors that don't\n      make sense at runtime (for example, mixing up lists and objects)\n      will be caught statically via a type error.\n    </blockquote>")))
 (idp10191520
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      This style of programming which omits variable names and chains\n      functions together is known as <span><em>point-free\n      programming</em></span>. It's a succinct style, but shouldn't be\n      overused due to the increased difficulty of debugging intermediate\n      values. If an explicit name is assigned to each stage of the\n      transformations, debuggers in particular have an easier time\n      making the program flow easier to represent to the programmer.\n    </blockquote>")))
 (idp10186592
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The final use of JSON combinators is to extract all the\n      <code>name</code> fields from the list of authors. We first\n      construct the <code>author list</code>, and then\n      <code>map</code> it into a <code>string list</code>.\n      Notice that the example explicitly binds\n      <code>authors</code> to a variable name. It can also be\n      written more succinctly using the pipe-forward operator:\n    </blockquote>")))
 (idp10180240
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The <code>is_online</code> and\n      <code>is_translated</code> fields are optional in our JSON\n      schema, so no error should be raised if they are not present. The\n      OCaml type is a <code>bool option</code> to reflect this,\n      and can be extracted via <code>to_bool_option</code>. In our\n      example JSON, only <code>is_online</code> is present and\n      <code>is_translated</code> will be <code>None</code>.\n    </blockquote>")))
 (idp10172976
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The <code>tags</code> field is similar to\n      <code>title</code>, but the field is a list of strings\n      instead of a single one. Converting this to an OCaml\n      <code>string list</code> is a two stage process. First, we\n      convert the JSON <code>List</code> to an OCaml list of JSON\n      values, and then filter out the <code>String</code> values\n      as an OCaml <code>string list</code>. Remember that OCaml\n      lists must contain values of the same type, so any JSON values\n      that cannot be converted to a <code>string</code> will be\n      skipped from the output of <code>filter_string</code>.\n    </blockquote>")))
 (idp10167856
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The <code>member</code> function accepts a JSON object and\n      named key and returns the JSON field associated with that key, or\n      <code>Null</code>. Since we know that the\n      <code>title</code> value is always a string in our example\n      schema, we want to convert it to an OCaml string. The\n      <code>to_string</code> function performs this conversion,\n      and raises an exception if there is an unexpected JSON type. The\n      <code>|&gt;</code> operator provides a convenient way to\n      chain these operations together.\n    </blockquote>")))
 (idp10165936
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Let's start with selecting a single <code>title</code> field\n      from the record.\n    </blockquote>")))
 (idp10163152
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      We'll go through each of these uses one-by-one now. The examples\n      below also use the <code>|&gt;</code> pipe-forward operator\n      that we explained earlier in\n      <a href=\"variables-and-functions.html\">Chapter\194\1602, <i>Variables and Functions</i></a>. This lets us\n      chain together multiple JSON selection functions and feed the\n      output from one into the next one, without having to create\n      separate <code>let</code> bindings for each one.\n    </blockquote>")))
 (idp10145232
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>Yojson</code> provides several combinators in the\n      <code>Yojson.Basic.Util</code> module.\n    </blockquote>")))
 (idp10143696
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>iter</code> is a more specialized combinator that is\n      only useful in OCaml due to side-effects being allowed. The input\n      function is applied to every value, but no result is supplied. The\n      function must instead apply some side-effect such as changing a\n      mutable record field or printing to the standard output.\n    </blockquote>")))
 (idp10139488
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<code>map</code> and <code>fold</code> are extremely\n      common combinators that transform an input list by applying a\n      function to each value of the list. The <code>map</code>\n      combinator is simplest, with the resulting list being output\n      directly. <code>fold</code> applies each value in the input\n      list to a function that accumulates a single result, and returns\n      that instead.\n    </blockquote>")))
 (idp10137584
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      You've already run across several of these in the\n      <code>List</code> module:\n    </blockquote>")))
 (idp10136352
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Combinators are a design pattern that crops up quite often in\n      functional programming. John Hughes defines them as &quot;a\n      function which builds program fragments from program\n      fragments&quot;. In a functional language, this generally means\n      higher-order functions that combine other functions to apply\n      useful transformations over values.\n    </blockquote>")))
 (idp10133952
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      This code introduces the <code>Yojson.Basic.Util</code>\n      module, which contains <span><em>combinator</em></span> functions\n      that let you easily map a JSON object into a more strongly-typed\n      OCaml value.\n    </blockquote>")))
 (idp10131312
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Build this with the same <code>_tags</code> file as the\n      earlier example, and run <code>ocamlbuild</code> on the new\n      file.\n    </blockquote>")))
 (idp10130032
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Now that we've figured out how to parse the example JSON into an\n      OCaml value, let's manipulate it from OCaml code and extract\n      specific fields.\n    </blockquote>")))
 (idp10125792
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The <code>from_file</code> function accepts an input\n      filename and takes care of opening and closing it for you. It's\n      far more common to use <code>from_string</code> to construct\n      JSON values though, since these strings come in via a network\n      connection (we'll see more of this in\n      <a href=\"concurrent-programming-with-async.html\">Chapter\194\16018, <i>Concurrent Programming with Async</i></a>) or\n      a database. Finally, the example checks that the two input\n      mechanisms actually resulted in the same OCaml data structure.\n    </blockquote>")))
 (idp10123152
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      You can build this by writing a <code>_tags</code> file to\n      define the package dependencies, and then running\n      <code>ocamlbuild</code>.\n    </blockquote>")))
 (idp10121184
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The next example shows both the string and file functions in\n      action, assuming the JSON record is stored in a file called\n      <code>book.json</code>.\n    </blockquote>")))
 (idp10119792
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The type signature for these functions with the optional elements\n      removed makes their purpose much clearer. The three ways of\n      parsing JSON are either directly from a string, from a file on a\n      filesystem, or via a buffered input channel.\n    </blockquote>")))
 (idp10119008
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      When first reading these interfaces, you can generally ignore the\n      optional arguments (which have the question marks in the type\n      signature), as they will be filled in with sensible values. In the\n      above signature, the optional arguments offer finer control over\n      the memory buffer allocation and error messages from parsing\n      incorrect JSON.\n    </blockquote>")))
 (idp10117024
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Let's parse the earlier JSON example into this type now. The first\n      stop is the <code>Yojson.Basic</code> documentation, where\n      we find these helpful functions:\n    </blockquote>")))
 (idp10116160
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The type definition uses polymorphic variants and not normal\n          variants. This will become significant later when we extend it\n          with custom extensions to the JSON format.\n        </blockquote>")))
 (idp10114480
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          The definition specifically includes a <code>Null</code>\n          variant for empty fields. OCaml doesn't allow null values by\n          default, so this must be encoded like any other value.\n        </blockquote>")))
 (idp10110752
  ((file handling-json-data.html)
   (html
    "<blockquote>\n          Some of the type definitions are\n          <span><em>recursive</em></span> (that is, one of the algebraic\n          data types includes a reference to the name of the type being\n          defined). <code>Assoc</code> types can contain\n          references to further JSON values and the\n          <code>List</code> type can contain JSON values of\n          different types, unlike the OCaml <code>list</code>\n          whose contents must be of a uniform type.\n        </blockquote>")))
 (idp10109744
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Some interesting properties should leap out at you after reading\n      this definition:\n    </blockquote>")))
 (idp10107776
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The JSON specification has very few data types, and the\n      <code>Yojson.Basic.json</code> type shown below is\n      sufficient to express any valid JSON structure.\n    </blockquote>")))
 (idp10101664
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      There are several JSON libraries available for OCaml. For this\n      chapter, we've picked the\n      <a href=\"http://mjambon.com/yojson.html\" target=\"_top\"><code>Yojson</code></a>\n      library by Martin Jambon. It's easiest to install via OPAM by\n      running <code>opam install yojson</code>. See\n      <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a> for installation\n      instructions if you haven't already got OPAM. Once installed, you\n      can open it in the <code>utop</code> toplevel by:\n    </blockquote>")))
 (idp10099376
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      Our first task is to parse the JSON into a more structured OCaml\n      type so that we can use static typing more effectively. When\n      manipulating JSON in Python or Ruby, you might write unit tests to\n      check that you have handled unusual inputs. The OCaml model\n      prefers compile-time static checking as well as unit tests. For\n      example, using pattern matching can warn you if you've not checked\n      that a value can be <code>Null</code> as well as contain an\n      actual value.\n    </blockquote>")))
 (idp10097216
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      This free-form nature of JSON types is both a blessing and a\n      curse. It's very easy to generate JSON values, but code that\n      parses them also has to handle subtle variations in how the values\n      are represented. For example, what if the <code>pages</code>\n      value above is actually represented as a string value of\n      <code>&quot;450&quot;</code> instead of an integer?\n    </blockquote>")))
 (idp10094992
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      The outermost JSON value is usually a record (delimited by the\n      curly braces) and contains an unordered set of key/value pairs.\n      The keys must be strings but values can be any JSON type. In the\n      example above, <code>tags</code> is a string list, while the\n      <code>authors</code> field contains a list of records.\n      Unlike OCaml lists, JSON lists can contain multiple different JSON\n      types within a single list.\n    </blockquote>")))
 (idp10093616
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      JSON consists of two basic structures: an unordered collection of\n      key/value pairs, and an ordered list of values. Values can be\n      strings, booleans, floats, integers or null. Let's see what a JSON\n      record for an example book description looks like:\n    </blockquote>")))
 (idp10092128
  ((file handling-json-data.html)
   (html
    "<blockquote>\n      JSON is a lightweight data-interchange format often used in web\n      services and browsers. It's described in\n      <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" target=\"_top\">RFC4627</a>,\n      and is easier to parse and generate than alternatives such as XML.\n      You'll run into JSON very often when working with modern web APIs,\n      so we'll cover several different ways to manipulate it in this\n      chapter.\n    </blockquote>")))
 (idp10090192
  ((file handling-json-data.html)
   (html
    "<blockquote>\n        external tools to generate boilerplate OCaml modules and\n        signatures from external specification files.\n      </blockquote>")))
 (idp10088912
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<span><em>functional combinators</em></span> to compose common\n        operations over data structures in a type-safe way.\n      </blockquote>")))
 (idp10087584
  ((file handling-json-data.html)
   (html
    "<blockquote>\n<span><em>polymorphic variants</em></span> to write more\n        extensible libraries and protocols (but still retain the ability\n        to extend them if needed)\n      </blockquote>")))
 (idp10086400
  ((file handling-json-data.html)
   (html
    "<blockquote>\n    We'll start by using the popular and simple JSON data format and\n    then look at other serialization formats later in the book. This\n    chapter introduces you to a couple of new techniques that glue\n    together the basic ideas from Part I of the book by using:\n  </blockquote>")))
 (idp10085056
  ((file handling-json-data.html)
   (html
    "<blockquote>\n    Data serialization, <span><em>i.e.</em></span> converting data to and\n    from a sequence of bytes that's suitable for writing to disk or\n    sending across the network, is an important and common programming\n    task. You often have to match someone else's data format (such as\n    XML), sometimes you need a highly efficient format, and other times\n    you want something that is easy for humans to edit. To this end,\n    OCaml libraries provide several techniques for data serialization\n    depending on what your problem is.\n  </blockquote>")))
 (idp9019824
  ((file functors.html)
   (html
    "<blockquote>\n      These functors come in handy when you want to add the same kind of\n      functionality that is commonly available in Core to your own\n      types.\n    </blockquote>")))
 (idp9015440
  ((file functors.html)
   (html
    "<blockquote>\n<code>Monad.Make</code> for so-called monadic libraries,\n          like the ones discussed in\n          <a href=\"error-handling.html\">Chapter\194\1607, <i>Error Handling</i></a> and\n          <a href=\"concurrent-programming-with-async.html\">Chapter\194\16018, <i>Concurrent Programming with Async</i></a>.\n          Here, the functor is used to provide a collection of standard\n          helper functions based on the <code>bind</code> and\n          <code>return</code> operators.\n        </blockquote>")))
 (idp9013840
  ((file functors.html)
   (html
    "<blockquote>\n<code>Hashable.Make</code> for adding hash-based data\n          structures like hash sets and hash heaps for types that have\n          hash functions.\n        </blockquote>")))
 (idp9012240
  ((file functors.html)
   (html
    "<blockquote>\n<code>Comparable.Make</code>, which adds a variety of\n          helper functions and types for types that have a comparison\n          function.\n        </blockquote>")))
 (idp9010016
  ((file functors.html)
   (html
    "<blockquote>\n<code>Container.Make</code>, which is very similar to\n          <code>Foldable.Extend</code>.\n        </blockquote>")))
 (idp9008976
  ((file functors.html)
   (html
    "<blockquote>\n      Core comes with a number of functors for extending modules that\n      follow this same basic pattern, including:\n    </blockquote>")))
 (idp9004896
  ((file functors.html)
   (html
    "<blockquote>\n      In order to apply the functor, we'll put the definition of\n      <code>Fqueue</code> in a sub-module called\n      <code>T</code>, and then call\n      <code>Foldable.Extend</code> on <code>T</code>.\n    </blockquote>")))
 (idp9002272
  ((file functors.html)
   (html
    "<blockquote>\n      Now we can apply this to <code>Fqueue</code>. We can rewrite\n      the interface of <code>Fqueue</code> as follows.\n    </blockquote>")))
 (idp8997312
  ((file functors.html)
   (html
    "<blockquote>\n      We'll create a new module, <code>Foldable</code> that\n      automates the process of adding helper functions to a\n      fold-supporting container. As you can see,\n      <code>Foldable</code> contains a module signature\n      <code>S</code> which defines the signature that is required\n      to support folding; and a functor <code>Extend</code> that\n      allows one to extend any module that matches\n      <code>Foldable.S</code>.\n    </blockquote>")))
 (idp8995840
  ((file functors.html)
   (html
    "<blockquote>\n      As it happens, many of these helper functions can be derived\n      mechanically from just the fold function we already implemented.\n      Rather than write all of these helper functions by hand for every\n      new container type, we can instead use a functor that will let us\n      add this functionality to any container that has a\n      <code>fold</code> function.\n    </blockquote>")))
 (idp8992064
  ((file functors.html)
   (html
    "<blockquote>\n      One problem with <code>Fqueue</code> is that the interface\n      is quite skeletal. There are lots of useful helper functions that\n      one might want that aren't there. The list module, by way of\n      contrast, has functions like <code>List.iter</code>, which\n      runs a function on each element; and\n      <code>List.for_all</code>, which returns true if and only if\n      the given predicate evaluates to <code>true</code> on every\n      element of the list. Such helper functions come up for pretty much\n      every container type, and implementing them over and over is a\n      dull and repetitive affair.\n    </blockquote>")))
 (idp8988432
  ((file functors.html)
   (html
    "<blockquote>\n      Now let's implement <code>Fqueue</code>. A standard trick is\n      for the <code>Fqueue</code> to maintain an input and an\n      output list, so that one can efficiently\n      <code>enqueue</code> on the input list and efficiently\n      dequeue from the output list. If you attempt to dequeue when the\n      output list is empty, the input list is reversed and becomes the\n      new output list. Here's an implementation that uses that trick.\n    </blockquote>")))
 (idp8982640
  ((file functors.html)
   (html
    "<blockquote>\n      The <code>Fqueue.fold</code> function above requires some\n      explanation. It follows the same pattern as the\n      <code>List.fold</code> function we described in\n      <a href=\"lists-and-patterns.html#using-the-list-module-effectively\">the section called \226\128\156Using the <code>List</code> module effectively\226\128\157</a>.\n      Essentially, <code>Fqueue.fold q ~init ~f</code> walks over\n      the elements of <code>q</code> from front to back, starting\n      with an accumulator of <code>init</code> and using\n      <code>f</code> to update the accumulator value as it walks\n      over the queue, returning the final value of the accumulator at\n      the end of the computation. Fold is a quite powerful operation, as\n      we'll see.\n    </blockquote>")))
 (idp8980784
  ((file functors.html)
   (html
    "<blockquote>\n      Here's a reasonable <code>mli</code> for such a module.\n    </blockquote>")))
 (idp8979968
  ((file functors.html)
   (html
    "<blockquote>\n      Another common use of functors is to generate type-specific\n      functionality for a given module in a standardized way. Let's see\n      how this works in the context of a functional queue, which is just\n      a functional version of a FIFO (first-in, first-out) queue. Being\n      functional, operations on the queue return new queues, rather than\n      modifying the queues that were passed in.\n    </blockquote>")))
 (idp8977456
  ((file functors.html)
   (html
    "<blockquote>\n        And now, we can use that sexp-converter in the ordinary way:\n      </blockquote>")))
 (idp8976080
  ((file functors.html)
   (html
    "<blockquote>\n        Now we can write the functor itself. We have been careful to\n        override the sexp-converter here to ensure that the data\n        structure's invariants are still maintained when reading in from\n        an s-expression.\n      </blockquote>")))
 (idp8973200
  ((file functors.html)
   (html
    "<blockquote>\n        Equivalently, we can define a type <code>t</code> within\n        our new module, and apply destructive substitutions to all of\n        the included interfaces, <code>Interval_intf</code>\n        included, as shown below. This is somewhat cleaner when\n        combining multiple interfaces, since it correctly reflects that\n        all of the signatures are being handled equivalently.\n      </blockquote>")))
 (idp8968192
  ((file functors.html)
   (html
    "<blockquote>\n        We can modify <code>Make_interval</code> to use the\n        <code>Sexpable</code> interface, for both its input and\n        its output. First, let's create an extended version of the\n        <code>Interval_intf</code> interface that includes the\n        functions from the Sexpable interface. We can do this using\n        destructive substitution on the <code>Sexpable</code>\n        interface, to avoid having multiple distinct type\n        <code>t</code>'s clashing with each other.\n      </blockquote>")))
 (idp8966224
  ((file functors.html)
   (html
    "<blockquote>\n        Happily, Core comes with a built in interface for just this\n        purpose called <code>Sexpable</code>, which is defined as\n        follows:\n      </blockquote>")))
 (idp8961968
  ((file functors.html)
   (html
    "<blockquote>\n        The problem is that <code>with sexp</code> adds code for\n        defining the s-expression converters, and that code assumes that\n        <code>Endpoint</code> has the appropriate sexp-conversion\n        functions for <code>Endpoint.t</code>. But all we know\n        about <code>Endpoint</code> is that it satisfies the\n        <code>Comparable</code> interface, which doesn't say\n        anything about s-expressions.\n      </blockquote>")))
 (idp8957856
  ((file functors.html)
   (html
    "<blockquote>\n        We'll discuss s-expressions and <code>sexplib</code> in\n        more detail in\n        <a href=\"data-serialization-with-s-expressions.html\">Chapter\194\16017, <i>Data Serialization with S-Expressions</i></a>,\n        but for now, let's see what happens if we attach the\n        <code>with sexp</code> declaration to the definition of\n        <code>t</code> within the functor.\n      </blockquote>")))
 (idp8955024
  ((file functors.html)
   (html
    "<blockquote>\n        Core comes with a syntax extension called\n        <code>sexplib</code> which can autogenerate s-expression\n        conversion functions from a type declaration. Attaching\n        <code>with sexp</code> to a type definition signals to the\n        extension to generate the converters. Thus, we can write:\n      </blockquote>")))
 (idp8951856
  ((file functors.html)
   (html
    "<blockquote>\n        Another feature that we might want for our interval module is\n        the ability to <span><em>serialize</em></span>,\n        <span><em>i.e.</em></span>, to be able to read and write\n        intervals as a stream of bytes. In this case, we'll do this by\n        converting to and from s-expressions, which were mentioned\n        already in <a href=\"error-handling.html\">Chapter\194\1607, <i>Error Handling</i></a>. To\n        recall, an s-expression is essentially a parenthesized\n        expression whose atoms are strings, and it is a serialization\n        format that is used commonly in Core. Here's an example.\n      </blockquote>")))
 (idp8950000
  ((file functors.html)
   (html
    "<blockquote>\n        It's worth noting that the name is somewhat misleading, in that\n        there's nothing destructive about destructive substitution; it's\n        really just a way of creating a new signature by transforming an\n        existing one.\n      </blockquote>")))
 (idp8948016
  ((file functors.html)
   (html
    "<blockquote>\n        In addition, the <code>endpoint</code> type is gone from\n        the interface, meaning we no longer need to define the\n        <code>endpoint</code> type alias in the body of the\n        module.\n      </blockquote>")))
 (idp8945184
  ((file functors.html)
   (html
    "<blockquote>\n        The interface is precisely what we want: the type\n        <code>t</code> is abstract, the type of the endpoint is\n        exposed, so we can create values of type\n        <code>Int_interval.t</code> using the creation function,\n        but not directly using the constructors and thereby violating\n        the invariants of the module, as you can see below.\n      </blockquote>")))
 (idp8942496
  ((file functors.html)
   (html
    "<blockquote>\n        There's now no <code>endpoint</code> type: all of its\n        occurrences of have been replaced by <code>int</code>. As\n        with sharing constraints, we can also use this in the context of\n        a functor.\n      </blockquote>")))
 (idp8940576
  ((file functors.html)
   (html
    "<blockquote>\n        The following shows how we could use this with\n        <code>Make_interval</code>.\n      </blockquote>")))
 (idp8934944
  ((file functors.html)
   (html
    "<blockquote>\n        Sharing constraints basically do the job, but they have some\n        downsides. In particular, we've now been stuck with the useless\n        type declaration of <code>endpoint</code> that clutters up\n        both the interface and the implementation. A better solution\n        would be to modify the <code>Interval_intf</code>\n        signature by replacing <code>endpoint</code> with\n        <code>Endpoint.t</code> everywhere it shows up, and\n        deleting the definition of <code>endpoint</code> from the\n        signature. We can do just this using what's called\n        <span><em>destructive substitution</em></span>. Here's the basic\n        syntax.\n      </blockquote>")))
 (idp8930176
  ((file functors.html)
   (html
    "<blockquote>\n        So now, the interface is as it was, except that\n        <code>endpoint</code> is now known to be equal to\n        <code>Endpoint.t</code>. As a result of that type\n        equality, we can again do things that require that\n        <code>endpoint</code> be exposed, like constructing\n        intervals.\n      </blockquote>")))
 (idp8926704
  ((file functors.html)
   (html
    "<blockquote>\n        In this case, we'd like to expose an equality between the type\n        <code>endpoint</code> in the new module and the type\n        <code>Endpoint.t</code>, from the module\n        <code>Endpoint</code> that is the functor argument. We can\n        do this as follows.\n      </blockquote>")))
 (idp8926016
  ((file functors.html)
   (html
    "<blockquote>\n        We can also use sharing constraints in the context of a functor.\n        The most common use case is where you want to expose that some\n        of the types of the module being generated by the functor are\n        related to the types in the module fed to the functor.\n      </blockquote>")))
 (idp8924064
  ((file functors.html)
   (html
    "<blockquote>\n        We can use a sharing constraint to create a specialized version\n        of <code>Interval_intf</code> for integer intervals.\n      </blockquote>")))
 (idp8921216
  ((file functors.html)
   (html
    "<blockquote>\n        The result of this expression is a new signature that's been\n        modified so that it exposes the fact that\n        <code>&lt;type&gt;</code> defined inside of the module\n        type is equal to <code>&lt;type'&gt;</code> whose\n        definition is outside of it. One can also apply multiple sharing\n        constraints to the same signature.\n      </blockquote>")))
 (idp8916416
  ((file functors.html)
   (html
    "<blockquote>\n        To fix this, we need to expose the fact that\n        <code>endpoint</code> is equal to <code>Int.t</code>\n        (or more generally, <code>Endpoint.t</code>, where\n        <code>Endpoint</code> is the argument to the functor). One\n        way of doing this is through a <span><em>sharing\n        constraint</em></span>, which allows you to tell the compiler to\n        expose the fact that a given type is equal to some other type.\n        The syntax for a simple sharing constraint is as follows.\n      </blockquote>")))
 (idp8914352
  ((file functors.html)
   (html
    "<blockquote>\n        The resulting module is abstract, but it's unfortunately too\n        abstract. In particular, we haven't exposed the type\n        <code>endpoint</code>, which means that we can't even\n        construct an interval anymore.\n      </blockquote>")))
 (idp8908848
  ((file functors.html)
   (html
    "<blockquote>\n        This interface includes the type <code>endpoint</code> to\n        give us a way of referring to the endpoint type. Given this\n        interface, we can redo our definition of\n        <code>Make_interval</code>. Notice that we added the type\n        <code>endpoint</code> to the implementation of the module\n        to match <code>Interval_intf</code>.\n      </blockquote>")))
 (idp8906128
  ((file functors.html)
   (html
    "<blockquote>\n        To make <code>Int_interval.t</code> abstract, we need to\n        restrict the output of <code>Make_interval</code> with an\n        interface. Here's an explicit interface that we can use for that\n        purpose.\n      </blockquote>")))
 (idp8902544
  ((file functors.html)
   (html
    "<blockquote>\n        There's a problem with <code>Make_interval</code>. The\n        code we wrote depends on the invariant that the upper bound of\n        an interval is greater than its lower bound, but that invariant\n        can be violated. The invariant is enforced by the create\n        function, but because <code>Interval.t</code> is not\n        abstract, we can bypass the <code>create</code> function.\n      </blockquote>")))
 (idp8900832
  ((file functors.html)
   (html
    "<blockquote>\n      This is important, because confusing the two kinds of intervals\n      would be a semantic error, and it's an easy one to make. The\n      ability of functors to mint new types is a useful trick that comes\n      up a lot.\n    </blockquote>")))
 (idp8898112
  ((file functors.html)
   (html
    "<blockquote>\n      Importantly, <code>Rev_int_interval.t</code> is a different\n      type than <code>Int_interval.t</code>, even though its\n      physical representation is the same. Indeed, the type system will\n      prevent us from confusing them.\n    </blockquote>")))
 (idp8895488
  ((file functors.html)
   (html
    "<blockquote>\n      The behavior of <code>Rev_int_interval</code> is of course\n      different from <code>Int_interval</code>, as we can see\n      below.\n    </blockquote>")))
 (idp8894112
  ((file functors.html)
   (html
    "<blockquote>\n      This design gives us the freedom to use any comparison function we\n      want for comparing the endpoints. We could, for example, create a\n      type of integer interval with the order of the comparison\n      reversed, as follows:\n    </blockquote>")))
 (idp8892176
  ((file functors.html)
   (html
    "<blockquote>\n      Now we can use the newly defined <code>Int_interval</code>\n      module like any ordinary module.\n    </blockquote>")))
 (idp8889360
  ((file functors.html)
   (html
    "<blockquote>\n      This works because many modules in Core, including\n      <code>Int</code> and <code>String</code>, satisfy an\n      extended version of the <code>Comparable</code> signature\n      described above. Such standardized signatures are good practice,\n      both because they makes functors easier to use, and because they\n      make your codebase generally easier to navigate.\n    </blockquote>")))
 (idp8886560
  ((file functors.html)
   (html
    "<blockquote>\n      If the input interface for your functor is aligned with the\n      standards of the libraries you use, then you don't need to\n      construct a custom module to feed to the functor. In this case, we\n      can directly use the <code>Int</code> or\n      <code>String</code> modules provided by Core.\n    </blockquote>")))
 (idp8885184
  ((file functors.html)
   (html
    "<blockquote>\n      We can instantiate the functor by applying it to a module with the\n      right signature. In the following, rather than name the module\n      first and then call the functor, we provide the functor input as\n      an anonymous module.\n    </blockquote>")))
 (idp8880928
  ((file functors.html)
   (html
    "<blockquote>\n      The functor for creating the interval module is shown below. We\n      represent an interval with a variant type, which is either\n      <code>Empty</code> or <code>Interval (x,y)</code>,\n      where <code>x</code> and <code>y</code> are the bounds\n      of the interval. In addition to the type, the functor contains\n      implementations of a number of useful primitives for interacting\n      with intervals.\n    </blockquote>")))
 (idp8880272
  ((file functors.html)
   (html
    "<blockquote>\n      (This idiom is a bit of a historical error. It would be better if\n      compare returned a variant with three cases for less than, greater\n      than and equal. But it's a well-established idiom at this point,\n      and unlikely to change.)\n    </blockquote>")))
 (idp8877408
  ((file functors.html)
   (html
    "<blockquote>\n      The comparison function follows the standard OCaml idiom for such\n      functions, returning <code>0</code> if the two elements are\n      equal, a positive number if the first element is larger than the\n      second, and a negative number if the first element is smaller than\n      the second. Thus, we could rewrite the standard comparison\n      functions on top of <code>compare</code> as shown below.\n    </blockquote>")))
 (idp8875296
  ((file functors.html)
   (html
    "<blockquote>\n      First we'll define a module type that captures the information\n      we'll need about the endpoints of the intervals. This interface,\n      which we'll call <code>Comparable</code>, contains just two\n      things: a comparison function, and the type of the values to be\n      compared.\n    </blockquote>")))
 (idp8874688
  ((file functors.html)
   (html
    "<blockquote>\n      Let's see how to use functors to build a generic interval library\n      that can be used with any type that supports a total ordering on\n      the underlying set over which you want to build intervals.\n    </blockquote>")))
 (idp8873808
  ((file functors.html)
   (html
    "<blockquote>\n      Let's consider a more realistic example of how to use functors: a\n      library for computing with intervals. Intervals are a common\n      computational object, and they come up in different contexts and\n      for different types. You might need to work with intervals of\n      floating point values, or strings, or times, and in each of these\n      cases, you want similar operations: testing for emptiness,\n      checking for containment, intersecting intervals, and so on.\n    </blockquote>")))
 (idp8871024
  ((file functors.html)
   (html
    "<blockquote>\n      The rules for determining whether a module matches a given\n      signature are similar in spirit to the rules in an object-oriented\n      language that determine whether an object satisfies a given\n      interface. As in an object-oriented context, the extra information\n      that doesn't match the signature you're looking for (in this case,\n      the variable <code>y</code>), is simply ignored.\n    </blockquote>")))
 (idp8864880
  ((file functors.html)
   (html
    "<blockquote>\n      In this case, we applied <code>Increment</code> to a module\n      whose signature is exactly equal to <code>X_int</code>. But\n      we can apply <code>Increment</code> to any module that\n      <span><em>satisfies</em></span> the interface\n      <code>X_int</code>, in the same way that the contents of an\n      <code>ml</code> file must satisfy the\n      <code>mli</code>. That means that the module type can omit\n      some information available in the module, either by dropping\n      fields or by leaving some fields abstract. Here's an example:\n    </blockquote>")))
 (idp8862992
  ((file functors.html)
   (html
    "<blockquote>\n      We can now use <code>Increment</code> to define new modules.\n    </blockquote>")))
 (idp8861712
  ((file functors.html)
   (html
    "<blockquote>\n      We can see that the inferred module type of the output is now\n      written out explicitly, rather than being a reference to the named\n      signature <code>X_int</code>.\n    </blockquote>")))
 (idp8860464
  ((file functors.html)
   (html
    "<blockquote>\n      The following shows what happens when we omit the module type for\n      the output of the functor.\n    </blockquote>")))
 (idp8858928
  ((file functors.html)
   (html
    "<blockquote>\n      One thing that immediately jumps out is that functors are more\n      syntactically heavyweight than ordinary functions. For one thing,\n      functors require explicit (module) type annotations, which\n      ordinary functions do not. Technically, only the type on the input\n      is mandatory, although in practice, you should usually constrain\n      the module returned by the functor, just as you should use an\n      <code>mli</code>, even though it's not mandatory.\n    </blockquote>")))
 (idp8856928
  ((file functors.html)
   (html
    "<blockquote>\n      Now we can define our functor. We'll use <code>X_int</code>\n      both to constrain the argument to the functor, and to constrain\n      the module returned by the functor.\n    </blockquote>")))
 (idp8855008
  ((file functors.html)
   (html
    "<blockquote>\n      First, let's define a signature for a module that contains a\n      single value of type <code>int</code>.\n    </blockquote>")))
 (idp8852992
  ((file functors.html)
   (html
    "<blockquote>\n      Let's create a functor that takes a module containing a single\n      integer variable <code>x</code>, and returns a new module\n      with <code>x</code> incremented by one. This is not actually\n      a useful example, but it's a good way to walk through the basic\n      mechanics of functors.\n    </blockquote>")))
 (idp8850560
  ((file functors.html)
   (html
    "<blockquote>\n<span><em>Instantiating modules with state</em></span>. Modules\n        can contain mutable state, and that means that you'll\n        occasionally want to have multiple instantiations of a\n        particular module, each with its own separate and independent\n        mutable state. Functors let you automate the construction of\n        such modules.\n      </blockquote>")))
 (idp8848928
  ((file functors.html)
   (html
    "<blockquote>\n<span><em>Auto-extension of modules</em></span>. Functors give\n        you a way of extending existing modules with new functionality\n        in a standardized way. For example, you might want to add a slew\n        of comparison operators derived from a base comparison function.\n        To do this by hand would require a lot of repetitive code for\n        each type, but functors let you write this logic just once and\n        apply it to many different types.\n      </blockquote>")))
 (idp8847520
  ((file functors.html)
   (html
    "<blockquote>\n<span><em>Dependency injection</em></span>, or making the\n        implementations of some components of a system swappable. This\n        is particularly useful when you want to mock up parts of your\n        system for testing and simulation purposes.\n      </blockquote>")))
 (idp8846448
  ((file functors.html)
   (html
    "<blockquote>\n    Functors are, roughly speaking, functions from modules to modules,\n    and they can be used to solve a variety of code-structuring\n    problems, including:\n  </blockquote>")))
 (idp8845648
  ((file functors.html)
   (html
    "<blockquote>\n    Up until now, we've seen OCaml's modules play an important but\n    limited role. In particular, we've seen them as a mechanism for\n    organizing code into units with specified interfaces. But OCaml's\n    module system can do much more than that, serving as a powerful tool\n    for building generic code and structuring large-scale systems. Much\n    of that power comes from functors.\n  </blockquote>")))
 (idp11317120
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      This chapter contains significant contributions from Jeremy\n      Yallop.\n    </blockquote>")))
 (idp11315728
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      This chapter hasn't really needed you to understand the innards of\n      OCaml at all. Ctypes does its best to make function bindings easy,\n      but the rest of this part will also fill you in about how\n      interactions with OCaml memory layout and the garbage collector\n      work.\n    </blockquote>")))
 (idp11314928
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          a comprehensive test suite that covers the complete library,\n          and can provide useful snippets for your own bindings.\n        </blockquote>")))
 (idp11314032
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          a more complete Ncurses binding than the example we opened the\n          chapter with.\n        </blockquote>")))
 (idp11312416
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          bindings to the POSIX <code>fts</code> API which\n          demonstrates C callbacks more comprehensively.\n        </blockquote>")))
 (idp11310672
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The Ctypes\n      <a href=\"http://github.com/ocamllabs/ocaml-ctypes\" target=\"_top\">distribution</a>\n      contains a number of larger-scale examples, including:\n    </blockquote>")))
 (idp11308224
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        A corollary of the above rule is that pointers written into the\n        C heap don't have any effect on reachability. For example, if\n        you have a C-managed array of pointers to structs then you'll\n        need some additional way of keeping the structs around to\n        protect them from collection. You could achieve this via a\n        global array of values on the OCaml side that would keep them\n        live until they're no longer needed.\n      </blockquote>")))
 (idp11307360
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        &quot;Derivative&quot; means a pointer that's computed from the\n        original pointer via arithmetic, so a reachable reference to an\n        array element or a structure field protects the whole object\n        from collection.\n      </blockquote>")))
 (idp11306640
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The definition of reachability for Ctypes values is a little\n        different from conventional OCaml values though. The allocation\n        functions return an OCaml-managed pointer to the value, and as\n        long as some derivative pointer is still reachable by the GC,\n        the value won't be collected.\n      </blockquote>")))
 (idp11304112
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Values allocated via Ctypes (<span><em>i.e.</em></span> using\n        <code>allocate</code>, <code>Array.make</code> and\n        so on) will not be garbage-collected as long as they are\n        reachable from OCaml values. The system memory they occupy is\n        freed when they do become unreachable, via a finalizer function\n        registered with the GC.\n      </blockquote>")))
 (idp11299776
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Using <code>qsort'</code> to sort arrays is\n        straightforward. Our example code reads the standard input as a\n        list, converts it to a C array, passes it through qsort, and\n        outputs the result to the standard output. Again, remember to\n        not confuse the <code>Ctypes.Array</code> module with the\n        <code>Core.Std.Array</code> module: the former is in scope\n        since we opened <code>Ctypes</code> at the start of the\n        file.\n      </blockquote>")))
 (idp11296848
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The <code>qsort'</code> wrapper function has a much more\n        canonical OCaml interface than the raw binding. It accepts a\n        comparator function and a Ctypes array, and returns the same\n        Ctypes array. It's not strictly required that it returns the\n        array since it modifies it in-place, but it makes it easier to\n        chain the function using the <code>|&gt;</code> operator\n        (as <code>sort_stdin</code> does in the example).\n      </blockquote>")))
 (idp11294208
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The inferred interface shows us the types of the raw\n        <code>qsort</code> binding and also the\n        <code>qsort'</code> wrapper function.\n      </blockquote>")))
 (idp11292896
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Compile it in the usual way with corebuild and test it against\n        some input data, and also build the inferred interface so we can\n        examine it more closely.\n      </blockquote>")))
 (idp11290944
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Below is a command-line tool that uses the\n        <code>qsort</code> binding to sort all of the integers\n        supplied on the standard input.\n      </blockquote>")))
 (idp11288464
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Arrays created using Ctypes have a richer runtime structure than C\n      arrays, so we don't need to pass size information around.\n      Furthermore, we can use OCaml polymorphism in place of the unsafe\n      <code>void ptr</code> type.\n    </blockquote>")))
 (idp11284128
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      We only use <code>compare_t</code> once (in the\n      <code>qsort</code> definition), so you can choose to inline\n      it in the OCaml code if you prefer. The resulting\n      <code>qsort</code> value is a higher-order function, as\n      shown by its type. As before, let's define a wrapper function to\n      make <code>qsort</code> easier to use. The second and third\n      arguments to <code>qsort</code> specify the length (number\n      of elements) of the array and the element size.\n    </blockquote>")))
 (idp11280688
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      This also happens to be a close mapping to the corresponding\n      Ctypes definition. Since type descriptions are regular values, we\n      can just use <code>let</code> in place of\n      <code>typedef</code> and end up with working OCaml bindings\n      to <code>qsort</code>.\n    </blockquote>")))
 (idp11277984
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      C programmers often use <code>typedef</code> to make type\n      definitions involving function pointers easier to read. Using a\n      typedef, the type of <code>qsort</code> looks a little more\n      palatable.\n    </blockquote>")))
 (idp11275984
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      It's also straightforward to pass OCaml function values to C. The\n      C standard library function <code>qsort</code> has the\n      following signature that requires a function pointer to use.\n    </blockquote>")))
 (idp11273920
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        There are also other useful non-operator functions available\n        (see the Ctypes documentation), for example for pointer\n        differencing and comparison.\n      </blockquote>")))
 (idp11256640
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Ctypes defines a number of operators that let you manipulate\n        pointers and arrays just as you would in C. The Ctypes\n        equivalents do have the benefit of being more strongly typed, of\n        course.\n      </blockquote>")))
 (idp11255328
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Unions in C are named structures that can be mapped onto the\n        same underlying memory. They are also fully supported in Ctypes,\n        but we won't go into more detail here.\n      </blockquote>")))
 (idp11253888
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The conversion between arrays and lists still requires copying\n        the values, and can be expensive for large data structures.\n        Notice that you can also convert an array into a\n        <code>ptr</code> pointer to the head of buffer, which can\n        be useful if you need to pass the pointer and size arguments\n        separately to a C function.\n      </blockquote>")))
 (idp11252624
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The array functions are similar to the standard library\n        <code>Array</code> module except that they represent flat\n        C arrays instead of OCaml ones.\n      </blockquote>")))
 (idp11250624
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Arrays in C are contiguous blocks of the same value. Any of the\n        basic types defined earlier can be allocated as blocks via the\n        <code>Array</code> module.\n      </blockquote>")))
 (idp11247744
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          In OCaml, of course, these types are absolutely equivalent.\n          Since the OCaml types are the same but the C semantics are\n          quite different, we need some kind of marker to distinguish\n          the cases. This is the purpose of <code>returning</code>\n          in function definitions.\n        </blockquote>")))
 (idp11243536
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The OCaml type of <code>uncurried_C</code> when bound by\n          Ctypes is <code>int -&gt; int -&gt; int</code>: a\n          two-argument function. The OCaml type of\n          <code>curried_C</code> when bound by\n          <code>ctypes</code> is\n          <code>int -&gt; (int -&gt; int)</code>: a one-argument\n          function that returns a one-argument function.\n        </blockquote>")))
 (idp11242320
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          A C function that's written in curried style looks very\n          different:\n        </blockquote>")))
 (idp11241152
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          and the arguments must always be supplied together:\n        </blockquote>")))
 (idp11239824
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          and the arguments can be supplied one at a time to create a\n          closure. In contrast, C functions receive their arguments all\n          at once. The equivalent C function type is the following:\n        </blockquote>")))
 (idp11238656
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          but this really means\n        </blockquote>")))
 (idp11237360
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          Secondly, OCaml functions are typically defined in a curried\n          style. The signature of a two-argument function is written as\n          follows:\n        </blockquote>")))
 (idp11236608
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The reason involves higher types and two differences between\n          the way that functions are treated in OCaml and C. Functions\n          are first-class values in OCaml, but not in C. For example, in\n          C, it is possible to return a function pointer from a\n          function, but not to return an actual function.\n        </blockquote>")))
 (idp11234656
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The <code>returning</code> function may appear\n          superfluous here. Why couldn't we simply give the types as\n          follows?\n        </blockquote>")))
 (idp11232688
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The alert reader may be curious why all these function\n          definitions have to be terminated by\n          <code>returning</code>.\n        </blockquote>")))
 (idp11230096
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          This can be compiled and run in the usual way.\n        </blockquote>")))
 (idp11228800
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          We built up a lot of bindings in the earlier section, so let's\n          recap them with a complete example that ties it together with\n          a command-line frontend.\n        </blockquote>")))
 (idp11221904
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        You need to be a little careful not to get all the open modules\n        mixed up here. Both <code>Pervasives</code> and\n        <code>Ctypes</code> define different\n        <code>float</code> functions. The\n        <code>Ctypes</code> module we opened up earlier overrides\n        the <code>Pervasives</code> definition. As seen above\n        though, you just need to locally open\n        <code>Pervasives</code> again to bring the usual\n        <code>float</code> function back in scope,\n      </blockquote>")))
 (idp11217728
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        As before we can create a wrapper to make\n        <code>gettimeofday</code> easier to use. The functions\n        <code>make</code>, <code>addr</code> and\n        <code>getf</code> create a structure value, retrieve the\n        address of a structure value, and retrieve the value of a field\n        from a structure.\n      </blockquote>")))
 (idp11214176
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        There's one other new feature here: the\n        <code>returning_checking_errno</code> function behaves\n        like <code>returning</code>, except that it checks whether\n        the bound C function modifies the C error flag. Changes to\n        <code>errno</code> are mapped into OCaml exceptions and\n        raise a <code>Unix.Unix_error</code> exception just as the\n        standard library functions do.\n      </blockquote>")))
 (idp11212288
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        We're finally ready to bind to <code>gettimeofday</code>\n        now.\n      </blockquote>")))
 (idp11210192
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        We don't ever need to create <code>struct timezone</code>\n        values, so we can leave this struct as incomplete without adding\n        any fields or sealing it. If you ever try to use it in a\n        situation where its concrete size needs to be known, the library\n        will raise an <code>IncompleteType</code> exception.\n      </blockquote>")))
 (idp11207536
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Since <code>gettimeofday</code> needs a\n        <code>struct timezone</code> pointer for its second\n        argument, we also need to define a second structure type.\n      </blockquote>")))
 (idp11204848
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Every field addition mutates the structure variable and records\n        a new size (the exact value of which depends on the type of the\n        field that was just added). Once we <code>seal</code> the\n        structure we will be able to create values using it, but adding\n        fields to a sealed structure is an error.\n      </blockquote>")))
 (idp11201872
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The <code>*:*</code> operator appends a field to the\n        structure, as shown with <code>tv_sec</code> and\n        <code>tv_usec</code> above. Structure fields are typed\n        accessors that are associated with a particular structure, and\n        they correspond to the labels in C. Note that there's no\n        explicit requirement that the OCaml variable names for a field\n        are the same as the corresponding C struct label names, but it\n        helps avoid confusion.\n      </blockquote>")))
 (idp11199936
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The <code>timeval</code> structure definition still\n        doesn't have any fields, so we need to add those next.\n      </blockquote>")))
 (idp11196640
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The second command calls <code>structure</code> to create\n        a fresh structure type. At this point the structure type is\n        incomplete: we can add fields but cannot yet use it in\n        <code>foreign</code> calls or use it to create values.\n      </blockquote>")))
 (idp11194448
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The first command defines a new OCaml type\n        <code>timeval</code> that we'll use to instantiate the\n        OCaml version of the <code>struct</code>. Creating a new\n        OCaml type to reflect the underlying C type in this way means\n        that the structure we define will be distinct from other\n        structures we define elsewhere, which helps to avoid getting\n        them mixed up.\n      </blockquote>")))
 (idp11193184
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Using Ctypes, we can describe this type as follows in our\n        top-level, continuing on from the previous definitions.\n      </blockquote>")))
 (idp11190432
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Let's improve the timer function that we wrote earlier. The\n        POSIX function <code>gettimeofday</code> retrieves the\n        time with microsecond resolution. The signature of\n        <code>gettimeofday</code> is as follows, including the\n        structure definitions.\n      </blockquote>")))
 (idp11187376
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The C constructs <code>struct</code> and\n      <code>union</code> make it possible to build new types from\n      existing types. Ctypes contains counterparts that work similarly.\n    </blockquote>")))
 (idp11183856
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        This means you need to be careful when passing OCaml strings to\n        C buffers that don't contain any null values within the OCaml\n        string, or else the C string will be truncated at the first null\n        instance. Ctypes also defaults to a <span><em>copying</em></span>\n        interface for strings, which means that you shouldn't use them\n        when you want the library to mutate the buffer in-place. In that\n        situation, use the Ctypes <code>Bigarray</code> support to\n        pass memory by reference instead.\n      </blockquote>")))
 (idp11182400
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        OCaml strings are stored in the OCaml heap with a header that\n        explicitly defines their length. C buffers are also\n        fixed-length, but by convention a C string is terminated by a\n        null (a <code>\\0</code> byte) character. The C string\n        functions calculate their length by scanning the buffer until\n        the first null character is encountered.\n      </blockquote>")))
 (idp11181808
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Although OCaml strings may look like C character buffers from an\n        interface perspective, they're very different in terms of their\n        memory representations.\n      </blockquote>")))
 (idp11178480
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The type of this <code>string</code> function is a normal\n        <code>typ</code> with no external sign of the use of the\n        view function.\n      </blockquote>")))
 (idp11176544
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Given these functions, the definition of the\n        <code>Ctypes.string</code> value that uses views is quite\n        simple.\n      </blockquote>")))
 (idp11174448
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Ctypes has some internal low-level functions conversion\n        functions that map between an OCaml <code>string</code>\n        and a C character buffer by copying the contents into the\n        respective data structure. They have the following type\n        signature.\n      </blockquote>")))
 (idp11172544
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Here is the type signature of the <code>Ctypes.view</code>\n        function.\n      </blockquote>")))
 (idp11169056
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        We've already used one view in the definition of\n        <code>ctime</code> earlier. The <code>string</code>\n        view wraps the C type <code>char *</code> (written in\n        OCaml as <code>ptr char</code>), and converts between the\n        C and OCaml string representations each time the value is\n        written or read.\n      </blockquote>")))
 (idp11168400
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        While scalar types typically have a 1:1 representation, other C\n        types require extra work to convert them into OCaml. Views\n        create new C type descriptions that have special behavior when\n        used to read or write C values.\n      </blockquote>")))
 (idp11164336
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The <code>allocate</code> function takes the type of the\n        memory to be allocated and the initial value, and it returns a\n        suitably-typed pointer. We can now call <code>ctime</code>\n        passing the pointer as an argument:\n      </blockquote>")))
 (idp11160912
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        This is because <code>ctime</code> needs a pointer to the\n        <code>time_t</code> rather than passing it by value. We\n        thus need to allocate some memory for the\n        <code>time_t</code> and obtain its memory address.\n      </blockquote>")))
 (idp11158208
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        The binding is continued in the top-level to add to our growing\n        collection. However, we can't just pass the result of\n        <code>time</code> to <code>ctime</code>.\n      </blockquote>")))
 (idp11155424
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        Let's look at a slightly less trivial example where we pass a\n        non-null pointer to a function. Continuing with the theme from\n        earlier, we'll bind to the <code>ctime</code> function\n        which converts a <code>time_t</code> value to a\n        human-readable string.\n      </blockquote>")))
 (idp11152336
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The binding to <code>difftime</code> above is sufficient to\n      compare two <code>time_t</code> values.\n    </blockquote>")))
 (idp11148816
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Since <code>time_t</code> is an abstract type, we can't\n      actually do anything useful with it directly. We need to bind a\n      second function to do anything useful with the return values from\n      <code>time</code>. We'll move on to\n      <code>difftime</code>; the second C function in our\n      prototype list above.\n    </blockquote>")))
 (idp11146864
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Since we're going to call <code>time</code> a few times,\n      let's create a wrapper function that passes the null pointer\n      through.\n    </blockquote>")))
 (idp11144128
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      We can now call <code>time</code> immediately in the same\n      top-level. The argument is actually optional, so we'll just pass a\n      null pointer that has been coerced into becoming a null pointer to\n      <code>time_t</code>.\n    </blockquote>")))
 (idp11140592
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The <code>foreign</code> function is the main link between\n      OCaml and C. It takes two arguments: the name of the C function to\n      bind, and a value describing the type of the bound function. In\n      the <code>time</code> binding, the function type specifies\n      one argument of type <code>ptr time_t</code> and a return\n      type of <code>time_t</code>.\n    </blockquote>")))
 (idp11138688
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      We can now create a binding to <code>time</code> directly\n      from the top-level.\n    </blockquote>")))
 (idp11136496
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The <code>Foreign</code> module exposes the\n          <code>foreign</code> function that makes it possible to\n          invoke C functions.\n        </blockquote>")))
 (idp11134208
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The <code>PosixTypes</code> module includes some extra\n          POSIX-specific types (such as <code>time_t</code>).\n        </blockquote>")))
 (idp11132624
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The <code>Ctypes</code> module provides functions for\n          describing C types in OCaml.\n        </blockquote>")))
 (idp11130848
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The <code>time</code> function returns the current calendar\n      time and is a simple start. The first step is to open some of the\n      Ctypes modules.\n    </blockquote>")))
 (idp11129584
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      We've already seen a simple use of pointers in the Ncurses\n      example. Let's start a new example by binding the following POSIX\n      functions.\n    </blockquote>")))
 (idp11128912
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Pointers are at the heart of C, so they are necessarily part of\n      Ctypes, which provides support for pointer arithmetic, pointer\n      conversions, reading and writing through pointers, and passing and\n      returning pointers to and from functions.\n    </blockquote>")))
 (idp11124752
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          OCaml only supports double-precision floating-point numbers,\n          and so the C <code>float</code> and\n          <code>double</code> functions both map onto the OCaml\n          <code>float</code> type.\n        </blockquote>")))
 (idp11121568
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          The C <code>size_t</code> type is an alias for one of\n          the unsigned integer types. The actual size and alignment\n          requirements for <code>size_t</code> varies between\n          platforms. Ctypes provides an OCaml <code>size_t</code>\n          type that is aliased to the appropriate integer type.\n        </blockquote>")))
 (idp11117680
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          Void values appear in OCaml as the <code>unit</code>\n          type. Using <code>void</code> in an argument or result\n          type specification produces an OCaml function which accepts or\n          returns unit. Dereferencing a pointer to\n          <code>void</code> is an error, as in C, and will raise\n          the <code>IncompleteType</code> exception.\n        </blockquote>")))
 (idp11112896
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      These values are all of type <code>'a typ</code>, where the\n      value name (<span><em>e.g.</em></span> <code>void</code>)\n      tells you the C type and the <code>'a</code> component\n      (<span><em>e.g.</em></span> <code>unit</code>) is the OCaml\n      representation of that C type. Most of the mappings are\n      straightforward, but some of them need a bit more explanation.\n    </blockquote>")))
 (idp11111648
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Here are the definitions for most of the standard C99 scalar\n      types, including some platform-dependent ones.\n    </blockquote>")))
 (idp11110912
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          describing component fields of structures, unions and arrays.\n        </blockquote>")))
 (idp11110016
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          constructing pointers for reading and writing locations in\n          C-managed storage.\n        </blockquote>")))
 (idp11109152
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          constructing function types for binding native functions.\n        </blockquote>")))
 (idp11107488
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      There are various other uses of <code>typ</code> values\n      within Ctypes, such as:\n    </blockquote>")))
 (idp11104576
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          the corresponding OCaml type. The <code>'a</code> type\n          parameter contains the OCaml type such that a value of type\n          <code>t typ</code> is used to read and write OCaml\n          values of type <code>t</code>.\n        </blockquote>")))
 (idp11103696
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          the C type used to store and pass values to the foreign\n          library.\n        </blockquote>")))
 (idp11101280
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n<code>Ctypes.typ</code> is the type of values that\n      represents C types to OCaml. There are two types associated with\n      each instance of <code>typ</code>:\n    </blockquote>")))
 (idp11099984
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      First, let's look at how to define basic scalar C types. Every C\n      type is represented by an OCaml equivalent via the single type\n      definition below.\n    </blockquote>")))
 (idp11098208
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      We'll go over some of these features in more detail for the\n      remainder of the chapter by using some POSIX date functions as\n      running examples.\n    </blockquote>")))
 (idp11097472
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Ctypes wouldn't be very useful if it were limited to only defining\n      simple C types of course. It provides full support for C pointer\n      arithmetic, pointer conversions, reading and writing through\n      pointers, using OCaml functions as function pointers to C code, as\n      well as struct and union definitions.\n    </blockquote>")))
 (idp11095584
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The <code>--no-as-needed</code> flag disables this behavior\n      and ensures all the specified libraries are linked despite not\n      being directly used. The flag unfortunately doesn't work\n      everywhere (notably, MacOS X should <span><em>not</em></span> have\n      this passed to it).\n    </blockquote>")))
 (idp11091056
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      On some distributions such as Ubuntu, you'll also need to add\n      <code>-cclib,-Xlinker,-cclib,--no-as-needed</code> to the\n      <code>-lflags</code> directive. <code>-Xlinker</code>\n      is interpreted by the compiler as a directive for the system\n      linker <code>ld</code>, to which it passes\n      <code>--no-as-needed</code>. Several modern OS distributions\n      (such as Ubuntu 11.10 onwards) configure the system linker to only\n      link in libraries that directly contain symbols used by the\n      program. However, when we use Ctypes, those symbols are not\n      referenced until runtime, which results an exception due to the\n      library not being available.\n    </blockquote>")))
 (idp11084560
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The command-line above include some important extra link\n      directives. The <code>-lflags</code> instructs\n      <code>ocamlbuild</code> to pass the next comma-separated set\n      of arguments through to the <code>ocaml</code> command when\n      linking a binary. OCaml in turn uses <code>-cclib</code> to\n      pass directives through to the system compiler (normally\n      <code>gcc</code> or <code>clang</code>). We first need\n      to link to the <code>ncurses</code> C library to make the\n      symbols available to Ctypes, and\n      <code>-cclib,-lncurses</code> does that.\n    </blockquote>")))
 (idp11082672
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Running <code>./hello.native</code> should now display a\n      Hello World in your terminal!\n    </blockquote>")))
 (idp11080048
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The <code>hello</code> executable is compiled by linking\n      with the <code>ctypes.foreign</code> OCamlfind package.\n    </blockquote>")))
 (idp11078736
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Now compile a &quot;hello world&quot; terminal drawing program to\n      tie this all together.\n    </blockquote>")))
 (idp11076656
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The <code>window</code> type is left abstract in the\n      signature to ensure that window pointers can only be constructed\n      via the <code>Ncurses.initscr</code> function. This prevents\n      void pointers obtained from other sources from being mistakenly\n      passed to an Ncurses library call.\n    </blockquote>")))
 (idp11075456
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Here's the customized interface that we can safely use from other\n      libraries.\n    </blockquote>")))
 (idp11073296
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The <code>inferred.mli</code> target instructs the compiler\n      to generate the default signature for a module file, and places it\n      in the <code>_build</code> directory as a normal output. You\n      should normally copy it out into your source directory and\n      customize it improve its safety for external callers by making\n      some of its internals more abstract.\n    </blockquote>")))
 (idp11070592
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The module signature for <code>ncurses.mli</code> looks much\n      like a normal OCaml signature. You can infer it directly from the\n      <code>ncurses.ml</code> by running a special build target.\n    </blockquote>")))
 (idp11068416
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Most of the parameters in the Ncurses example represent fairly\n      simple scalar C types except for <code>window</code> (a\n      pointer to the library state), and <code>string</code>,\n      which maps from OCaml strings that have a specific length onto C\n      character buffers whose length is defined by a terminating null\n      character that immediately follows the string data.\n    </blockquote>")))
 (idp11065600
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      These definitions are all straightforward mappings from the C\n      declarations in the Ncurses header file. Note that the\n      <code>string</code> and <code>int</code> values here\n      are nothing to do with OCaml type declarations; instead, they are\n      values that come from opening the <code>Ctypes</code> module\n      at the top of the file.\n    </blockquote>")))
 (idp11064384
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The remainder of the Ncurses binding simply expands on these\n      definitions.\n    </blockquote>")))
 (idp11062064
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          a value that defines the complete set of C function arguments\n          and its return type. The <code>@-&gt;</code> operator\n          adds an argument to the C parameter list and\n          <code>returning</code> terminates the parameter list\n          with the return type.\n        </blockquote>")))
 (idp11060464
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n          the C function call name, which is looked up using the\n          <code>dlsym</code> POSIX function.\n        </blockquote>")))
 (idp11058016
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      That's all we need to invoke our first function call to\n      <code>initscr</code> to initialize the terminal. The\n      <code>foreign</code> function accepts two parameters:\n    </blockquote>")))
 (idp11055840
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      We don't know the internal representation of the window pointer,\n      so we treat it as a C void pointer. We'll improve on this later on\n      in the chapter, but that's good enough for now. The second\n      statement defines an OCaml value that represents the\n      <code>WINDOW</code> C pointer. This value is used later in\n      the Ctypes function definitions.\n    </blockquote>")))
 (idp11053920
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Let's begin by defining the basic values we need, starting with\n      the <code>WINDOW</code> state pointer.\n    </blockquote>")))
 (idp11053184
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Ctypes provides an OCaml interface that lets you map these C\n      functions to equivalent OCaml functions. The library takes care of\n      converting OCaml function calls and arguments into the C calling\n      convention, invoking the foreign call within the C library and\n      finally returning the result as an OCaml value.\n    </blockquote>")))
 (idp11048160
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Note that there are over 200 library calls in Ncurses, so we're\n      only binding a select few for this example. The\n      <code>initscr</code> and <code>newwin</code> create\n      <code>WINDOW</code> pointers for the global and sub-windows\n      respectively. The <code>mvwaddrstr</code> takes a window,\n      x/y offsets and a string and writes to the screen at that\n      location. The terminal is only updated after\n      <code>refresh</code> or <code>wrefresh</code> are\n      called.\n    </blockquote>")))
 (idp11045952
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The Ncurses functions either operate on the current\n      pseudo-terminal or on a window that has been created via\n      <code>newwin</code>. The <code>WINDOW</code> structure\n      holds the internal library state and is considered abstract\n      outside of Ncurses. Ncurses clients just need to store the pointer\n      somewhere and pass it back to Ncurses library calls, which in turn\n      dereference its contents.\n    </blockquote>")))
 (idp11043920
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The full C interface is quite large and is explained in the online\n      <a href=\"http://www.gnu.org/software/ncurses/\" target=\"_top\">documentation</a>.\n      We'll just use the small excerpt that's shown below since we just\n      want to demonstrate Ctypes in action.\n    </blockquote>")))
 (idp11043296
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Ncurses is a library to help build terminal-independent text\n      interfaces in a reasonably efficient way. It's used in console\n      mail clients like Mutt and Pine, and console web browsers such as\n      Lynx.\n    </blockquote>")))
 (idp11040656
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      You'll also need the Ncurses library for the first example. This\n      comes pre-installed on many operating systems such as MacOS X and\n      Debian Linux provides it as the <code>ncurses-dev</code>\n      package.\n    </blockquote>")))
 (idp11039488
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Once that's done, Ctypes is available via OPAM as usual.\n    </blockquote>")))
 (idp11037408
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      A special note for Mac users: the version of\n      <code>libffi</code> installed by default in MacOS X 10.8 is\n      too old for some of the features that Ctypes needs. Use Homebrew\n      to <code>brew install libffi</code> to get the latest\n      version before installing the OCaml library.\n    </blockquote>")))
 (idp11035696
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      You'll need to install the\n      <a href=\"https://github.com/atgreen/libffi\" target=\"_top\"><code>libffi</code></a>\n      library as a prerequisite to using Ctypes. It's a fairly popular\n      library and should be available in your OS package manager.\n    </blockquote>")))
 (idp11034352
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      Let's dive straight into a realistic example to show you how the\n      library looks. We'll create a binding to the Ncurses terminal\n      toolkit, as it's widely available on most systems and doesn't have\n      any complex dependencies.\n    </blockquote>")))
 (idp11033648
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n      The simplest foreign function interface in OCaml doesn't even\n      require you to write any C code at all! The Ctypes library lets\n      you define the C interface in pure OCaml, and the library then\n      takes care of loading the C symbols and invoking the foreign\n      function call.\n    </blockquote>")))
 (idp11031776
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        work through some full examples for binding a terminal interface\n        and UNIX date/time functions.\n      </blockquote>")))
 (idp11030880
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        teach you how to build higher-level abstractions in OCaml from\n        the low-level C bindings.\n      </blockquote>")))
 (idp11030000
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n        show how to call routines in C libraries directly from your\n        OCaml code.\n      </blockquote>")))
 (idp11028480
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n    The mechanism by which code in one programming language can invoke\n    routines in another different programming language is called a\n    <span><em>foreign function interface</em></span>. This chapter will:\n  </blockquote>")))
 (idp11027824
  ((file foreign-function-interface.html)
   (html
    "<blockquote>\n    OCaml has several options available to interact with non-OCaml code.\n    The compiler can link with external system libraries via C code and\n    also produce standalone native object files that can be embedded\n    within other non-OCaml applications.\n  </blockquote>")))
 (idp9162304
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      For an example on this scale, the above approach is completely\n      reasonable, and first-class modules are not really necessary. But\n      the more functionality you need to hide away behind a set of\n      closures, and the more complicated the relationships between the\n      different types in question, the more awkward this approach\n      becomes, and the better it is to use first-class modules.\n    </blockquote>")))
 (idp9160240
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      The idea here is that we hide the true types of the objects in\n      question behind the functions stored in the closure. Thus, we\n      could put the <code>Unique</code> query handler into this\n      framework as follows.\n    </blockquote>")))
 (idp9158816
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      It's worth noting that most designs that can be done with\n      first-class modules can be simulated without them, with some level\n      of awkwardness. For example, we could rewrite our query handler\n      example without first-class modules using the following types:\n    </blockquote>")))
 (idp9155264
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        We can push this dynamism yet further using libraries like\n        <code>ocaml_plugin</code>, which use OCaml's dynamic\n        linking facilities to allow a program to compile and load an\n        OCaml source file as a first-class module. Thus, one could\n        extend <code>Loader</code> to loads entirely new query\n        handlers from disk on demand.\n      </blockquote>")))
 (idp9154000
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Notably, the loader can't be itself loaded (since it's not on\n        the list of known handlers), and can't be unloaded.\n      </blockquote>")))
 (idp9152000
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        But, we can load the <code>ls</code> handler with a config\n        of our choice, at which point, it will be available for use. And\n        once we unload it, it will be unavailable yet again, and could\n        be reloaded with a different config.\n      </blockquote>")))
 (idp9150800
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        If we try to use one of the inactive queries, it will fail.\n      </blockquote>")))
 (idp9148656
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        The resulting command line interface behaves much as you'd\n        expect, starting out with no query handlers available, but\n        giving you the ability to load and unload them. Here's an\n        example of it in action. As you can see, we start out with\n        <code>loader</code> itself as the only active handler.\n      </blockquote>")))
 (idp9147424
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Now link this into a command line interface to experiment with\n        it.\n      </blockquote>")))
 (idp9145968
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Finally, we can put this all together with the command line\n        interface. We first create an instance of the loader query\n        handler, and then add that instance to the loader's active\n        table. We can then just launch the command-line interface,\n        passing it the active table.\n      </blockquote>")))
 (idp9144064
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        This function ends the definition of the\n        <code>Loader</code> module.\n      </blockquote>")))
 (idp9141808
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        The eval function itself is fairly straight-forward, dispatching\n        to the appropriate functions to respond to each type of query.\n        Note that we use write\n        <code>&lt;sexp_of&lt;string list&gt;&gt;</code> to\n        autogenerate a function for converting a list of strings to an\n        s-expression. This is part of the sexplib package described in\n        <a href=\"data-serialization-with-s-expressions.html\">Chapter\194\16017, <i>Data Serialization with S-Expressions</i></a>.\n      </blockquote>")))
 (idp9139680
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Finally, we need to implement the <code>eval</code>\n        function, which will determine the query interface presented to\n        the user. We'll do this by creating a variant type, and using\n        the s-expression converter generated for that type to parse the\n        query from the user.\n      </blockquote>")))
 (idp9136944
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Since the <code>load</code> function will refuse to\n        <code>load</code> an already active handler, we also need\n        the ability to unload a handler. Note that the handler\n        explicitly refuses to unload itself.\n      </blockquote>")))
 (idp9134624
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Now we'll start writing out the functions for manipulating the\n        table of active query handlers. We'll start with the function\n        for loading an instance. Note that it takes as an argument both\n        the name of the query handler, and the configuration for\n        instantiating that handler, in the form of an s-expression.\n        These are used for creating a first-class module of type\n        <code>(module Query_handler_instance)</code>, which is\n        then added to the active table.\n      </blockquote>")))
 (idp9132592
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Next, we'll need a function for creating a\n        <code>Loader.t</code>. This function requires the list of\n        known query handler modules. Note that the table of active\n        modules starts out as empty.\n      </blockquote>")))
 (idp9130432
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Note that a <code>Loader.t</code> has two hash tables: one\n        containing the known query handler modules, and one containing\n        the active query handler instances. The\n        <code>Loader.t</code> will be responsible for creating new\n        instances and adding them to the table, as well as for removing\n        instances, all in response to user queries.\n      </blockquote>")))
 (idp9127648
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        We'll do this by creating a query handler whose job is to\n        control the set of active query handlers. The module in question\n        will be called <code>Loader</code>, and its configuration\n        is a list of known <code>Query_handler</code> modules.\n        Here are the basic types.\n      </blockquote>")))
 (idp9126976
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        One of the advantages of first-class modules is that they afford\n        a great deal of dynamism and flexibility. For example, it's a\n        fairly simple matter to change our design to allow query\n        handlers to be loaded and unloaded at runtime.\n      </blockquote>")))
 (idp9124464
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Here's an example of a session with this program.\n      </blockquote>")))
 (idp9123120
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        We can most effectively run this command-line interface from a\n        standalone program, which we can do by putting the above code in\n        a file along with following command to launch the interface.\n      </blockquote>")))
 (idp9121856
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Now let's turn this into a complete, running example, by adding\n        a command-line interface, as shown below.\n      </blockquote>")))
 (idp9120944
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        The bundling together of the module and the value is in many\n        ways reminiscent of object-oriented languages. One key\n        difference, is that first-class modules allow you to package up\n        more than just a functions or methods. As we've seen, you can\n        also include types and even modules. We've only used it in a\n        small way here, but this extra power allows you to build more\n        sophisticated components that involve multiple interdependent\n        types and values.\n      </blockquote>")))
 (idp9118256
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        This function interacts with an instance by unpacking it into a\n        module <code>I</code> and then using the query handler\n        instance (<code>I.this</code>) in concert with the\n        associated module (<code>I.Query_handler</code>).\n      </blockquote>")))
 (idp9117024
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Now, we need a function that dispatches to a handler using a\n        dispatch table.\n      </blockquote>")))
 (idp9115744
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        The first thing we'll need is a function that takes a list of\n        query handler instances and constructs a dispatch table from it.\n      </blockquote>")))
 (idp9113792
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        where <code>query-name</code> is the name used to\n        determine which query handler to dispatch the query to, and\n        <code>query</code> is the body of the query.\n      </blockquote>")))
 (idp9112496
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        The following code lets you dispatch queries to one of a list of\n        query handler instances. We assume that the shape of the query\n        is as follows:\n      </blockquote>")))
 (idp9110576
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Using <code>build_instance</code>, constructing a new\n        instance becomes a one-liner:\n      </blockquote>")))
 (idp9109216
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Constructing instances in this way is a little verbose, but we\n        can write a function that eliminates most of this boilerplate.\n        Note that we are again making use of a locally abstract type.\n      </blockquote>")))
 (idp9108032
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        We can create an instance as follows.\n      </blockquote>")))
 (idp9107440
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        With this signature, we can create a first-class module that\n        encompasses both an instance of the query and the matching\n        operations for working with that query.\n      </blockquote>")))
 (idp9105120
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Now, what if we want to dispatch queries to any of an arbitrary\n        collection of handlers? Ideally, we'd just like to pass in the\n        handlers as a simple data structure like a list. This is awkward\n        to do with modules and functors alone, but it's quite natural\n        with first-class modules. The first thing we'll need to do is\n        create a signature that combines a\n        <code>Query_handler</code> module with an instantiated\n        query handler.\n      </blockquote>")))
 (idp9102608
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Again, we can create an instance of this query handler and\n        interact with it directly.\n      </blockquote>")))
 (idp9101280
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Here's another example: a query handler that does directory\n        listings. Here, the config is the default directory that\n        relative paths are interpreted within.\n      </blockquote>")))
 (idp9099328
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        We can use this module to create an instance of the\n        <code>Unique</code> query handler and interact with it.\n      </blockquote>")))
 (idp9096448
  ((file first-class-modules.html)
   (html
    "<blockquote>\n        Let's look at some examples of query handlers that satisfy this\n        interface. The following handler produces unique integer ids by\n        keeping an internal counter which it bumps every time it\n        produces a new value. The input to the query in this case is\n        just the trivial s-expression <code>()</code>, otherwise\n        known as <code>Sexp.unit</code>.\n      </blockquote>")))
 (idp9094096
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      This is all described in more detail in\n      <a href=\"data-serialization-with-s-expressions.html\">Chapter\194\16017, <i>Data Serialization with S-Expressions</i></a>.\n    </blockquote>")))
 (idp9092160
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      In a module, <code>with sexp</code> adds the implementation\n      of those functions. Thus, we can write\n    </blockquote>")))
 (idp9088256
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      In addition, we use the <code>sexplib</code> syntax\n      extension which extends OCaml by adding the\n      <code>with sexp</code> declaration. When attached to a type\n      in a signature, <code>with sexp</code> adds declarations of\n      s-expression converters, <span><em>e.g.</em></span>,\n    </blockquote>")))
 (idp9085584
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      In the above we use s-expressions as the format for queries and\n      responses, as well for the config. S-expressions are a simple,\n      flexible, and human-readable serialization format commonly used in\n      Core. We'll cover s-expressions in more detail in\n      <a href=\"data-serialization-with-s-expressions.html\">Chapter\194\16017, <i>Data Serialization with S-Expressions</i></a>,\n      but for now, it's enough to think of them as balanced\n      parenthetical expressions whose atomic values are strings,\n      <span><em>e.g.</em></span>,\n      <code>(this (is an) (s expression))</code>.\n    </blockquote>")))
 (idp9084240
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      Now let's look at first-class modules in the context of a more\n      complete and realistic example. In particular, consider the\n      following signature for a module that implements a query handler.\n    </blockquote>")))
 (idp9082256
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      This technique is useful beyond first-class modules. For example,\n      we can use the same approach to construct a local module to be fed\n      to a functor.\n    </blockquote>")))
 (idp9081728
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      Here, what we effectively do is capture a polymorphic type and\n      export it as a concrete type within a module.\n    </blockquote>")))
 (idp9080416
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      One common use of locally abstract types is to create a new type\n      that can be used in constructing a module. Here's an example of\n      doing this to create a new first-class module.\n    </blockquote>")))
 (idp9077808
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      If, on the other hand, we try to use the type <code>a</code>\n      as equivalent to some concrete type, say, <code>int</code>,\n      then the compiler will complain.\n    </blockquote>")))
 (idp9076544
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      This compiles successfully because the type <code>a</code>\n      is used in a way that is compatible with it being abstract, but\n      the type of the function that is inferred is polymorphic.\n    </blockquote>")))
 (idp9075184
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      One of the key properties of locally abstract types is that they\n      are dealt with as abstract types within the function they're\n      defined within, but are polymorphic from the outside. Consider the\n      following example.\n    </blockquote>")))
 (idp9074000
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      Polymorphic first-class modules are important because they allow\n      you to connect the types associated with a first-class module to\n      the types of other values you're working with.\n    </blockquote>")))
 (idp9072032
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      The resulting function is polymorphic in both the type of the list\n      element and the type <code>Bumpable.t</code>. We can see\n      this function in action below.\n    </blockquote>")))
 (idp9068624
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      Here, we used a feature of OCaml that hasn't come up before: a\n      <span><em>locally abstract type</em></span>. For any function, you\n      can declare a pseudo-parameter of the form\n      <code>(type a)</code> for any type name <code>a</code>\n      which introduces a fresh type that acts like an abstract type\n      within the context of the function. Here, we used that type as\n      part of a sharing constraint that ties the type\n      <code>B.t</code> with the type of the elements of the list\n      passed in.\n    </blockquote>")))
 (idp9065904
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      We can also write functions that use such first-class modules\n      polymorphically. The following function takes two arguments: a\n      <code>Bumpable</code> module, and a list of elements of the\n      same type as the type <code>t</code> of the module.\n    </blockquote>")))
 (idp9063904
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      The sharing constraints we've added above make the resulting\n      first-class modules polymorphic in the type <code>t</code>.\n      As a result, we can now use these values on values of the matching\n      type.\n    </blockquote>")))
 (idp9061984
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      To make <code>int_bumber</code> usable, we need to expose\n      the type, which we can do as follows.\n    </blockquote>")))
 (idp9058560
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      But you can't do much with <code>int_bumper</code>, since\n      <code>int_bumper</code> is fully abstract, so that we can no\n      longer recover the fact that the type in question is\n      <code>int</code>. This means you can't really do much with\n      it, as you can see below.\n    </blockquote>")))
 (idp9057376
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      And we can convert these to first-class modules.\n    </blockquote>")))
 (idp9056160
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      We can create multiple instances of this module with different\n      undelrying types.\n    </blockquote>")))
 (idp9053424
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      First-class modules can contain types and functions in addition to\n      simple values like <code>int</code>. Here's an interface\n      that contains a type and a corresponding <code>bump</code>\n      operation that takes a value of the type and produces a new one.\n    </blockquote>")))
 (idp9051344
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      There are some useful syntactic shortcuts when dealing with first\n      class modules. One notable one is that you can do the conversion\n      to an ordinary module within a pattern match. Thus, we can rewrite\n      the <code>to_int</code> function as follows.\n    </blockquote>")))
 (idp9049328
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      With these functions in hand, we can now work with values of type\n      <code>(module X_int)</code> in a more natural style, taking\n      advantage of the concision and simplicity of the core language.\n    </blockquote>")))
 (idp9044448
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      We can also write ordinary functions which consume and create\n      first class modules. The following shows the definition of two\n      functions: <code>to_int</code>, which converts a\n      <code>(module X_int)</code> into an <code>int</code>;\n      and <code>plus</code>, which returns the sum of two\n      <code>(module X_int)</code>s.\n    </blockquote>")))
 (idp9042544
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      The way in which type equality for first-class modules is\n      determined can be confusing. One common and problematic case is\n      that of creating an alias of a module type defined elsewhere. This\n      is often done to improve readability, and can happen both through\n      an explicit declaration of a module type or implicitly through an\n      <code>include</code> declaration. In both cases, this has\n      the unintended side effect of making first-class modules built off\n      of the alias incompatible with those built off of the original\n      module type. To deal with this, one should be disciplined in how\n      one refers to signatures when constructing first-class modules.\n    </blockquote>")))
 (idp9041216
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      Even though their types as first-class modules are distinct, the\n      underlying module types are compatible (indeed, identical), so we\n      can unify the types by unpacking and repacking the module.\n    </blockquote>")))
 (idp9038608
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      The type of the first-class module, <span><em>e.g.</em></span>,\n      <code>(module X_int)</code>, is based on the fully-qualified\n      name of the signature that was used to construct it. A first-class\n      module based on a signature with a different name, even if it is\n      substantively the same signature, will result in a distinct type,\n      as you can see below.\n    </blockquote>")))
 (idp9036752
  ((file first-class-modules.html)
   (html "<blockquote>\n      And here's an example.\n    </blockquote>")))
 (idp9034784
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      In order to access the contents of a first-class module, you need\n      to unpack it into an ordinary module. This can be done using the\n      <code>val</code> keyword, using this syntax:\n    </blockquote>")))
 (idp9033584
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      We can also create a first-class module from an anonymous module:\n    </blockquote>")))
 (idp9032320
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      The module type doesn't need to be part of the construction of a\n      first-class module if it can be inferred. Thus, we can write:\n    </blockquote>")))
 (idp9030416
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      So, we can convert <code>Three</code> into a first-class\n      module as follows.\n    </blockquote>")))
 (idp9028416
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      A first-class module is created by packaging up a module with a\n      signature that it satisfies. This is done using the\n      <code>module</code> keyword, using the following syntax:\n    </blockquote>")))
 (idp9027232
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      We can also create a module that matches this signature.\n    </blockquote>")))
 (idp9026000
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      In that light, consider the following signature of a module with a\n      single integer variable.\n    </blockquote>")))
 (idp9025408
  ((file first-class-modules.html)
   (html
    "<blockquote>\n      We'll start out by covering the basic mechanics of first-class\n      modules by working through some toy examples. We'll get to more\n      realistic examples in the next section.\n    </blockquote>")))
 (idp9023472
  ((file first-class-modules.html)
   (html
    "<blockquote>\n    First-class modules are a sophisticated technique, and you'll need\n    to get comfortable with some advanced aspects of the language to use\n    them effectively. But it's worth learning, because letting modules\n    into the core language is quite powerful, increasing the range of\n    what you can express and making it easier to build flexible and\n    modular systems.\n  </blockquote>")))
 (idp9022448
  ((file first-class-modules.html)
   (html
    "<blockquote>\n    OCaml provides a way around this stratification in the form of\n    <span><em>first-class modules</em></span>. First-class modules are\n    ordinary values that can be created from and converted back to\n    regular modules.\n  </blockquote>")))
 (idp9021552
  ((file first-class-modules.html)
   (html
    "<blockquote>\n    You can think of OCaml as being broken up into two parts: a core\n    language that is concerned with values and types, and a module\n    language that is concerned with modules and module signatures. These\n    sub-languages are stratified, in that modules can contain types and\n    values, but ordinary values can't contain modules or module types.\n    That means you can't do things like define a variable whose value is\n    a module, or a function that takes a module as an argument.\n  </blockquote>")))
 (idp7848400
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        In this case, <code>ocamlbuild</code> (which is invoked by\n        the <code>corebuild</code> script) will notice the error\n        and complain explicitly about the cycle.\n      </blockquote>")))
 (idp7845472
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The problem manifests in a different way if we create cyclic\n        references between files. We could create such a situation by\n        adding a reference to <code>Freq</code> from\n        <code>counter.ml</code>, <span><em>e.g.</em></span>, by\n        adding the following line.\n      </blockquote>")))
 (idp7844288
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        we'll see this error when we try to build:\n      </blockquote>")))
 (idp7841696
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The simplest case of this is that a module can not directly\n        refer to itself (although definitions within a module can refer\n        to each other in the ordinary way). So, if we tried to add a\n        reference to <code>Counter</code> from within\n        <code>counter.ml</code>\n</blockquote>")))
 (idp7840992
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The same is true at the module level. By default, cyclic\n        dependencies between modules are not allowed, and indeed, cyclic\n        dependencies among files are never allowed. Recursive modules\n        are possible, but are a rare case and we won't discuss them\n        further here.\n      </blockquote>")))
 (idp7836864
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        In most cases, OCaml doesn't allow cyclic dependencies,\n        <span><em>i.e.</em></span>, a collection of definitions that all\n        refer to each other. If you want to create such definitions, you\n        typically have to mark them specially. For example, when\n        defining a set of mutually recursive values (like the definition\n        of <code>is_even</code> and <code>is_odd</code> in\n        <a href=\"variables-and-functions.html#recursive-functions\">the section called \226\128\156Recursive functions\226\128\157</a>), you need to\n        define them using <code>let rec</code> rather than\n        ordinary <code>let</code>.\n      </blockquote>")))
 (idp7835216
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Order is similarly important in other parts of the signature,\n        including the order in which record fields are declared and the\n        order of arguments (including labeled and optional arguments) to\n        a function.\n      </blockquote>")))
 (idp7834096
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        will lead to a compilation error:\n      </blockquote>")))
 (idp7830160
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Type definitions that show up in an <code>mli</code> need\n        to match up with corresponding definitions in the\n        <code>ml</code>. Consider again the example of the type\n        <code>median</code>. The order of the declaration of\n        variants matters to the OCaml compiler, so the definition of\n        <code>median</code> in the implementation listing those\n        options in a different order:\n      </blockquote>")))
 (idp7828688
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        A missing type definition will lead to a similar error.\n      </blockquote>")))
 (idp7827456
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Now, if we try to compile without actually adding the\n        implementation, we'll get this error:\n      </blockquote>")))
 (idp7824912
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        We might decide that we want a new function in\n        <code>Counter</code> for pulling out the frequency count\n        of a given string. We can update the <code>mli</code> by\n        adding the following line.\n      </blockquote>")))
 (idp7823296
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        There's no denying that learning to decode such error messages\n        is difficult at first, and takes some getting used to. But in\n        time, decoding these errors becomes second nature.\n      </blockquote>")))
 (idp7820624
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        This error message is a bit intimidating at first, and it takes\n        a bit of thought to see why the first type for touch (which\n        comes from the implementation) doesn't match the second one\n        (which comes from the interface). The key thing to remember is\n        that <code>t</code> is a\n        <code>Core.Std.Map.t</code>, at which point you can see\n        that the error is a mismatch in the order of arguments to\n        <code>touch</code>.\n      </blockquote>")))
 (idp7819440
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        and we try to compile, we'll get the following error.\n      </blockquote>")))
 (idp7816768
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The simplest kind of error is where the type specified in the\n        signature does not match up with the type in the implementation\n        of the module. As an example, if we replace the\n        <code>val</code> declaration in\n        <code>counter.mli</code> by swapping the types of the\n        first two arguments:\n      </blockquote>")))
 (idp7814112
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      When OCaml compiles a program with an <code>ml</code> and an\n      <code>mli</code>, it will complain if it detects a mismatch\n      between the two. Here are some of the common errors you'll run\n      into.\n    </blockquote>")))
 (idp7810144
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      And if we then put <code>open Common</code> after\n      <code>open Core.Std</code> at the top of each file in our\n      project, then references to <code>List</code> will\n      automatically go to <code>Ext_list</code> instead.\n    </blockquote>")))
 (idp7806480
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      And we can now use <code>Ext_list</code> as a replacement\n      for <code>List</code>. If we want to use\n      <code>Ext_list</code> in preference to\n      <code>List</code> in our project, we can create a file of\n      common definitions:\n    </blockquote>")))
 (idp7802048
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Note that the order of declarations in the <code>mli</code>\n      does not need to match the order of declarations in the\n      <code>ml</code>. Also, the order of declarations in the\n      <code>ml</code> is quite important in that it determines\n      what values are shadowed. If we wanted to replace a function in\n      <code>List</code> with a new function of the same name, the\n      declaration of that function in the <code>ml</code> would\n      have to come after the <code>include List</code>\n      declaration.\n    </blockquote>")))
 (idp7799344
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Now, what about the interface of this new module? It turns out\n      that include works on the signature language as well, so we can\n      pull essentially the same trick to write an <code>mli</code>\n      for this new module. The only trick is that we need to get our\n      hands on the signature for the list module, which can be done\n      using <code>module type of</code>.\n    </blockquote>")))
 (idp7796752
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      To consider a more realistic example, imagine you wanted to build\n      an extended version of the <code>List</code> module, where\n      you've added some functionality not present in the module as\n      distributed in Core. <code>include</code> allows us to do\n      just that.\n    </blockquote>")))
 (idp7793632
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The difference between <code>include</code> and\n      <code>open</code> is that we've done more than change how\n      identifiers are searched for: we've changed what's in the module.\n      If we'd used <code>open</code>, we'd have gotten a quite\n      different result.\n    </blockquote>")))
 (idp7791200
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can use the <code>include</code> directive to create a\n      new, extended version of the <code>Interval</code> module.\n    </blockquote>")))
 (idp7789424
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      While opening a module affects the environment used to search for\n      identifiers, <span><em>including</em></span> a module is a way of\n      actually adding new identifiers to a module proper. Consider the\n      following simple module for representing a range of intervals.\n    </blockquote>")))
 (idp7786272
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Because the module name <code>C</code> only exists for a\n          short scope, it's easy to read and remember what\n          <code>C</code> stands for. Rebinding modules to very\n          short names at the toplevel of your module is usually a\n          mistake.\n        </blockquote>")))
 (idp7785168
  ((file files-modules-and-programs.html)
   (html "<blockquote>\n          you could write:\n        </blockquote>")))
 (idp7783232
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          An alternative to local opens that makes your code terser\n          without giving up on explicitness is to locally rebind the\n          name of a module. So, when using the\n          <code>Counter.median</code> type, instead of writing:\n        </blockquote>")))
 (idp7781584
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          There's another even more lightweight syntax for local opens,\n          which is particularly useful for small expressions:\n        </blockquote>")))
 (idp7779872
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          In the above, <code>of_int</code> and the infix\n          operators are the ones from the <code>Int64</code>\n          module.\n        </blockquote>")))
 (idp7778192
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          If you do need to do an open, it's better to do a\n          <span><em>local open</em></span>. There are two syntaxes for\n          local opens. For example, you can write:\n        </blockquote>")))
 (idp7775952
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Opening modules at the toplevel of a module should be done\n          quite sparingly, and generally only with modules that have\n          been specifically designed to be opened, like\n          <code>Core.Std</code> or\n          <code>Option.Monad_infix</code>.\n        </blockquote>")))
 (idp7774976
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Here's some general advice on how to deal with opens.\n    </blockquote>")))
 (idp7773520
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n<code>open</code> is essential when you want to modify your\n      environment for a standard library like Core, but it's generally\n      good style to keep opening of modules to a minimum. Opening a\n      module is basically a tradeoff between terseness and explicitness\n      --- the more modules you open, the fewer module qualifications you\n      need, and the harder it is to look at an identifier and figure out\n      where it comes from.\n    </blockquote>")))
 (idp7770880
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We've encountered <code>open</code> already, specifically\n      where we've written <code>open Core.Std</code> to get access\n      to the standard definitions in the Core library. In general,\n      opening a module adds the contents of that module to the\n      environment that the compiler looks at to find the definition of\n      various identifiers. Here's an example.\n    </blockquote>")))
 (idp7767312
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Most of the time, you refer to values and types within a module by\n      using the module name as an explicit qualifier.\n      <span><em>e.g.</em></span>, you write <code>List.map</code>\n      to refer to the <code>map</code> function in the\n      <code>List</code> module. Sometimes, though, you want to be\n      able to refer to the contents of a module without this explicit\n      qualification. That's what the <code>open</code> statement\n      is for.\n    </blockquote>")))
 (idp7764912
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The above code has a bug: it compares the username in one session\n      to the host in the other session, when it should be comparing the\n      usernames in both cases. Because of how we defined our types,\n      however, the compiler will flag this bug for us.\n    </blockquote>")))
 (idp7762928
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We could have written this slightly differently, by giving the\n      signature its own toplevel <code>module type</code>\n      declaration, making it possible to create multiple distinct types\n      with the same underlying implementation in a lightweight way.\n    </blockquote>")))
 (idp7761760
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The basic structure of a module declaration like this is:\n    </blockquote>")))
 (idp7759872
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Note that the <code>to_string</code> and\n      <code>of_string</code> functions above are implemented\n      simply as the identity function, which means they have no runtime\n      effect. They are there purely as part of the discipline that they\n      enforce on the code through the type system.\n    </blockquote>")))
 (idp7758672
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Here's how you might create such an abstract type, within a\n      sub-module:\n    </blockquote>")))
 (idp7757904
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      A better approach is to mint new abstract types for each\n      identifier, where those types are under the covers just\n      implemented as strings. That way, the type system will prevent you\n      from confusing a username with a hostname, and if you do need to\n      convert, you can do so using explicit conversions to and from the\n      string type.\n    </blockquote>")))
 (idp7756448
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Up until now, we've only considered modules that correspond to\n      files, like <code>counter.ml</code>. But modules (and module\n      signatures) can be nested inside other modules. As a simple\n      example, consider a program that needs to deal with multiple\n      identifiers like usernames and hostnames. If you just represent\n      these as strings, then it becomes easy to confuse one with the\n      other.\n    </blockquote>")))
 (idp7754592
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The decision of whether a given type should be abstract or\n      concrete is an important one. Abstract types give you more control\n      over how values are created and accessed, and make it easier to\n      enforce invariants beyond what is enforced by the type itself;\n      concrete types let you expose more detail and structure to client\n      code in a lightweight way. The right choice depends very much on\n      the context.\n    </blockquote>")))
 (idp7751888
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Now, to expose this usefully in the interface, we need to expose\n      both the function and the type <code>median</code> with its\n      definition. Note that values (of which functions are an example)\n      and types have distinct namespaces, so there's no name clash here.\n      Adding the following two lines added to\n      <code>counter.mli</code> does the trick.\n    </blockquote>")))
 (idp7749568
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      In the above, we use <code>failwith</code> to throw an\n      exception for the case of the empty list. We'll discuss exceptions\n      more in <a href=\"error-handling.html\">Chapter\194\1607, <i>Error Handling</i></a>. Note also that\n      the function <code>fst</code> simply returns the first\n      element of any 2-tuple.\n    </blockquote>")))
 (idp7747392
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      For example, imagine we wanted to add a function to\n      <code>Counter</code> for returning the line with the median\n      frequency count. If the number of lines is even, then there is no\n      precise median and the function would return the lines before and\n      after the median instead. We'll use a custom type to represent the\n      fact that there are two possible return values. Here's a possible\n      implementation.\n    </blockquote>")))
 (idp7745072
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      In our frequency-count example, the module\n      <code>Counter</code> had an abstract type\n      <code>Counter.t</code> for representing a collection of\n      frequency counts. Sometimes, you'll want to make a type in your\n      interface <span><em>concrete</em></span>, by including the type\n      definition in the interface.\n    </blockquote>")))
 (idp7740448
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Note that in the above we use <code>String.Map</code> in\n      some places and simply <code>Map</code> in others. This has\n      to do with the fact that for some operations, like creating a\n      <code>Map.t</code>, you need access to type-specialized\n      information, and for others, like looking something up in\n      <code>Map.t</code>, you don't. This is covered in more\n      detail in <a href=\"maps-and-hash-tables.html\">Chapter\194\16013, <i>Maps and Hash Tables</i></a>.\n    </blockquote>")))
 (idp7737936
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Now we can turn to optimizing the implementation of\n      <code>Counter</code>. Here's an alternate and far more\n      efficient implementation, based on the <code>Map</code>\n      datastructure in Core.\n    </blockquote>")))
 (idp7733408
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      This is because <code>freq.ml</code> depends on the fact\n      that frequency counts are represented as association lists, a fact\n      that we've just hidden. We just need to fix\n      <code>build_counts</code> to use\n      <code>Counter.empty</code> instead of <code>[]</code>\n      and <code>Counter.to_list</code> to get the association list\n      out at the end for processing and printing. The resulting\n      implementation is shown below.\n    </blockquote>")))
 (idp7731680
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If we now try to compile <code>freq.ml</code>, we'll get the\n      following error:\n    </blockquote>")))
 (idp7729328
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Here's a rewrite of <code>counter.ml</code> to match the new\n      <code>counter.mli</code>.\n    </blockquote>")))
 (idp7726160
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We also used this opportunity to document the module. The\n      <code>mli</code> file is the place where you specify your\n      module's interface, and as such is a natural place to document the\n      module as well. We also started our comments with a double\n      asterisk to cause them to be picked up by the\n      <code>ocamldoc</code> tool when generating API\n      documentation. We'll discuss <code>ocamldoc</code> more in\n      <a href=\"the-compiler-frontend-parsing-and-type-checking.html\">Chapter\194\16022, <i>The Compiler Frontend: Parsing and Type Checking</i></a>.\n    </blockquote>")))
 (idp7723200
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Note that we needed to add <code>empty</code> and\n      <code>to_list</code> to <code>Counter</code>, since\n      otherwise, there would be no way to create a\n      <code>Counter.t</code> or get data out of one.\n    </blockquote>")))
 (idp7720784
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      To hide the fact that frequency counts are represented as\n      association lists, we'll need to make the type of frequency counts\n      <span><em>abstract</em></span>. A type is abstract if its name is\n      exposed in the interface, but its definition is not. Here's an\n      abstract interface for <code>Counter</code>:\n    </blockquote>")))
 (idp7717920
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The generated code is basically equivalent to the\n      <code>mli</code> that we wrote by hand, but is a bit uglier\n      and more verbose, and, of course, has no comments. In general,\n      auto-generated <code>mli</code>'s are only useful as a\n      starting point. In OCaml, the <code>mli</code> is the key\n      place where you present and document your interface, and there's\n      no replacement for careful human editing and organization.\n    </blockquote>")))
 (idp7715952
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If you don't want to construct an mli entirely by hand, you can\n      ask OCaml to auto-generate one for you from the source, which you\n      can then adjust to fit your needs. Here's how you can do that\n      using <code>corebuild</code>.\n    </blockquote>")))
 (idp7713104
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Note that <code>ocamlbuild</code> will detect the presence\n      of the <code>mli</code> file automatically and include it in\n      the build.\n    </blockquote>")))
 (idp7711296
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Using this syntax, we can write the signature of\n      <code>counter.ml</code> as follows.\n    </blockquote>")))
 (idp7707504
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      For <code>counter.mli</code>, we'll start by writing down an\n      interface that describes what's currently available in\n      <code>counter.ml</code>, without hiding anything.\n      <code>val</code> declarations are used to specify values in\n      a signature. The syntax of a <code>val</code> declaration is\n      as follows:\n    </blockquote>")))
 (idp7704080
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The implementation details of a module can be hidden by attaching\n      an <span><em>interface</em></span>. (Note that the terms\n      <span><em>interface</em></span>, <span><em>signature</em></span> and\n      <span><em>module type</em></span> are all used interchangeably.) A\n      module defined by a file <code>filename.ml</code> can be\n      constrained by a signature placed in a file called\n      <code>filename.mli</code>.\n    </blockquote>")))
 (idp7699472
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      While we've pushed some of the logic to the\n      <code>Counter</code> module, the code in\n      <code>freq.ml</code> can still depend on the details of the\n      implementation of <code>Counter</code>. Indeed, if you look\n      at the definition of <code>build_counts</code>, you'll see\n      that it depends on the fact that the empty set of frequency counts\n      is represented as an empty list. We'd like to prevent this kind of\n      dependency so we can change the implementation of\n      <code>Counter</code> without needing to change client code\n      like that in <code>freq.ml</code>.\n    </blockquote>")))
 (idp7694704
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can now rewrite <code>freq.ml</code> to use\n      <code>Counter</code>. Note that the resulting code can still\n      be built with <code>ocamlbuild</code>, which will discover\n      dependencies and realize that <code>counter.ml</code> needs\n      to be compiled.\n    </blockquote>")))
 (idp7692848
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The file <code>counter.ml</code> will be compiled into a\n      module named <code>Counter</code>. The name of the module is\n      derived automatically from the filename. The module name is\n      capitalized even if the file is not, and more generally module\n      names must be capitalized.\n    </blockquote>")))
 (idp7690208
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We'll start by creating a file, <code>counter.ml</code> that\n      contains the logic for maintaining the association list used to\n      describe the counts. The key function, called\n      <code>touch</code>, updates the association list with the\n      information that a given line should be added to the frequency\n      counts.\n    </blockquote>")))
 (idp7689456
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can fix this problem by replacing association lists with a more\n      efficient data structure. To do that, we'll first factor out the\n      key functionality into a separate module with an explicit\n      interface. We can consider alternative (and more efficient)\n      implementations once we have a clear interface to program against.\n    </blockquote>")))
 (idp7687408
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Let's consider how we can use modules to refactor the\n      implementation of <code>freq.ml</code>. Remember that the\n      variable <code>counts</code> contains an association list\n      representing the counts of the lines seen so far. But updating an\n      association list takes time linear in the length of the list,\n      meaning that the time complexity of processing a file is quadratic\n      in the number of distinct lines in the file.\n    </blockquote>")))
 (idp7684736
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Source files in OCaml are tied into the module system, with each\n      file compiling down into a module whose name is derived from the\n      name of the file. We've encountered modules before, for example,\n      when we used functions like <code>find</code> and\n      <code>add</code> from the <code>List.Assoc</code>\n      module. At its simplest, you can think of a module as a collection\n      of definitions that are stored within a namespace.\n    </blockquote>")))
 (idp7682896
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      As a general matter, production executables should usually be\n      built using the native-code compiler, but it sometimes makes sense\n      to use bytecode for development builds. And, of course, bytecode\n      makes sense when targeting a platform not supported by the\n      native-code compiler.\n    </blockquote>")))
 (idp7680464
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Aside from performance, executables generated by the two compilers\n      have nearly identical behavior. There are a few things to be aware\n      of. First, the bytecode compiler can be used on more\n      architectures, and has some tools that are not available for\n      native code. For example, the OCaml debugger only works with\n      bytecode (although <code>gdb</code>, the Gnu Debugger, works\n      with OCaml native-code applications). The bytecode compiler is\n      also quicker than the native-code compiler. In addition, in order\n      to run a bytecode executable you typically need to have OCaml\n      installed on the system in question. That's not strictly required,\n      though, since you can build a bytecode executable with an embedded\n      runtime, using the <code>-custom</code> compiler flag.\n    </blockquote>")))
 (idp7677360
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      OCaml ships with two compilers: the <code>ocamlc</code>\n      bytecode compiler and the <code>ocamlopt</code> native-code\n      compiler. Programs compiled with <code>ocamlc</code> are\n      interpreted by a virtual machine, while programs compiled with\n      <code>ocamlopt</code> are compiled to native machine code to\n      be run on a specific operating system and processor architecture.\n    </blockquote>")))
 (idp7674768
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can run the resulting executable from the command-line. The\n      following line extracts strings from the\n      <code>ocamlopt</code> binary, reporting the most frequently\n      occurring ones. Note that the specific results will vary from\n      platform to platform, since the binary itself will differ between\n      platforms.\n    </blockquote>")))
 (idp7672512
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If we'd invoked <code>ocamlbuild</code> with a target of\n      <code>freq.native</code> instead of\n      <code>freq.byte</code>, we would have gotten native-code\n      instead.\n    </blockquote>")))
 (idp7667920
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      While this works well enough for a one-file project, more\n      complicated projects require a tool to orchestrate the build. One\n      good tool for this task is <code>ocamlbuild</code>, which is\n      shipped with the OCaml compiler. We'll talk more about\n      <code>ocamlbuild</code> in\n      <a href=\"the-compiler-frontend-parsing-and-type-checking.html\">Chapter\194\16022, <i>The Compiler Frontend: Parsing and Type Checking</i></a>,\n      but for now, we'll just use a simple wrapper around\n      <code>ocamlbuild</code> called <code>corebuild</code>\n      that sets build parameters appropriately for building against Core\n      and its related libraries.\n    </blockquote>")))
 (idp7663376
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Here we're using <code>ocamlfind</code>, a tool which itself\n      invokes other parts of the OCaml toolchain (in this case,\n      <code>ocamlc</code>) with the appropriate flags to link in\n      particular libraries and packages. Here,\n      <code>-package core</code> is asking\n      <code>ocamlfind</code> to link in the Core library,\n      <code>-linkpkg</code> asks ocamlfind to link in the packages\n      as is necessary for building an executable, while\n      <code>-thread</code> turns on threading support, which is\n      required for Core.\n    </blockquote>")))
 (idp7662112
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      But as you can see, it fails because it can't find Core. We need a\n      somewhat more complex invocation to get Core linked in:\n    </blockquote>")))
 (idp7660880
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If we weren't using Core or any other external libraries, we could\n      build the executable like this:\n    </blockquote>")))
 (idp7657280
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Unlike C, programs in OCaml do not have a unique\n      <code>main</code> function. When an OCaml program is\n      evaluated, all the statements in the implementation files are\n      evaluated in the order in which they were linked together. These\n      implementation files can contain arbitrary expressions, not just\n      function definitions. In this example, the declaration starting\n      with <code>let () =</code> plays the role of the\n      <code>main</code> declaration, kicking off the processing.\n      But really the entire file is evaluated at startup, and so in some\n      sense the full codebase is one big <code>main</code>\n      function.\n    </blockquote>")))
 (idp7654320
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      With <code>build_counts</code> defined, we then call the\n      function to build the association list, sort that list by\n      frequency in descending order, grab the first 10 elements off the\n      list, and then iterate over those ten elements and print them to\n      the screen. These operations are tied together using the\n      <code>|&gt;</code> operator, as described in\n      <a href=\"variables-and-functions.html\">Chapter\194\1602, <i>Variables and Functions</i></a>.\n    </blockquote>")))
 (idp7650592
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The function <code>build_counts</code> reads in lines from\n      <code>stdin</code>, constructing from those lines an\n      association list with the frequencies of each line. It does this\n      by invoking <code>In_channel.fold_lines</code> (similar to\n      the function <code>List.fold</code> described in\n      <a href=\"lists-and-patterns.html\">Chapter\194\1603, <i>Lists and Patterns</i></a>), which reads\n      through the lines one by one, calling the provided fold function\n      for each line to update the accumulator. That accumulator is\n      initialized to the empty list.\n    </blockquote>")))
 (idp7648880
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Now we can write down <code>freq.ml</code>.\n    </blockquote>")))
 (idp7647728
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Note that <code>List.Assoc.add</code> doesn't modify the\n      original list, but instead allocates a new list with the requisite\n      key/value added.\n    </blockquote>")))
 (idp7643920
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      This implementation will use two functions from the\n      <code>List.Assoc</code> module, which provides utility\n      functions for interacting with association lists,\n      <span><em>i.e.</em></span>, lists of key/value pairs. In\n      particular, we use the function\n      <code>List.Assoc.find</code>, which looks up a key in an\n      association list, and <code>List.add</code>, which adds a\n      new binding to an association list, as shown below.\n    </blockquote>")))
 (idp7641936
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We'll start with an example: a utility that reads lines from\n      <code>stdin</code> and computes a frequency count of the\n      lines that have been read in. At the end, the 10 lines with the\n      highest frequency counts are written out. We'll start with a\n      simple implementation, which we'll save as the file\n      <code>freq.ml</code>.\n    </blockquote>")))
 (idp7640480
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n    In this chapter, we'll show you how to build an OCaml program from a\n    collection of files, as well as the basics of working with modules\n    and module signatures.\n  </blockquote>")))
 (idp7639696
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n    We've so far experienced OCaml largely through the toplevel. As you\n    move from exercises to real-world programs, you'll need to leave the\n    toplevel behind and start building programs from files. Files are\n    more than just a convenient way to store and manage your code; in\n    OCaml, they also act as boundaries that divide your program into\n    conceptual units.\n  </blockquote>")))
 (idp8364992
  ((file error-handling.html)
   (html
    "<blockquote>\n      In short, for errors that are a foreseeable and ordinary part of\n      the execution of your production code and that are not\n      omnipresent, error aware return types are typically the right\n      solution.\n    </blockquote>")))
 (idp8364208
  ((file error-handling.html)
   (html
    "<blockquote>\n      Also, for errors that are omnipresent, error-aware return types\n      may also be overkill. A good example is out-of-memory errors,\n      which can occur anywhere, and so you'd need to use error-aware\n      return types everywhere to capture those. And having every\n      operation marked as one that might fail is no more explicit than\n      having none of them marked.\n    </blockquote>")))
 (idp8363184
  ((file error-handling.html)
   (html
    "<blockquote>\n      To be clear, it doesn't make sense to avoid exceptions entirely.\n      The old maxim of &quot;use exceptions for exceptional\n      conditions&quot; applies. If an error occurs sufficiently rarely,\n      then throwing an exception may well be the right behavior.\n    </blockquote>")))
 (idp8362352
  ((file error-handling.html)
   (html
    "<blockquote>\n      The right tradeoff depends on your application. If you're writing\n      a rough and ready program where getting it done quickly is key,\n      and failure is not that expensive, then using exceptions\n      extensively may be the way to go. If, on the other hand, you're\n      writing production software whose failure is costly, then you\n      should probably lean in the direction of using error-aware return\n      types.\n    </blockquote>")))
 (idp8361504
  ((file error-handling.html)
   (html
    "<blockquote>\n      Exceptions are more concise because they allow you to defer the\n      job of error handling to some larger scope, and because they don't\n      clutter up your types. But this same concision comes at a cost:\n      exceptions are all too easy to ignore. Error-aware return types,\n      on the other hand, are fully manifest in your type definitions,\n      making the errors that your code might generate explicit and\n      impossible to ignore.\n    </blockquote>")))
 (idp8360896
  ((file error-handling.html)
   (html
    "<blockquote>\n      Given that OCaml supports both exceptions and error-aware return\n      types, how do you choose between them? The key is to think about\n      the tradeoff between concision and explicitness.\n    </blockquote>")))
 (idp8358592
  ((file error-handling.html)
   (html
    "<blockquote>\n        And then we can re-raise that exception:\n      </blockquote>")))
 (idp8355632
  ((file error-handling.html)
   (html
    "<blockquote>\n        And <code>Result</code> and <code>Or_error</code>\n        have similar <code>try_with</code> functions. So, we could\n        write:\n      </blockquote>")))
 (idp8354128
  ((file error-handling.html)
   (html
    "<blockquote>\n        Both exceptions and error-aware types are necessary parts of\n        programming in OCaml. As such, you often need to move between\n        these two worlds. Happily, Core comes with some useful helper\n        functions to help you do just that. For example, given a piece\n        of code that can throw an exception, you can capture that\n        exception into an option as follows:\n      </blockquote>")))
 (idp8352384
  ((file error-handling.html)
   (html
    "<blockquote>\n        Here, the handler costs about the same, at 20 cycles, but the\n        exception itself costs only 20, as opposed to 30 additional\n        cycles. All told, this should only matter if you're using\n        exceptions routinely as part of your flow control, which is in\n        most cases a stylistic mistake anyway.\n      </blockquote>")))
 (idp8351040
  ((file error-handling.html)
   (html
    "<blockquote>\n        Here, we see that we lose something like 20 cycles to adding an\n        exception handler, and 30 more to actually throwing and catching\n        an exception. If we turn backtraces off, then the results look\n        like this.\n      </blockquote>")))
 (idp8349920
  ((file error-handling.html)
   (html
    "<blockquote>\n        If we run this with stacktraces on, the benchmark results look\n        like this.\n      </blockquote>")))
 (idp8349232
  ((file error-handling.html)
   (html
    "<blockquote>\n        We're testing three cases here: a simple computation with no\n        exceptions; the same computation with an exception handler but\n        no thrown exceptions; and finally the same computation where we\n        use the exception to do the control flow back to the caller.\n      </blockquote>")))
 (idp8347328
  ((file error-handling.html)
   (html
    "<blockquote>\n        There is a legitimate reasons to run without backtraces: speed.\n        OCaml's exceptions are fairly fast, but they're even faster\n        still if you disable backtraces. Here's a simple benchmark that\n        shows the effect, using the <code>core_bench</code>\n        package.\n      </blockquote>")))
 (idp8346160
  ((file error-handling.html)
   (html
    "<blockquote>\n        The resulting error message is considerably less informative.\n        You can also turn backtraces off in your code by calling\n        <code>Backtrace.Exn.set_recording false</code>.\n      </blockquote>")))
 (idp8344304
  ((file error-handling.html)
   (html
    "<blockquote>\n        Even using Core and compiling with debugging symbols, you can\n        turn backtraces off by setting the\n        <code>OCAMLRUNPARAM</code> environment variable to be\n        empty.\n      </blockquote>")))
 (idp8343488
  ((file error-handling.html)
   (html
    "<blockquote>\n        This works well if you have backtraces enabled, but that isn't\n        always the case. In fact, by default, OCaml has backtraces\n        turned off, and even if you have them turned on at runtime, you\n        can't get backtraces unless you have compiled with debugging\n        symbols. Core reverses the default, so if you're linking in\n        Core, you will have backtraces enabled at runtime.\n      </blockquote>")))
 (idp8342160
  ((file error-handling.html)
   (html
    "<blockquote>\n        You can also capture a backtrace within your program by calling\n        <code>Exn.backtrace</code>, which returns the backtrace of\n        the most recently thrown exception. This is useful for reporting\n        detailed information on errors that did not cause your program\n        to fail.\n      </blockquote>")))
 (idp8340816
  ((file error-handling.html)
   (html
    "<blockquote>\n        If we build and run this program, we'll get a stack backtrace\n        that will give you some information about where the error\n        occurred, and the stack of function calls that were in place at\n        the time of the error.\n      </blockquote>")))
 (idp8339600
  ((file error-handling.html)
   (html
    "<blockquote>\n        A big part of the value of exceptions is that they provide\n        useful debugging information in the form of a stack backtrace.\n        Consider the following simple program.\n      </blockquote>")))
 (idp8336768
  ((file error-handling.html)
   (html
    "<blockquote>\n        At which point, it makes sense to simply use the non-exception\n        throwing function, <code>List.Assoc.find</code>, instead.\n      </blockquote>")))
 (idp8335200
  ((file error-handling.html)
   (html
    "<blockquote>\n        This kind of problem is hard to detect in advance, because the\n        type system doesn't tell you what exceptions a given function\n        might throw. For this reason, it's generally better to avoid\n        relying on the identity of the exception to determine the nature\n        of a failure. A better approach is to narrow the scope of the\n        exception handler, so that when it fires it's very clear what\n        part of the code failed.\n      </blockquote>")))
 (idp8331984
  ((file error-handling.html)
   (html
    "<blockquote>\n        The use of exceptions in this code, however, presents some\n        problems. In particular, what happens if\n        <code>compute_weight</code> throws an exception? Ideally,\n        <code>lookup_weight</code> should propagate that exception\n        on, but if the exception happens to be\n        <code>Not_found</code>, then that's not what will happen:\n      </blockquote>")))
 (idp8330096
  ((file error-handling.html)
   (html
    "<blockquote>\n        As you can see from the type, <code>lookup_weight</code>\n        takes an association list, a key for looking up a corresponding\n        value in that list, and a function for computing a\n        floating-point weight from the looked-up value. If no value is\n        found, then a weight of <code>0.</code> should be\n        returned.\n      </blockquote>")))
 (idp8327344
  ((file error-handling.html)
   (html
    "<blockquote>\n        OCaml's exception-handling system allows you to tune your\n        error-recovery logic to the particular error that was thrown.\n        For example, <code>List.find_exn</code> throws\n        <code>Not_found</code> when the element in question can't\n        be found. Let's look at an example of how you could take\n        advantage of this. In particular, consider the following\n        function\n      </blockquote>")))
 (idp8324608
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>In_channel.with_file</code> is actually built on top\n        of <code>protect</code> so that it can clean up after\n        itself in the presence of exceptions.\n      </blockquote>")))
 (idp8322272
  ((file error-handling.html)
   (html
    "<blockquote>\n        This is a common enough problem that\n        <code>In_channel</code> has a function called\n        <code>with_file</code> that automates this pattern.\n      </blockquote>")))
 (idp8317136
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can fix this using Core's <code>protect</code>\n        function. The purpose of <code>protect</code> is to ensure\n        that the <code>finally</code> thunk will be called when\n        <code>f</code> exits, whether it exits normally or with an\n        exception. This is similar to the <code>try/finally</code>\n        construct available in many programming languages, but it is\n        implemented in a library, rather than being a built-in\n        primitive. Here's how it could be used to fix\n        <code>load_reminders</code>.\n      </blockquote>")))
 (idp8314480
  ((file error-handling.html)
   (html
    "<blockquote>\n        The problem with this code is that the function that loads the\n        s-expression and parses it into a list of\n        <code>Time.t</code>/<code>string</code> pairs might\n        throw an exception if the file in question is malformed.\n        Unfortunately, that means that the\n        <code>In_channel.t</code> that was opened will never be\n        closed, leading to a file-descriptor leak.\n      </blockquote>")))
 (idp8313104
  ((file error-handling.html)
   (html
    "<blockquote>\n        One headache with exceptions is that they can terminate your\n        execution at unexpected places, leaving your program in an\n        awkward state. Consider the following function for loading a\n        file full of reminders, formatted as s-expressions.\n      </blockquote>")))
 (idp8311472
  ((file error-handling.html)
   (html
    "<blockquote>\n        Otherwise, the original exception continues up the stack of\n        function calls, to be handled by the next outer exception\n        handler. If the exception is never caught, it terminates the\n        program.\n      </blockquote>")))
 (idp8309440
  ((file error-handling.html)
   (html
    "<blockquote>\n        But if the evaluation of the body throws an exception, then the\n        exception will be fed to the pattern match statements following\n        the <code>with</code>. If the exception matches a pattern,\n        then we consider the exception caught, and the\n        <code>try/with</code> clause evaluates to the expression\n        on the right-hand side of the matching pattern.\n      </blockquote>")))
 (idp8307072
  ((file error-handling.html)
   (html
    "<blockquote>\n        A <code>try/with</code> clause first evaluates its body,\n        <code>&lt;expr&gt;</code>. If no exception is thrown, then\n        the result of evaluating the body is what the entire\n        <code>try/with</code> clause evaluates to.\n      </blockquote>")))
 (idp8304656
  ((file error-handling.html)
   (html
    "<blockquote>\n        In OCaml, an exception handler is declared using a\n        <code>try</code>/<code>with</code> statement. Here's\n        the basic syntax.\n      </blockquote>")))
 (idp8303632
  ((file error-handling.html)
   (html
    "<blockquote>\n        So far, we've only seen exceptions fully terminate the execution\n        of a computation. But often, we want a program to be able to\n        respond to and recover from an exception. This is achieved\n        through the use of <span><em>exception handlers</em></span>.\n      </blockquote>")))
 (idp8301456
  ((file error-handling.html)
   (html
    "<blockquote>\n        This shows what's special about <code>assert</code>, which\n        is that it captures the line number and character offset of the\n        source location from which the assertion was made.\n      </blockquote>")))
 (idp8299456
  ((file error-handling.html)
   (html
    "<blockquote>\n        In this case, the assert can never be triggered because we have\n        a check that makes sure that the lists are of the same length\n        before we call <code>loop</code>. If we change the code so\n        that we drop this test, then we can trigger the assert.\n      </blockquote>")))
 (idp8298288
  ((file error-handling.html)
   (html
    "<blockquote>\n        Here we use <code>assert false</code>, which means that\n        the assert is guaranteed to trigger. In general, one can put an\n        arbitrary condition in the assertion.\n      </blockquote>")))
 (idp8295664
  ((file error-handling.html)
   (html
    "<blockquote>\n        Another important way of throwing an exception is the\n        <code>assert</code> directive. <code>assert</code>\n        is used for situations where a violation of the condition in\n        question indicates a bug. Consider the following piece of code\n        for zipping together two lists.\n      </blockquote>")))
 (idp8293872
  ((file error-handling.html)
   (html
    "<blockquote>\n        There are several other useful functions for raising exceptions,\n        which can be found in the API documentation for the\n        <code>Common</code> and <code>Exn</code> modules in\n        Core.\n      </blockquote>")))
 (idp8292000
  ((file error-handling.html)
   (html
    "<blockquote>\n        OCaml and Core provide a number of helper functions to simplify\n        the task of throwing exceptions. The simplest one is\n        <code>failwith</code>, which could be defined as follows:\n      </blockquote>")))
 (idp8289936
  ((file error-handling.html)
   (html
    "<blockquote>\n      This is all part of the support for s-expressions provided by the\n      Sexplib library and syntax-extension, which is described in more\n      detail in\n      <a href=\"data-serialization-with-s-expressions.html\">Chapter\194\16017, <i>Data Serialization with S-Expressions</i></a>.\n    </blockquote>")))
 (idp8288000
  ((file error-handling.html)
   (html
    "<blockquote>\n      The period in front of <code>Wrong_date</code> is there\n      because the representation generated by\n      <code>with sexp</code> includes the full module path of the\n      module where the exception in question is defined. In this case,\n      since we've declared the exception at the toplevel, that module\n      path is trivial.\n    </blockquote>")))
 (idp8286160
  ((file error-handling.html)
   (html
    "<blockquote>\n      But if we declare the exception using <code>with sexp</code>\n      (and the constituent types have sexp converters), we'll get\n      something with more information.\n    </blockquote>")))
 (idp8284944
  ((file error-handling.html)
   (html
    "<blockquote>\n      OCaml can't always generate a useful textual representation of an\n      exception. For example:\n    </blockquote>")))
 (idp8282416
  ((file error-handling.html)
   (html
    "<blockquote>\n      This all matters because it means that the return type of\n      <code>raise</code> can be whatever it needs to be to fit in\n      to the context it is called in. Thus, the type system will let us\n      throw an exception anywhere in a program.\n    </blockquote>")))
 (idp8281312
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>forever</code> doesn't return a value for a different\n      reason: it is an infinite loop.\n    </blockquote>")))
 (idp8277360
  ((file error-handling.html)
   (html
    "<blockquote>\n      The return type of <code>'a</code> suggests that\n      <code>raise</code> could return a value of any type. That\n      seems impossible, and it is. Really, <code>raise</code> has\n      this type because it never returns at all. This behavior isn't\n      restricted to functions like <code>raise</code> that\n      terminate by throwing exceptions. Here's another example of a\n      function that doesn't return a value.\n    </blockquote>")))
 (idp8275504
  ((file error-handling.html)
   (html
    "<blockquote>\n      In the above example, <code>raise</code> throws the\n      exception, thus terminating the computation. The type of raise is\n      a bit surprising when you first see it:\n    </blockquote>")))
 (idp8274352
  ((file error-handling.html)
   (html
    "<blockquote>\n      Note that we named the function <code>find_exn</code> to\n      warn the user that the function routinely throws exceptions, a\n      convention that is used heavily in Core.\n    </blockquote>")))
 (idp8272304
  ((file error-handling.html)
   (html
    "<blockquote>\n      Here's an example of a function for looking up a key in an\n      <span><em>association list</em></span>, <span><em>i.e.</em></span> a\n      list of key/value pairs which uses this newly-defined exception:\n    </blockquote>")))
 (idp8270416
  ((file error-handling.html)
   (html
    "<blockquote>\n      All exceptions are of type <code>exn</code>, and that type\n      is a similar to a variant type of the kind we encountered in\n      <a href=\"variants.html\">Chapter\194\1606, <i>Variants</i></a>. The biggest difference is\n      that it is an open type, meaning that new tags can be added at any\n      time, by any part of the program. As such, you can never have a\n      match on an exception that is guaranteed to exhaustively list all\n      values.\n    </blockquote>")))
 (idp8269184
  ((file error-handling.html)
   (html
    "<blockquote>\n      Exceptions are ordinary values, and can be manipulated just like\n      other OCaml values, as you can see below.\n    </blockquote>")))
 (idp8267472
  ((file error-handling.html)
   (html
    "<blockquote>\n      In addition to built-in exceptions like\n      <code>Divide_by_zero</code>, OCaml lets you define your own.\n    </blockquote>")))
 (idp8264944
  ((file error-handling.html)
   (html
    "<blockquote>\n      If we put a <code>printf</code> in the middle of the\n      computation, we can see that <code>List.map</code> is\n      interrupted part way through it's execution, never getting to the\n      end of the list.\n    </blockquote>")))
 (idp8263728
  ((file error-handling.html)
   (html
    "<blockquote>\n      And an exception can terminate a computation even if it happens\n      nested somewhere deep within it.\n    </blockquote>")))
 (idp8262528
  ((file error-handling.html)
   (html
    "<blockquote>\n      You can trigger an exception by, for example, dividing an integer\n      by zero:\n    </blockquote>")))
 (idp8261792
  ((file error-handling.html)
   (html
    "<blockquote>\n      Exceptions in OCaml are not that different from exceptions in many\n      other languages, like Java, C# and Python. Exceptions are a way to\n      terminate a computation and report an error, while providing a\n      mechanism to catch and handle (and possibly recover from)\n      exceptions that are triggered by sub-computations.\n    </blockquote>")))
 (idp8258080
  ((file error-handling.html)
   (html
    "<blockquote>\n        These error-handling functions are valuable because they let you\n        express your error handling both explicitly and concisely. We've\n        only discussed these functions in the context of the\n        <code>Option</code> module, but similar functionality is\n        available in both <code>Result</code> and\n        <code>Or_error</code>.\n      </blockquote>")))
 (idp8253056
  ((file error-handling.html)
   (html
    "<blockquote>\n        There are other useful idioms encoded in the functions in\n        <code>Option</code>. One example is\n        <code>Option.both</code>, which takes two optional values\n        and produces a new optional pair that is <code>None</code>\n        if either of its arguments are <code>None</code>. Using\n        <code>Option.both</code>, we can make\n        <code>compute_bounds</code> even shorter.\n      </blockquote>")))
 (idp8251056
  ((file error-handling.html)
   (html
    "<blockquote>\n        This use of <code>bind</code> isn't really materially\n        better than the one we started with, and indeed, for small\n        examples like this, direct matching of options is generally\n        better than using <code>bind</code>. But for large complex\n        examples with many stages of error-handling, the bind idiom\n        becomes clearer and easier to manage.\n      </blockquote>")))
 (idp8247232
  ((file error-handling.html)
   (html
    "<blockquote>\n        The above code is a little bit hard to swallow, however, on a\n        syntactic level. We can make it easier to read, and drop some of\n        the parentheses, by using the infix operator form of bind, which\n        we get access to by locally opening\n        <code>Option.Monad_infix</code>. The module is called\n        <code>Monad_infix</code> because the bind operator is part\n        of a sub-interface called <code>Monad</code>, which we'll\n        talk about more in\n        <a href=\"concurrent-programming-with-async.html\">Chapter\194\16018, <i>Concurrent Programming with Async</i></a>.\n      </blockquote>")))
 (idp8240944
  ((file error-handling.html)
   (html
    "<blockquote>\n        As you can see, <code>bind None f</code> returns\n        <code>None</code> without calling <code>f</code>,\n        and <code>bind (Some x) f</code> returns\n        <code>f x</code>. Perhaps surprisingly,\n        <code>bind</code> can be used as a way of sequencing\n        together error-producing functions so that the first one to\n        produce an error terminates the computation. Here's a rewrite of\n        <code>compute_bounds</code> to use a nested series of\n        <code>bind</code>s.\n      </blockquote>")))
 (idp8236320
  ((file error-handling.html)
   (html
    "<blockquote>\n        As you write more error handling code in OCaml, you'll discover\n        that certain patterns start to emerge. A number of these common\n        patterns have been codified by functions in modules like\n        <code>Option</code> and <code>Result</code>. One\n        particularly useful pattern is built around the function\n        <code>bind</code>, which is both an ordinary function and\n        an infix operator <code>&gt;&gt;=</code>. Here's the\n        definition of <code>bind</code> for options.\n      </blockquote>")))
 (idp8232480
  ((file error-handling.html)
   (html
    "<blockquote>\n        The type <code>'a Or_error.t</code> is just a shorthand\n        for <code>('a,Error.t) Result.t</code>, and it is, after\n        <code>option</code>, the most common way of returning\n        errors in Core.\n      </blockquote>")))
 (idp8229184
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Error</code> also supports operations for\n        transforming errors. For example, it's often useful to augment\n        an error with some extra information about the context of the\n        error or to combine multiple errors together.\n        <code>Error.tag</code> and\n        <code>Error.of_list</code> fulfill these roles, as you can\n        see below.\n      </blockquote>")))
 (idp8228016
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can use this same idiom for generating an error.\n      </blockquote>")))
 (idp8225984
  ((file error-handling.html)
   (html
    "<blockquote>\n        Note that the time isn't actually serialized into an\n        s-expression until the error is printed out. We're not\n        restricted to doing this kind of error reporting with built-in\n        types. This will be discussed in more detail in\n        <a href=\"data-serialization-with-s-expressions.html\">Chapter\194\16017, <i>Data Serialization with S-Expressions</i></a>,\n        but Sexplib comes with a language extension that can\n        autogenerate sexp-converters for newly generated types, as shown\n        below.\n      </blockquote>")))
 (idp8223344
  ((file error-handling.html)
   (html
    "<blockquote>\n        S-expressions are supported by the <code>sexplib</code>\n        package that is distributed with Core, and is the most common\n        serialization format used in Core. Indeed, most types in Core\n        come with built-in s-expression converters. Here's an example of\n        creating an error using the sexp converter for times,\n        <code>Time.sexp_of_t</code>.\n      </blockquote>")))
 (idp8221136
  ((file error-handling.html)
   (html
    "<blockquote>\n        The most common way to create <code>Error.t</code>s is\n        using <span><em>s-expressions</em></span>. An s-expression is a\n        balanced parenthetical expression where the leaves of the\n        expressions are strings. Thus, the following is a simple\n        s-expression:\n      </blockquote>")))
 (idp8219424
  ((file error-handling.html)
   (html
    "<blockquote>\n        In this case, we can benefit from the laziness of\n        <code>Error</code>, since the thunk won't be called unless\n        the <code>Error.t</code> is converted to a string.\n      </blockquote>")))
 (idp8216240
  ((file error-handling.html)
   (html
    "<blockquote>\n        But you can also construct an <code>Error.t</code> from a\n        <span><em>thunk</em></span>, <span><em>i.e.</em></span>, a\n        function that takes a single argument of type\n        <code>unit</code>.\n      </blockquote>")))
 (idp8213552
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Error</code> gets around this issue through\n        laziness. In particular, an <code>Error.t</code> allows\n        you to put off generation of the error string until and unless\n        you need it, which means a lot of the time you never have to\n        construct it at all. You can of course construct an error\n        directly from a string:\n      </blockquote>")))
 (idp8212832
  ((file error-handling.html)
   (html
    "<blockquote>\n        It might not be obvious at first why efficiency is an issue at\n        all. But generating error messages is an expensive business. An\n        ASCII representation of a value can be quite time-consuming to\n        construct, particularly if it includes expensive-to-convert\n        numerical data.\n      </blockquote>")))
 (idp8211664
  ((file error-handling.html)
   (html
    "<blockquote>\n        Core's answer to this question is the <code>Error.t</code>\n        type, which tries to forge a good compromise between efficiency,\n        convenience, and control over the presentation of errors.\n      </blockquote>")))
 (idp8211088
  ((file error-handling.html)
   (html
    "<blockquote>\n        But which type to choose? Is it better to represent errors as\n        strings? Some more structured representation like XML? Or\n        something else entirely?\n      </blockquote>")))
 (idp8209776
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Result.t</code> gives you complete freedom to choose\n        the type of value you use to represent errors, but it's often\n        useful to standardize on an error type. Among other things, this\n        makes it easier to write utility functions to automate common\n        error handling patterns.\n      </blockquote>")))
 (idp8206768
  ((file error-handling.html)
   (html
    "<blockquote>\n        without first opening the <code>Result</code> module.\n      </blockquote>")))
 (idp8201792
  ((file error-handling.html)
   (html
    "<blockquote>\n        A <code>Result.t</code> is essentially an option augmented\n        with the ability to store other information in the error case.\n        Like <code>Some</code> and <code>None</code> for\n        options, the constructors <code>Ok</code> and\n        <code>Error</code> are promoted to the toplevel by\n        <code>Core.Std</code>. As such, we can write:\n      </blockquote>")))
 (idp8200064
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Result.t</code> is meant to address this deficiency.\n        The type is defined as follows.\n      </blockquote>")))
 (idp8198800
  ((file error-handling.html)
   (html
    "<blockquote>\n        Options aren't always a sufficiently expressive way to report\n        errors. Specifically, when you encode an error as\n        <code>None</code>, there's nowhere to say anything about\n        the nature of the error.\n      </blockquote>")))
 (idp8196560
  ((file error-handling.html)
   (html
    "<blockquote>\n      The use of options to encode errors underlines the fact that it's\n      not clear whether a particular outcome, like not finding something\n      on a list, is an error or is just another valid outcome. This\n      depends on the larger context of your program, and thus is not\n      something that a general purpose library can know in advance. One\n      of the advantages of error-aware return types is that they work\n      well in both situations.\n    </blockquote>")))
 (idp8193872
  ((file error-handling.html)
   (html
    "<blockquote>\n      On the other hand, in <code>find_mismatches</code> below,\n      errors encountered during the computation do not propagate to the\n      return value of the function. <code>find_mismatches</code>\n      takes two hash tables as arguments, and searches for keys that\n      have different data in one table than in the other. As such, the\n      failure to find a key in one table isn't a failure of any sort.\n    </blockquote>")))
 (idp8191504
  ((file error-handling.html)
   (html
    "<blockquote>\n      The match statement is used to handle the error cases, propagating\n      a None in <code>hd</code> or <code>last</code> into\n      the return value of <code>compute_bounds</code>.\n    </blockquote>")))
 (idp8187568
  ((file error-handling.html)
   (html
    "<blockquote>\n      Consider the <code>compute_bounds</code> function defined\n      below. The function takes a list and a comparison function, and\n      returns upper and lower bounds for the list by finding the\n      smallest and largest element on the list.\n      <code>List.hd</code> and <code>List.last</code>, which\n      return <code>None</code> when they encounter an empty list,\n      are used to extract the largest and smallest element of the list.\n    </blockquote>")))
 (idp8186896
  ((file error-handling.html)
   (html
    "<blockquote>\n      Having errors be explicit in the return values of your functions\n      tells the caller that there is an error that needs to be handled.\n      The caller can then handle the error explicitly, either recovering\n      from the error or propagating it onward.\n    </blockquote>")))
 (idp8185648
  ((file error-handling.html)
   (html
    "<blockquote>\n      The option in the return type indicates that the function may not\n      succeed in finding a suitable element, as you can see below.\n    </blockquote>")))
 (idp8183168
  ((file error-handling.html)
   (html
    "<blockquote>\n      The best way in OCaml to signal an error is to include that error\n      in your return value. Consider the type of the\n      <code>find</code> function in the <code>List</code>\n      module.\n    </blockquote>")))
 (idp8181760
  ((file error-handling.html)
   (html
    "<blockquote>\n    We'll start by describing the two basic approaches for reporting\n    errors in OCaml: error-aware return types and exceptions.\n  </blockquote>")))
 (idp8181072
  ((file error-handling.html)
   (html
    "<blockquote>\n    Thankfully, OCaml has powerful tools for handling errors reliably\n    and with a minimum of pain. In this chapter we'll discuss some of\n    the different approaches in OCaml to handling errors, and give some\n    advice on how to design interfaces that make error handling easier.\n  </blockquote>")))
 (idp8180336
  ((file error-handling.html)
   (html
    "<blockquote>\n    Nobody likes dealing with errors. It's tedious, it's easy to get\n    wrong, and it's usually just not as fun as planning out how your\n    program is going to succeed. But error handling is important, and\n    however much you don't like thinking about it, having your software\n    fail due to poor error handling code is worse.\n  </blockquote>")))
 (idp10670240
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        This can be very useful in designing config file formats that\n        are both reasonably terse and easy to generate and maintain. It\n        can also be useful for backwards compatibility: if you add a new\n        field to your config record, but you make that field optional,\n        then you should still be able to parse older version of your\n        config.\n      </blockquote>")))
 (idp10668848
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        As you can see, the fields that are at their default values are\n        simply omitted from the s-expression. On the other hand, if we\n        convert a config with other values, then those values will be\n        included in the s-expression.\n      </blockquote>")))
 (idp10666880
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        We could make the generated s-expression also drop exported\n        values, by using the <code>sexp_drop_default</code>\n        directive.\n      </blockquote>")))
 (idp10665616
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        When we convert the configuration back out to an s-expression,\n        you'll notice that no data is dropped.\n      </blockquote>")))
 (idp10664288
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The top-level will echo back the type you just defined as usual,\n        but also generate the additional conversion functions that let\n        you convert to and from s-expressions.\n      </blockquote>")))
 (idp10662912
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        One could imagine making some of these parameters optional; in\n        particular, by default, we might want the web server to bind to\n        port 80, and to listen as localhost. The sexp-syntax allows this\n        as follows.\n      </blockquote>")))
 (idp10661664
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        Consider the following type which represents the configuration\n        of a very simple web-server.\n      </blockquote>")))
 (idp10658816
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The <code>sexp_option</code> declaration is really just an\n        example of how one might want to deal with default values. With\n        <code>sexp_option</code>, your type on the OCaml side is\n        an option, with <code>None</code> representing the case\n        where no value is provided. But you might want to allow other\n        ways of filling in default values.\n      </blockquote>")))
 (idp10655072
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        But what if we want a field to be optional,\n        <span><em>i.e.</em></span>, we want to allow it to be omitted\n        from the record entirely? In that case, we can mark it with\n        <code>sexp_option</code>:\n      </blockquote>")))
 (idp10650096
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        Another common directive is <code>sexp_option</code>,\n        which is used to to make a record field optional in the\n        s-expression. Normally, optional values are represented either\n        as <code>()</code> for <code>None</code>, or as\n        <code>(x)</code> for <code>Some x</code>, and a\n        record field containing an option would be rendered accordingly.\n        For example:\n      </blockquote>")))
 (idp10646464
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        You might prefer to make the syntax a bit less parenthesis-laden\n        by dropping the parentheses around the list.\n        <code>sexp_list</code> gives us this alternate syntax:\n      </blockquote>")))
 (idp10645168
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        Sometimes, sexp-converters have more parentheses than one would\n        ideally like. Consider, for example, the following variant type:\n      </blockquote>")))
 (idp10640816
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        If you really only want to generate one direction of converter,\n        one can do this by annotating the type with\n        <code>with sexp_of</code> or\n        <code>with of_sexp</code>, as shown below.\n      </blockquote>")))
 (idp10637248
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        This is there to allow for s-expression converters to be created\n        for types containing <code>sexp_opaque</code> values, and\n        the resulting converters won't necessarily fail. For example, if\n        we made the field containing a <code>no_converter</code> a\n        list, the <code>t_of_sexp</code> function could still\n        succeed when that list was empty, as shown below.\n      </blockquote>")))
 (idp10635280
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        Note that the <code>t_of_sexp</code> function for an\n        opaque type is generated, but will fail at runtime if it is\n        used.\n      </blockquote>")))
 (idp10633328
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        And if we now convert a value of this type to an s-expression,\n        we'll see the contents of field <code>a</code> marked as\n        opaque:\n      </blockquote>")))
 (idp10631456
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        But with <code>sexp_opaque</code>, we won't:\n      </blockquote>")))
 (idp10630064
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        Note that the type of a component marked as opaque doesn't need\n        to have a sexp-converter defined. Here, if we define a type\n        without a sexp-converter, and then try to use another type with\n        a sexp-converter, we'll error out:\n      </blockquote>")))
 (idp10627264
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The most commonly used directive is\n        <code>sexp_opaque</code>, whose purpose is to mark a given\n        component of a type as being unconvertible. Anything marked with\n        <code>sexp_opaque</code> will be presented as the atom\n        <code>&lt;opaque&gt;</code> by the to-sexp converter, and\n        will trigger an exception from the from-sexp converter.\n      </blockquote>")))
 (idp10625024
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Sexplib supports a collection of directives for modifying the\n      default behavior of the autogenerated sexp-converters. These\n      directives allow you to customize the way in which types are\n      represented as s-expressions without having to write a custom\n      parser.\n    </blockquote>")))
 (idp10622496
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        In the above error, &quot;foo_broken_example.scm:2:5&quot; tells\n        us that the error occurred on\n        &quot;foo_broken_example.scm&quot;, line 2, character 5, which\n        is a much better start for figuring out what has gone wrong.\n      </blockquote>")))
 (idp10621264
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        and run it again, we'll get the following much more helpful\n        error message:\n      </blockquote>")))
 (idp10619328
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        But there's hope! If we make small change to the\n        <code>run</code> function as follows:\n      </blockquote>")))
 (idp10618576
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        If all you have is the error message and the string, it's not\n        terribly informative. In particular, you know that the parsing\n        error-ed out on the atom &quot;not-an-integer&quot;, but you\n        don't know which one! In a large file, this kind of bad error\n        message can be pure misery.\n      </blockquote>")))
 (idp10617408
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        you'll get the following error:\n      </blockquote>")))
 (idp10616208
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        If you were to run this on a malformatted file, say, this one:\n      </blockquote>")))
 (idp10614720
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        There are two steps to deserializing a type from an\n        s-expression: first, converting the bytes in a file to an\n        s-expression, and the second, converting that s-expression into\n        the type in question. One problem with this is that it can be\n        hard to localize errors to the right place using this scheme.\n        Consider the following example:\n      </blockquote>")))
 (idp10612176
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        We call the function <code>of_sexp_error</code> to raise\n        an exception because that improves the error reporting that\n        Sexplib can provide when a conversion fails.\n      </blockquote>")))
 (idp10609344
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        This trick of overriding an existing function definition with a\n        new one is perfectly acceptable in OCaml. Function definitions\n        are only recursive if the <code>rec</code> keyword is\n        specified, and so in this case the inner\n        <code>t_of_sexp</code> call will go to the earlier\n        autogenerated definition that resulted from the\n        <code>type t with sexp</code> definition.\n      </blockquote>")))
 (idp10608048
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        We can fix this problem by overriding the autogenerated function\n        and writing a custom sexp-converter that is based on the\n        autogenerated converter.\n      </blockquote>")))
 (idp10602368
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        One easy mistake to make when dealing with sexp converters is to\n        ignore the fact that those converters can violate the invariants\n        of your code. For example, the <code>Int_interval</code>\n        module depends for the correctness of the\n        <code>is_empty</code> check on the fact that for any value\n        <code>Range (x,y)</code>, <code>y</code> is greater\n        than or equal to <code>x</code>. The\n        <code>create</code> function preserves this invariant, but\n        the <code>t_of_sexp</code> function does not.\n      </blockquote>")))
 (idp10599360
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      At this point <code>test_interval.ml</code> will compile\n      again, and if we run it, we'll get the following output.\n    </blockquote>")))
 (idp10596448
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      This isn't an ideal solution, as it makes you repeatedly expose\n      these extra functions in every signature you create where you want\n      to serialize values. Sexplib solves this by exposing the same\n      syntax extension in signature definitions, so that we can just use\n      the same <code>with</code> shorthand in the\n      <code>mli</code> file. Here's the final version of the\n      signature that does just this.\n    </blockquote>")))
 (idp10594464
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      We could export the types by hand in the signature, by writing the\n      signatures for the extra functions generated by\n      <code>sexplib</code>.\n    </blockquote>")))
 (idp10593264
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Building this will give us the following error:\n    </blockquote>")))
 (idp10589808
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      But we're still missing something: we haven't created an\n      <code>mli</code> signature for\n      <code>Int_interval</code> yet. Note that we need to\n      explicitly export the s-expression converters that were created\n      within the <code>ml</code> file. For example, here's an\n      interface that doesn't export the s-expression functions.\n    </blockquote>")))
 (idp10588640
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      We can now use this module as follows.\n    </blockquote>")))
 (idp10587200
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      The most important functionality provided by Sexplib is the\n      auto-generation of converters for new types. We've seen a bit of\n      how this works already, but let's walk through a complete example.\n      Here's the source for the beginning of a library for representing\n      integer intervals.\n    </blockquote>")))
 (idp10584576
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      In the above, we use <code>Exn.handle_uncaught</code> to\n      make sure that the exception gets printed out in full detail. You\n      should generally wrap every Core program in this handler to get\n      good error messages for any unexpected exceptions.\n    </blockquote>")))
 (idp10581200
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      If we introduce an error into our s-expression, by, say, creating\n      a file <code>broken_example.scm</code> which is\n      <code>example.scm</code> without open-paren in front of\n      <code>bar</code>, we'll get a parse error:\n    </blockquote>")))
 (idp10579936
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Note that the comments were dropped from the file upon reading.\n      This is expected, since there's no place in the\n      <code>Sexp.t</code> type to store comments.\n    </blockquote>")))
 (idp10578720
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Again, loading the file as an s-expression drops the comments.\n    </blockquote>")))
 (idp10577536
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      The following example shows all of these in action.\n    </blockquote>")))
 (idp10576096
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n<code>#;</code>, which comments out the first complete\n          s-expression that follows.\n        </blockquote>")))
 (idp10573856
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n<code>#|</code> and <code>|#</code>, which are\n          delimiters for commenting out a block\n        </blockquote>")))
 (idp10572352
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n<code>;</code>, which comments out everything to the end\n          of a line\n        </blockquote>")))
 (idp10571344
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      All in, the s-expression format actually supports three comment\n      syntaxes:\n    </blockquote>")))
 (idp10570080
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      can be loaded using sexplib. As you can see, the commented data is\n      not part of the resulting s-expression.\n    </blockquote>")))
 (idp10567808
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      The textual representation of s-expressions is pretty\n      straightforward. An s-expression is written down as a nested\n      parenthetical expression, with whitespace-separated strings as the\n      atoms. Quotes are used for atoms that contain parentheses or\n      spaces themselves; backslash is the escape character; and\n      semicolons are used to introduce single-line comments. Thus, the\n      following file, <code>example.scm</code>:\n    </blockquote>")))
 (idp10559472
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n<code>sexplib</code> is part of a family of syntax\n        extensions, including <code>comparelib</code>, described\n        in <a href=\"maps-and-hash-tables.html\">Chapter\194\16013, <i>Maps and Hash Tables</i></a>, and\n        <code>fieldslib</code>, described in\n        <a href=\"records.html\">Chapter\194\1605, <i>Records</i></a>, that generate code based on\n        type declarations, and are all based on a common library called\n        <code>type_conv</code>. This library provides a common\n        language for annotating types (<span><em>e.g.</em></span>, using\n        the <code>with</code> notation) and utilities for working\n        with type definitions. If you want to build your own type-driven\n        syntax extension, you should consider basing it on\n        <code>type_conv</code>.\n      </blockquote>")))
 (idp10555120
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        OCaml doesn't directly support generating code from type\n        definitions. Instead, it supplies a powerful syntax extension\n        mechanism known as <code>camlp4</code>, which lets you\n        extend the grammar of the language. In the case of\n        <code>sexplib</code>, <code>camlp4</code> is used to\n        create s-expression conversion functions.\n        <code>camlp4</code> is well integrated into the OCaml\n        toolchain, and can be activated within the toplevel and also\n        included in compilation using the <code>-pp</code>\n        compiler flag.\n      </blockquote>")))
 (idp10552336
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The syntax extensions bundled with Core almost all have the same\n        basic structure: they autogenerate code based on type\n        definitions, implementing functionality that you could in theory\n        have implemented by hand, but with far less programmer effort.\n      </blockquote>")))
 (idp10550272
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The declaration\n        <code>&lt;:sexp_of&lt;int * string&gt;&gt;</code> simply\n        gets expanded to the sexp-converter for the type\n        <code>int * string</code>. This is useful whenever you\n        need a sexp-converter for an anonymous type.\n      </blockquote>")))
 (idp10548960
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        You don't always have to declare a named type to create an\n        s-expression converter. The following syntax lets you create one\n        inline, as part of a larger expression.\n      </blockquote>")))
 (idp10546160
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The syntax extension can be used outside of type declarations as\n        well. As discussed in\n        <a href=\"error-handling.html\">Chapter\194\1607, <i>Error Handling</i></a>,\n        <code>with sexp</code> can be attached to the declaration\n        of an exception, which will improve the ability of Core to\n        generate a useful string representation of an exception.\n      </blockquote>")))
 (idp10544208
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        The <code>sexplib</code> syntax extension sees the\n        <code>with sexp</code> annotation replaces it with the\n        definition of the conversions functions we see above.\n      </blockquote>")))
 (idp10539952
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        Given how mechanical the code is, you could imagine writing a\n        program that inspected the type definition and autogenerated the\n        conversion code for you. As it turns out, we can do just that\n        using <code>sexplib</code>. The <code>sexplib</code>\n        package, which is included with Core, provides both a library\n        for manipulating s-expressions and a <span><em>syntax\n        extension</em></span> for generating such conversion functions.\n        With that syntax extension enabled, any type that has\n        <code>with sexp</code> as an annotation will trigger the\n        generation of the functions we want for free.\n      </blockquote>")))
 (idp10538128
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        This is somewhat tiresome to write, and it gets more so when you\n        consider the parser, <span><em>i.e.</em></span>,\n        <code>t_of_sexp</code>, which is considerably more\n        complex. Writing this kind of parsing and printing code by hand\n        is mechanical and error prone, not to mention a drag.\n      </blockquote>")))
 (idp10536832
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        But what if you want a function to convert some brand new type\n        to an s-expression? You can of course write it yourself\n        manually:\n      </blockquote>")))
 (idp10533424
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      The <code>core.top</code> package (which you should have\n      loaded by default in your <code>.ocamlinit</code> file)\n      loads in printers for the Core extensions already, so you don't\n      need to do anything special to use the Sexplib printer.\n    </blockquote>")))
 (idp10530272
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      This is due to OCaml's facility for installing custom\n      <span><em>toplevel printers</em></span> that can rewrite some\n      values into more toplevel-friendly equivalents. They are generally\n      installed as <code>ocamlfind</code> packages ending in\n      <code>top</code>.\n    </blockquote>")))
 (idp10528240
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      The values of the s-expressions that we created above were printed\n      properly as s-expressions in the toplevel, instead of as the tree\n      of <code>Atom</code> and <code>List</code> variants\n      that they're actually made of.\n    </blockquote>")))
 (idp10526192
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Notice that <code>List.sexp_of_t</code> is polymorphic, and\n      takes as its first argument another conversion function to handle\n      the elements of the list to be converted. Core uses this scheme\n      more generally for defining sexp-converters for polymorphic types.\n    </blockquote>")))
 (idp10524208
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      In addition to providing the <code>Sexp</code> module, most\n      of the base types in Core support conversion to and from\n      s-expressions. For example, we can write:\n    </blockquote>")))
 (idp10522896
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      This prints out nicely because Core registers a pretty printer\n      with the toplevel. This pretty-printer uses Core's functions for\n      converting s-expressions to and from strings.\n    </blockquote>")))
 (idp10520096
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      Core provides good support for <code>s-expressions</code> in\n      its <code>Sexp</code> module, including functions for\n      converting s-expressions to and from strings. If we do the same\n      example above with Core's s-expression type, we'll see that the\n      output in the top-level is easier to read.\n    </blockquote>")))
 (idp10518720
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      An s-expression can be thought of as a tree where each node\n      contains a list of its children, and where the leaves of the tree\n      are strings. Here's how we can use this type to represent the our\n      example s-expression.\n    </blockquote>")))
 (idp10517328
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n      OCaml values aren't directly converted to-and-from strings of\n      s-expressions when you use Core. The s-expression is instead built\n      up as an OCaml value which is later serialized into strings or\n      memory buffers. The OCaml type of an s-expression is quite simple.\n    </blockquote>")))
 (idp10515456
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        use custom type annotations to control the exact printing\n        behavior for s-expression converters.\n      </blockquote>")))
 (idp10514592
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        generate good error messages for debugging malformed inputs.\n      </blockquote>")))
 (idp10513712
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        expose s-expressions across module interfaces, including with\n        abstract types.\n      </blockquote>")))
 (idp10512768
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n        generate s-expressions from arbitrary OCaml types, thus giving\n        you a human-readable format for persisting any values in your\n        code.\n      </blockquote>")))
 (idp10511808
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    This chapter will show you how to:\n  </blockquote>")))
 (idp10509632
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    S-expressions are nested parenthetical expressions whose atomic\n    values are strings. They were first popularized by the Lisp\n    programming language in the 1960s, and have remained one of the\n    simplest and most effective ways to encode structured data. There's\n    a full definition of them available\n    <a href=\"http://people.csail.mit.edu/rivest/Sexp.txt\" target=\"_top\">online</a>.\n    An example s-expression might look like this.\n  </blockquote>")))
 (idp10508880
  ((file data-serialization-with-s-expressions.html)
   (html
    "<blockquote>\n    We've already discussed the parsing of third-party data formats like\n    JSON. Sometimes, though, you're less concerned with interoperating\n    with specific file formats, and you instead want an easy to use,\n    human-readable format that integrates well with OCaml and its\n    libraries. Core's solution to this problem is to use s-expressions.\n  </blockquote>")))
 (idp11023216
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      It is possible to safely use threads in ways that violate these\n      constraints. In particular, foreign threads can acquire the Async\n      lock using calls from the <code>Thread_safe</code> module in\n      Async, and thereby run Async computations safely. This is a very\n      flexible way of connecting threads to the Async world, but it's a\n      complex use-case that is beyond the scope of this chapter.\n    </blockquote>")))
 (idp11021744
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n          The computations executed by <code>In_thread.run</code>\n          do not make any calls to the async library.\n        </blockquote>")))
 (idp11020864
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n          There is no shared mutable state between the various threads\n          involved.\n        </blockquote>")))
 (idp11019808
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Overall, combining Async and threads is quite tricky, but it can\n      be done safely and easily if you follow the following hold:\n    </blockquote>")))
 (idp11017904
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Even though <code>noalloc_busy_loop</code> was running in a\n      different thread, it didn't let <code>log_delays</code> run\n      at all.\n    </blockquote>")))
 (idp11016368
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Another tricky aspect of dealing with OCaml threads has to do with\n      allocation. OCaml's threads only get a chance to give up the\n      runtime lock when they interact with the allocator, so if there's\n      a piece of code that doesn't allocate at all, then it will never\n      allow any other OCaml thread to run. We can see this if we rewrite\n      our busy-loop slightly so it doesn't allocate.\n    </blockquote>")))
 (idp11014864
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now <code>log_delays</code> does get a chance to run, but\n      not nearly as often as it would like to. The reason for this is\n      that that now that we're using system threads, we are at the mercy\n      of the operating system in terms of when each thread gets\n      scheduled. The behavior becomes very dependent on the OS and how\n      you configure the priority of your processes within the OS itself.\n    </blockquote>")))
 (idp11012912
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      If, on the other hand, we use <code>In_thread.run</code> to\n      offload this to a different system thread, the behavior will be\n      different.\n    </blockquote>")))
 (idp11010976
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      As you can see, instead of waking up ten times a second,\n      <code>log_delays</code> is blocked out for much longer than\n      that while <code>busy_loop</code> churns away.\n    </blockquote>")))
 (idp11009744
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now, if instead of simply waiting a second, what if we have a busy\n      loop running instead?\n    </blockquote>")))
 (idp11008528
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      If we feed this function a simple timeout, it works as you might\n      expect.\n    </blockquote>")))
 (idp11006304
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Interoperability between Async and system threads can be quite\n      tricky, so let's work through some of the issues. Consider the\n      following function which schedules itself to wake up every\n      <code>100ms</code>, and keeps a list of the delays after\n      which it actually woke up, until the deferred it was passed\n      becomes determined. We can use this to see how responsive Async\n      is.\n    </blockquote>")))
 (idp11002464
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      There are two commonly available mutex packages for OCaml: the\n      <code>Mutex</code> module that's part of the standard\n      library, which is just a wrapper over OS-level mutexes, and\n      <code>Nano_mutex</code>, a more efficient alternative that\n      takes advantage of some of the locking done by the OCaml runtime\n      to avoid needing to create an OS-level mutex much of the time. As\n      a result, creating a <code>Nano_mutex.t</code> is 20x faster\n      than creating a <code>Mutex.t</code>, and acquiring the\n      mutex is about 40% faster.\n    </blockquote>")))
 (idp11001376
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Once you start working with system threads, you'll need to be\n      careful about locking your data-structures. Most mutable OCaml\n      data-structures do not have well-defined semantics when accessed\n      concurrently by multiple threads. The issues you can run into\n      range from runtime exceptions to corrupted data-structures to, in\n      some rare cases, segfaults. That means you should always use\n      mutexes when sharing mutable data between different systems\n      threads. Even data-structures that seem like they should be safe\n      but are mutable under the covers, like lazy values, can have\n      undefined behavior when accessed from multiple threads.\n    </blockquote>")))
 (idp10999376
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      to cause <code>List.range 1 10</code> to be run on one of\n      Async's worker threads. When the computation is complete, the\n      result is placed in the deferred, where it can be used in the\n      ordinary way from Async.\n    </blockquote>")))
 (idp10996384
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      One way of dealing with this is to explicitly break up the\n      calculation into smaller pieces that are separated by binds. But\n      sometimes this explicit yielding is impractical, since it may\n      involve intrusive changes to an existing codebase. Another\n      solution is to run the code in question in a separate thread.\n      Async's <code>In_thread</code> module provides multiple\n      facilities for doing just this, <code>In_thread.run</code>\n      being the simplest. We can simply write\n    </blockquote>")))
 (idp10994256
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Another occasional motivation for using true system threads is to\n      interoperate with compute-intensive OCaml code that otherwise\n      would block the Async runtime. In Async, if you have a\n      long-running computation that never calls <code>bind</code>\n      or <code>map</code>, then that computation will block out\n      the entire system until it completes.\n    </blockquote>")))
 (idp10992576
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Another reasonably common reason to have multiple threads is to\n      deal with non-OCaml libraries that have their own event loop or\n      for whatever reason need their own threads. In that case, it's\n      sometimes useful to run some OCaml code on the foreign thread as\n      part of the communication to your main program. OCaml's foreign\n      function interface is discussed in more detail in\n      <a href=\"foreign-function-interface.html\">Chapter\194\16019, <i>Foreign Function Interface</i></a>.\n    </blockquote>")))
 (idp10991712
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The most common reason for using system threads is that there are\n      some operating system calls that have no non-blocking alternative,\n      which means that you can't run them directly in a system like\n      Async without blocking out the entire system. For this reason,\n      Async maintains a thread pool for running such calls. Most of the\n      time, as a user of Async you don't need to think about this, but\n      it is happening under the covers.\n    </blockquote>")))
 (idp10991216
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Given that threads don't provide physical parallelism, why are\n      they useful at all?\n    </blockquote>")))
 (idp10990544
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The most surprising aspect of OCaml's system threads is that they\n      don't afford you any access to physical parallelism on the\n      machine. That's because OCaml's runtime has a single runtime lock\n      which at most one thread can be holding at a time.\n    </blockquote>")))
 (idp10989328
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      OCaml does have built-in support for true system threads,\n      <span><em>i.e.</em></span>, kernel-level threads whose interleaving\n      is controlled by the kernel. We discussed in the beginning of the\n      chapter why Async is generally a better choice than system\n      threads, but even if you mostly use Async, OCaml's system threads\n      are sometimes necessary, and it's worth understanding them.\n    </blockquote>")))
 (idp10986768
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now, if we run this with a suitably small timeout, we'll see that\n      some queries succeed and some fail, and the timeouts are reported\n      as such.\n    </blockquote>")))
 (idp10984064
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      In the following, we use <code>choose</code> to ensure that\n      the <code>interrupt</code> deferred becomes determined if\n      and only if the timeout-deferred is chosen. Here's the code.\n    </blockquote>")))
 (idp10979904
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>choose</code> provides no guarantee that the\n      <code>choice</code> built around the first deferred to\n      become determined will in fact be chosen. But\n      <code>choose</code> does guarantee that only one\n      <code>choice</code> will be chosen, and only the chosen\n      <code>choice</code> will execute the attached closure.\n    </blockquote>")))
 (idp10975568
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      We can get more precise handling of timeouts using Async's\n      <code>choose</code> operator, which lets you pick between a\n      collection of different deferreds, reacting to exactly one of\n      them. Each deferred is combined, using the function\n      <code>choice</code>, with a function that is called if and\n      only if that is the chosen deferred. Here's the type signature of\n      <code>choice</code> and <code>choose</code>:\n    </blockquote>")))
 (idp10973280
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      This will work, and will cause the connection to shutdown cleanly\n      when we time out; but our code no longer explicitly knows whether\n      or not the timeout has kicked in. In particular, the error message\n      on a timeout will now be <code>Unexpected failure</code>\n      rather than <code>Timed out</code>, which it was in our\n      previous implementation. This is a minor issue in this case, but\n      if we wanted to have special behavior in the case of a timeout, it\n      would be a more serious issue.\n    </blockquote>")))
 (idp10970560
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Next, we'll modify <code>get_definition_with_timeout</code>\n      to create a deferred to pass in to\n      <code>get_definition</code> which will become determined\n      when our timeout expires.\n    </blockquote>")))
 (idp10967184
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The following code shows how you can change\n      <code>get_definition</code> and\n      <code>get_definition_with_timeout</code> to cancel the\n      <code>get</code> call if the timeout expires.\n    </blockquote>")))
 (idp10962784
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      A problem with this code is that the HTTP query kicked off by\n      <code>get_definition</code> is not actually shut down when\n      the timeout fires. As such,\n      <code>get_definition_with_timeout</code> essentially leaks\n      an open connection. Happily, Cohttp does provide a way of shutting\n      down a client. You can pass a deferred under the label\n      <code>interrupt</code> to\n      <code>Cohttp_async.Client.get</code>. Once\n      <code>interrupt</code> is determined, the client connection\n      will terminated and the corresponding connections closed.\n    </blockquote>")))
 (idp10960832
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      We use <code>&gt;&gt;|</code> above to transform the\n      deferred values we're waiting for so that\n      <code>Deferred.any</code> can choose between values of the\n      same type.\n    </blockquote>")))
 (idp10958016
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Let's use this to add timeouts to our DuckDuckGo searches. We'll\n      do this by writing a wrapper for <code>get_definition</code>\n      that takes a timeout (in the form of a\n      <code>Time.Span.t</code>) as an argument, and returns either\n      the definition, or, if that takes too long, the timeout.\n    </blockquote>")))
 (idp10955824
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Sometimes, however, we want to wait only for the first of multiple\n      events to occur. This happens particularly often when dealing with\n      timeouts. In that case, we can use the call\n      <code>Deferred.any</code>, which, given a list of deferreds,\n      returns a single deferred that will become determined once any of\n      the values on the list is determined.\n    </blockquote>")))
 (idp10951344
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      In a concurrent program, one often needs to combine results from\n      multiple distinct concurrent sub-computations going on in the same\n      program. We already saw this in our DuckDuckGo example, where we\n      used <code>Deferred.all</code> and\n      <code>Deferred.all_unit</code> to wait for a list of\n      deferreds to become determined. Another useful primitive is\n      <code>Deferred.both</code>, which lets you wait until two\n      deferreds of different types have returned, returning both values\n      as a tuple. Here, we use the function <code>sec</code>,\n      which is shorthand for creating a time-span equal to a given\n      number of seconds.\n    </blockquote>")))
 (idp10946256
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Note that in this code, we're relying on the fact that\n        <code>Cohttp_async.Client.get</code> will clean up after\n        itself after an exception, in particular by closing its file\n        descriptors. If you need to implement such functionality\n        directly, you may want to use the\n        <code>Monitor.protect</code> call, which is analogous to\n        the <code>protect</code> call described in\n        <a href=\"error-handling.html#cleaning-up-in-the-presence-of-exceptions\">the section called \226\128\156Cleaning up in the presence of exceptions\226\128\157</a>.\n      </blockquote>")))
 (idp10945088
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Now, only the query that went to <code>localhost</code>\n        failed.\n      </blockquote>")))
 (idp10943840
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Now, if we run that same query, we'll get individualized\n        handling of the connection failures:\n      </blockquote>")))
 (idp10941888
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Now we just need to change the code for\n        <code>print_result</code> so that it can handle the new\n        type.\n      </blockquote>")))
 (idp10939792
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Here, we use <code>try_with</code> to capture the\n        exception, which we then use map (the\n        <code>&gt;&gt;|</code> operator) to convert the error into\n        the form we want: a pair whose first element is the word being\n        searched for, and the second element is the (possibly erroneous)\n        result.\n      </blockquote>")))
 (idp10936608
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        As you can see, we got a &quot;Connection refused&quot; failure\n        which ends the entire program, even though one of the two\n        queries would have gone through successfully. We can handle the\n        failures of individual connections separately by using the\n        <code>try_with</code> function within each call to\n        <code>get_definition</code>, as follows.\n      </blockquote>")))
 (idp10935120
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        and then making the appropriate changes to get the list of\n        servers on the command-line, and to distribute the search\n        queries round-robin over the list of servers. Now, let's see\n        what happens if we rebuild the application and run it giving it\n        a list of servers, some of which won't respond to the query.\n      </blockquote>")))
 (idp10933168
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        First we'll need to change <code>query_uri</code> to take\n        an argument specifying the server to connect to, as follows.\n      </blockquote>")))
 (idp10932432
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The search code as it is fails rarely, so let's make a change\n        that allows us to trigger failures more predictably. We'll do\n        this by making it possible to distribute the requests over\n        multiple servers. Then, we'll handle the errors that occur when\n        one of those servers is misspecified.\n      </blockquote>")))
 (idp10931776
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Let's now go back and improve the exception handling of our\n        DuckDuckGo client. In particular, we'll change it so that any\n        individual queries that fail are reported as such, without\n        preventing other queries from succeeding.\n      </blockquote>")))
 (idp10927312
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        In practice, you should rarely use monitors directly, instead\n        using functions like <code>try_with</code> and\n        <code>Monitor.protect</code> that are built on top of\n        monitors. One example of a library that uses monitors directly\n        is <code>Tcp.Server.create</code>, which tracks both\n        exceptions thrown by the logic that handles the network\n        connection and by the callback for responding to an individual\n        request, in either case responding to an exception by closing\n        the connection. It is for building this kind of custom error\n        handling that monitors can be helpful.\n      </blockquote>")))
 (idp10925312
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        If instead we use <code>Ignore_me</code>, the exception\n        will be ignored, and we again see that the deferred never\n        returns, but the exception was caught and ignored.\n      </blockquote>")))
 (idp10922592
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        If we pass in an exception other than\n        <code>Ignore_me</code>, like, say, the built-in exception\n        <code>Not_found</code>, then the exception will be passed\n        to the parent monitor and delivered as usual.\n      </blockquote>")))
 (idp10921232
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Note that we use <code>Monitor.extract_exn</code> to grab\n        the underlying exception that was thrown. Async wraps exceptions\n        it catches with extra information, including the monitor trace,\n        so you need to grab the underlying exception to match on it.\n      </blockquote>")))
 (idp10918400
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Here's an example of a monitor which passes some exceptions\n        through to the parent, and handles others. Exceptions are sent\n        to the parent using <code>Monitor.send_exn</code>, with\n        <code>Monitor.current</code> being called to find the\n        current monitor, which is the parent of the newly created\n        monitor.\n      </blockquote>")))
 (idp10916192
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The message &quot;an error happened&quot; is printed out, but\n        the deferred returned by <code>swallow_error</code> is\n        never determined. This makes sense, since the calculation never\n        actually completes, so there's no value to return. You can break\n        out of this in utop by hitting <code>Control-C</code>.\n      </blockquote>")))
 (idp10913744
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Monitors can do more than just augment the error-trace of an\n        exception. You can also use a monitor to explicitly handle\n        errors delivered to that monitor. The\n        <code>Monitor.errors</code> call is a particularly\n        important one. It detaches the monitor from its parent, handing\n        back the stream of errors that would otherwise have been\n        delivered to the parent monitor. This allows one to do custom\n        handling of errors, which may include re-raising errors to the\n        parent. Here is a very simple example of a function that\n        captures and ignores errors in the processes it spawns.\n      </blockquote>")))
 (idp10912960
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        In addition to the ordinary stack-trace, the exception displays\n        the trace of monitors through which the exception traveled,\n        starting at the one we created, called &quot;blow up\n        monitor&quot;. The other monitors you see come from utop's\n        special handling of deferreds.\n      </blockquote>")))
 (idp10909360
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Monitors are arranged in a tree -- when a new monitor is created\n        (say, using <code>Monitor.create</code>) it is a child of\n        the current monitor. You can explicitly run jobs within a\n        monitor using <code>within</code>, which takes a thunk\n        that returns a non-deferred value, or\n        <code>within'</code>, which takes a thunk that returns a\n        deferred. Here's an example.\n      </blockquote>")))
 (idp10907168
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        In Async, a monitor is a context that determines what to do when\n        there is an unhandled exception. Every Async job runs within the\n        context of some monitor, which, when the job is running, is\n        referred to as the current monitor. When a new Async job is\n        scheduled, say, using <code>bind</code> or\n        <code>map</code>, it inherits the current monitor of the\n        job that spawned it.\n      </blockquote>")))
 (idp10904496
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>try_with</code> is a great way of handling\n        exceptions in Async, but it's not the whole story. All of\n        Async's exception-handling mechanisms,\n        <code>try_with</code> included, are built on top of\n        Async's system of <span><em>monitors</em></span>, which are\n        inspired by the error-handling mechanism in Erlang of the same\n        name. Monitors are fairly low-level and are only occasionally\n        used directly, but it's nonetheless worth understanding how they\n        work.\n      </blockquote>")))
 (idp10898720
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>try_with f</code> takes as its argument a\n      deferred-returning thunk <code>f</code>, and returns a\n      deferred that becomes determined either as <code>Ok</code>\n      of whatever <code>f</code> returned, or\n      <code>Error exn</code> if <code>f</code> threw an\n      exception before its return value became determined.\n    </blockquote>")))
 (idp10896800
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      We can capture this kind of asynchronous error use the\n      <code>try_with</code> function provided by Async:\n    </blockquote>")))
 (idp10894768
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      This didn't work because <code>try/with</code> only captures\n      exceptions that are thrown in the code directly executed within\n      it, while <code>maybe_raise</code> schedules an Async job to\n      run in the future, and it's that job that throws an exception.\n    </blockquote>")))
 (idp10892752
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      So, how could we capture and handle such an exception? You might\n      try to do this using OCaml's built-in <code>try/with</code>\n      statement, but as you can see below, that doesn't quite do the\n      trick.\n    </blockquote>")))
 (idp10891440
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      In utop, the exception thrown by <code>maybe_raise ()</code>\n      terminates the evaluation of just that expression, but in a\n      standalone program, an uncaught exception would bring down the\n      entire process.\n    </blockquote>")))
 (idp10889312
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Let's get a better sense of how exceptions work in Async by\n      creating an asynchronous computation that (sometimes) fails with\n      an exception. The function <code>maybe_raise</code> below\n      blocks for half a second, and then either throws an exception or\n      returns unit, alternating between the two behaviors on subsequent\n      calls.\n    </blockquote>")))
 (idp10887632
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      When programming with external resources, errors are everywhere:\n      everything from a flaky server to a network outage to exhausting\n      of local resources can lead to a runtime error. When programming\n      in OCaml, some of these errors will show up explicitly in a\n      function's return type, and some of them will show up as\n      exceptions. We covered exception handling in OCaml in\n      <a href=\"error-handling.html#exceptions\">the section called \226\128\156Exceptions\226\128\157</a>, but as we'll see,\n      exception handling in a concurrent program presents some new\n      challenges.\n    </blockquote>")))
 (idp10885008
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        And that's all we need to create a simple but usable definition\n        searcher.\n      </blockquote>")))
 (idp10883104
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Finally, we create a command line interface using\n        <code>Command.async_basic</code>.\n      </blockquote>")))
 (idp10878720
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The difference is that we both dispatch the query and print out\n        the result in the closure passed to <code>map</code>,\n        rather than waiting for all of the results to get back and then\n        printing them out together. We use\n        <code>Deferred.all_unit</code>, which takes a list of\n        <code>unit</code> deferreds and returns a single\n        <code>unit</code> deferred that becomes determined when\n        every deferred on the input list is determined. We can see the\n        type of this function in utop.\n      </blockquote>")))
 (idp10876464
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Note that the list returned by <code>Deferred.all</code>\n        reflects the order of the deferreds passed to it. As such, the\n        definitions will be printed out in the same order that the\n        search words are passed in, no matter what orders the queries\n        return in. We could rewrite this code to print out the results\n        as they're received (and thus potentially out of order) as\n        follows.\n      </blockquote>")))
 (idp10872384
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        We used <code>List.map</code> to call\n        <code>get_definition</code> on each word, and\n        <code>Deferred.all</code> to wait for all the results.\n        Here's the type of <code>Deferred.all</code>:\n      </blockquote>")))
 (idp10871152
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The next function dispatches the searches in parallel, waits for\n        the results, and then prints.\n      </blockquote>")))
 (idp10865232
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        We use the <code>Wrapper</code> module from the\n        <code>textwrap</code> package to do the line-wrapping. It\n        may not be obvious that this routine is using Async, but it\n        does: the version of <code>printf</code> that's called\n        here is actually Async's specialized <code>printf</code>\n        that goes through the Async scheduler rather than printing\n        directly. The original definition of <code>printf</code>\n        is shadowed by this new one when you open\n        <code>Async.Std</code>. An important side effect of this\n        is that if you write an Async program and forget to start the\n        scheduler, calls like <code>printf</code> won't actually\n        generate any output!\n      </blockquote>")))
 (idp10863856
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Running a single search isn't that interesting from a\n        concurrency perspective, so let's write code for dispatching\n        multiple searches in parallel. First, we need code for\n        formatting and printing out the search result.\n      </blockquote>")))
 (idp10861776
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        In this case, the HTTP body probably isn't very large, so we\n        call <code>Pipe.to_list</code> to collect the strings from\n        the pipe as a single deferred list of strings. We then join\n        those strings using <code>String.concat</code> and pass\n        the result through our parsing function.\n      </blockquote>")))
 (idp10859760
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The <code>get</code> call takes as a required argument a\n        URI, and returns a deferred value containing a\n        <code>Cohttp.Response.t</code> (which we ignore) and a\n        pipe reader to which the body of the request will be written to\n        as it is received.\n      </blockquote>")))
 (idp10857792
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        To better understand what's going on, it's useful to look at the\n        type for <code>Cohttp_async.Client.get</code>, which we\n        can do in utop.\n      </blockquote>")))
 (idp10856544
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Now let's look at the code for dispatching the search queries\n        over HTTP, using the Cohttp library.\n      </blockquote>")))
 (idp10852656
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        We expect the response from DuckDuckGo to come across as a JSON\n        record, which is represented by the <code>Assoc</code> tag\n        in Yojson's JSON variant. We expect the definition itself to\n        come across under either the key &quot;Abstract&quot; or\n        &quot;Definition&quot;, and so the code below looks under both\n        keys, returning the first one for which a non-empty value is\n        defined.\n      </blockquote>")))
 (idp10850624
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The HTTP response from DuckDuckGo is in JSON, a common (and\n        thankfully simple) format that is specified in\n        <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" target=\"_top\">RFC4627</a>.\n        We'll parse the JSON data using the Yojson library, which we\n        already introduced in\n        <a href=\"handling-json-data.html\">Chapter\194\16015, <i>Handling JSON data</i></a>.\n      </blockquote>")))
 (idp10846672
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        A <code>Uri.t</code> is constructed from the\n        <code>Uri.of_string</code> function, and a query parameter\n        <code>q</code> is added with the desired search query. The\n        library takes care of encoding the URI correctly when outputting\n        it in the network protocol.\n      </blockquote>")))
 (idp10845424
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        We'll need a function for generating the URI's that we're going\n        to use to query the DuckDuckGo servers.\n      </blockquote>")))
 (idp10843264
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        HTTP URLs, which identify endpoints across the web, are actually\n        part of a more general family known as Uniform Resource\n        Identifiers (URIs). The full URI specification is defined in\n        <a href=\"http://tools.ietf.org/html/rfc3986\" target=\"_top\">RFC3986</a>,\n        and is rather complicated. Luckily, the <code>uri</code>\n        library provides a strongly-typed interface which takes care of\n        much of the hassle.\n      </blockquote>")))
 (idp10841712
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now let's dive into the implementation.\n    </blockquote>")))
 (idp10839568
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>cohttp</code>, a library for creating HTTP clients\n          and servers. We need Async support, which comes with the\n          <code>cohttp.async</code> package.\n        </blockquote>")))
 (idp10837360
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>yojson</code>, a JSON parsing library that was\n          described in <a href=\"handling-json-data.html\">Chapter\194\16015, <i>Handling JSON data</i></a>\n</blockquote>")))
 (idp10835616
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>uri</code>, a library for handling URI's, or\n          &quot;Uniform Resource Identifiers&quot;, of which HTTP URL's\n          are an example.\n        </blockquote>")))
 (idp10834080
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>textwrap</code>, a library for wrapping long\n          lines. We'll use this for printing out our results.\n        </blockquote>")))
 (idp10832256
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Our code is going to rely on a number of other libraries, all of\n      which can be installed using OPAM. Refer to\n      <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a> if you need help on the\n      installation. Here's the list of libraries we'll need.\n    </blockquote>")))
 (idp10831616
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      DuckDuckGo is a search engine with a freely available search\n      interface. In this section, we'll use Async to write a small\n      command-line utility for querying DuckDuckGo to extract\n      definitions for a collection of terms.\n    </blockquote>")))
 (idp10826624
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        This differs from the ordinary <code>Command.basic</code>\n        call in that the main function must return a\n        <code>Deferred.t</code>, and that the running of the\n        command (using <code>Command.run</code>) automatically\n        starts the async scheduler, without requiring an explicit call\n        to <code>Scheduler.go</code>.\n      </blockquote>")))
 (idp10821824
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The command-line parsing for this program is based on the\n        <code>Command</code> library that we introduced in\n        <a href=\"command-line-parsing.html\">Chapter\194\16014, <i>Command Line Parsing</i></a>. When you open\n        <code>Async.Std</code>, the <code>Command</code>\n        module has added to it the <code>async_basic</code> call:\n      </blockquote>")))
 (idp10820336
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Importantly, the deferred returned by\n        <code>Pipe.transfer</code> becomes determined once the\n        reader has been closed and the last element is transferred from\n        the reader to the writer. Once that deferred becomes determined,\n        the server will shut down that client connection. So, when a\n        client disconnects, the rest of the shutdown happens\n        transparently.\n      </blockquote>")))
 (idp10818176
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The two pipes being connected are generated by the\n        <code>Reader.pipe</code> and\n        <code>Writer.pipe</code> call respectively. Note that\n        pushback is preserved throughout the process, so that if the\n        writer gets blocked, the writer's pipe will stop pulling data\n        from the reader's pipe, which will prevent the reader from\n        reading in more data.\n      </blockquote>")))
 (idp10813936
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        In the function <code>run</code> above, we're taking\n        advantage of one of the many utility functions provided for\n        pipes in the <code>Pipe</code> module. In particular,\n        we're using <code>Pipe.transfer</code> to set up a process\n        that takes data from a reader-pipe and moves it to a\n        writer-pipe. Here's the type of\n        <code>Pipe.transfer</code>:\n      </blockquote>")))
 (idp10812688
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The deferred returned by write completes on its own once the\n        value written into the pipe has been read out:\n      </blockquote>")))
 (idp10810672
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        If we just try and write to the writer, we'll see that we block\n        indefinitely in utop. You can break out of the wait by hitting\n        <code>Control-C</code>.\n      </blockquote>")))
 (idp10807200
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>r</code> and <code>w</code> are really just\n        read and write handles to the same underlying object. Note that\n        <code>r</code> and <code>w</code> have weakly\n        polymorphic types. That's because a pipe is mutable and so can\n        contain elements of only one type, which will be settled by the\n        compiler once we try to use the pipe for anything.\n      </blockquote>")))
 (idp10805984
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Pipes are created in connected read/write pairs, as you can see\n        below.\n      </blockquote>")))
 (idp10803664
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The most notable change in the above code is the use of Async's\n        <code>Pipe</code>. A <code>Pipe</code> is a\n        communication channel that's used for connecting different parts\n        of your program. You can think of it as a consumer/producer\n        queue that uses deferreds for communicating when the pipe is\n        ready to be read from or written to. Our use of pipes is fairly\n        minimal here, but they are an important part of Async, so it's\n        worth discussing them in some detail.\n      </blockquote>")))
 (idp10799392
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Here's the improved code below. There's both the\n        <code>run</code> function, which which actually starts the\n        server, and the command-line interface, which is the entry-point\n        of the program. Note the use of\n        <code>Deferred.never</code> in <code>run</code>,\n        which returns a deferred that never becomes determined. In this\n        case, we use <code>Deferred.never</code> because the\n        server in question doesn't shut down.\n      </blockquote>")))
 (idp10797952
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n            Simplify the code using Async's <code>Pipe</code>\n            interface.\n          </blockquote>")))
 (idp10796976
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n            Add a flag to specify the port to listen on, and a flag to\n            make the server echo back the capitalized version of\n            whatever was sent to it.\n          </blockquote>")))
 (idp10795440
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n            Add a proper command-line interface with\n            <code>Command</code>\n</blockquote>")))
 (idp10794400
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Let's try to go a little bit farther with our echo server. Let's\n        walk through a few small improvements:\n      </blockquote>")))
 (idp10791824
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Thus, we got the compilation to go through by explicitly marking\n      in the source that the call to <code>loop_forever</code>\n      never returns.\n    </blockquote>")))
 (idp10789920
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      We can resolve the error by calling the function\n      <code>never_returns</code>.\n    </blockquote>")))
 (idp10786432
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The type <code>never_returns</code> is uninhabited, so a\n      function can't return a value of type\n      <code>never_returns</code>, which means only functions that\n      never return can have it as their return type! Now, if we rewrite\n      our <code>do_stuff</code> function, we'll get a helpful type\n      error.\n    </blockquote>")))
 (idp10782144
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      With a name like <code>loop_forever</code>, the meaning is\n      clear enough in this case. But with something like\n      <code>Scheduler.go</code>, the fact that it never returns is\n      less clear, and so we use the type system to make it more explicit\n      by giving it a return type of <code>never_returns</code>. To\n      make it clearer how this works, let's do the same trick with\n      <code>loop_forever</code>.\n    </blockquote>")))
 (idp10780832
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      This can be surprising when you call a function like this\n      expecting it to return unit, and really it never returns. The\n      type-checker won't necessarily complain in such a case.\n    </blockquote>")))
 (idp10776656
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      You might wonder what's going on with the call to\n      <code>never_returns</code> above.\n      <code>never_returns</code> is an idiom that comes from\n      <code>Core</code> that is used to mark functions that don't\n      return. Typically, a function that doesn't return is inferred as\n      having return type <code>'a</code>.\n    </blockquote>")))
 (idp10774032
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now that we have the echo server, we can connect to the echo\n      server using the netcat tool, which is invoked as\n      <code>nc</code>.\n    </blockquote>")))
 (idp10773424
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      It's worth noting that even though we didn't spend much explicit\n      effort on thinking about multiple clients, this server is able to\n      handle many concurrent clients without further modification.\n    </blockquote>")))
 (idp10772048
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      One of the most common newbie errors with Async is to forget to\n      run the scheduler. It can be a bewildering mistake, because\n      without the scheduler, your program won't do anything at all; even\n      calls to <code>printf</code> won't actually reach the\n      terminal.\n    </blockquote>")))
 (idp10770832
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Finally, we need to initiate the server and start the Async\n      scheduler.\n    </blockquote>")))
 (idp10769344
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The most important argument to\n      <code>Tcp.Server.create</code> is the final one, which is\n      the client connection handler. Notably, the above code does\n      nothing explicit to close down the client connections when the\n      communication is done. That's because the server will\n      automatically shut down the connection once the deferred returned\n      by the handler becomes determined.\n    </blockquote>")))
 (idp10767168
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The result of calling <code>Tcp.Server.create</code> is a\n      <code>Tcp.Server.t</code>, which is a handle to the server\n      that lets you shut the server down. We don't use that\n      functionality here, so we explicitly ignore [server] to suppress\n      the unused-variables error. We put in a type annotation around the\n      ignored value to make the nature of the value we're ignoring\n      explicit.\n    </blockquote>")))
 (idp10763712
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>copy_blocks</code> provides the logic for handling a\n      client connection, but we still need to set up a server to receive\n      such connections and dispatch to <code>copy_blocks</code>.\n      For this, we'll use Async's <code>Tcp</code> module, which\n      has a collection of utilities for creating TCP clients and\n      servers.\n    </blockquote>")))
 (idp10761872
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      You might also be concerned that the chain of deferreds that is\n      built up as you go through the loop would lead to a memory leak.\n      After all, this code constructs an ever-growing chain of binds,\n      each of which creates a deferred. In this case, however, all of\n      the deferreds should become determined precisely when the final\n      deferred in the chain is determined, in this case, when the\n      <code>Eof</code> condition is hit. Because of this, we could\n      safely replace all of these deferreds with a single deferred.\n      Async has logic to do just this, and so there's no memory leak\n      after all. This is essentially a form of tail-call optimization,\n      lifted to the Async monad.\n    </blockquote>")))
 (idp10760624
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      One important aspect of how this is written is that it uses\n      <span><em>pushback</em></span>, which is to say that if the writer\n      can't make progress writing, the reader will stop reading. If you\n      don't implement pushback in your servers, then a stopped client\n      can cause your program to leak memory, since you'll need to\n      allocate space for the data that's been read in but not yet\n      written out.\n    </blockquote>")))
 (idp10757584
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Bind is used in the above code to sequence the operations: first,\n      we call <code>Reader.read</code> to get a block of input.\n      Then, when that's complete and if a new block was returned, we\n      write that block to the writer. Finally, we wait until the\n      writer's buffers are flushed, waiting on the deferred returned by\n      <code>Writer.flushed</code>, at which point we recur. If we\n      hit an end-of-file condition, the loop is ended. The deferred\n      returned by a call to <code>copy_blocks</code> becomes\n      determined only once the end-of-file condition is hit.\n    </blockquote>")))
 (idp10754800
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The first step is to create a function that can copy data from an\n      input to an output. Here, we'll use Async's\n      <code>Reader</code> and <code>Writer</code> modules\n      which provide a convenient abstraction for working with input and\n      output channels.\n    </blockquote>")))
 (idp10753744
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now that we have the basics of Async under our belt, let's look at\n      a small standalone Async program. In particular, we'll write an\n      echo server, <span><em>i.e.</em></span>, a program that accepts\n      connections from clients and spits back whatever is sent to it.\n    </blockquote>")))
 (idp10750000
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        This code isn't particularly long, but it is a bit subtle. In\n        particular, note how the queue of thunks is used to ensure that\n        the enqueued actions are run in order, even if the thunks\n        scheduled by <code>upon</code> are run out-of-order. This\n        is kind of subtlety typical of code that involves ivars and\n        <code>upon</code>, and because of this, you should stick\n        to the simpler map/bind/return style of working with deferreds\n        when you can.\n      </blockquote>")))
 (idp10747072
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Our delayer implementation is organized around a queue of\n        thunks, where every call to <code>schedule</code> adds a\n        thunk to the queue, and also schedules a job in the future to\n        grab a thunk off the queue and run it. The waiting will be done\n        using the function <code>after</code> which takes a time\n        span and returns a deferred which becomes determined after that\n        time span elapses.\n      </blockquote>")))
 (idp10744320
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Like <code>bind</code> and <code>return</code>,\n        <code>upon</code> schedules a callback to be executed when\n        the deferred it is passed is determined; but unlike those calls,\n        it doesn't create a new deferred for this callback to fill.\n      </blockquote>")))
 (idp10739952
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        An action is handed to <code>schedule</code> in the form\n        of a deferred-returning thunk (a thunk is a function whose\n        argument is of type <code>unit</code>). A deferred is\n        handed back to the caller of <code>schedule</code> that\n        will eventually be filled with the contents of the deferred\n        value returned by the thunk to be scheduled. To implement this,\n        we'll use a new operator called <code>upon</code>, which\n        has the following signature.\n      </blockquote>")))
 (idp10738496
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        As an example, imagine we wanted a way of scheduling a sequence\n        of actions that would run after a fixed delay. In addition, we'd\n        like to guarantee that these delayed actions are executed in the\n        same order they were scheduled in. Here's a reasonable signature\n        that captures this idea.\n      </blockquote>")))
 (idp10737792
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Ivars are something of a low-level feature; operators like map,\n        bind and return are typically easier to use and think about. But\n        ivars can be useful when you want to build complicated\n        synchronization patterns that can't be constructed naturally\n        otherwise.\n      </blockquote>")))
 (idp10734192
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        There are three fundamental operations for working with an ivar;\n        you can create one, using <code>Ivar.create</code>, you\n        can read off the deferred that corresponds to the ivar in\n        question, using <code>Ivar.read</code>, and you can fill\n        an ivar, thus causing that deferred to become determined, using\n        <code>Ivar.fill</code>. These operations are illustrated\n        below.\n      </blockquote>")))
 (idp10730960
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Deferreds are usually built using combinations of\n        <code>bind</code>, <code>map</code> and\n        <code>return</code>, but sometimes you want to construct a\n        deferred that you can determine explicitly with user-code. This\n        is done using an <span><em>ivar</em></span>, which is a handle\n        that lets you control precisely when a deferred becomes\n        determined.\n      </blockquote>")))
 (idp10727888
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Note that <code>count_lines</code> returns a deferred, but\n      <code>utop</code> waits for that deferred to become\n      determined, and shows us the contents of the deferred instead.\n    </blockquote>")))
 (idp10725296
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      and comes with its own infix equivalent,\n      <code>&gt;&gt;|</code>. Using it, we can rewrite\n      <code>count_lines</code> again a bit more succinctly:\n    </blockquote>")))
 (idp10721872
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Calling <code>bind</code> and <code>return</code>\n      together is a fairly common pattern, and as such there is a\n      standard shortcut for it called <code>Deferred.map</code>,\n      which has the following signature:\n    </blockquote>")))
 (idp10718576
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Together, <code>bind</code> and <code>return</code>\n      form a design pattern in functional programming known as a\n      <span><em>monad</em></span>. You'll run across this signature in\n      many applications beyond just threads. Indeed, we already ran\n      across monads in\n      <a href=\"error-handling.html#bind-and-other-error-handling-idioms\">the section called \226\128\156<code>bind</code> and other error-handling\n      idioms\226\128\157</a>.\n    </blockquote>")))
 (idp10716000
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Using <code>return</code>, we can make\n      <code>count_lines</code> compile.\n    </blockquote>")))
 (idp10713728
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      This looks reasonable enough, but as you can see, the compiler is\n      unhappy with the code. The issue here is that bind expects a\n      function that returns a deferred, but we've provided it a function\n      that simply returns the result. To make these signatures match, we\n      need a function for taking an ordinary value and wrapping it in a\n      deferred. This function is a standard part of Async, and is called\n      <code>return</code>:\n    </blockquote>")))
 (idp10712464
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now let's look at another potential use of bind. In this case,\n      we'll write a function that counts the number of lines in a file.\n    </blockquote>")))
 (idp10711808
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      In the above we've dropped the parentheses around the function on\n      the right-hand side of the bind, and we didn't add a level of\n      indentation for the contents of that function. This is standard\n      practice for using the bind operator.\n    </blockquote>")))
 (idp10707696
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Writing out <code>Deferred.bind</code> explicitly can be\n      rather verbose, and so <code>Async.Std</code> includes an\n      infix operator for it: <code>&gt;&gt;=</code>. Using this\n      operator, we can rewrite <code>uppercase_file</code> as\n      follows.\n    </blockquote>")))
 (idp10706448
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Here's a simple use of bind for a function that replaces a file\n      with an uppercase version of its contents.\n    </blockquote>")))
 (idp10702608
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      At a more concrete level, the call to\n      <code>Deferred.bind</code> returns a new deferred that\n      becomes determined when the deferred returned by\n      <code>f</code> is determined. It also implicitly registers\n      with the scheduler an <span><em>Async job</em></span> that is\n      responsible for running <code>f</code> once\n      <code>d</code> is determined.\n    </blockquote>")))
 (idp10697776
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>Deferred.bind d f</code> takes a deferred value\n      <code>d</code> and a function f that is to be run with the\n      value of <code>d</code> once it's determined. You can think\n      of <code>Deferred.bind</code> as a kind of sequencing\n      operator, and what we're doing is essentially taking an\n      asynchronous computation <code>d</code> and tacking on\n      another stage comprised by the actions of the function\n      <code>f</code>.\n    </blockquote>")))
 (idp10695760
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      In order to do real work with deferreds, we need a way of\n      sequencing deferred computations, which we do using\n      <code>Deferred.bind</code>. First, let's consider the\n      type-signature of bind.\n    </blockquote>")))
 (idp10693840
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      If we peek again, we'll see that the value of\n      <code>contents</code> has been determined.\n    </blockquote>")))
 (idp10690704
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The value in <code>contents</code> isn't yet determined in\n      part because there's nothing running that could do the necessary\n      I/O. When using Async, processing of I/O and other events is\n      handled by the Async scheduler. When writing a standalone program,\n      you need to start the scheduler explicitly, but utop knows about\n      Async, and can start the scheduler automatically. More than that,\n      utop knows about deferred values, and when you type in an\n      expression of type <code>Deferred.t</code>, it will make\n      sure the scheduler is running and block until the deferred is\n      determined. Thus, we can write:\n    </blockquote>")))
 (idp10687920
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      A deferred is essentially a handle to a value that may be computed\n      in the future. As such, if we call\n      <code>Reader.file_contents</code>, the resulting deferred\n      will initially be empty, as you can see by calling\n      <code>Deferred.peek</code> on the resulting deferred.\n    </blockquote>")))
 (idp10684384
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      We first load the Async package in the toplevel using\n      <code>#require</code>, and then open\n      <code>Async.Std</code>, which adds a number of new\n      identifiers and modules into our environment that make using Async\n      more convenient. Opening <code>Async.Std</code> is standard\n      practice for writing programs using Async, much like opening\n      <code>Core.Std</code> is for using Core.\n    </blockquote>")))
 (idp10681584
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      In Async, well-behaved functions never block. Instead, they return\n      a value of type <code>Deferred.t</code> that acts as a\n      placeholder that will eventually be filled in with the result. As\n      an example, consider the signature of the Async equivalent of\n      <code>In_channel.read_all</code>.\n    </blockquote>")))
 (idp10680208
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Since the function returns a concrete string, it has to block\n      until the read completes. The blocking nature of the call means\n      that no progress can be made on anything else until the read is\n      completed. Here's an example.\n    </blockquote>")))
 (idp10679024
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Consider a typical function for doing I/O in Core.\n    </blockquote>")))
 (idp10677168
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    This chapter covers the Async library, which offers a hybrid model\n    that aims to provide the best of both worlds, avoiding the\n    performance compromises and synchronization woes of preemptive\n    threads without the confusing inversion of control that usually\n    comes with event-driven systems.\n  </blockquote>")))
 (idp10676352
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    Single-threaded event-driven systems, on the other hand, execute a\n    single task at a time and do not require the same kind of complex\n    synchronization that preemptive threads do. However, the inverted\n    control structure of an event-driven program often means that your\n    own control flow has to be threaded awkwardly through the system's\n    event loop, leading to a maze of event callbacks.\n  </blockquote>")))
 (idp10675584
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    Each of these mechanisms has its own trade-offs. System threads\n    require significant memory and other resources per thread. Also, the\n    operating system can arbitrarily interleave the execution of system\n    threads, requiring the programmer to carefully protect shared\n    resources with locks and condition variables, which is exceedingly\n    error-prone.\n  </blockquote>")))
 (idp10674368
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    Another approach is to have a single-threaded program where that\n    single thread runs an <span><em>event loop</em></span>, whose job is\n    to react to external events like timeouts or mouse clicks by\n    invoking a callback function that has been registered for that\n    purpose. This approach shows up in languages like JavaScript that\n    have single-threaded runtimes as well as in many GUI toolkits.\n  </blockquote>")))
 (idp10673648
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    One approach to concurrency is to use preemptive system threads,\n    which is the dominant approach in languages like Java or C#. In this\n    model, each task that may require simultaneous waiting is given an\n    operating system thread of its own, so it can block without stopping\n    the entire program.\n  </blockquote>")))
 (idp10672368
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    The logic of building programs that interact with the outside world\n    is often dominated by waiting: waiting for the click of a mouse, or\n    for data to be fetched from disk, or for space to be available on an\n    outgoing network buffer. Even mildly sophisticated interactive\n    applications are typically <span><em>concurrent</em></span>, needing\n    to wait for multiple different events at the same time, responding\n    immediately to whatever event happens first.\n  </blockquote>")))
 (idp10080688
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n<a href=\"http://erratique.ch/software/cmdliner\" target=\"_top\">Cmdliner</a>\n          is a mix between the Command and Getopt libraries. It allows\n          for the declarative definition of command-line interfaces, but\n          exposes a more <code>getopt</code>-like interface. It\n          also automates the generation of UNIX <code>man</code>\n          pages as part of the specification. Cmdliner is the parser\n          used by OPAM to manage its command-line.\n        </blockquote>")))
 (idp10077536
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n<a href=\"https://forge.ocamlcore.org/projects/ocaml-getopt/\" target=\"_top\">ocaml-getopt</a>\n          provides the general command-line syntax of GNU\n          <code>getopt</code> and <code>getopt_long</code>.\n          The GNU conventions are widely used in the open-source world,\n          and this library lets your OCaml programs obey the same rules.\n        </blockquote>")))
 (idp10075792
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n          You can use the\n          <code>Command.Spec.flags_of_args_exn</code> function to\n          convert Arg specifications into ones compatible with Command.\n          This is quite often used to help port older non-Core code into\n          the Core standard library world.\n        </blockquote>")))
 (idp10073568
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n          The <code>Arg</code> module from the OCaml standard\n          library, which is used by the compiler itself to handle its\n          command-line interface. Command is generally more featureful\n          than Arg (mainly via support for sub-commands, the\n          <code>step</code> combinator to transform inputs, and\n          help generation), but there's absolutely nothing wrong with\n          using Arg either.\n        </blockquote>")))
 (idp10072400
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      This rounds up our tour of the Command library. This isn't the\n      only way to parse command-line arguments of course; there are\n      several alternatives available on OPAM. Three of the most\n      prominent ones are introduced below.\n    </blockquote>")))
 (idp10070304
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        It will help to check out how other applications that install\n        tab-completion scripts and following their lead, as the details\n        are very OS-specific.\n      </blockquote>")))
 (idp10068880
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Sadly, <code>bash</code> doesn't support installing a\n        generic handler for all Command-based applications. This means\n        that you have to install the completion script for every\n        application, but you should be able to automate this in the\n        build and packaging system for your application.\n      </blockquote>")))
 (idp10066768
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Command completion support works for flags and grouped commands,\n        and is very useful when building larger command-line interfaces.\n        Don't forget to install the shell fragment into your global\n        <code>bash_completion.d</code> directory if you want it to\n        be loaded in all of your login shells.\n      </blockquote>")))
 (idp10065328
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        You don't need to worry about what the output script above\n        actually does (unless you have an unhealthy fascination with\n        shell scripting internals, that is). Instead, redirect the\n        output to a file in your current directory and source it into\n        your current shell.\n      </blockquote>")))
 (idp10061984
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Recall that we used the <code>Arg_type.file</code> to\n        specify the argument type. This also supplies the completion\n        logic so that you can just press <code>&lt;tab&gt;</code>\n        to complete files in your current directory.\n      </blockquote>")))
 (idp10059984
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        For example, let's try it on our MD5 example from earlier,\n        assuming that the binary is called\n        <code>basic_md5_with_flags</code> in the current\n        directory.\n      </blockquote>")))
 (idp10058528
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The Command library has a declarative description of all the\n        possible valid options, and it can use this information to\n        generate a shell script which provides completion support for\n        that command. To generate the fragment, just run the command\n        with the <code>COMMAND_OUTPUT_INSTALLATION_BASH</code>\n        environment variable set to any value.\n      </blockquote>")))
 (idp10054576
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      One last bit of information you'll need to find is the location of\n      the <code>bash_completion.d</code> directory. This is where\n      all the shell fragments that contain the completion logic are\n      held. On Linux, this is often in\n      <code>/etc/bash_completion.d</code>, and in Homebrew on Mac\n      OS X it would be\n      <code>/usr/local/etc/bash_completion.d</code> by default.\n    </blockquote>")))
 (idp10051616
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Once bash completion is installed and configured, check that it\n      works by typing the <code>ssh</code> command, and pressing\n      <code>&lt;tab&gt;</code>. This should show you the list of\n      known hosts from your <code>~/.ssh/known_hosts</code> file.\n      If it lists some hosts that you've recently connected to, you can\n      continue on. If it lists the files in your current directory\n      instead, then check your OS documentation to configure completion\n      correctly.\n    </blockquote>")))
 (idp10038384
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Bash autocompletion isn't always installed by default, so check\n      your OS package manager to see if you have it available.\n    </blockquote>")))
 (idp10036176
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The precise mechanism for autocompletion varies depending on what\n      shell you are using, but we'll assume you are using the most\n      common one: <code>bash</code>. This is the default\n      interactive shell on most Linux distributions and Mac OS X, but\n      you may need to switch to it on *BSD or Windows (when using\n      Cygwin). The rest of this section assumes that you're using\n      <code>bash</code>.\n    </blockquote>")))
 (idp10034640
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Modern UNIX shells usually have a tab-completion feature to\n      interactively help you figure out how to build a command-line.\n      These work by pressing the <code>&lt;tab&gt;</code> key in\n      the middle of typing a command, and seeing the options that pop\n      up. You've probably used this most often to find the files in the\n      current directory, but it can actually be extended for other parts\n      of the command too.\n    </blockquote>")))
 (idp10030560
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Labelled arguments are more verbose but can also help prevent\n        errors with command-line arguments with similar types but\n        different names and purposes. It's good form to use labels when\n        you have a lot of otherwise anonymous <code>int</code> and\n        <code>string</code> arguments.\n      </blockquote>")))
 (idp10026320
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        This <code>cal_add_labels</code> example goes back to our\n        non-interactive calendar addition program, but the\n        <code>add_days</code> main function now expects labeled\n        arguments. The <code>step</code> function in the\n        specification simply converts the default\n        <code>base</code> and <code>days</code> arguments\n        into a labeled function.\n      </blockquote>")))
 (idp10024256
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The <code>step</code> chaining lets you control the types\n        of your callbacks very easily. This can help you match existing\n        interfaces or make things more explicit by adding labeled\n        arguments.\n      </blockquote>")))
 (idp10020288
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The first half of the <code>Spec.t</code> shows that the\n        callback type is <code>Date.t -&gt; int</code>, whereas\n        the resulting value expected from the next specification in the\n        chain is a <code>Date.t -&gt; int option</code>.\n      </blockquote>")))
 (idp10013904
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The transformation means that the <code>add_days</code>\n        callback can just keep its original definition of\n        <code>Date.t -&gt; int -&gt; unit</code>. The\n        <code>step</code> function transformed the\n        <code>int option</code> argument from the parsing into an\n        <code>int</code> suitable for <code>add_days</code>.\n        This transformation is explicitly represented in the type of the\n        <code>step</code> return value:\n      </blockquote>")))
 (idp10008960
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The first <code>m</code> argument to the\n        <code>step</code> callback is the next callback function\n        in the chain. The transformation is completed by calling\n        <code>m base days</code> to continue processing with the\n        new values we've just calculated. The <code>days</code>\n        value that is passed onto the next callback now has a\n        non-optional <code>int</code> type.\n      </blockquote>")))
 (idp10005264
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The <code>days</code> anonymous argument is now an\n        optional integer in the spec, and we want to transform it into a\n        non-optional value before calling our\n        <code>add_days</code> callback. The\n        <code>step</code> combinator lets us perform this\n        transformation by applying its supplied callback function first.\n        In the example, the callback first checks if\n        <code>day</code> is defined. If it's undefined, then it\n        interactively reads an integer from the standard input.\n      </blockquote>")))
 (idp10001008
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        This program requires you to specify both the\n        <code>base</code> date and the number of\n        <code>days</code> to add onto it. If\n        <code>days</code> isn't supplied on the command-line, an\n        error is output. Now let's modify it to interactively prompt for\n        a number of days if only the <code>base</code> date is\n        supplied.\n      </blockquote>")))
 (idp9998864
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The <code>step</code> combinator lets you control the\n        normal course of parsing by supplying a function that maps\n        callback arguments to a new set of values. For instance, let's\n        revisit our first calendar application that added a number of\n        days onto a supplied base date.\n      </blockquote>")))
 (idp9995392
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        While this does look scary, the key line to scan is the last\n        one, where it's telling you that you have supplied too many\n        arguments in the callback function\n        (<code>unit -&gt; unit</code> vs <code>unit</code>).\n        If you started with a working program and made this single\n        change, you typically don't even need to read the type error, as\n        the filename and location information is sufficient to make the\n        obvious fix.\n      </blockquote>")))
 (idp9993424
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        For example, if we remove the <code>verbose</code> flag\n        and recompile, we'll get this impressively long type error:\n      </blockquote>")))
 (idp9992688
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Both of these flags will now be applied and passed to all the\n        callback functions. This makes code refactoring a breeze by\n        using the compiler to spot places where you use commands. Just\n        add a parameter to the common definition, run the compiler, and\n        fix type errors until everything works again.\n      </blockquote>")))
 (idp9990624
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The definitions of the specifications are very similar to the\n        earlier example, except that they append a\n        <code>common</code> parameter after each specification. We\n        can supply these flags when defining the groups.\n      </blockquote>")))
 (idp9988560
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        If you want to factor out common command-line operations, the\n        <code>++</code> operator will append two specifications\n        together. Let's add some dummy verbosity and debug flags to our\n        calendar application to illustrate this.\n      </blockquote>")))
 (idp9981648
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The parameters to <code>Spec.t</code> are important here.\n        They show that the callback function for a spec should consume\n        identical arguments to the supplied <code>main</code>\n        function, except for an additional <code>unit</code>\n        argument. This final <code>unit</code> is there to make\n        sure the callback is evaluated as a function, since if zero\n        command-line arguments are specified (<span><em>i.e.</em></span>\n<code>Spec.empty</code>), the callback would otherwise\n        have no arguments and be evaluated immediately. That's why you\n        have to supply an additional <code>()</code> to the\n        callback function in all the previous examples.\n      </blockquote>")))
 (idp9979744
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The type of <code>Command.basic</code> should make more\n        sense now:\n      </blockquote>")))
 (idp9974592
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The empty specification is simple as it doesn't add any\n        parameters to the callback type. The second example adds an\n        <code>int</code> anonymous parameter that is reflected in\n        the inferred type. One forms a command by combining a spec of\n        type <code>('main, unit) Spec.t</code> with a function of\n        type <code>'main</code>. The combinators we've shown so\n        far incrementally build the type of <code>'main</code>\n        according to the command-line parameters it expects, so the\n        resulting type of <code>'main</code> is something like\n        <code>arg1 -&gt; ... -&gt; argN -&gt; unit</code>.\n      </blockquote>")))
 (idp9971760
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Such a value transforms a main function of type\n        <code>arg1 -&gt; ... -&gt; argN -&gt; 'r</code> by\n        supplying all the argument values, leaving a main function that\n        returns a value of type <code>'r</code>. Let's look at\n        some examples of specs, and their types:\n      </blockquote>")))
 (idp9968416
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The type of a specification transforms a <code>'a</code>\n        to a <code>'b</code> value. For instance, a value of\n        <code>Spec.t</code> might have type\n        <code>(arg1 -&gt; ... -&gt; argN -&gt; 'r, 'r) Spec.t</code>.\n      </blockquote>")))
 (idp9967696
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n            how to auto-complete a partial command line\n          </blockquote>")))
 (idp9966848
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n            what the command does and how to call it\n          </blockquote>")))
 (idp9966016
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n            how to parse the command line\n          </blockquote>")))
 (idp9962144
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The <code>Command.Spec.t</code> type looks deceptively\n        simple: <code>('a, 'b) t</code>. You can think of\n        <code>('a, 'b) t</code> here as a function of type\n        <code>'a -&gt; 'b</code>, but embellished with information\n        about:\n      </blockquote>")))
 (idp9960800
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The Command module's safety relies on the specification's output\n        values precisely matching the callback function which invokes\n        the main program. In order to prevent any such mismatches,\n        Command uses some interesting type machinery to guarantee they\n        remain in sync. You don't have to understand this section to use\n        the more advanced combinators, but it'll help you debug type\n        errors as you use Command more.\n      </blockquote>")))
 (idp9958416
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      In the following, we'll explain the logic behind the combinators\n      we've already described and show you some new combinators that let\n      you use Command even more effectively.\n    </blockquote>")))
 (idp9957536
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Understanding the details of how these specifications fit together\n      becomes more useful as your command line interfaces get more\n      complex. In particular, you may want to factor out common\n      functionality between specifications, or interrupt the parsing to\n      perform special processing, such as requesting an interactive\n      passphrase from the user before proceeding. All of this is helped\n      by a deeper understanding of the Command library.\n    </blockquote>")))
 (idp9956896
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The functions for generating a specification may seem like magic.\n      In particular, even if you know how to use them, it's not entirely\n      clear how they work, and in particular, why the types work out the\n      way they do.\n    </blockquote>")))
 (idp9954304
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      We can invoke the two commands we just defined to verify that they\n      work and see the date parsing in action.\n    </blockquote>")))
 (idp9952960
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      And that's all you really need to add sub-command support! Let's\n      build the example first in the usual way and inspect the help\n      output, which now reflects the sub-commands we just added.\n    </blockquote>")))
 (idp9950800
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Everything in this command should be familiar to you by now. Once\n      you've tested it and made sure it works, we can define another new\n      command that takes the difference of two dates. However, instead\n      of creating a new binary, we group both operations as sub-commands\n      using <code>Command.group</code>.\n    </blockquote>")))
 (idp9949440
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Let's build the outline of a calendar tool that does a few\n      operations over dates from the command-line. We first need to\n      define a command that adds days to an input date and prints the\n      resulting date.\n    </blockquote>")))
 (idp9947392
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The <code>group</code> signature accepts a list of basic\n      <code>Command.t</code> values and their corresponding names.\n      When executed, it looks for the appropriate sub-command from the\n      name list, and dispatches it to the right command handler.\n    </blockquote>")))
 (idp9944512
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      This usually only becomes a concern when your application\n      organically grows features. Luckily, it's simple to extend your\n      application to do this in Command: just swap the\n      <code>Command.basic</code> for\n      <code>Command.group</code>, which takes an association list\n      of specifications and handles the sub-command parsing and help\n      output for you.\n    </blockquote>")))
 (idp9941744
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The <code>config</code>, <code>remote</code> and\n      <code>install</code> keywords form a logical grouping of\n      commands that factor out a set of flags and arguments. This lets\n      you prevent flags that are specific to a particular sub-command\n      from leaking into the general configuration space.\n    </blockquote>")))
 (idp9940432
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      You'll have run across this style already when using the OPAM\n      package manager (or, in the non-OCaml world, the Git or Mercurial\n      commands). OPAM exposes commands in this form.\n    </blockquote>")))
 (idp9939648
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      You can get pretty far by using flags and anonymous arguments to\n      assemble complex command-line interfaces. After a while though,\n      too many options can make the program very confusing for newcomers\n      to your application. One way to solve this is by grouping common\n      operations together and adding some hierarchy to the command-line\n      interface.\n    </blockquote>")))
 (idp9937648
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The flags affect the type of the callback function in exactly the\n      same way as anonymous arguments do. This lets you change the\n      specification and ensure that all the callback functions are\n      updated appropriately, without runtime errors.\n    </blockquote>")))
 (idp9916032
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The <code>-s</code> flag in our specification requires a\n      <code>string</code> argument and isn't optional. The Command\n      parser outputs an error message if the flag isn't supplied, as\n      with the anonymous arguments in earlier examples. Here's a list of\n      some of the functions that you can wrap flags in to control how\n      they are parsed.\n    </blockquote>")))
 (idp9911744
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The specification now uses the <code>flag</code> function to\n      define the two new labeled command-line arguments. The\n      <code>doc</code> string is formatted so that the first word\n      is the short name that appears in the usage text, with the\n      remainder being the full help text. Notice that the\n      <code>-t</code> flag has no argument, and so we prepend its\n      <code>doc</code> text with a blank space. The help text for\n      the above code looks like this.\n    </blockquote>")))
 (idp9908272
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Let's add two arguments to our <code>md5</code> command that\n      mimics the MacOS X version. A <code>-s</code> flag specifies\n      the string to be hashed directly on the command-line and\n      <code>-t</code> runs a self-test. The complete example is\n      below.\n    </blockquote>")))
 (idp9907136
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      You aren't just limited to anonymous arguments on the\n      command-line. A <span><em>flag</em></span> is a named field that\n      can be followed by an optional argument. These flags can appear in\n      any order on the command-line, or multiple times, depending on how\n      they're declared in the specification.\n    </blockquote>")))
 (idp9901408
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The callback function is a little more complex now to handle the\n        extra options. The <code>files</code> are now a\n        <code>string list</code>, and an empty list reverts to\n        using standard input just as our previous\n        <code>maybe</code> and\n        <code>maybe_with_default</code> examples did. If the list\n        of files isn't empty, then it opens up each file and runs them\n        through <code>do_hash</code> sequentially.\n      </blockquote>")))
 (idp9900016
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        One last transformation that's useful is to obtain lists of\n        anonymous arguments rather than a single one. As an example,\n        let's modify our MD5 code to take a collection of files to\n        process on the command line.\n      </blockquote>")))
 (idp9897520
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Building and running both against a system file confirms that\n        they have the same behavior.\n      </blockquote>")))
 (idp9894832
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The example below behaves exactly the same as the previous\n        example, but replaces <code>maybe</code> with\n        <code>maybe_with_default</code>.\n      </blockquote>")))
 (idp9893408
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Another possible way to handle this would be to supply a dash as\n        the default filename if one isn't specified. The\n        <code>maybe_with_default</code> function can do just this,\n        with the benefit of not having to change the callback parameter\n        type (which may be a problem in more complex applications).\n      </blockquote>")))
 (idp9889920
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The <code>filename</code> parameter to\n        <code>do_hash</code> is now a\n        <code>string option</code> type. This is resolved into an\n        input channel via <code>get_file_data</code> to determine\n        whether to open the standard input or a file, and then the rest\n        of the command is similar to our previous examples.\n      </blockquote>")))
 (idp9887056
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        This is because changing the argument type has also changed the\n        type of the callback function. It now wants a\n        <code>string option</code> instead of a\n        <code>string</code> since the value has become optional.\n        We can adapt our example to use the new information and read\n        from standard input if no file is specified.\n      </blockquote>")))
 (idp9884288
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        This just wraps the <code>filename</code> argument\n        declaration in the <code>maybe</code> function to mark it\n        as an optional argument. However, building this results in a\n        compile-time error.\n      </blockquote>")))
 (idp9882288
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        A more realistic MD5 binary could also read from the standard\n        input if a <code>filename</code> isn't specified.\n      </blockquote>")))
 (idp9877376
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The <code>regular_file</code> function transforms a\n        <code>filename</code> string parameter into the same\n        string, but first checks that the file exists and is a regular\n        file type. When you build and run this code, you will see the\n        new error messages if you try to open a special device such as\n        <code>/dev/null</code>.\n      </blockquote>")))
 (idp9875232
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        We can also define our own argument types if the predefined ones\n        aren't sufficient. For instance, let's make a\n        <code>regular_file</code> argument type that ensures that\n        the input file isn't a character device or some other odd UNIX\n        file type that can't be fully read.\n      </blockquote>")))
 (idp9872688
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Running this with a non-existent filename will now output an error\n      if the file doesn't exist. As a bonus, it also enables interactive\n      command-line completion to work on the filename argument\n      (explained later in the chapter).\n    </blockquote>")))
 (idp9870672
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      We can tighten up the specification of the command to\n      <code>file</code> to reflect that the argument must be a\n      valid filename, and not just any string.\n    </blockquote>")))
 (idp9839232
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      You aren't just limited to parsing command lines as strings, of\n      course. <code>Command.Spec</code> defines several other\n      conversion functions that validate and parse input into various\n      types.\n    </blockquote>")))
 (idp9837392
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Now that we have the basics in place, the rest of the chapter\n        will examine some of the more advanced features of Command.\n      </blockquote>")))
 (idp9836032
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        And that's all it took to build our little MD5 utility! Here's a\n        complete version of the example we just walked through, but made\n        slightly more succinct by removing intermediate variables.\n      </blockquote>")))
 (idp9833328
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        If you do supply the <code>filename</code> argument, then\n        <code>do_hash</code> is called with the argument and the\n        MD5 output is displayed to the standard output.\n      </blockquote>")))
 (idp9831968
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        When we invoke this binary without any arguments, it helpfully\n        displays all of the command-line options available, along with a\n        message to the standard error that informs you that a required\n        argument <code>filename</code> is missing.\n      </blockquote>")))
 (idp9828640
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The versions that you see in the output were defined via the\n        optional arguments to <code>Command.run</code>. You can\n        leave these blank in your own programs or get your build system\n        to generate them directly from your version control system\n        (<span><em>e.g.</em></span> by running <code>hg id</code>\n        to generate a build revision number, in the case of Mercurial).\n      </blockquote>")))
 (idp9827408
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        You can now query the version information for the binary you\n        just compiled.\n      </blockquote>")))
 (idp9823904
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n<code>Command.run</code> takes a couple of optional\n        arguments that are useful to identify which version of the\n        binary you are running in production. Let's build the complete\n        MD5 example first so that we can see this in action. Makes sure\n        to run <code>opam install cryptokit</code> if you didn't\n        do so when reading <a href=\"classes.html\">Chapter\194\16012, <i>Classes</i></a>.\n      </blockquote>")))
 (idp9822656
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Once we've defined the basic command, running it is just one\n        function call away.\n      </blockquote>")))
 (idp9820064
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Every OCaml function needs at least one argument, so the final\n        <code>unit</code> guarantees that it will not be evaluated\n        immediately as a value if there are no other arguments.\n      </blockquote>")))
 (idp9816912
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The callback above needs an extra <code>unit</code>\n        argument after <code>filename</code>. This is to ensure\n        that specifications can work even when they are empty\n        (<span><em>i.e.</em></span> the\n        <code>Command.Spec.empty</code> value).\n      </blockquote>")))
 (idp9813984
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The callback function is where all the work happens after the\n        command-line parsing is complete. This function is applied with\n        the arguments containing the parsed command-line values, and it\n        takes over as the main thread of the application. The callback's\n        arguments are passed in the same order as they were bound in the\n        specification (using the <code>+&gt;</code> operator).\n      </blockquote>")))
 (idp9813216
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n            The specification and the callback function follow as\n            non-labeled arguments.\n          </blockquote>")))
 (idp9810144
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n<code>readme</code> is for longer help text when the\n            command is called with <code>-help</code>. The\n            <code>readme</code> argument is a function that is\n            only evaluated when the help text is actually needed.\n          </blockquote>")))
 (idp9808576
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n<code>summary</code> is a required one-line\n            description to go at the top of the command help screen.\n          </blockquote>")))
 (idp9806816
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n<code>Command.basic</code> defines a complete command-line\n        interface that takes the following extra arguments, in addition\n        to the ones defined in the specification.\n      </blockquote>")))
 (idp9804784
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Once we've defined a specification, we need to put it to work on\n        real input. The simplest way is to directly create a\n        command-line interface via the <code>Command.basic</code>\n        module.\n      </blockquote>")))
 (idp9799824
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        In this case, we defined a single anonymous argument called\n        <code>filename</code> which takes a value of type\n        <code>string</code>. Anonymous parameters are created\n        using the <code>%:</code> operator, which binds a textual\n        name (used in the help text to identify the parameter) to an\n        OCaml conversion function that parses the command-line string\n        fragments into a higher-level OCaml data type. In the example\n        above this is just <code>Command.Spec.string</code>, but\n        we'll see more complex conversion options later in the chapter.\n      </blockquote>")))
 (idp9796368
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        The <code>Command.Spec</code> module defines the tools\n        you'll need to build up a command-line specification. We start\n        with the <code>empty</code> value, and add parameters to\n        that using the <code>+&gt;</code> combinator. (Both of\n        these values come from <code>Command.Spec</code>.)\n      </blockquote>")))
 (idp9794640
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Let's build the specification for a single argument that is\n        passed directly on the command-line. This is known as an\n        <span><em>anonymous</em></span> argument.\n      </blockquote>")))
 (idp9789968
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      The <code>do_hash</code> function accepts a\n      <code>filename</code> parameter and prints the\n      human-readable MD5 string to the console standard output. The\n      first step towards turning this function into a command-line\n      program is to declare all the possible command-line arguments in a\n      <span><em>specification</em></span>.\n      <code>Command.Spec</code> defines combinators that can be\n      chained together to define optional flags and positional\n      arguments, what types they should map to, and whether to take\n      special actions (such as pausing for interactive input) if certain\n      inputs are encountered.\n    </blockquote>")))
 (idp9787072
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n      Let's start by working through a clone of the\n      <code>md5sum</code> command that is present on most Linux\n      installations (the equivalent command on MacOS X is simply\n      <code>md5</code>). The function defined below reads in the\n      contents of a file, applies the MD5 one-way cryptographic hash\n      function to the data, and outputs an ASCII hex representation of\n      the result.\n    </blockquote>")))
 (idp9784704
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Demonstrate how <span><em>functional combinators</em></span> can\n        be used to declare complex command line interfaces in a\n        type-safe and elegant way.\n      </blockquote>")))
 (idp9781680
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        See examples that extend the cryptographic utility from\n        <a href=\"classes.html\">Chapter\194\16012, <i>Classes</i></a> and build a simple\n        equivalent to the <code>md5</code> and\n        <code>shasum</code> utilities.\n      </blockquote>")))
 (idp9780784
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Learn how to use Command to construct basic and grouped\n        command-line interfaces.\n      </blockquote>")))
 (idp9779840
  ((file command-line-parsing.html)
   (html "<blockquote>\n    In this chapter, we'll:\n  </blockquote>")))
 (idp9779040
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n    Command is simple to use for simple applications, but also also\n    scales well as your needs grow more complex. In particular, Command\n    provides a sophisticated subcommand mode that groups related\n    commands together as the complexity of your user interface grows.\n    You may already be familiar with this command-line style from the\n    Git or Mercurial version control systems.\n  </blockquote>")))
 (idp9778336
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n    It's tedious and error-prone to code all this manually for every\n    program you write. Core provides the Command library that simplifies\n    all of this by letting you declare all your command-line options in\n    one place, and deriving all of the above functionality from that\n    declaration.\n  </blockquote>")))
 (idp9777600
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Interactive auto-completion of commands to assist the user.\n      </blockquote>")))
 (idp9776768
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Help for all the available options.\n      </blockquote>")))
 (idp9775904
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Generation of error messages in response to incorrect inputs.\n      </blockquote>")))
 (idp9775072
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n        Parsing of command line arguments.\n      </blockquote>")))
 (idp9773952
  ((file command-line-parsing.html)
   (html
    "<blockquote>\n    Many of the OCaml programs that you'll write will end up as binaries\n    that need to be run from a command prompt. Any non-trivial\n    command-line should support a collection of basic features:\n  </blockquote>")))
 (idp9589328
  ((file classes.html)
   (html
    "<blockquote>\n        This chapter contains significant external contributions from\n        Leo White.\n      </blockquote>")))
 (idp9587104
  ((file classes.html)
   (html
    "<blockquote>\n<a href=\"http://ocsigen.org/js_of_ocaml/api/Js\" target=\"_top\">js_of_ocaml</a>\n            compiles OCaml code to Javascript, and has bindings to\n            WebGL. This is the emerging standard for 3D rendering in web\n            browsers.\n          </blockquote>")))
 (idp9585472
  ((file classes.html)
   (html
    "<blockquote>\n<a href=\"https://forge.ocamlcore.org/projects/lablgl/\" target=\"_top\">LablGL</a>\n            is an interface between OCaml and OpenGL, a widely supported\n            standard for 3D rendering.\n          </blockquote>")))
 (idp9583904
  ((file classes.html)
   (html
    "<blockquote>\n<a href=\"http://lablgtk.forge.ocamlcore.org\" target=\"_top\">Lablgtk</a>\n            is a strongly-typed interface to the GTK widget library.\n          </blockquote>")))
 (idp9582720
  ((file classes.html)
   (html
    "<blockquote>\n        The graphics library described here is the one built into OCaml,\n        and is more useful as a learning tool than anything else. There\n        are several third-party libraries that provide more\n        sophisticated bindings to various graphics subsystems.\n      </blockquote>")))
 (idp9582000
  ((file classes.html)
   (html
    "<blockquote>\n        When you run the binary, a new graphical window should appear\n        (on MacOS X, you will need to install the X11 package first,\n        which you will be prompted for). Try clicking on the various\n        widgets, and gasp in awe at the sophisticated animations that\n        unfold as a result.\n      </blockquote>")))
 (idp9580048
  ((file classes.html)
   (html
    "<blockquote>\n        Finally, build the binary by linking against the\n        <code>async_graphics</code> package, which will pull in\n        all the other dependencies.\n      </blockquote>")))
 (idp9578784
  ((file classes.html)
   (html
    "<blockquote>\n        Now all we have to do is to glue it together by initializing the\n        display, creating some shapes, and running the scheduler.\n      </blockquote>")))
 (idp9576048
  ((file classes.html)
   (html
    "<blockquote>\n        Since the <code>linear</code> and\n        <code>harmonic</code> mixins are only used for there\n        side-effects, they can be inherited multiple times within the\n        same object to produce a variety of different animations.\n      </blockquote>")))
 (idp9574864
  ((file classes.html)
   (html
    "<blockquote>\n        This initializers can also be added using mixins:\n      </blockquote>")))
 (idp9573552
  ((file classes.html)
   (html
    "<blockquote>\n        We use initializers to add functions to this update list. For\n        example, this class will produce circles that move to the right\n        for a second when clicked:\n      </blockquote>")))
 (idp9571408
  ((file classes.html)
   (html
    "<blockquote>\n        We can also use mixins to create animated shapes. Each animated\n        shape has a list of update functions to be called during\n        animation. We create an <code>animated</code> mixin to\n        provide this update list and ensure that the functions in it are\n        called regular intervals when the shape is animated.\n      </blockquote>")))
 (idp9570192
  ((file classes.html)
   (html
    "<blockquote>\n        This allows us to create draggable shapes using multiple\n        inheritance.\n      </blockquote>")))
 (idp9566704
  ((file classes.html)
   (html
    "<blockquote>\n        That's too abstract, so let's give some examples based on our\n        interactive shapes. We may wish to allow a shape to be dragged\n        by the mouse. We can define this functionality for any object\n        which has mutable <code>x</code> and <code>y</code>\n        fields and an <code>on_mousedown</code> method for adding\n        event handlers:\n      </blockquote>")))
 (idp9562416
  ((file classes.html)
   (html
    "<blockquote>\n        In any case, if you're programming with objects, there's one\n        general pattern for multiple inheritance that is both useful and\n        reasonably simple, the <span><em>mixin</em></span> pattern.\n        Generically, a <span><em>mixin</em></span> is just a virtual\n        class that implements a feature based on another one. If you\n        have a class that implements methods <span><em>A</em></span>, and\n        you have a mixin <span><em>M</em></span> that provides methods\n        <span><em>B</em></span> from <span><em>A</em></span>, then you can\n        inherit from <span><em>M</em></span> -- &quot;mixing&quot; it in\n        -- to get features <span><em>B</em></span>.\n      </blockquote>")))
 (idp9561536
  ((file classes.html)
   (html
    "<blockquote>\n        When should you use multiple inheritance? If you ask multiple\n        people, you're likely to get multiple (perhaps heated) answers.\n        Some will argue that multiple inheritance is overly complicated;\n        others will argue that inheritance is problematic in general,\n        and one should use object composition instead. But regardless of\n        who you talk to, you will rarely hear that multiple inheritance\n        is great and you should use it widely.\n      </blockquote>")))
 (idp9558832
  ((file classes.html)
   (html
    "<blockquote>\n        To reiterate, to understand what inheritance means, replace each\n        <code>inherit</code> directive with its definition, and\n        take the last definition of each method or field. Note that the\n        methods and fields added by an inheritance are those listed in\n        its class type, so private methods that are hidden by the type\n        will not be included.\n      </blockquote>")))
 (idp9555424
  ((file classes.html)
   (html
    "<blockquote>\n        Here the <code>inherit</code> declaration comes after the\n        method definition, so the <code>draw</code> method from\n        <code>square</code> will override the other definition,\n        and the square will be drawn using <code>fill_rect</code>.\n      </blockquote>")))
 (idp9551248
  ((file classes.html)
   (html
    "<blockquote>\n        Since the <code>inherit</code> declaration comes before\n        the method definition, the new <code>draw</code> method\n        overrides the old one, and the square is drawn using\n        <code>draw_rect</code>. But, what if we had defined\n        <code>square_outline</code> as follows?\n      </blockquote>")))
 (idp9547120
  ((file classes.html)
   (html
    "<blockquote>\n        For example, consider this class which inherits from\n        <code>square</code> and defines a new\n        <code>draw</code> method that uses\n        <code>draw_rect</code> instead of\n        <code>fill_rect</code> to draw the square.\n      </blockquote>")))
 (idp9546496
  ((file classes.html)
   (html
    "<blockquote>\n        If there is one thing to remember about inheritance in OCaml, it\n        is this: inheritance is like textual inclusion. If there is more\n        than one definition for a name, the last definition wins.\n      </blockquote>")))
 (idp9545920
  ((file classes.html)
   (html
    "<blockquote>\n        The main trickiness of multiple inheritance is due to naming --\n        what happens when a method or field with some name is defined in\n        more than one class?\n      </blockquote>")))
 (idp9543600
  ((file classes.html)
   (html
    "<blockquote>\n      When a class inherits from more than one superclass, it is using\n      <span><em>multiple inheritance</em></span>. Multiple inheritance\n      extends the variety of ways in which classes can be combined, and\n      it can be quite useful, particularly with virtual classes.\n      However, it can be tricky to use, particularly when the\n      inheritance hierarchy is a graph rather than a tree, so it should\n      be used with care.\n    </blockquote>")))
 (idp9538880
  ((file classes.html)
   (html
    "<blockquote>\n      For example, suppose we wanted to extend our previous shapes\n      module with a <code>growing_circle</code> class for circles\n      that expand when clicked. We could inherit from\n      <code>circle</code> and used the inherited\n      <code>on_click</code> to add a handler for click events.\n    </blockquote>")))
 (idp9538112
  ((file classes.html)
   (html
    "<blockquote>\n      However, these expressions are executed before the object has been\n      created, and cannot refer to the methods of the object. If you\n      need to use an object's methods during instantiation you can use\n      an initializer. An initializer is an expression that will be\n      executed during instantiation but after the object has been\n      created.\n    </blockquote>")))
 (idp9536816
  ((file classes.html)
   (html
    "<blockquote>\n      You can execute expressions during the instantiation of a class by\n      placing them before the object expression or in the initial value\n      of a field:\n    </blockquote>")))
 (idp9533728
  ((file classes.html)
   (html
    "<blockquote>\n        One way to view a <code>virtual</code> class is that it is\n        like a functor, where the &quot;inputs&quot; are the declared,\n        but not defined, virtual methods and fields. The functor\n        application is implemented through inheritance, when virtual\n        methods are given concrete implementations.\n      </blockquote>")))
 (idp9530400
  ((file classes.html)
   (html
    "<blockquote>\n        Now we can define <code>square</code> and\n        <code>circle</code> by inheriting from\n        <code>shape</code>.\n      </blockquote>")))
 (idp9527024
  ((file classes.html)
   (html
    "<blockquote>\n        Here is the more succinct definition, starting with a virtual\n        <code>shape</code> class that implements\n        <code>on_click</code> and <code>on_mousedown</code>.\n      </blockquote>")))
 (idp9522256
  ((file classes.html)
   (html
    "<blockquote>\n        These classes have a lot in common, and it would be useful to\n        factor out this common functionality into a superclass. We can\n        easily move the definitions of <code>x</code> and\n        <code>y</code> into a superclass, but what about\n        <code>on_click</code>? Its definition depends on\n        <code>contains</code> which has a different definition in\n        each class. The solution is to create a\n        <span><em>virtual</em></span> class. This class will declare a\n        <code>contains</code> method, but leave its definition to\n        the subclasses.\n      </blockquote>")))
 (idp9519600
  ((file classes.html)
   (html
    "<blockquote>\n        The <code>square</code> class is pretty straightforward,\n        and the <code>circle</code> class below also looks very\n        similar.\n      </blockquote>")))
 (idp9517584
  ((file classes.html)
   (html
    "<blockquote>\n        Now let's create a new module that contains classes for making\n        squares and circles. We include an <code>on_click</code>\n        method for adding event handlers to the shapes.\n      </blockquote>")))
 (idp9514032
  ((file classes.html)
   (html
    "<blockquote>\n        We first define our <code>shape</code> object type to\n        include a <code>draw</code> method, and a reference to a\n        list of shapes to display them. Any shapes in that list will be\n        drawn on the display at regular intervals via the\n        <code>repaint</code> function. Finally, we also define an\n        <code>open_display</code> function to open a graphical\n        display and ensure that the Async scheduler is running.\n      </blockquote>")))
 (idp9512096
  ((file classes.html)
   (html
    "<blockquote>\n        Let's start with by creating a <code>Drawable</code>\n        module to hold the base logic to handle the display.\n      </blockquote>")))
 (idp9507136
  ((file classes.html)
   (html
    "<blockquote>\n      To explore this, lets extend our shapes examples to simple\n      interactive graphics. We will use the Async concurrency library\n      and the\n      <a href=\"http://github.com/lpw25/async_graphics/\" target=\"_top\">Async_graphics</a>\n      library, which provides an asynchronous interface to OCaml's built\n      in Graphics library. Concurrent programming with Async will be\n      explored later in\n      <a href=\"concurrent-programming-with-async.html\">Chapter\194\16018, <i>Concurrent Programming with Async</i></a>, for\n      now you can safely ignore the details. You just need to run\n      <code>opam install async_graphics</code> to get the library\n      installed on your system.\n    </blockquote>")))
 (idp9502512
  ((file classes.html)
   (html
    "<blockquote>\n      A <span><em>virtual</em></span> class is a class where some methods\n      or fields are declared, but not implemented. This should not be\n      confused with the word <code>virtual</code> as it is used in\n      C++. In C++, a <code>virtual</code> method uses dynamic\n      dispatch, while regular non-virtual methods are statically\n      dispatched. In OCaml, <span><em>all</em></span> methods use dynamic\n      dispatch, but the keyword <code>virtual</code> means that\n      the method or field is not implemented. A class containing virtual\n      methods must also be flagged <code>virtual</code> and cannot\n      be directly instantiated (i.e. no object of this class can be\n      created).\n    </blockquote>")))
 (idp9497008
  ((file classes.html)
   (html
    "<blockquote>\n      The binary method <code>equals</code> is now implemented in\n      terms of the concrete type <code>shape_repr</code>. In fact,\n      the objects are now isomorphic to the\n      <code>shape_repr</code> type. When using this pattern, you\n      will not be able to hide the <code>repr</code> method, but\n      you can hide the type definition using the module system.\n    </blockquote>")))
 (idp9495152
  ((file classes.html)
   (html
    "<blockquote>\n      If we want to define equality for shapes in general, the remaining\n      solution is to use the same approach as we described for\n      narrowing. That is, introduce a\n      <span><em>representation</em></span> type implemented using\n      variants, and implement the comparison based on the representation\n      type.\n    </blockquote>")))
 (idp9494336
  ((file classes.html)
   (html
    "<blockquote>\n      The problem here is that the built-in polymorphic equality\n      compares the method implementations, not their return values. The\n      method implementations (the function values that implement the\n      methods) are different, and so the equality comparison is false.\n      There are other reasons not to use the built-in polymorphic\n      equality, but these false negatives are a showstopper.\n    </blockquote>")))
 (idp9492224
  ((file classes.html)
   (html
    "<blockquote>\n      Since the problematic method is equality, one proposal we could\n      consider is is to just drop it from the base type\n      <code>shape</code> and use polymorphic equality instead.\n      However, the built-in polymorphic equality has very poor behavior\n      when applied to objects.\n    </blockquote>")))
 (idp9491616
  ((file classes.html)
   (html
    "<blockquote>\n      This problem is fundamental. Many languages solve it either with\n      narrowing (with dynamic type checking), or by method overloading.\n      Since OCaml has neither of these, what can we do?\n    </blockquote>")))
 (idp9488976
  ((file classes.html)
   (html
    "<blockquote>\n      The problem is that a <code>square</code> expects to be\n      compared with a <code>square</code>, not an arbitrary shape;\n      similarly for <code>circle</code>.\n    </blockquote>")))
 (idp9484768
  ((file classes.html)
   (html
    "<blockquote>\n      This works, but there is a problem lurking here. The method\n      <code>equals</code> takes an object of the exact type\n      <code>square</code> or <code>circle</code>. Because of\n      this, we can't define a common base class <code>shape</code>\n      that also includes an equality method.\n    </blockquote>")))
 (idp9482832
  ((file classes.html)
   (html
    "<blockquote>\n      We can now test different object instances for equality by using\n      the <code>equals</code> binary method.\n    </blockquote>")))
 (idp9481632
  ((file classes.html)
   (html
    "<blockquote>\n      Note how we can use the type annotation\n      <code>(self: 'self)</code> to obtain the type of the current\n      object.\n    </blockquote>")))
 (idp9479232
  ((file classes.html)
   (html
    "<blockquote>\n      A <span><em>binary method</em></span> is a method that takes an\n      object of <code>self</code> type. One common example is\n      defining a method for equality.\n    </blockquote>")))
 (idp9474528
  ((file classes.html)
   (html
    "<blockquote>\n      The key property of private methods is that they are visible to\n      subclasses, but not anywhere else. If you want the stronger\n      guarantee that a method is <span><em>really</em></span> private,\n      not even accessible in subclasses, you can use an explicit class\n      type that omits the method. In the following code, the private\n      methods are explicitly omitted from the class type of\n      <code>counter_with_sig</code>, and can't be invoked in\n      subclasses of <code>counter_with_sig</code>.\n    </blockquote>")))
 (idp9471024
  ((file classes.html)
   (html
    "<blockquote>\n      To be precise, the private methods are part of the class type, but\n      not part of the object type. This means, for example, that the\n      object <code>f</code> has no method <code>bold</code>.\n      However, the private methods are available to subclasses: we can\n      use them to simplify our <code>counter</code> class.\n    </blockquote>")))
 (idp9469088
  ((file classes.html)
   (html
    "<blockquote>\n      The final statement that builds the value <code>f</code>\n      shows how the instantiation of a <code>folder2</code> object\n      has a type that hides the private methods.\n    </blockquote>")))
 (idp9464896
  ((file classes.html)
   (html
    "<blockquote>\n      For example, we may want to include methods in our\n      <code>folder</code> class for handling each of the different\n      cases in <code>doc</code> and <code>text_item</code>.\n      However, we may not want to force subclasses of\n      <code>folder</code> to expose these methods as they probably\n      shouldn't be called directly.\n    </blockquote>")))
 (idp9463456
  ((file classes.html)
   (html
    "<blockquote>\n      Methods can be declared <span><em>private</em></span>, which means\n      that they may be called by subclasses, but they are not visible\n      otherwise (similar to a <span><em>protected</em></span> method in\n      C++).\n    </blockquote>")))
 (idp9458112
  ((file classes.html)
   (html
    "<blockquote>\n      Note how the <code>super</code> special object is used in\n      <code>text_item</code> to call the\n      <code>[int] folder</code> class's\n      <code>text_item</code> method to fold over the children of\n      the <code>text_item</code> node.\n    </blockquote>")))
 (idp9456064
  ((file classes.html)
   (html
    "<blockquote>\n      By inheriting from this class we can create functions which fold\n      over the document data. For example, the\n      <code>count_doc</code> function counts the number of bold\n      tags in the document that are not within a list:\n    </blockquote>")))
 (idp9452064
  ((file classes.html)
   (html
    "<blockquote>\n      The <code>object (self)</code> syntax binds\n      <code>self</code> to the current object, allowing the\n      <code>doc</code>, <code>list_item</code> and\n      <code>text_item</code> methods to call each other.\n    </blockquote>")))
 (idp9450784
  ((file classes.html)
   (html
    "<blockquote>\n      The simplest way is to use classes and open recursion. For\n      example, the following class defines objects which fold over the\n      document data:\n    </blockquote>")))
 (idp9450112
  ((file classes.html)
   (html
    "<blockquote>\n      It is quite easy to write a function that operates by recursively\n      traversing this data. However, what if you need to write many\n      similar recursive functions? How can you factor out the common\n      parts of these functions to avoid repetitive boilerplate?\n    </blockquote>")))
 (idp9448816
  ((file classes.html)
   (html
    "<blockquote>\n      For example, consider writing recursive functions over a simple\n      document format. This format is represented as a tree with three\n      different types of node:\n    </blockquote>")))
 (idp9448192
  ((file classes.html)
   (html
    "<blockquote>\n      This ability to define mutually recursive methods from separate\n      components is a key feature of classes: achieving similar\n      functionality with datatypes or modules is much more cumbersome\n      and verbose.\n    </blockquote>")))
 (idp9447440
  ((file classes.html)
   (html
    "<blockquote>\n      Open recursion allows an object's methods to invoke other methods\n      on the same object. These calls are looked up dynamically allowing\n      a method in one class to call a method from another class, if both\n      classes are inherited by the same object. This allows mutually\n      recursive parts of an object to be defined separately.\n    </blockquote>")))
 (idp9444288
  ((file classes.html)
   (html
    "<blockquote>\n      In this signature, we've chosen to make everything visible. The\n      class type for <code>stack</code> specifies the types of the\n      field <code>v</code>, as well as the types of each of the\n      methods.\n    </blockquote>")))
 (idp9442736
  ((file classes.html)
   (html
    "<blockquote>\n      Class types do not appear in mainstream object-oriented\n      programming languages, so you may not be familiar with them, but\n      the concept is pretty simple. A class type specifies the type of\n      each of the visible parts of the class, including both fields and\n      methods. Just like for module types, you don't have to give a type\n      for everything; anything you omit will be hidden.\n    </blockquote>")))
 (idp9441616
  ((file classes.html)
   (html
    "<blockquote>\n      The abstract signature is simple because we ignore the classes.\n      But what if we want to include them in the signature, so that\n      other modules can inherit from the class definitions? For this, we\n      need to specify types for the classes, called <span><em>class\n      types</em></span>.\n    </blockquote>")))
 (idp9440240
  ((file classes.html)
   (html
    "<blockquote>\n      We have multiple choices in defining the module type, depending on\n      how much of the implementation we want to expose. At one extreme,\n      a maximally-abstract signature would completely hide the class\n      definitions.\n    </blockquote>")))
 (idp9436672
  ((file classes.html)
   (html
    "<blockquote>\n      As an example, let's wrap up our <code>stack</code> class in\n      an explicit module (we'll use explicit modules for illustration,\n      but the process is similar when we want to define a\n      <code>.mli</code> file). In keeping with the usual style for\n      modules, we define a type <code>'a t</code> to represent the\n      type of our stacks.\n    </blockquote>")))
 (idp9436112
  ((file classes.html)
   (html
    "<blockquote>\n      To allow code in a different file or module to inherit from a\n      class we must expose it and give it a class type. What is the\n      class type?\n    </blockquote>")))
 (idp9432128
  ((file classes.html)
   (html
    "<blockquote>\n      The <code>as super</code> statement above creates a special\n      object called <code>super</code> which can be used to call\n      superclass methods. Note that <code>super</code> is not a\n      real object and can only be used to call methods.\n    </blockquote>")))
 (idp9430800
  ((file classes.html)
   (html
    "<blockquote>\n      A class can override methods from classes it inherits. For\n      example, this class creates stacks of integers that double the\n      integers before they are pushed onto the stack.\n    </blockquote>")))
 (idp9428736
  ((file classes.html)
   (html
    "<blockquote>\n      Inheritance uses an existing class to define a new one. For\n      example, the following class definition inherits from our stack\n      class for strings and adds a new method <code>print</code>\n      that prints all the strings on the stack.\n    </blockquote>")))
 (idp9423456
  ((file classes.html)
   (html
    "<blockquote>\n        The type quantifier <code>'b.</code> can be read as\n        &quot;for all <code>'b</code>&quot;. Type quantifiers can\n        only be used <span><em>directly after</em></span> the method\n        name, which means that method parameters must be expressed using\n        a <code>fun</code> or <code>function</code>\n        expression.\n      </blockquote>")))
 (idp9419264
  ((file classes.html)
   (html
    "<blockquote>\n        For example, a <code>fold</code> method for our\n        <code>['a] stack</code> class should have type\n        <code>('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b</code>,\n        where the <code>'b</code> is polymorphic. To express a\n        polymorphic method type like this we must use a type quantifier,\n        as shown in the following example.\n      </blockquote>")))
 (idp9417280
  ((file classes.html)
   (html
    "<blockquote>\n        What about functional operations like <code>map</code> and\n        <code>fold</code>? In general, these methods take a\n        function that produces a value of some other type than the\n        elements of the set.\n      </blockquote>")))
 (idp9415232
  ((file classes.html)
   (html
    "<blockquote>\n        In practise, most OCaml programmers avoid iterator objects in\n        favor of functional-style techniques. For example, the\n        alternative stack class below takes a function\n        <code>f</code> and applies it to each of the elements on\n        the stack.\n      </blockquote>")))
 (idp9412864
  ((file classes.html)
   (html
    "<blockquote>\n      Now we can build a new stack, push some values to it, and iterate\n      over them.\n    </blockquote>")))
 (idp9409456
  ((file classes.html)
   (html
    "<blockquote>\n      Finally, we add a method <code>iterator</code> to the\n      <code>stack</code> class to produce an iterator. To do so,\n      we construct a <code>list_iterator</code> that refers to the\n      current contents of the stack.\n    </blockquote>")))
 (idp9408208
  ((file classes.html)
   (html
    "<blockquote>\n      Next, we'll define an actual iterator for lists. We can use this\n      to iterate over the contents of our stack.\n    </blockquote>")))
 (idp9406288
  ((file classes.html)
   (html
    "<blockquote>\n      First, we'll define an object type <code>iterator</code>\n      that specifies the methods in an iterator.\n    </blockquote>")))
 (idp9405088
  ((file classes.html)
   (html
    "<blockquote>\n      OCaml supports both styles. In fact, OCaml is more flexible than\n      these approaches because an object type can be implemented by any\n      object with the appropriate methods; it does not have to be\n      specified by the object's class <span><em>a priori</em></span>.\n      We'll leave abstract classes for later. Let's demonstrate the\n      technique using object types.\n    </blockquote>")))
 (idp9403280
  ((file classes.html)
   (html
    "<blockquote>\n      In languages without interfaces, like C++, the specification would\n      normally use <span><em>abstract</em></span> classes to specify the\n      methods without implementing them (C++ uses the &quot;= 0&quot;\n      definition to mean &quot;not implemented&quot;).\n    </blockquote>")))
 (idp9401952
  ((file classes.html)
   (html
    "<blockquote>\n      There are two common styles for defining abstract interfaces like\n      this. In Java, an iterator would normally be specified with an\n      interface, which specifies a set of method types.\n    </blockquote>")))
 (idp9400560
  ((file classes.html)
   (html
    "<blockquote>\n      We may wish to traverse the elements on our stack. One common\n      style for doing this in object-oriented languages is to define a\n      class for an <code>iterator</code> object. An iterator\n      provides a generic mechanism to inspect and traverse the elements\n      of a collection.\n    </blockquote>")))
 (idp9398320
  ((file classes.html)
   (html
    "<blockquote>\n      In general, we need to provide enough constraints so that the\n      compiler will infer the correct type. We can add type constraints\n      to the parameters, to the fields, and to the methods. It is a\n      matter of preference how many constraints to add. You can add type\n      constraints in all three places, but the extra text may not help\n      clarity. A convenient middle ground is to annotate the fields\n      and/or class parameters, and add constraints to methods only if\n      necessary.\n    </blockquote>")))
 (idp9394768
  ((file classes.html)
   (html
    "<blockquote>\n      The type annotation on the declaration of <code>v</code> is\n      used to constrain type inference. If we omit this annotation, the\n      type inferred for the class will be &quot;too polymorphic&quot;:\n      <code>init</code> could have some type\n      <code>'b list</code>.\n    </blockquote>")))
 (idp9393472
  ((file classes.html)
   (html
    "<blockquote>\n      Note that the type parameter <code>['a]</code> in the\n      definition uses square brackets, but other uses of the type can\n      omit them (or use parentheses if there is more than one type\n      parameter).\n    </blockquote>")))
 (idp9391360
  ((file classes.html)
   (html
    "<blockquote>\n      Let's implement a class for creating simple stack objects. When\n      defining the class, the type parameters are placed in square\n      brackets before the class name in the class definition. We also\n      need a parameter <code>init</code> for the initial contents\n      of the stack.\n    </blockquote>")))
 (idp9389632
  ((file classes.html)
   (html
    "<blockquote>\n      A class definition serves as the <span><em>constructor</em></span>\n      for the class. In general, a class definition may have parameters\n      that must be provided as arguments when the object is created with\n      <code>new</code>.\n    </blockquote>")))
 (idp9386288
  ((file classes.html)
   (html
    "<blockquote>\n      Note that this type represents any object with these methods:\n      objects created using the <code>istack</code> class will\n      have this type, but objects with this type may not have been\n      created by the <code>istack</code> class.\n    </blockquote>")))
 (idp9381120
  ((file classes.html)
   (html
    "<blockquote>\n      You may have noticed that the object <code>s</code> has been\n      given the type <code>istack</code>. But wait, we've stressed\n      <span><em>classes are not types</em></span>, so what's up with\n      that? In fact, what we've said is entirely true, classes and class\n      names <span><em>are not</em></span> types. However, for\n      convenience, the definition of the class <code>istack</code>\n      also defines an object type <code>istack</code> with the\n      same methods as the class. This type definition is equivalent to:\n    </blockquote>")))
 (idp9379280
  ((file classes.html)
   (html
    "<blockquote>\n      To produce an object, classes are instantiated with the keyword\n      <code>new</code>.\n    </blockquote>")))
 (idp9368720
  ((file classes.html)
   (html
    "<blockquote>\n      The <code>class istack : object ... end</code> result shows\n      that we have created a class <code>istack</code> with\n      <span><em>class type</em></span> <code>object ... end</code>.\n      Like module types, class types are completely separate from\n      regular OCaml types (e.g. <code>int</code>,\n      <code>string</code>, <code>list</code>) and, in\n      particular, should not be confused with object types (e.g.\n      <code>&lt; get : int; .. &gt;</code>). The class type\n      describes the class itself rather than the objects that the class\n      creates. This particular class type specifies that the\n      <code>istack</code> class defines a mutable field\n      <code>v</code>, a method <code>pop</code> that returns\n      an <code>int option</code>, and a method\n      <code>push</code> with type\n      <code>int -&gt; unit</code>.\n    </blockquote>")))
 (idp9366736
  ((file classes.html)
   (html
    "<blockquote>\n      In OCaml, class definitions must be defined as toplevel statements\n      in a module. The syntax for a class definition uses the keyword\n      <code>class</code>.\n    </blockquote>")))
 (idp9364160
  ((file classes.html)
   (html
    "<blockquote>\n    Programming with objects directly is great for encapsulation, but\n    one of the main goals of object-oriented programming is code re-use\n    through inheritance. For inheritance, we need to introduce\n    <span><em>classes</em></span>. In object-oriented programming, a\n    class is a &quot;recipe&quot; for creating objects. The recipe can\n    be changed by adding new methods and fields, or it can be changed by\n    modifying existing methods.\n  </blockquote>")))
 (idp6309088
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      That's it for the guided tour! There are plenty of features left\n      and lots of details to explain, but we hope that you now have a\n      sense of what to expect from OCaml, and that you'll be more\n      comfortable reading the rest of the book as a result.\n    </blockquote>")))
 (idp6306848
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        More work is needed to make a really usable command-line\n        program, including a proper command-line parsing interface and\n        better error handling, all of which is covered in\n        <a href=\"command-line-parsing.html\">Chapter\194\16014, <i>Command Line Parsing</i></a>.\n      </blockquote>")))
 (idp6303104
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The <code>.native</code> suffix indicates that we're\n        building a native-code executable, which we'll discuss more in\n        <a href=\"files-modules-and-programs.html\">Chapter\194\1604, <i>Files, Modules and Programs</i></a>. Once the\n        build completes, we can use the resulting program like any\n        command-line utility. We can feed input to\n        <code>build_sum.native</code> by typing in a sequence of\n        numbers, one per line, hitting <code>control-d</code> when\n        we're done.\n      </blockquote>")))
 (idp6299968
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We'll compile our program using <code>corebuild</code>, a\n        small wrapper on top of <code>ocamlbuild</code>, which\n        itself is a build-tool that ships with the OCaml compiler. The\n        <code>corebuild</code> script is installed along with\n        Core, and its purpose is to pass in the flags required for\n        building a program with Core.\n      </blockquote>")))
 (idp6295136
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      After <code>read_and_accumulate</code> returns, the total\n      needs to be printed. This is done using the\n      <code>printf</code> command, which provides support for\n      type-safe format strings, similar to what you'll find in a variety\n      of languages. The format string is parsed by the compiler and used\n      to determine the number and type of the remaining arguments that\n      are required. In this case, there is a single formatting\n      directive, <code>%F</code>, so <code>printf</code>\n      expects one additional argument of type <code>float</code>.\n    </blockquote>")))
 (idp6292000
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      This is our first use of OCaml's input and output routines. The\n      function <code>read_and_accumulate</code> is a recursive\n      function that uses <code>In_channel.input_line</code> to\n      read in lines one by one from the standard input, invoking itself\n      at each iteration with its updated accumulated sum. Note that\n      <code>input_line</code> returns an optional value, with\n      <code>None</code> indicating the end of the input stream.\n    </blockquote>")))
 (idp6289584
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Here's the code, which you can save in a file called\n      <code>sum.ml</code>. Note that we don't terminate\n      expressions with <code>;;</code> here, since it's not\n      required outside the toplevel.\n    </blockquote>")))
 (idp6288288
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've played with the basic features of the language via\n      <code>utop</code>. Now we'll show how to create a simple\n      standalone program. In particular, we'll create a program that\n      sums up a list of numbers read in from the standard input.\n    </blockquote>")))
 (idp6285520
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The or operator, <code>||</code> short-circuits in a\n        similar way to <code>&amp;&amp;</code>.\n      </blockquote>")))
 (idp6281472
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As a side note, the above code takes advantage of the fact that\n        <code>&amp;&amp;</code>, OCaml's and operator,\n        short-circuits. In particular, in an expression of the form\n        <code>&lt;expr1&gt; &amp;&amp; &lt;expr2&gt;</code>,\n        <code>&lt;expr2&gt;</code> will only be evaluated if\n        <code>&lt;expr1&gt;</code> evaluated to true. Were it not\n        for that, then the above function would result in an\n        out-of-bounds error. Indeed, we can trigger that out-of-bounds\n        error by rewriting the function to avoid the short-circuiting.\n      </blockquote>")))
 (idp6278944
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        OCaml also supports while loops, as shown in the following\n        function for finding the position of the first negative entry in\n        an array. Note that <code>while</code> (like\n        <code>for</code>) is also a keyword.\n      </blockquote>")))
 (idp6277856
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here's an example run of this code.\n      </blockquote>")))
 (idp6274848
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        From a syntactic perspective, you should note the keywords that\n        distinguish a for loop: <code>for</code>,\n        <code>to</code>, <code>do</code> and\n        <code>done</code>.\n      </blockquote>")))
 (idp6271664
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        OCaml also supports traditional imperative control-flow\n        constructs like for and while loops. Here, for example, is some\n        code for permuting an array that uses a for loop. We use the\n        <code>Random</code> module as our source of randomness.\n        <code>Random</code> starts with a default seed, but you\n        can call <code>Random.self_init</code> to choose a new\n        seed at random.\n      </blockquote>")))
 (idp6270096
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This isn't the most idiomatic (or the fastest) way to sum up a\n        list, but it shows how you can use a ref in place of a mutable\n        variable.\n      </blockquote>")))
 (idp6267360
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Even though a <code>ref</code> is just another record\n        type, it's important because it is the standard way of\n        simulating the traditional mutable variables you'll find in most\n        languages. For example, we can sum over the elements of a list\n        imperatively by calling <code>List.iter</code> to call a\n        simple function on every element of a list, using a ref to\n        accumulate the results.\n      </blockquote>")))
 (idp6264224
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The <code>'a</code> before the ref indicates that the\n        <code>ref</code> type is polymorphic, in the same way that\n        lists are polymorphic, meaning it can contain values of any\n        type. The parentheses around <code>!</code> and\n        <code>:=</code> are needed because these are operators,\n        rather than ordinary functions.\n      </blockquote>")))
 (idp6262288
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        There's nothing magical with these operators either. You can\n        completely reimplement the <code>ref</code> type and all\n        of these operators in just a few lines of code.\n      </blockquote>")))
 (idp6260400
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        There are a handful of useful functions and operators defined\n        for <code>ref</code>s to make them more convenient to work\n        with.\n      </blockquote>")))
 (idp6257168
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We can create a single mutable value by using a\n        <code>ref</code>. The <code>ref</code> type comes\n        pre-defined in the standard library, but there's nothing really\n        special about it. It's just a record type with a single mutable\n        field called <code>contents</code>.\n      </blockquote>")))
 (idp6252576
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here's an example of <code>create</code> and\n        <code>update</code> in action. Note that this code uses\n        <code>List.iter</code>, which calls the function\n        <code>~f</code> on each element of the provided list.\n      </blockquote>")))
 (idp6251936
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note the use in the above code of single semi-colons to sequence\n        operations. When we were working purely functionally, this\n        wasn't necessary, but you start needing it when you're writing\n        imperative code.\n      </blockquote>")))
 (idp6248304
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>create</code> returns a\n        <code>running_sum</code> corresponding to the empty set,\n        and <code>update rsum x</code> changes\n        <code>rsum</code> to reflect the addition of\n        <code>x</code> to its set of samples, by updating the\n        number of samples, the sum, and the sum of squares.\n      </blockquote>")))
 (idp6246512
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We also need functions to create and update\n        <code>running_sum</code>s:\n      </blockquote>")))
 (idp6244256
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We use the function <code>float</code> above, which is a\n        convenient equivalent of <code>Float.of_int</code> which\n        is provided by the <code>Pervasives</code> library.\n      </blockquote>")))
 (idp6242144
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The fields in <code>running_sum</code> are designed to be\n        easy to extend incrementally, and sufficient to compute means\n        and standard deviations, as shown below. Note that there are two\n        let-bindings in a row without a double semicolon between them.\n        That's because the double semicolon is required only to tell\n        utop to process the input, not to separate two expressions.\n      </blockquote>")))
 (idp6240656
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The array is an important mutable data structure, but it's not\n        the only one. Records, which are immutable by default, can have\n        some of their fields explicitly declared as mutable. Here's a\n        small example of a data structure for storing a running\n        statistical summary of a collection of numbers. Here's the basic\n        data structure:\n      </blockquote>")))
 (idp6235616
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The <code>unit</code> type that we see above is\n        interesting in that it has only one possible value, written\n        <code>()</code>. This means that a value of type\n        <code>unit</code> doesn't convey any information, and thus\n        tends to be used as a placeholder. Thus, we use\n        <code>unit</code> for the return value of an operation\n        like setting a mutable field that communicates by side effect\n        rather than by returning a value. It's also used as the argument\n        to functions that don't require an input value. This is similar\n        to the role that <code>void</code> plays in languages like\n        C and Java.\n      </blockquote>")))
 (idp6233152
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        the <code>.(i)</code> syntax is used to refer to an\n        element of an array, and the <code>&lt;-</code> syntax is\n        for modification. Because the elements of the array are counted\n        starting at zero, element <code>.(2)</code> is the third\n        element.\n      </blockquote>")))
 (idp6231632
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Perhaps the simplest mutable data structure in OCaml is the\n        array. Arrays in OCaml are very similar to arrays in other\n        languages like C: indexing starts at 0, and accessing or\n        modifying an array element is a constant-time operation. Arrays\n        are more compact in terms of memory utilization than most other\n        data structures in OCaml, including lists. Here's an example:\n      </blockquote>")))
 (idp6230032
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Functional code is the default in OCaml, with variable bindings\n      and most data structures being immutable. But OCaml also has\n      excellent support for imperative programming, including mutable\n      data structures like arrays and hash tables, and control-flow\n      constructs like for and while loops.\n    </blockquote>")))
 (idp6227504
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The code we've written so far has been almost entirely\n      <span><em>pure</em></span> or <span><em>functional</em></span>,\n      which roughly speaking means that the code in question doesn't\n      modify variables or values as part of its execution. Indeed,\n      almost all of the data structures we've encountered are\n      <span><em>immutable</em></span>, meaning there's no way in the\n      language to modify them at all. This is a quite different style\n      from <span><em>imperative</em></span> programming, where\n      computations are structured as sequences of instructions that\n      operate by making modifications to the state of the program.\n    </blockquote>")))
 (idp6224016
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The purpose of <code>List.exists</code> is to check if there\n      are any elements of the list in question on which the provided\n      function evaluates to <code>true</code>. In this case, we're\n      using <code>List.exists</code> to check if there is a scene\n      element within which our point resides.\n    </blockquote>")))
 (idp6221200
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We also made our first use of an <span><em>anonymous\n      function</em></span> in the call to <code>List.exists</code>.\n      Anonymous functions are declared using the <code>fun</code>\n      keyword, and don't need to be explicitly named. Such functions are\n      common in OCaml, particularly when using iteration functions like\n      <code>List.exists</code>.\n    </blockquote>")))
 (idp6216784
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      You might at this point notice that the use of\n      <code>match</code> here is reminiscent of how we used\n      <code>match</code> with <code>option</code> and\n      <code>list</code>. This is no accident:\n      <code>option</code> and <code>list</code> are really\n      just examples of variant types that happen to be important enough\n      to be defined in the standard library (and in the case of lists,\n      to have some special syntax).\n    </blockquote>")))
 (idp6214928
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Here's how we might write a function for testing whether a point\n      is in the interior of some element of a list of\n      <code>scene_element</code>s.\n    </blockquote>")))
 (idp6211248
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The <code>|</code> character separates the different cases\n      of the variant (the first <code>|</code> is optional), and\n      each case has a capitalized tag, like <code>Circle</code>,\n      <code>Rect</code> and <code>Segment</code>, to\n      distinguish that case from the others.\n    </blockquote>")))
 (idp6209488
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now, imagine that you want to combine multiple objects of these\n      types together as a description of a multi-object scene. You need\n      some unified way of representing these objects together in a\n      single type. One way of doing this is using a\n      <span><em>variant</em></span> type:\n    </blockquote>")))
 (idp6207552
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      And we can of course include our newly defined types as components\n      in larger types. Here, for example, are some types for modeling\n      different geometric objects that contain values of type\n      <code>point2d</code>.\n    </blockquote>")))
 (idp6206384
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can also use dot-notation for accessing record fields:\n    </blockquote>")))
 (idp6204576
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can write this more tersely using what's called <span><em>field\n      punning</em></span>. In particular, when the name of the field and\n      the name of the variable it is bound to in the match coincide, we\n      don't have to write them both down. Using this, our magnitude\n      function can be rewritten as follows.\n    </blockquote>")))
 (idp6201696
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The pattern match here binds the variable <code>x_pos</code>\n      to the value contained in the <code>x</code> field, and the\n      variable <code>y_pos</code> to the value in the\n      <code>y</code> field.\n    </blockquote>")))
 (idp6200496
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      And we can get access to the contents of these types using pattern\n      matching:\n    </blockquote>")))
 (idp6198192
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>point2d</code> is a <span><em>record</em></span> type,\n      which you can think of as a tuple where the individual fields are\n      named, rather than being defined positionally. Record types are\n      easy enough to construct:\n    </blockquote>")))
 (idp6196816
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've only looked at data structures that were predefined\n      in the language, like lists and tuples. But OCaml also allows us\n      to define new datatypes. Here's a toy example of a datatype\n      representing a point in 2-dimensional space:\n    </blockquote>")))
 (idp6192432
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In OCaml, however, missing values are explicit. A value of type\n        <code>string * string</code> always actually contains two\n        well-defined values of type <code>string</code>. If you\n        want to allow, say, the first of those to be absent, then you\n        need to change the type to\n        <code>string option * string</code>. As we'll see in\n        <a href=\"error-handling.html\">Chapter\194\1607, <i>Error Handling</i></a>, this explicitness\n        allows the compiler to provide a great deal of help in making\n        sure you're correctly handing the possibility of missing data.\n      </blockquote>")))
 (idp6190512
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Options are important because they are the standard way in OCaml\n        to encode a value that might not be there; there's no such thing\n        as a <code>NullPointerException</code> in OCaml. This is\n        different from most other languages, including Java and C#,\n        where most if not all datatypes are\n        <span><em>nullable</em></span>, meaning that, whatever their type\n        is, any given value also contains the possibility of being a\n        null value. In such languages, null is lurking everywhere.\n      </blockquote>")))
 (idp6189152
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This kind of nested let binding is a common way of building up a\n        complex expression, with each <code>let</code> naming some\n        component, before combining them in one final expression.\n      </blockquote>")))
 (idp6187920
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We can also have multiple let statements in a row, each one\n        adding a new variable binding to what came before.\n      </blockquote>")))
 (idp6186080
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note that the scope of the let binding is terminated by the\n        double-semicolon, so the value of <code>x</code> is no\n        longer available.\n      </blockquote>")))
 (idp6181536
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>log_entry</code> was our first use of\n        <code>let</code> to define a new variable within the body\n        of a function. A <code>let</code> bounded with an\n        <code>in</code> can be used to introduce a new binding\n        within any local scope, including a function body. The\n        <code>in</code> marks the beginning of the scope within\n        which the new variable can be used. Thus, we could write:\n      </blockquote>")))
 (idp6176544
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This example uses Core's <code>Time</code> module for\n        dealing with time as well as the <code>^</code> operator\n        for concatenating strings. The concatenation operator is\n        provided as part of the <code>Pervasives</code> module\n        which is automatically opened in every OCaml program.\n      </blockquote>")))
 (idp6174096
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        To examine the contents of an option, we use pattern matching,\n        as we did with tuples and lists. Consider the following function\n        for creating a log entry string given an optional time and a\n        message. If no time is provided (<span><em>i.e.</em></span>, if\n        the time is <code>None</code>), the current time is\n        computed and used in its place.\n      </blockquote>")))
 (idp6169168
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The function <code>divide</code> either returns\n        <code>None</code>, if the divisor is zero, or\n        <code>Some</code> of the result of the division,\n        otherwise. <code>Some</code> and <code>None</code>\n        are constructors, like <code>::</code> and\n        <code>[]</code> for lists, which let you build optional\n        values. You can think of an option as a specialized list that\n        can only have zero or one element.\n      </blockquote>")))
 (idp6167888
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Another common data structure in OCaml is the option. An option\n        is used to express that a value might or might not be present.\n        For example,\n      </blockquote>")))
 (idp6165344
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In the last few examples, our list processing code involved a\n          lot of recursive functions. In practice, this isn't usually\n          necessary. Most of the time, you'll find yourself happy to use\n          the iteration functions found in the <code>List</code>\n          module. But it's good to know how to use recursion when you\n          need to do something new.\n        </blockquote>")))
 (idp6161088
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Note that this code used another variant of the list pattern,\n          <code>[hd]</code>, to match a list with a single\n          element. We can do this to match a list with any fixed number\n          of elements, <span><em>e.g.</em></span>,\n          <code>[x;y;z]</code> will match any list with exactly\n          three elements, and will bind those elements to the variables\n          <code>x</code>, <code>y</code> and\n          <code>z</code>.\n        </blockquote>")))
 (idp6159648
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Again, the first arm of the match is the base case, and the\n          second is the inductive. Unfortunately, this code has a\n          problem, as is indicated by the warning message. In particular\n          we don't handle one-element lists. We can fix this warning by\n          adding another case to the match.\n        </blockquote>")))
 (idp6158400
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We can introduce more complicated list patterns as well.\n          Here's a function for removing sequential duplicates.\n        </blockquote>")))
 (idp6157856
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          This suggests a reasonable mental model for what OCaml is\n          actually doing to evaluate a recursive function.\n        </blockquote>")))
 (idp6155888
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Logically, you can think of the evaluation of a simple\n          recursive function like <code>sum</code> almost as if it\n          were a mathematical equation whose meaning you were unfolding\n          step by step.\n        </blockquote>")))
 (idp6152768
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Following the common OCaml idiom, we use <code>hd</code>\n          to refer to the head of the list and <code>tl</code> to\n          refer to the tail. Note that we had to use the\n          <code>rec</code> keyword to allow <code>sum</code>\n          to refer to itself. As you might imagine, the base case and\n          inductive case are different arms of the match.\n        </blockquote>")))
 (idp6151408
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          When writing recursive list functions, this separation between\n          the base cases and the inductive cases is often done using\n          pattern matching. Here's a simple example of a function that\n          sums the elements of a list.\n        </blockquote>")))
 (idp6149824
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Recursive functions, or, functions that call themselves, are\n          an important technique in OCaml and in any functional\n          language. The typical approach to designing a recursive\n          function is to separate the logic into a set of <span><em>base\n          cases</em></span>, that can be solved directly, and a set of\n          <span><em>inductive cases</em></span>, where the function\n          breaks the problem down into smaller pieces and then calls\n          itself to solve those smaller problems.\n        </blockquote>")))
 (idp6145568
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The first pattern, <code>first :: the_rest</code>,\n          covers the case where <code>languages</code> has at\n          least one element, since every list except for the empty list\n          can be written down with one or more <code>::</code>'s.\n          The second pattern, <code>[]</code>, matches only the\n          empty list. These cases are exhaustive, since every list is\n          either empty, or has at least one element, a fact which is\n          verified by the compiler.\n        </blockquote>")))
 (idp6143024
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The above code also includes our first comment. OCaml comments\n          are bounded by <code>(*</code> and\n          <code>*)</code>, and can be nested arbitrarily and cover\n          multiple lines. There's no equivalent of C++-style single line\n          comments that are prefixed by <code>//</code>.\n        </blockquote>")))
 (idp6140608
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here's a new version of\n          <code>my_favorite_language</code> that uses\n          <code>match</code> and doesn't trigger a compiler\n          warning.\n        </blockquote>")))
 (idp6137216
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          A <code>match</code> statement is a kind of juiced-up\n          version of the switch statement found in <code>C</code>\n          and <code>Java</code>. It essentially lets you list a\n          sequence of patterns (separated by <code>|</code>'s. The\n          one before the first case is optional), and the compiler then\n          dispatches to the code following the first matching pattern.\n          As we've already seen, the pattern can mint new variables that\n          correspond to sub-structures of the value being matched.\n        </blockquote>")))
 (idp6136032
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          You can avoid these warnings, and more importantly make sure\n          that your code actually handles all of the possible cases, by\n          using a <code>match</code> statement instead.\n        </blockquote>")))
 (idp6133168
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          As you can see, however, the toplevel did not like this\n          definition, and spit out a warning indicating that the pattern\n          is not exhaustive. This means that there are values of the\n          type in question that won't be captured by the pattern. The\n          warning even gives an example of a value that doesn't match\n          the provided pattern, in particular, <code>[]</code>,\n          the empty list. If we try to run\n          <code>my_favorite_language</code>, we'll see that it\n          works on non-empty list, and fails on empty ones.\n        </blockquote>")))
 (idp6129328
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          By pattern matching using <code>::</code>, we've\n          isolated and named the first element of the list\n          (<code>my_favorite</code>) and the remainder of the list\n          (<code>the_rest</code>). If you know Lisp or Scheme,\n          what we've done is the equivalent of using the functions\n          <code>car</code> and <code>cdr</code> to isolate\n          the first element of a list and the remainder of that list.\n        </blockquote>")))
 (idp6126832
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The elements of a list can be accessed through pattern\n          matching. List patterns are based on the two list\n          constructors, <code>[]</code> and <code>::</code>.\n          Here's a simple example.\n        </blockquote>")))
 (idp6124160
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          It's important to remember that, unlike <code>::</code>,\n          this is not a constant-time operation. Concatenating two lists\n          takes time proportional to the length of the first list.\n        </blockquote>")))
 (idp6120960
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The <code>::</code> operator can only be used for adding\n          one element to the front of the list, with the list\n          terminating at <code>[]</code>, the empty list. There's\n          also a list concatenation operator, <code>@</code>,\n          which can concatenate two lists.\n        </blockquote>")))
 (idp6117728
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The bracket notation for lists is really just syntactic sugar\n          for <code>::</code>. Thus, the following declarations\n          are all equivalent. Note that <code>[]</code> is used to\n          represent the empty list, and that <code>::</code> is\n          right-associative.\n        </blockquote>")))
 (idp6117072
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          to allocate a tuple of integers. This is generally considered\n          poor style and should be avoided.\n        </blockquote>")))
 (idp6115824
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          This example uncovers the fact that commas create a tuple,\n          even if there are no surrounding parens. So, we can write:\n        </blockquote>")))
 (idp6115280
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In particular, rather than a list of three strings, what we\n          have is a singleton list containing a three-tuple of strings.\n        </blockquote>")))
 (idp6113840
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Unlike many other languages, OCaml uses semicolons to separate\n          list elements in lists rather than commas. Commas, instead,\n          are used for separating elements in a tuple. If you try to use\n          commas instead, you'll see that your code compiles, but\n          doesn't do quite what you might expect.\n        </blockquote>")))
 (idp6111952
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here, we're creating a new and extended list, not changing the\n          list we started with, as you can see below.\n        </blockquote>")))
 (idp6110048
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In addition to constructing lists using brackets, we can use\n          the operator <code>::</code> for adding elements to the\n          front of a list.\n        </blockquote>")))
 (idp6107552
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We'll learn more about labeled arguments and why they're\n          important in\n          <a href=\"variables-and-functions.html\">Chapter\194\1602, <i>Variables and Functions</i></a>.\n        </blockquote>")))
 (idp6104576
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Notably, the function passed to <code>List.map</code> is\n          passed under a <span><em>labeled argument</em></span>\n<code>~f</code>. Labeled arguments are specified by name\n          rather than by position, and thus allow you to change the\n          order in which arguments are presented to a function without\n          changing its behavior, as you can see here.\n        </blockquote>")))
 (idp6103328
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>List.map</code> takes two arguments: a list and a\n          function for transforming the elements of that list. It\n          returns a new list with the transformed elements, and does not\n          modify the original list.\n        </blockquote>")))
 (idp6102080
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here's something a little more complicated. We can compute the\n          list of the lengths of each language as follows.\n        </blockquote>")))
 (idp6100112
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Core comes with a <code>List</code> module that has a\n          rich collection of functions for working with lists. We can\n          access values from within a module by using dot-notation. For\n          example, this is how we compute the length of a list.\n        </blockquote>")))
 (idp6097392
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note that you can't mix elements of different types in the same\n        list, unlike tuples.\n      </blockquote>")))
 (idp6096080
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Where tuples let you combine a fixed number of items,\n        potentially of different types, lists let you hold any number of\n        items of the same type. Consider the following example.\n      </blockquote>")))
 (idp6094496
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This is just a first taste of pattern matching. Pattern matching\n        is a pervasive tool in OCaml, and as you'll see, it has\n        surprising power.\n      </blockquote>")))
 (idp6093392
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The <code>**</code> operator used above is for raising a\n        floating-point number to a power.\n      </blockquote>")))
 (idp6091344
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Pattern matching can also show up in function arguments. Here's\n        a function for computing the distance between two points on the\n        plane, where each point is represented as a pair of\n        <code>float</code>s. The pattern matching syntax lets us\n        get at the values we need with a minimum of fuss.\n      </blockquote>")))
 (idp6090832
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note that the same syntax is used both for constructing and for\n        pattern matching on tuples.\n      </blockquote>")))
 (idp6086992
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here, the <code>(x,y)</code> on the left-hand side of the\n        <code>let</code> binding is the pattern. This pattern lets\n        us mint the new variables <code>x</code> and\n        <code>y</code>, each bound to different components of the\n        value being matched, which can now be used in subsequent\n        expressions.\n      </blockquote>")))
 (idp6085760
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        You can extract the components of a tuple using OCaml's pattern\n        matching syntax, as shown below.\n      </blockquote>")))
 (idp6082688
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        (For the mathematically inclined, the <code>*</code>\n        character is used because the set of all pairs of type\n        <code>t * s</code> corresponds to the Cartesian product of\n        the set of elements of type <code>t</code> and the set of\n        elements of type <code>s</code>.)\n      </blockquote>")))
 (idp6078688
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        So far we've encountered a handful of basic types like\n        <code>int</code>, <code>float</code> and\n        <code>string</code> as well as function types like\n        <code>string -&gt; int</code>. But we haven't yet talked\n        about any data structures. We'll start by looking at a\n        particularly simple data structure, the tuple. A tuple is an\n        ordered collection of values that can each be of different type.\n        You can create a tuple by joining values together with a comma.\n      </blockquote>")))
 (idp6074592
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The distinction here is that type errors will stop you whether\n        or not the offending code is ever actually executed. Merely\n        defining <code>add_potato</code> is an error, whereas\n        <code>is_a_multiple</code> only fails when it's called,\n        and then, only when it's called with an input that triggers the\n        exception.\n      </blockquote>")))
 (idp6072112
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        are compile-time errors (because <code>+</code> requires\n        that both its arguments be of type <code>int</code>),\n        whereas errors that can't be caught by the type system, like\n        division by zero, lead to runtime exceptions.\n      </blockquote>")))
 (idp6070800
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Working in the toplevel somewhat obscures the difference between\n        run time and compile time errors, but that difference is still\n        there. Generally, type errors, like this one:\n      </blockquote>")))
 (idp6070080
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        There's a big difference in OCaml (and really in any compiled\n        language) between errors that are caught at compile time and\n        those that are caught at run time. It's better to catch errors\n        as early as possible in the development process, and compilation\n        time is best of all.\n      </blockquote>")))
 (idp6064736
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In this example, <code>big_number</code> requires that\n        <code>'a</code> be instantiated as <code>int</code>,\n        whereas <code>&quot;short&quot;</code> and\n        <code>&quot;loooooong&quot;</code> require that\n        <code>'a</code> be instantiated as\n        <code>string</code>, and they can't both be right at the\n        same time.\n      </blockquote>")))
 (idp6060320
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Both <code>long_string</code> and\n        <code>big_number</code> are functions, and each is passed\n        to <code>first_if_true</code> with two other arguments of\n        the appropriate type (strings in the first example, and integers\n        in the second). But we can't mix and match two different\n        concrete types for <code>'a</code> in the same use of\n        <code>first_if_true</code>.\n      </blockquote>")))
 (idp6059232
  ((file a-guided-tour.html)
   (html "<blockquote>\n        As well as this.\n      </blockquote>")))
 (idp6057520
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The generic type of <code>first_if_true</code> allows us\n        to write this.\n      </blockquote>")))
 (idp6050128
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Indeed, if we look at the type returned by the toplevel, we see\n        that rather than choose a single concrete type, OCaml has\n        introduced a <span><em>type variable</em></span>\n<code>'a</code> to express that the type is generic. (You\n        can tell it's a type variable by the leading single-quote.) In\n        particular, the type of the <code>test</code> argument is\n        <code>('a -&gt; bool)</code>, which means that test is a\n        one-argument function whose return value is\n        <code>bool</code>, and whose argument could be of any type\n        <code>'a</code>. But, whatever type <code>'a</code>\n        is, it has to be the same as the type of the other two\n        arguments, <code>x</code> and <code>y</code>, and of\n        the return value of <code>first_if_true</code>. This kind\n        of genericity is called <span><em>parametric\n        polymorphism</em></span>, and is very similar to generics in C#\n        and Java.\n      </blockquote>")))
 (idp6042048
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>first_if_true</code> takes as its arguments a\n        function <code>test</code>, and two values,\n        <code>x</code> and <code>y</code>, where\n        <code>x</code> is to be returned if\n        <code>test x</code> evaluates to <code>true</code>,\n        and <code>y</code> otherwise. So what's the type of\n        <code>first_if_true</code>? There are no obvious clues\n        such as arithmetic operators or literals to tell you what the\n        type of <code>x</code> and <code>y</code> are. That\n        makes it seem like one could use\n        <code>first_if_true</code> on values of any type.\n      </blockquote>")))
 (idp6040800
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Sometimes, there isn't enough information to fully determine the\n        concrete type of a given value. Consider this function:\n      </blockquote>")))
 (idp6039136
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In the above, we've marked every argument to the function with\n        its type, with the final annotation indicating the type of the\n        return value. Such type annotations can be placed on any\n        expression in an OCaml program.\n      </blockquote>")))
 (idp6037424
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here's an annotated version of <code>sum_if_true</code>:\n      </blockquote>")))
 (idp6036464
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Over time, you'll build a rough intuition for how the OCaml\n        inference engine works, which makes it easier to reason through\n        your programs. You can make it easier to understand the types of\n        a given expression by adding explicit type annotations. These\n        annotations don't change the behavior of an OCaml program, but\n        they can serve as useful documentation, as well as catch\n        unintended type changes. They can also be helpful in figuring\n        out why a given piece of code fails to compile.\n      </blockquote>")))
 (idp6035328
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Together, that nails down the types of all the variables, which\n        determines the overall type of <code>sum_if_true</code>.\n      </blockquote>")))
 (idp6032816
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n            The fact that <code>+</code> returns\n            <code>int</code> implies that the return value of\n            <code>sum_if_true</code> must be int.\n          </blockquote>")))
 (idp6029552
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>test first</code> is used as the condition in an\n            <code>if</code> statement, so the return type of\n            <code>test</code> must be <code>bool</code>.\n          </blockquote>")))
 (idp6025040
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>test</code> is passed <code>first</code>\n            as an argument. Since <code>first</code> has type\n            <code>int</code>, the input type of\n            <code>test</code> must be <code>int</code>.\n          </blockquote>")))
 (idp6018480
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n            OCaml requires that both branches of an\n            <code>if</code> statement have the same type, so the\n            expression\n            <code>if test first then first else 0</code> requires\n            that <code>first</code> must be the same type as\n            <code>0</code>, and so <code>first</code> must\n            be of type <code>int</code>. Similarly, from\n            <code>if test second then second else 0</code> we can\n            infer that <code>second</code> has type\n            <code>int</code>.\n          </blockquote>")))
 (idp6016848
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As an example, let's walk through the process of inferring the\n        type of <code>sum_if_true</code>.\n      </blockquote>")))
 (idp6015760
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        OCaml determines the type of an expression using a technique\n        called <span><em>type inference</em></span>, by which it infers\n        the type of a given expression from the information it has about\n        the types of variables along with constraints that are implied\n        by the structure of the expression.\n      </blockquote>")))
 (idp6015152
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As the types we encounter get more complicated, you might ask\n        yourself how OCaml is able to figure them out, given that we\n        didn't write down any explicit type information.\n      </blockquote>")))
 (idp6011088
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Note that in the definition of <code>even</code> we used\n      <code>=</code> in two different ways: once as the part of\n      the let binding that separates the thing being defined from its\n      definition; and once as an equality test, when comparing\n      <code>x mod 2</code> to <code>0</code>. These are very\n      different operations despite the fact that they share some syntax.\n    </blockquote>")))
 (idp6009712
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      If we look at the inferred type signature in detail, we see that\n      the first argument is a function that takes an integer and returns\n      a boolean, and that the remaining two arguments are integers.\n      Here's an example of this function in action.\n    </blockquote>")))
 (idp6008336
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can also write functions that take other functions as\n      arguments. Here's an example of a function that takes three\n      arguments: a test function and two integer arguments. The function\n      returns the sum of the integers that pass the test.\n    </blockquote>")))
 (idp6005168
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The notation for the type-signature of a multi-argument function\n      may be a little surprising at first, but we'll explain where it\n      comes from when we get to function currying in\n      <a href=\"variables-and-functions.html#multi-argument-functions\">the section called \226\128\156Multi-argument functions\226\128\157</a>. For the\n      moment, think of the arrows as separating different arguments of\n      the function, with the type after the final arrow being the return\n      value. Thus, <code>int -&gt; int -&gt; float</code>\n      describes a function that takes two <code>int</code>\n      arguments and returns a <code>float</code>.\n    </blockquote>")))
 (idp6002560
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The above also happens to be our first use of modules. Here,\n      <code>Float.of_int</code> refers to the\n      <code>of_int</code> function contained in the\n      <code>Float</code> module. This is different from what you\n      might expect from an object-oriented language, where dot-notation\n      is typically used for accessing a method of an object. Note that\n      module names always start with a capital letter.\n    </blockquote>")))
 (idp5998576
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now that we're creating more interesting values like functions,\n      the types have gotten more interesting too.\n      <code>int -&gt; int</code> is a function type, in this case\n      indicating a function that takes an <code>int</code> and\n      returns an <code>int</code>. We can also write functions\n      that take multiple arguments. (Note that the following example\n      will not work if you haven't opened <code>Core.Std</code> as\n      was suggested earlier.)\n    </blockquote>")))
 (idp5994592
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Functions in OCaml are values like any other, which is why we use\n      the <code>let</code> keyword to bind a function to a\n      variable name, just as we use <code>let</code> to bind a\n      simple value like an integer to a variable name. When using\n      <code>let</code> to define a function, the first identifier\n      after the <code>let</code> is the function name, and each\n      subsequent identifier is a different argument to the function.\n      Thus, <code>square</code> is a function with a single\n      argument.\n    </blockquote>")))
 (idp5992800
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The <code>let</code> syntax can also be used to define a\n      function.\n    </blockquote>")))
 (idp5991264
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The error messages here are a little confusing, but they'll make\n      more sense as you learn more about the language.\n    </blockquote>")))
 (idp5990096
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The following examples, however, are not legal.\n    </blockquote>")))
 (idp5988992
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Note that by default, <code>utop</code> doesn't bother to\n      print out variables starting with an underscore.\n    </blockquote>")))
 (idp5986368
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Note that there are some constraints on what identifiers can be\n      used for variable names. Punctuation is excluded, except for\n      <code>_</code> and <code>'</code>, and variables must\n      start with a lowercase letter or an underscore. Thus, these are\n      legal:\n    </blockquote>")))
 (idp5982752
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      After a new variable is created, the toplevel tells us the name of\n      the variable (<code>x</code> or <code>y</code>), in\n      addition to its type (<code>int</code>) and value\n      (<code>7</code> or <code>14</code>).\n    </blockquote>")))
 (idp5980544
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can also create a variable to name the value of a given\n      expression, using the <code>let</code> keyword. This is\n      known as a <span><em>let binding</em></span>.\n    </blockquote>")))
 (idp5972608
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          OCaml carefully distinguishes between\n          <code>float</code>, the type for floating point numbers\n          and <code>int</code>, the type for integers. The types\n          have different literals (<code>6.</code> instead of\n          <code>6</code>) and different infix operators\n          (<code>+.</code> instead of <code>+</code>), and\n          OCaml doesn't automatically cast between these types. This can\n          be a bit of a nuisance, but it has its benefits, since it\n          prevents some kinds of bugs that arise in other languages due\n          to unexpected differences between the behavior of\n          <code>int</code> and <code>float</code>. For\n          example, in many languages, <code>1 / 3</code> is\n          <code>0</code>, but <code>1 / 3.0</code> is a\n          third. OCaml requires you to be explicit about which operation\n          you're doing.\n        </blockquote>")))
 (idp5971584
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          OCaml allows you to place underscores in the middle of your\n          integer literals, to improve readability. Note that\n          underscores can be placed anywhere within a number, not just\n          every three digits.\n        </blockquote>")))
 (idp5970576
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Function arguments are separated by spaces instead of by\n          parentheses and commas, which is more like the UNIX shell than\n          it is like traditional programming languages like C or Java.\n        </blockquote>")))
 (idp5969664
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          After evaluating an expression, the toplevel prints first the\n          result and then the type of the result.\n        </blockquote>")))
 (idp5967392
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We needed to type <code>;;</code> in order to tell the\n          toplevel that it should evaluate an expression. This is a\n          peculiarity of the toplevel that is not required in standalone\n          programs (though it is sometimes helpful to include\n          <code>;;</code> to improve OCaml's error reporting).\n        </blockquote>")))
 (idp5966320
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      By and large, this is pretty similar to what you'd find in any\n      programming language, but there are a few things that jump right\n      out at you.\n    </blockquote>")))
 (idp5965312
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now let's try a few simple numerical calculations.\n    </blockquote>")))
 (idp5964768
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      This makes the definitions in Core available, and is required for\n      many of the examples in the tour and in the remainder of the book.\n    </blockquote>")))
 (idp5963136
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The first thing you need to do when using Core is to open\n      <code>Core.Std</code>.\n    </blockquote>")))
 (idp5961184
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    Before getting started, make sure you have a working OCaml\n    installation and toplevel so you can try out the examples as you\n    read through the chapter. Look at\n    <a href=\"installation.html\">Appendix\194\160A, <i>Installation</i></a> for details.\n  </blockquote>")))
 (idp5958032
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    Throughout the book we're going to use Core, a more full-featured\n    and capable replacement for OCaml's standard library. We'll also use\n    <code>utop</code>, a shell that lets you type in expressions\n    and evaluate them interactively. <code>utop</code> is an\n    easier-to-use version of OCaml's standard toplevel (which you can\n    start by typing <code>ocaml</code> at the command line). These\n    instructions will assume you're using <code>utop</code>\n    specifically.\n  </blockquote>")))
 (idp5957376
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    This chapter gives an overview of OCaml by walking through a series\n    of small examples that cover most of the major features of the\n    language. This should provide a sense of what OCaml can do, without\n    getting too deep into any one topic.\n  </blockquote>"))))
