((idp7844480
  ((file variants.html)
   (html
    "<blockquote>\n        Variants are most problematic exactly where you take full\n        advantage of their power; in particular, when you take advantage\n        of the ability of polymorphic variant types to overlap in the\n        tags they support. This ties into OCaml's support for subtyping.\n        As we'll discuss further when we cover objects in\n        <a href=\"object-oriented-programming.html\">Chapter\194\16014, <i>Object Oriented Programming</i></a>,\n        subtyping brings in a lot of complexity, and most of the time,\n        that's complexity you want to avoid.\n      </blockquote>")))
 (idp7843520
  ((file variants.html)
   (html
    "<blockquote>\n        Probably the safest and most common use-case for polymorphic\n        variants is for cases where ordinary variants would be\n        sufficient, but are syntactically too heavyweight. For example,\n        you often want to create a variant type for encoding the inputs\n        or outputs to a function, where it's not worth declaring a\n        separate type for it. Polymorphic variants are very useful here,\n        and as long as there are type annotations that constrain these\n        to have explicit, exact types, this tends to work well.\n      </blockquote>")))
 (idp7842928
  ((file variants.html)
   (html
    "<blockquote>\n        All that said, polymorphic variants are still a useful and\n        powerful feature, but it's worth understanding their\n        limitations, and how to use them sensibly and modestly.\n      </blockquote>")))
 (idp7841456
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Complexity:</em></span> As we've seen, the typing\n            rules for polymorphic variants are a lot more complicated\n            than they are for regular variants. This means that heavy\n            use of polymorphic variants can leave you scratching your\n            head trying to figure out why a given piece of code did or\n            didn't compile. It can also lead to absurdly long and hard\n            to decode error messages.\n          </blockquote>")))
 (idp7840080
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Error-finding:</em></span> Polymorphic variants are\n            type-safe, but the typing discipline that they impose is, by\n            dint of its flexibility, less likely to catch bugs in your\n            program.\n          </blockquote>")))
 (idp7838624
  ((file variants.html)
   (html
    "<blockquote>\n<span><em>Efficiency:</em></span> This isn't a huge effect,\n            but polymorphic variants are somewhat heavier than regular\n            variants, and OCaml can't generate code for matching on\n            polymorphic variants that is quite as efficient as what is\n            generated for regular variants.\n          </blockquote>")))
 (idp7837504
  ((file variants.html)
   (html
    "<blockquote>\n        In reality, regular variants are the more pragmatic choice most\n        of the time. That's because the flexibility of polymorphic\n        variants comes at a price. Here are some of the downsides.\n      </blockquote>")))
 (idp7836864
  ((file variants.html)
   (html
    "<blockquote>\n        At first glance, polymorphic variants look like a strict\n        improvement over ordinary variants. You can do everything that\n        ordinary variants can do, plus it's more flexible and more\n        concise. What's not to like?\n      </blockquote>")))
 (idp7835264
  ((file variants.html)
   (html
    "<blockquote>\n        This is useful when you want to narrow down to a type whose\n        definition is long, and you don't want the verbosity of writing\n        the tags down explicitly in the match.\n      </blockquote>")))
 (idp7832784
  ((file variants.html)
   (html
    "<blockquote>\n        Once we have type definitions at our disposal, we can revisit\n        the question of how we write the pattern-match that narrows the\n        type. In particular, we can explicitly use the type name as part\n        of the pattern match, by prefixing it with a\n        <code>#</code>.\n      </blockquote>")))
 (idp7830544
  ((file variants.html)
   (html
    "<blockquote>\n        In particular, the compiler will complain that the\n        <code>`Grey</code> case as unused.\n      </blockquote>")))
 (idp7828800
  ((file variants.html)
   (html
    "<blockquote>\n        If we add an explicit type annotation to the code itself (rather\n        than just in the mli), then the compiler has enough information\n        to warn us.\n      </blockquote>")))
 (idp7824480
  ((file variants.html)
   (html
    "<blockquote>\n        In this case, a change was made to\n        <code>extended_color_to_int</code>, to add special-case\n        handling for the color gray, rather than using\n        <code>color_to_int</code>. Unfortunately,\n        <code>Gray</code> was misspelled as\n        <code>Grey</code>, and the compiler didn't complain. It\n        just inferred a bigger type for\n        <code>extended_color_to_int</code>, which happens to be\n        compatible with the <code>mli</code>, and so it compiles\n        without incident.\n      </blockquote>")))
 (idp7820288
  ((file variants.html)
   (html
    "<blockquote>\n        Here, <code>extended_color</code> is defined as an\n        explicit extension of <code>color</code>. Also, notice\n        that we defined all of these types as exact variants. Now here's\n        what the implementation might look like.\n      </blockquote>")))
 (idp7817376
  ((file variants.html)
   (html
    "<blockquote>\n        The code here is fragile in a different way, in that it's too\n        vulnerable to typos. Let's consider how we might write this code\n        as a proper library, including a proper <code>mli</code>.\n        The interface might look something like this:\n      </blockquote>")))
 (idp7816640
  ((file variants.html)
   (html
    "<blockquote>\n        With ordinary variants, such a typo would have been caught as an\n        unknown constructor. As a general matter, one should be wary\n        about mixing catch-all cases and polymorphic variants.\n      </blockquote>")))
 (idp7812912
  ((file variants.html)
   (html
    "<blockquote>\n        Catch-all cases are error-prone even with ordinary variants, but\n        they are especially so with polymorphic variants. That's because\n        you have no way of bounding what tags your function might have\n        to deal with. Such code is particularly vulnerable to typos. For\n        instance, if code that uses\n        <code>is_positive_permissive</code> passes in\n        <code>Float</code> misspelled as <code>Floot</code>,\n        the erroneous code will compile without complaint.\n      </blockquote>")))
 (idp7810208
  ((file variants.html)
   (html
    "<blockquote>\n        As we saw with the definition of <code>is_positive</code>,\n        a match statement can lead to the inference of an upper bound on\n        a variant type, limiting the possible tags to those that can be\n        handled by the match. If we add a catch-all case to our match\n        statement, we end up with a function with a lower bound.\n      </blockquote>")))
 (idp7807168
  ((file variants.html)
   (html
    "<blockquote>\n        The above code is more delicately balanced than one might\n        imagine. In particular, if we use a catch-all case instead of an\n        explicit enumeration of the cases, the type is no longer\n        narrowed, and so compilation fails.\n      </blockquote>")))
 (idp7799456
  ((file variants.html)
   (html
    "<blockquote>\n        Now we can try writing <code>extended_color_to_int</code>.\n        The key issue with this code is that\n        <code>extended_color_to_int</code> needs to invoke\n        <code>color_to_int</code> with a narrower type,\n        <span><em>i.e.</em></span>, one that includes fewer tags. Written\n        properly, this narrowing can be done via a pattern match. In\n        particular, in the following code, the type of the variable\n        <code>color</code> includes only the tags\n        <code>`Basic</code>, <code>`RGB</code> and\n        <code>`Gray</code>, and not <code>`RGBA</code>.\n      </blockquote>")))
 (idp7795312
  ((file variants.html)
   (html
    "<blockquote>\n        What we essentially want to do is to share constructors between\n        two different types, and polymorphic variants let us do this.\n        First, let's rewrite <code>basic_color_to_int</code> and\n        <code>color_to_int</code> using polymorphic variants. The\n        translation here is entirely straightforward.\n      </blockquote>")))
 (idp7792896
  ((file variants.html)
   (html
    "<blockquote>\n        The problem is that <code>extended_color</code> and\n        <code>color</code> are in the compiler's view distinct and\n        unrelated types. The compiler doesn't, for example, recognize\n        any equality between the <code>Basic</code> constructor in\n        the two types.\n      </blockquote>")))
 (idp7790896
  ((file variants.html)
   (html
    "<blockquote>\n        This looks reasonable enough, but it leads to the following type\n        error.\n      </blockquote>")))
 (idp7787744
  ((file variants.html)
   (html
    "<blockquote>\n        We want to write a function\n        <code>extended_color_to_int</code>, that works like\n        <code>color_to_int</code> for all of the old kinds of\n        colors, with new logic only for handling colors that include an\n        alpha channel. We might think we could write the function to do\n        this as follows.\n      </blockquote>")))
 (idp7785776
  ((file variants.html)
   (html
    "<blockquote>\n        To see how to use polymorphic variants in practice, let's go\n        back to the terminal color example that we discussed earlier.\n        Imagine that we have a new terminal type that adds yet more\n        colors, say, by adding an alpha channel so you can specify\n        translucent colors. We could model this extended set of colors\n        as follows, using an ordinary variant.\n      </blockquote>")))
 (idp7781168
  ((file variants.html)
   (html
    "<blockquote>\n      Here, the inferred type states that the tags can be no more than\n      <code>`Float</code>, <code>`Int</code> and\n      <code>`Not_a_number</code>, and must contain at least\n      <code>`Float</code> and <code>`Int</code>. As you can\n      already start to see, polymorphic variants can lead to fairly\n      complex inferred types.\n    </blockquote>")))
 (idp7779264
  ((file variants.html)
   (html
    "<blockquote>\n      Perhaps surprisingly, we can also create polymorphic variant types\n      that have different lower and upper bounds.\n    </blockquote>")))
 (idp7777584
  ((file variants.html)
   (html
    "<blockquote>\n      Most of the time, the inference system is able to infer\n      polymorphic variant types that work without any extra help from\n      the user. In some cases, however, OCaml can't figure out how to\n      make the types work on its own, and requires some extra\n      annotations.\n    </blockquote>")))
 (idp7773808
  ((file variants.html)
   (html
    "<blockquote>\n      We can think of these <code>&lt;</code> and\n      <code>&gt;</code> markers as indications of upper and lower\n      bounds. If the same type is both an upper and a lower bound, we\n      end up with an <span><em>exact</em></span> polymorphic variant\n      type, which has neither marker. For example:\n    </blockquote>")))
 (idp7770848
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>&lt;</code> is there because\n      <code>is_positive</code> has no way of dealing with values\n      that have tags other than <code>`Float of float</code> or\n      <code>`Int of int</code>.\n    </blockquote>")))
 (idp7768496
  ((file variants.html)
   (html
    "<blockquote>\n      OCaml will in some cases infer a variant type with\n      <code>&lt;</code>, to indicate &quot;these tags or\n      less&quot;, as in the following example.\n    </blockquote>")))
 (idp7764448
  ((file variants.html)
   (html
    "<blockquote>\n      The <code>&gt;</code> at the beginning of the variant types\n      above is critical, because it marks the types as being open to\n      combination with other variant types. We can read the type\n      <code>[&gt; `Int of string | `Float of float]</code> as\n      describing a variant whose tags include\n      <code>`Int of string</code> and\n      <code>`Float of float</code>, but may include more tags as\n      well. You can roughly translate <code>&gt;</code> to\n      &quot;these tags or more&quot;.\n    </blockquote>")))
 (idp7762560
  ((file variants.html)
   (html
    "<blockquote>\n      The type system will complain, however, if it sees incompatible\n      uses of the same tag:\n    </blockquote>")))
 (idp7761936
  ((file variants.html)
   (html
    "<blockquote>\n      Variant types are inferred automatically from their use, and when\n      we combine variants whose types contemplate different tags, the\n      compiler infers a new type that knows about both all those tags.\n    </blockquote>")))
 (idp7759680
  ((file variants.html)
   (html
    "<blockquote>\n      Syntactically, polymorphic variants are distinguished from\n      ordinary variants by the leading backtick. Pleasantly enough, you\n      can create a polymorphic variant without first writing an explicit\n      type declaration.\n    </blockquote>")))
 (idp7758592
  ((file variants.html)
   (html
    "<blockquote>\n      In addition to the ordinary variants we've seen so far, OCaml also\n      supports so-called <span><em>polymorphic variants</em></span>. As\n      we'll see, polymorphic variants are more flexible and\n      syntactically more lightweight than ordinary variants, but that\n      extra power comes at a cost, as we'll see.\n    </blockquote>")))
 (idp7756768
  ((file variants.html)
   (html
    "<blockquote>\n      This example is more than a toy. There's a module very much in\n      this spirit already exists as part of Core, and gets a lot of\n      practical use in a variety of applications. More generally, using\n      variants to build recursive data-structures is a common technique,\n      and shows up everywhere from designing little languages to\n      building efficient data-structures like red-black trees.\n    </blockquote>")))
 (idp7755168
  ((file variants.html)
   (html
    "<blockquote>\n      we can immediately notice that we've missed an important\n      simplification. Really, we should have simplified double negation.\n    </blockquote>")))
 (idp7752768
  ((file variants.html)
   (html
    "<blockquote>\n      One thing to notice about the above code is that it uses a\n      catch-all case in the very last line within the\n      <code>Not</code> case. It's generally better to be explicit\n      about the cases you're ignoring. Indeed, if we change this snippet\n      of code to be more explicit:\n    </blockquote>")))
 (idp7750320
  ((file variants.html)
   (html
    "<blockquote>\n      We can also write code to transform an expression, for example, by\n      simplifying it. Here's a function to does just that.\n    </blockquote>")))
 (idp7747056
  ((file variants.html)
   (html
    "<blockquote>\n      The structure of the code is pretty straightforward --- we're just\n      walking over the structure of the data, doing the appropriate\n      thing at each state, which sometimes requires a recursive call and\n      sometimes doesn't. We did define a helper function,\n      <code>eval'</code>, which is just <code>eval</code>\n      specialized to use <code>base_eval</code>, and is there to\n      remove some boilerplate from the recursive calls to\n      <code>eval</code>.\n    </blockquote>")))
 (idp7744992
  ((file variants.html)
   (html
    "<blockquote>\n      Being able to construct such expressions is all well and good, but\n      to do any real work, we need some way to evaluate an expression.\n      Here's a piece of code to do just that.\n    </blockquote>")))
 (idp7742400
  ((file variants.html)
   (html
    "<blockquote>\n      And now, we can construct a simple expression that uses\n      <code>mail_predicate</code> for its base predicate.\n    </blockquote>")))
 (idp7738688
  ((file variants.html)
   (html
    "<blockquote>\n      The only mysterious bit about <code>blang</code> is the role\n      of <code>Base</code>. The <code>Base</code>\n      constructor is to let the language include a set of base\n      predicates. These base predicates tie the expressions in question\n      to whatever our application is. Thus, if you were writing a filter\n      language for an email processor, your base predicates might\n      specify the tests you would run against an email. Here's a simple\n      example of how you might define a base predicate type.\n    </blockquote>")))
 (idp7736432
  ((file variants.html)
   (html
    "<blockquote>\n      Note that the definition of the type <code>blang</code> is\n      recursive, meaning that a <code>blang</code> may contain\n      other <code>blang</code>s.\n    </blockquote>")))
 (idp7733840
  ((file variants.html)
   (html
    "<blockquote>\n      Such a language can be useful anywhere you need to specify\n      filters, which are used in everything from packet analyzers to\n      mail clients. Below, we define a variant called\n      <code>blang</code> (short for &quot;binary language&quot;)\n      with one constructor for each kind of expression we want to\n      support.\n    </blockquote>")))
 (idp7733216
  ((file variants.html)
   (html
    "<blockquote>\n      Another common application of variants is to represent tree-like\n      recursive data-structures. Let's see how this works by working\n      through a simple example: designing a Boolean expression\n      evaluator.\n    </blockquote>")))
 (idp7729328
  ((file variants.html)
   (html
    "<blockquote>\n      And it's explicit at the type level that\n      <code>handle_log_entry</code> sees only\n      <code>Log_entry</code> messages,\n      <code>handle_logon</code> sees only <code>Logon</code>\n      messages, etc.\n    </blockquote>")))
 (idp7725888
  ((file variants.html)
   (html
    "<blockquote>\n      This basic design is good in another way: it allows us to\n      essentially downcast to the specific message type once we know\n      what it is, and then dispatch code to handle just that message\n      type. In particular, while we use the type\n      <code>Common.t * details</code> to represent an arbitrary\n      message, we can use <code>Common.t * Logon.t</code> to\n      represent a logon message. Thus, if we had functions for handling\n      individual message types, we could write a dispatch function as\n      follows.\n    </blockquote>")))
 (idp7724720
  ((file variants.html)
   (html
    "<blockquote>\n      Note that the more complex match statement for computing the\n      session id has been replaced with the simple expression\n      <code>common.Common.session_id</code>.\n    </blockquote>")))
 (idp7720944
  ((file variants.html)
   (html
    "<blockquote>\n      A full message can then represented as a pair of a\n      <code>Common.t</code> and a <code>details</code>.\n      Using this, we can rewrite our example above as follows:\n    </blockquote>")))
 (idp7719456
  ((file variants.html)
   (html
    "<blockquote>\n      Separately, we need a record that contains the fields that are\n      common across all messages.\n    </blockquote>")))
 (idp7717968
  ((file variants.html)
   (html
    "<blockquote>\n      We can then define a variant type that covers the different\n      possible unique components.\n    </blockquote>")))
 (idp7716144
  ((file variants.html)
   (html
    "<blockquote>\n      We can improve the code by refactoring our types to explicitly\n      separate which parts are shared and which are common. The first\n      step is to cut down the definitions of the per-message records to\n      just contain the unique components of each message.\n    </blockquote>")))
 (idp7715520
  ((file variants.html)
   (html
    "<blockquote>\n      This code effectively computes the session id for each underlying\n      message type. The repetition in this case isn't that bad, but\n      would become problematic in larger and more complicated examples.\n    </blockquote>")))
 (idp7713744
  ((file variants.html)
   (html
    "<blockquote>\n      There's one awkward bit about the code above, which is the\n      calculation of the session ids. In particular, we have the\n      following repetitive snippet of code:\n    </blockquote>")))
 (idp7711440
  ((file variants.html)
   (html "<blockquote>\n      Here's the concrete code.\n    </blockquote>")))
 (idp7710704
  ((file variants.html)
   (html
    "<blockquote>\n          the set of messages so far that are associated with the user.\n        </blockquote>")))
 (idp7709824
  ((file variants.html)
   (html
    "<blockquote>\n          the set of session identifiers for the user that have been\n          seen thus far.\n        </blockquote>")))
 (idp7707808
  ((file variants.html)
   (html
    "<blockquote>\n      You can increase the precision of your types by using variants to\n      represent structural differences between types, and records to\n      represent structure that is shared. As an example, consider the\n      following function that takes a list of\n      <code>client_message</code>s and returns all messages\n      generated by a given user. The code in question is implemented by\n      folding over the list of messages, where the accumulator is a pair\n      of:\n    </blockquote>")))
 (idp7703264
  ((file variants.html)
   (html
    "<blockquote>\n      A <code>client_message</code> is a <code>Logon</code>\n<span><em>or</em></span> a <code>Heartbeat</code>\n<span><em>or</em></span> a <code>Log_entry</code>. If we want\n      to write code that processes messages generically, rather than\n      code specialized to a fixed message type, we need something like\n      <code>client_message</code> to act as one overarching type\n      for the different possible messages.\n    </blockquote>")))
 (idp7697232
  ((file variants.html)
   (html
    "<blockquote>\n      This record type combines multiple pieces of data into one value.\n      In particular, a single <code>Log_entry.t</code> has a\n      <code>session_id</code> <span><em>and</em></span> a\n      <code>time</code> <span><em>and</em></span> an\n      <code>important</code> flag <span><em>and</em></span> a\n      <code>message</code>. More generally, you can think of\n      record types as acting as conjunctions. Variants, on the other\n      hand, are disjunctions, letting you represent multiple\n      possibilities, as in the following example.\n    </blockquote>")))
 (idp7695088
  ((file variants.html)
   (html
    "<blockquote>\n      Records and variants are most effective when used in concert.\n      Consider again the type <code>Log_entry.t</code> from\n      section [[REUSING FIELD NAMES]]:\n    </blockquote>")))
 (idp7692256
  ((file variants.html)
   (html
    "<blockquote>\n        Using the above function, we can print text using the full set\n        of available colors.\n      </blockquote>")))
 (idp7690688
  ((file variants.html)
   (html
    "<blockquote>\n        But because the catch-all case encompasses all possibilities,\n        the type system will no longer warn us that we have missed the\n        new <code>Bold</code> case when we change the type to\n        include it. We can get this check back by being more explicit\n        about what we're ignoring. We haven't changed the behavior of\n        the code, but we have improved our robustness to change.\n      </blockquote>")))
 (idp7687376
  ((file variants.html)
   (html
    "<blockquote>\n        Here's an example of how a catch-all case plays in. Imagine we\n        wanted a version of <code>color_to_int</code> that works\n        on older terminals by rendering the first 16 colors (the 8\n        <code>basic_color</code>s in regular and bold) in the\n        normal way, but rendering everything else as white. We might\n        have written the function as follows.\n      </blockquote>")))
 (idp7686576
  ((file variants.html)
   (html
    "<blockquote>\n        As you can see, the type system identified for us the places in\n        our code that needed to be fixed. This refactoring isn't\n        entirely free, however. To really take advantage of it, you need\n        to write your code in a way that maximizes the compiler's\n        chances of helping you find your bugs. One important rule is to\n        avoid catch-all cases in pattern matches.\n      </blockquote>")))
 (idp7684896
  ((file variants.html)
   (html
    "<blockquote>\n        Fixing this now leads us to the correct implementation.\n      </blockquote>")))
 (idp7681136
  ((file variants.html)
   (html
    "<blockquote>\n        Here, the compiler is complaining that the\n        <code>Basic</code> constructor is assumed to have the\n        wrong number of arguments. If we fix that, however, the compiler\n        flag will flag a second problem, which is that we haven't\n        handled the new <code>Bold</code> constructor.\n      </blockquote>")))
 (idp7676080
  ((file variants.html)
   (html
    "<blockquote>\n        We've essentially broken out the <code>Basic</code> case\n        into two cases, <code>Basic</code> and\n        <code>Bold</code>, and <code>Basic</code> has\n        changed from having two arguments to one.\n        <code>color_to_int</code> as we wrote it still expects the\n        old structure of the variant, and if we try to compile that same\n        code again, the compiler will notice the discrepancy.\n      </blockquote>")))
 (idp7673872
  ((file variants.html)
   (html
    "<blockquote>\n        Consider what would happen if we were to change the definition\n        of <code>color</code> to the following.\n      </blockquote>")))
 (idp7673216
  ((file variants.html)
   (html
    "<blockquote>\n        OCaml's type system can act as a form of refactoring tool, where\n        the compiler warns you of places where your code needs to be\n        adapted to changes made elsewhere. This is particularly valuable\n        when working with variant types.\n      </blockquote>")))
 (idp7669712
  ((file variants.html)
   (html
    "<blockquote>\n        In order to compute the color code for a\n        <code>color</code>, we use pattern matching to break down\n        the <code>color</code> variant into the appropriate cases.\n      </blockquote>")))
 (idp7667984
  ((file variants.html)
   (html
    "<blockquote>\n        We can represent this more complicated color-space as a variant,\n        but this time, the different constructors will have arguments,\n        to describe the data available in each case.\n      </blockquote>")))
 (idp7667344
  ((file variants.html)
   (html
    "<blockquote>\n            A 24-level grayscale ramp\n          </blockquote>")))
 (idp7666432
  ((file variants.html)
   (html
    "<blockquote>\n            A 6\226\128\133\195\151\226\128\1336\226\128\133\195\151\226\128\1336 RGB color cube\n          </blockquote>")))
 (idp7665568
  ((file variants.html)
   (html
    "<blockquote>\n            The 8 basic colors, in regular and bold versions.\n          </blockquote>")))
 (idp7663168
  ((file variants.html)
   (html
    "<blockquote>\n        The simple enumeration of <code>basic_color</code> isn't\n        enough to fully describe the set of colors that a modern\n        terminal can display. Many terminals, including the venerable\n        <code>xterm</code>, support 256 different colors, broken\n        up into the following groups.\n      </blockquote>")))
 (idp7661824
  ((file variants.html)
   (html
    "<blockquote>\n      On most terminals, that last line is printed in blue.\n    </blockquote>")))
 (idp7659776
  ((file variants.html)
   (html
    "<blockquote>\n      Using this function, we can generate the escape codes to change\n      the color of a given string.\n    </blockquote>")))
 (idp7659248
  ((file variants.html)
   (html
    "<blockquote>\n      Note that the exhaustiveness checking on pattern matches means\n      that the compiler will warn us if we miss a color.\n    </blockquote>")))
 (idp7656896
  ((file variants.html)
   (html
    "<blockquote>\n      Pattern matching can be used to process a variant. The following\n      function uses pattern matching to convert\n      <code>basic_color</code> to a corresponding integer for use\n      in creating color-setting escape codes.\n    </blockquote>")))
 (idp7654864
  ((file variants.html)
   (html
    "<blockquote>\n      We can construct instances of <code>basic_color</code> by\n      simply writing out the constructors in question.\n    </blockquote>")))
 (idp7654256
  ((file variants.html)
   (html
    "<blockquote>\n      This is a particularly simple form of variant, in that the\n      constructors don't have arguments. Such variants are very similar\n      to the enumerations found in many languages, including C and Java.\n    </blockquote>")))
 (idp7652752
  ((file variants.html)
   (html
    "<blockquote>\n      Almost all terminals support a set of 8 basic colors, which we can\n      represent with the following variant type.\n    </blockquote>")))
 (idp7651184
  ((file variants.html)
   (html
    "<blockquote>\n    The basic purpose of variants is to effectively represent data that\n    may have multiple different cases. We can give a better sense of the\n    utility of variants by walking through a concrete example, which\n    we'll do by thinking about how to represent terminal colors.\n  </blockquote>")))
 (idp7649184
  ((file variants.html)
   (html
    "<blockquote>\n    Variant types are used to represent multiple different\n    possibilities, where each possibility is identified by a different\n    <span><em>constructor</em></span>. The syntax of a variant type\n    declaration is as follows.\n  </blockquote>")))
 (idp7372704
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          And indeed, when we provide the two positions arguments, the\n          <code>sep</code> argument is not erased, instead\n          returning a function that expects the <code>sep</code>\n          argument to be provided.\n        </blockquote>")))
 (idp7370784
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          An optional argument that doesn't have any following\n          positional arguments can't be erased at all, which leads to a\n          compiler warning.\n        </blockquote>")))
 (idp7369200
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          However, if all arguments to a function are presented at once,\n          then erasure of optional arguments isn't applied until all of\n          the arguments are passed in. This preserves our ability to\n          pass in optional arguments anywhere on the argument list.\n          Thus, we can write:\n        </blockquote>")))
 (idp7367376
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          then application of the first argument would not cause the\n          optional argument to be erased.\n        </blockquote>")))
 (idp7364000
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          The rule is: an optional argument is erased as soon as the\n          first positional argument defined <span><em>after</em></span>\n          the optional argument is passed in. That explains the behavior\n          of <code>prepend_pound</code> above. But if we had\n          instead defined <code>concat</code> with the optional\n          argument in the second position:\n        </blockquote>")))
 (idp7362512
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Note that the optional argument <code>?sep</code> has\n          now disappeared, or <span><em>erased</em></span>. So when does\n          OCaml decide to erase an optional argument?\n        </blockquote>")))
 (idp7360944
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But what happens if we partially apply just the first\n          argument?\n        </blockquote>")))
 (idp7359312
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Optional arguments can be tricky to think about in the\n          presence of partial application. We can of course partially\n          apply the optional argument itself:\n        </blockquote>")))
 (idp7354784
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Note that if we provide an explicit type constraint for\n          <code>g</code>, that constraint decides the question of\n          what <code>g</code>'s type is, and the error disappears.\n          In the following, we do this by providing an explicit type\n          annotation.\n        </blockquote>")))
 (idp7353520
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          As suggested by the error message, we can get OCaml to accept\n          the fact that <code>f</code> is used with different\n          argument orders if we provide explicit type information. Thus,\n          we can write:\n        </blockquote>")))
 (idp7350304
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Note that these heuristics might at different points in the\n          source suggest different types. Here's a version of\n          <code>numeric_deriv</code> where the invocations of\n          <code>f</code> were changes so they list the arguments\n          in different orders.\n        </blockquote>")))
 (idp7349600
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Since there are multiple plausible types to choose from, OCaml\n          needs some heuristic for choosing between them. The heuristic\n          the compiler uses is to prefer labels to options, and to\n          choose the order of arguments that shows up in the source\n          code.\n        </blockquote>")))
 (idp7346704
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Even worse, it would be perfectly consistent for\n          <code>f</code> to take an optional argument instead of a\n          labeled one, which could lead to this type signature for\n          <code>numeric_deriv</code>:\n        </blockquote>")))
 (idp7344192
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          In principle, it's not obvious how the order of the arguments\n          to <code>f</code> should be chosen. Since optional\n          arguments can be passed in arbitrary order, it seems like it\n          could as well be\n          <code>y:float -&gt; x:float -&gt; float</code> as it is\n          <code>x:float -&gt; y:float -&gt; float</code>.\n        </blockquote>")))
 (idp7337472
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One subtle aspect of labeled and optional arguments is how\n          they are inferred by the type system. Consider the following\n          example for computing numerical derivatives of a function of\n          two dimensions. The function takes an argument\n          <code>delta</code> which determines the scale at which\n          to compute the derivative, values <code>x</code> and\n          <code>y</code> which determine which point to compute\n          the derivative at, and the function <code>f</code> whose\n          derivative is being computed. The function\n          <code>f</code> itself takes two labeled arguments\n          <code>x</code> and <code>y</code>.\n        </blockquote>")))
 (idp7336624
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n<span><em>(yminsky: This is too abstract of an\n          example.)</em></span>\n</blockquote>")))
 (idp7332656
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Now, if someone calls <code>uppercase_concat</code>\n          without an argument, an explicit <code>None</code> will\n          be passed to <code>concat</code>, leaving\n          <code>concat</code> to decide what the default behavior\n          should be.\n        </blockquote>")))
 (idp7329216
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Instead, we can have <code>uppercase_concat</code>\n          simply pass through the optional argument to\n          <code>concat</code> using the <code>?</code>\n          syntax.\n        </blockquote>")))
 (idp7327296
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          In the way we've written it, we've been forced to separately\n          make the decision as to what the default separator is. Thus,\n          if we later change <code>concat</code>'s default\n          behavior, we'll need to remember to change\n          <code>uppercase_concat</code> to match it.\n        </blockquote>")))
 (idp7324080
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One use-case for this is when you want to define a wrapper\n          function that mimics the optional arguments of the function\n          it's wrapping. For example, imagine we wanted to create a\n          function called <code>uppercase_concat</code>, which is\n          the same as <code>concat</code> except that it converts\n          the first string that it's passed to uppercase. We could write\n          the function as follows.\n        </blockquote>")))
 (idp7321136
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          And the following two lines are equivalent ways of calling\n          <code>concat</code> without specifying\n          <code>sep</code>.\n        </blockquote>")))
 (idp7316096
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But sometimes, passing in <code>Some</code> or\n          <code>None</code> explicitly is exactly what you want.\n          OCaml lets you do this by using <code>?</code> instead\n          of <code>~</code> to mark the argument. Thus, the\n          following two lines are equivalent ways of specifying the\n          <code>sep</code> argument to concat.\n        </blockquote>")))
 (idp7312944
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Under the covers, a function with an optional argument\n          receives <code>None</code> when the caller doesn't\n          provide the argument, and <code>Some</code> when it\n          does. But the <code>Some</code> and\n          <code>None</code> are normally not explicitly passed in\n          by the caller.\n        </blockquote>")))
 (idp7311344
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This means that rarely used functions should not have optional\n        arguments. A good rule of thumb for optional arguments is that\n        you should never use an optional argument for internal functions\n        of a module, only for functions that are exposed as part of the\n        module's interface.\n      </blockquote>")))
 (idp7310608
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The downside is that the caller may be unaware that there is a\n        choice to be made, and so may unknowingly (and wrongly) pick\n        that default behavior. Optional arguments really only make sense\n        when the extra concision of omitting the argument overwhelms the\n        corresponding loss of explicitness.\n      </blockquote>")))
 (idp7309872
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Optional arguments are very useful, but they're also easy to\n        abuse. The key advantage of optional arguments is that they let\n        you write functions with multiple arguments that users can\n        ignore most of the time, only worrying about them when they\n        specifically want to invoke those options.\n      </blockquote>")))
 (idp7307504
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In the above example, we had a bit of code to substitute in the\n        empty string when no argument was provided. This is a common\n        enough pattern that there's an explicit syntax for providing a\n        default value, which allows us to write\n        <code>concat</code> even more concisely.\n      </blockquote>")))
 (idp7302048
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here, <code>?</code> is used to mark\n        <code>sep</code> as optional. And while the caller can\n        pass a value of type <code>string</code> for\n        <code>sep</code>, internally to the function,\n        <code>sep</code> is seen as a\n        <code>string option</code>, with <code>None</code>\n        appearing when <code>sep</code> is not provided by the\n        caller.\n      </blockquote>")))
 (idp7300304
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here's an example of a string concatenation function with an\n        optional separator.\n      </blockquote>")))
 (idp7299584
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        An optional argument is like a labeled argument that the caller\n        can choose whether or not to provide. Optional arguments are\n        passed in using the same syntax as labeled arguments, and,\n        similarly to labeled arguments, optional arguments can be\n        provided in any order.\n      </blockquote>")))
 (idp7297792
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          So, even though the order of labeled arguments usually doesn't\n          matter, it will sometimes bite you in higher-ordered contexts,\n          where you're doing things like passing functions as arguments\n          to other functions.\n        </blockquote>")))
 (idp7295632
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          But, if we go back to the original definition of\n          <code>apply_to_tuple</code>, things will work smoothly.\n        </blockquote>")))
 (idp7293360
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          we'll find that it can't be passed in to\n          <code>apply_to_tuple</code>.\n        </blockquote>")))
 (idp7291792
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          It turns out this order of listing matters. In particular, if\n          we define a function that has a different order\n        </blockquote>")))
 (idp7287520
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          Here, the definition of <code>apply_to_tuple</code> sets\n          up the expectation that its first argument is a function with\n          two labeled arguments, <code>first</code> and\n          <code>second</code>, listed in that order. We could have\n          defined <code>apply_to_tuple</code> differently to\n          change the order in which the labeled arguments were listed.\n        </blockquote>")))
 (idp7285328
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n          One surprising gotcha with labeled arguments is that while\n          order doesn't matter when calling a function with labeled\n          arguments, it does matter in a higher-order context,\n          <span><em>e.g.</em></span>, when passing a function with\n          labeled arguments to another function. Here's an example.\n        </blockquote>")))
 (idp7283520
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            In other cases, you want to put the function argument\n            second. One common reason is readability. In particular, a\n            function that spans multiple lines is easiest to read when\n            it's the last argument provided.\n          </blockquote>")))
 (idp7280208
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When you want flexibility on the order in which arguments\n            are passed. Consider a function like\n            <code>List.iter</code>, that takes two arguments: a\n            function, and a list of elements to call that function on. A\n            common pattern is to partially apply\n            <code>List.iter</code> by giving it just the function,\n            as in the following example from earlier in the chapter.\n            This requires putting the function argument first.\n          </blockquote>")))
 (idp7278240
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            but with labeled arguments, we can make the intent much\n            clearer.\n          </blockquote>")))
 (idp7276368
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When the meaning of a particular argument is unclear from\n            the type alone. For example, consider a function for\n            creating a hashtable where the first argument is the initial\n            size of the table, and the second argument is a flag which,\n            when true, indicates that the hashtable will reduce its size\n            when the hashtable contains few elements. The following\n            signature doesn't give you much of a hint as to the meaning\n            of the arguments.\n          </blockquote>")))
 (idp7274720
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            This improves the readability of both the signature and of\n            client code that makes use of <code>substring</code>,\n            and makes it harder to accidentally swap the position and\n            the length.\n          </blockquote>")))
 (idp7273152
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            where the two ints are the starting position and length of\n            the substring to extract. Labeled arguments can make this\n            signature clearer:\n          </blockquote>")))
 (idp7271568
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When defining functions that have multiple arguments that\n            might get confused with each other. This is most at issue\n            when the arguments are of the same type. For example,\n            consider this signature for a function for extracting a\n            substring of another string.\n          </blockquote>")))
 (idp7270608
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n            When defining a function with lots of arguments. Beyond a\n            certain number, arguments are easier to remember by name\n            than by position.\n          </blockquote>")))
 (idp7269632
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Labeled arguments are useful in a few different cases:\n      </blockquote>")))
 (idp7266992
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml also supports <span><em>label punning</em></span>, meaning\n        that you get to drop the text after the <code>:</code> if\n        the name of the label and the name of the variable being used\n        are the same. Label punning works in both function declaration\n        and function invocation, as shown in these examples:\n      </blockquote>")))
 (idp7265488
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can then provide a labeled argument using a similar\n        convention. As you can see, the arguments can be provided in any\n        order.\n      </blockquote>")))
 (idp7263344
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Up until now, we've written functions where the arguments are\n        specified positionally, <span><em>i.e.</em></span>, by the order\n        in which the arguments are passed to the function. OCaml also\n        supports labeled arguments, which let you identify a function\n        argument by name. Labeled arguments are declared by putting a\n        tilde in front of the label.\n      </blockquote>")))
 (idp7261216
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Also, note the use of partial application to generate the\n        function passed to <code>List.map</code>\n</blockquote>")))
 (idp7259248
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can also combine the different styles of function declaration\n        together, as in the following example where we declare a two\n        argument function with a pattern-match on the second argument.\n      </blockquote>")))
 (idp7256592
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This is equivalent to combining a <code>fun</code> with\n        <code>match</code>, as follows:\n      </blockquote>")))
 (idp7253536
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another way to define a function is using the\n        <code>function</code> keyword. Instead of having syntactic\n        support for declaring curried functions,\n        <code>function</code> has built-in pattern matching.\n        Here's an example:\n      </blockquote>")))
 (idp7251456
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The type error aside, this example highlights the importance of\n        choosing the operator you use with care, particularly with\n        respect to associativity.\n      </blockquote>")))
 (idp7248272
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The above type error is a little bewildering at first glance.\n        What's going on is that, because <code>^!</code> is right\n        associative, the operator is trying to feed the value\n        <code>List.dedup ~compare:String.compare</code> to the\n        function <code>List.iter ~f:print_endline</code>. But\n        <code>List.iter ~f:print_endline</code> expects a list of\n        strings as its input, not a function.\n      </blockquote>")))
 (idp7245312
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that <code>|!</code> only works in the intended way\n        because it is left-associative. Indeed, let's see what happens\n        if we try using a right associative operator, like (^!).\n      </blockquote>")))
 (idp7244224
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It is this later form that we're using in the\n        <code>|!</code> pipeline above.\n      </blockquote>")))
 (idp7242720
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or, we can pass it just the function argument, leaving us with a\n        function for printing out a list of strings.\n      </blockquote>")))
 (idp7239744
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        An important part of what's happening here is partial\n        application. Normally, <code>List.iter</code> takes two\n        arguments: a function to be called on each element of the list,\n        and the list to iterate over. We can call\n        <code>List.iter</code> with all it's arguments:\n      </blockquote>")))
 (idp7236992
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It's not quite obvious at first what the purpose of this\n        operator is: it just takes some value and a function, and\n        applies the function to the value. But its utility is clearer\n        when you see it in action. It works as a kind of sequencing\n        operator, similar in spirit to using pipe in the UNIX shell.\n        Consider, for example, the following code for printing out the\n        unique elements of your <code>PATH</code>.\n      </blockquote>")))
 (idp7235488
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Here's an example of a very useful operator that's defined in\n        Core, following these rules. Here's the definition:\n      </blockquote>")))
 (idp7215616
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The syntactic role of an operator work is determined by its\n        first character. This table describes how, and lists the\n        operators from highest to lowest precedence.\n      </blockquote>")))
 (idp7214032
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can define (or redefine) the meaning of an operator as\n        follows. Here's an example of a simple vector-addition operator\n        on int pairs.\n      </blockquote>")))
 (idp7212064
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        or is one of a handful of pre-determined strings, including\n        <code>mod</code>, the modulus operator, and\n        <code>lsl</code>, for &quot;logical shift left&quot;, a\n        bit-shifting operation.\n      </blockquote>")))
 (idp7210688
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        A function is treated syntactically as an operator if the name\n        of that function is chosen from one of a specialized set of\n        identifiers. This set includes any identifier that is a sequence\n        of characters from the following set\n      </blockquote>")))
 (idp7208800
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In the second expression above, we've partially applied\n        <code>(+)</code> to gain a function that increments its\n        single argument by <code>3</code>, and then applied that\n        to all the elements of a list.\n      </blockquote>")))
 (idp7206480
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You might not have thought of the second example as an ordinary\n        function, but it very much is. Infix operators like\n        <code>+</code> really only differ syntactically from other\n        functions. In fact, if we put parenthesis around an infix\n        operator, you can use it as an ordinary prefix function.\n      </blockquote>")))
 (idp7205024
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        So far, we've seen examples of functions used in both prefix and\n        infix style:\n      </blockquote>")))
 (idp7202752
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that in the above example, we take advantage of the fact\n        that the right hand side of <code>||</code> is evaluated\n        lazily, only being executed if the left hand side evaluates to\n        false.\n      </blockquote>")))
 (idp7199024
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We can also define multiple mutually recursive values by using\n        <code>let rec</code> and <code>and</code> together,\n        as in this (gratuitously inefficient) example.\n      </blockquote>")))
 (idp7196592
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        In order to define a recursive function, you need to mark the\n        let binding as recursive with the <code>rec</code>\n        keyword, as shown in this example:\n      </blockquote>")))
 (idp7194992
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        There are small tradeoffs between these two approaches, but most\n        of the time, one should stick to currying, since it's the\n        default style in the OCaml world.\n      </blockquote>")))
 (idp7194368
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml handles this calling convention efficiently as well. In\n        particular it does not generally have to allocate a tuple just\n        for the purpose of sending arguments to a tuple-style function.\n      </blockquote>")))
 (idp7192752
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Currying is not the only way of writing a multi-argument\n        function in OCaml. It's also possible to use the different arms\n        of a tuple as different arguments. So, we could write:\n      </blockquote>")))
 (idp7192064
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You might worry that curried functions are terribly expensive,\n        but this is not the case. In OCaml, there is no penalty for\n        calling a curried function with all of its arguments. (Partial\n        application, unsurprisingly, does have a small extra cost.)\n      </blockquote>")))
 (idp7189376
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that the <code>fun</code> keyword supports its own\n        syntactic sugar for currying, so we could also have written\n        <code>abs_diff</code> as follows.\n      </blockquote>")))
 (idp7188480
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The practice of applying some of the arguments of a curried\n        function to get a new function is called <span><em>partial\n        application</em></span>.\n      </blockquote>")))
 (idp7185264
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Currying is more than just a theoretical curiosity. You can make\n        use of currying to specialize a function by feeding in some of\n        the arguments. Here's an example where we create a specialized\n        version of <code>abs_diff</code> that measures the\n        distance of a given number from <code>3</code>.\n      </blockquote>")))
 (idp7181904
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This style of function is called a <span><em>curried</em></span>\n        function. (Currying is named after Haskell Curry, a famous\n        logician who had a significant impact on the design and theory\n        of programming languages.) The key to interpreting the type\n        signature of a curried function is the observation that\n        <code>-&gt;</code> is right-associative. The type\n        signature of <code>abs_diff</code> can therefore be\n        parenthesized as follows. This doesn't change the meaning of the\n        signature, but it makes it easier to see how the currying fits\n        in.\n      </blockquote>")))
 (idp7178704
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This rewrite makes it explicit that <code>abs_diff</code>\n        is actually a function of one argument that returns another\n        function of one argument, which itself returns the final\n        computation. Because the functions are nested, the inner\n        expression <code>abs (x - y)</code> has access to both\n        <code>x</code>, which was captured by the first function\n        application, and <code>y</code>, which was captured by the\n        second one.\n      </blockquote>")))
 (idp7175232
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        You may find the type signature of <code>abs_diff</code>\n        with all of its arrows a little hard to parse. To understand\n        what's going on, let's rewrite <code>abs_diff</code> in an\n        equivalent form, using the <code>fun</code> keyword:\n      </blockquote>")))
 (idp7173712
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        OCaml of course also supports multi-argument functions. Here's\n        an example that came up in chapter {{TOUR}}.\n      </blockquote>")))
 (idp7172016
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This connection is important, and will come up more when\n        programming in a monadic style, as we'll see in chapter\n        {{ASYNC}}.\n      </blockquote>")))
 (idp7170304
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Functions and let bindings have a lot to do with each other. In\n        some sense, you can think of the argument of a function as a\n        variable being bound to its argument. Indeed, the following two\n        expressions are nearly equivalent:\n      </blockquote>")))
 (idp7167824
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This is the most common and convenient way to declare a\n        function, but syntactic niceties aside, the two styles of\n        function definition are entirely equivalent.\n      </blockquote>")))
 (idp7166320
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Defining named functions is so common that there is some built\n        in syntactic sugar for it. Thus, we can write:\n      </blockquote>")))
 (idp7164480
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        The key thing to understand is that functions are ordinary\n        values in OCaml, and you can do everything with them that you'd\n        do with an ordinary value, including passing them to and\n        returning them from other functions and storing them in\n        datastructures. We even name functions in the same way that we\n        name other values, by using a let binding.\n      </blockquote>")))
 (idp7160464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        It's worth stopping for a moment to puzzle this example out,\n        since this kind of higher-order use of functions can be a bit\n        obscure at first. The first thing to understand is the function\n        <code>(fun f -&gt; f 5)</code>, which takes a function as\n        its argument and applies that function to the number\n        <code>5</code>. The invocation of\n        <code>List.map</code> applies\n        <code>(fun f -&gt; f 5)</code> to the elements of the\n        <code>increments</code> list (which are themselves\n        functions) and returns the list containing the results of these\n        function applications.\n      </blockquote>")))
 (idp7158928
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or even stuff then into a datastructure.\n      </blockquote>")))
 (idp7157472
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Or pass it to another function.\n      </blockquote>")))
 (idp7155904
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Anonymous functions aren't named, but they can be used for many\n        different purposes nonetheless. You can, for example, apply an\n        anonymous function to an argument:\n      </blockquote>")))
 (idp7153360
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        We'll start by looking at the most basic form of OCaml function,\n        the <span><em>anonymous</em></span> function. Anonymous functions\n        are declared using the <code>fun</code> keyword, as\n        follows.\n      </blockquote>")))
 (idp7151680
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      OCaml being a functional language, it's no surprise that functions\n      are an important and pervasive element of programming in OCaml.\n      Indeed, we've seen functions pop up already in many of the\n      examples we've looked at thus far. But while we've introduced the\n      basics of functions, we're now going to cover them in more depth,\n      starting from the foundations.\n    </blockquote>")))
 (idp7148704
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Note that when doing a\n        <code>let</code>/<code>and</code> style declaration,\n        the order of execution of the right-hand side of the binds is\n        undefined by the language definition, so one should not write\n        code that relies on it.\n      </blockquote>")))
 (idp7147440
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This use-case doesn't come up that often. Most of the time that\n        <code>and</code> comes into play, it's used to define\n        multiple mutually recursive values, which we'll learn about\n        later in the chapter.\n      </blockquote>")))
 (idp7144624
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This can be useful when you want to create a number of new let\n        bindings at once, without having each definition affect the\n        next. So, if we wanted to create new bindings that swapped the\n        values of <code>x</code> and <code>y</code>, we\n        could write:\n      </blockquote>")))
 (idp7142464
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another variant on the let binding is the use of\n        <code>and</code> to join multiple variable definitions\n        into a single declaration. For example, we can write:\n      </blockquote>")))
 (idp7137744
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This case can't really come up in practice, because\n        <code>String.split</code> always returns a list with at\n        least one element. But the compiler doesn't know this, and so it\n        emits the warning. It's generally better to use a match\n        statement to handle such cases explicitly:\n      </blockquote>")))
 (idp7134176
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        This actually binds two variables, one for each element of the\n        pair. Using a pattern in a let-binding makes the most sense for\n        a pattern that is <span><em>irrefutable</em></span>,\n        <span><em>i.e.</em></span>, where any value of the type in\n        question is guaranteed to match the pattern. Tuple and record\n        patterns are irrefutable, but list patterns are not. Consider\n        the following code that implements a function for up-casing the\n        first element of a comma-separate list.\n      </blockquote>")))
 (idp7131712
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n        Another useful feature of let bindings is that they support the\n        use of patterns on the left-hand side of the bind. Consider the\n        following code, which uses <code>List.unzip</code>, a\n        function for converting a list of pairs into a pair of lists.\n      </blockquote>")))
 (idp7129760
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      In OCaml, let bindings are immutable. As we'll see in chapter\n      {{{imperative-programming}}}, there are mutable values in OCaml,\n      but no mutable variables.\n    </blockquote>")))
 (idp7124144
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Here, we redefined <code>pi</code> to be zero after the\n      definition of <code>area_of_circle</code>. You might think\n      that this would mean that the result of the computation would now\n      be zero, but you'd be wrong. In fact, the behavior of the function\n      is unchanged. That's because the original definition of\n      <code>pi</code> wasn't changed, it was just shadowed, so\n      that any subsequent reference to <code>pi</code> would see\n      the new definition of <code>pi</code> as zero. But there is\n      no later use of <code>pi</code>, so the binding doesn't make\n      a difference. Indeed, if you type the example I gave above into\n      the toplevel, OCaml will warn you that the definition is unused.\n    </blockquote>")))
 (idp7121776
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      It's important not to confuse this sequence of let bindings with\n      the modification of a mutable variable. How would\n      <code>area_of_ring</code> be different, for example, if we\n      had instead written this purposefully confusing bit of code:\n    </blockquote>")))
 (idp7118832
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      One common idiom is to use a series of nested\n      <code>let</code>/<code>in</code> expressions to build\n      up the components of a larger computation. Thus, we might write:\n    </blockquote>")))
 (idp7114784
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      This time, in the inner scope we called the list of strings\n      <code>languages</code> instead of\n      <code>language_list</code>, thus hiding the original\n      definition of <code>languages</code>. But once the\n      definition of <code>dashed_languages</code> is complete, the\n      inner scope has closed and the original definition of languages\n      reappears.\n    </blockquote>")))
 (idp7111904
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      A let binding in an inner scope can <span><em>shadow</em></span>,\n      or hide, the definition from an outer scope. So, for example, we\n      could have written the <code>dashed_languages</code> example\n      as follows:\n    </blockquote>")))
 (idp7109168
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Note that the scope of <code>language_list</code> is just\n      the expression\n      <code>String.concat ~sep:&quot;-&quot; language_list</code>,\n      and is not available at the top-level, as we can see if we try to\n      access it now.\n    </blockquote>")))
 (idp7104320
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      This first evaluates <span><em><code>expr1</code></em></span>\n      and then evaluates <span><em><code>expr2</code></em></span>\n      with <span><em><code>identifier</code></em></span> bound to\n      whatever value was produced by the evaluation of\n      <span><em><code>expr1</code></em></span>. Here's how it looks\n      in practice.\n    </blockquote>")))
 (idp7102288
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n<code>let</code> can also be used to create a variable\n      binding whose scope is limited to a particular expression, using\n      the following syntax.\n    </blockquote>")))
 (idp7100928
  ((file variables-and-functions.html)
   (html "<blockquote>\n      Here's a simple example.\n    </blockquote>")))
 (idp7099920
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      Every variable binding has a <span><em>scope</em></span>, which is\n      the portion of the code that can refer to that binding. The scope\n      of a top-level let binding is everything that follows it in the\n      top-level session (or in the remainder of the module).\n    </blockquote>")))
 (idp7098864
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      As we'll see when we get to the module system in\n      <a href=\"files-modules-and-programs.html\">Chapter\194\16010, <i>Files, Modules and Programs</i></a>, this same\n      syntax is used for top-level definitions in a module.\n    </blockquote>")))
 (idp7096688
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n      At its simplest, a variable is an identifier whose meaning is\n      bound to a particular value. In OCaml these bindings are often\n      introduced using the <code>let</code> keyword. When typed in\n      at the prompt of the interpreter, a let binding has the following\n      syntax.\n    </blockquote>")))
 (idp7095088
  ((file variables-and-functions.html)
   (html
    "<blockquote>\n    Variables and functions are fundamental ideas that show up in\n    virtually all programming languages. But OCaml has a different take\n    on these basic concepts, and so we'll spend some time digging into\n    the details of OCaml's variables and functions differ from what you\n    may have seen elsewhere.\n  </blockquote>")))
 (idp9948592
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        To use this, just recompile with\n        <code>-runtime-variant d</code> set:\n      </blockquote>")))
 (idp9947744
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Despite your best efforts, it is easy to introduce a bug into C\n        bindings that cause heap invariants to be violated. OCaml\n        includes a variant of the runtime library that is compiled with\n        debugging symbols, and includes regular memory integrity checks\n        upon every garbage collection. Running these often will abort\n        the program near the point of corruption and helps track it down\n        quickly.\n      </blockquote>")))
 (idp9945216
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        You must be <span><em>very</em></span> careful that the value you\n        return from the C function corresponds exactly to the memory\n        representation of the types you declared earlier in the\n        <code>external</code> declaration of the ML file, or else\n        heap carnage and corruption will ensure.\n      </blockquote>")))
 (idp9939520
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The <code>value</code> typedef is a word that can either\n        be an integer if <code>Is_long</code> is true, or a heap\n        block if <code>Is_block</code> is true. Our C function\n        definition of <code>caml_hello_world</code> accepts a\n        single parameter, and returns a <code>value</code>. In our\n        simple example, all the types of parameters and returns are\n        <code>unit</code>, and so we use the\n        <code>Val_unit</code> macro to construct the return value.\n      </blockquote>")))
 (idp9936224
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The <code>mlvalues.h</code> header is the basic header\n        that all C bindings need. Locate it in your system by using\n        <code>ocamlc -where</code> to find your system OCaml\n        installation. It defines a few important typedefs early on that\n        should be familiar after the earlier explanations:\n      </blockquote>")))
 (idp9934784
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The compiler uses the file extensions to determine how to\n        compile each file. In the case of the <code>.c</code>\n        extension, it passes it to the system C compiler and appends an\n        include directory containing the OCaml runtime header files that\n        define conversion functions to-and-from OCaml values.\n      </blockquote>")))
 (idp9932784
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Now attempt to recompile the <code>hello</code> binary\n        with the C file also included in the compiler invocation, and it\n        should succeed:\n      </blockquote>")))
 (idp9929600
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        This is the system linker telling you that there is a missing\n        <code>caml_hello_world</code> symbol that must be provided\n        before a binary can be linked. Now create a file called\n        <code>hello_stubs.c</code> which contains the C function.\n      </blockquote>")))
 (idp9927712
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        If you try to compile this module now, you should receive a\n        linker error:\n      </blockquote>")))
 (idp9925264
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Let's define a simple &quot;Hello World&quot; C binding to see\n        how this works. First create a <code>hello.ml</code> that\n        contains the external declaration:\n      </blockquote>")))
 (idp9921696
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      Now that you understand the runtime structure of the garbage\n      collector, interfacing with C libraries is actually pretty simple.\n      OCaml defines an <code>external</code> keyword that maps\n      OCaml functions to a C symbol. That C function will be passed the\n      arguments with the C <code>value</code> type which\n      corresponds to the memory layout for OCaml values described\n      earlier.\n    </blockquote>")))
 (idp9918720
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        When a custom block is allocated, you can also specify the\n        proportion of &quot;extra-heap resources&quot; consumed by the\n        block, which will affect the garbage collector's decision as to\n        how much work to do in the next major slice.\n        (<span><em>avsm</em></span>: elaborate on this or move to the C\n        interface section)\n      </blockquote>")))
 (idp9916752
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The custom operations specify how the runtime should perform\n        polymorphic comparison, hashing and binary marshalling. They\n        also optionally contain a finalizer, which the runtime will call\n        just before the block is garbage collected. This finalizer has\n        nothing to do with ordinary OCaml finalizers, as created by\n        <code>Gc.finalise</code>. (<span><em>avsm</em></span>: xref\n        to GC module explanation)\n      </blockquote>")))
 (idp9914352
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The first word of the data within the custom block is a C\n        pointer to a <code>struct</code> of custom operations. The\n        custom block cannot have pointers to OCaml blocks and is opaque\n        to the garbage collector.\n      </blockquote>")))
 (idp9911056
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        OCaml supports <span><em>custom</em></span> heap blocks via a\n        <code>Custom_tag</code> that let the runtime perform\n        user-defined operations over OCaml values. A custom block lives\n        in the OCaml heap like an ordinary block and can be of whatever\n        size the user desires. The <code>Custom_tag</code> (255)\n        is higher than <code>No_scan_tag</code> and so cannot\n        contain any OCaml values.\n      </blockquote>")))
 (idp9909104
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The guaranteed NULL-termination comes in handy when passing a\n        string to C, but is not relied upon to compute the length from\n        OCaml code. Thus, OCaml strings can contain null bytes at any\n        point within the string, but care should be taken that any C\n        library functions can also cope with this.\n      </blockquote>")))
 (idp9907696
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        This string representation is a clever way to ensure that the\n        string contents are always zero-terminated by the padding word,\n        and still compute its length efficiently without scanning the\n        whole string. The following formula is used:\n      </blockquote>")))
 (idp9895424
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        On a 32-bit machine, the padding is calculated based on the\n        modulo of the string length and word size to ensure the result\n        is word-aligned. A 64-bit machine extends the potential padding\n        up to 7 bytes instead of 3.\n      </blockquote>")))
 (idp9892080
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Strings are standard OCaml blocks with the header size defining\n        the size of the string in machine words. The\n        <code>String_tag</code> (252) is higher than the\n        <code>No_scan_tag</code>, indicating that the contents of\n        the block are opaque to the collector. The block contents are\n        the contents of the string, with padding bytes to align the\n        block on a word boundary.\n      </blockquote>")))
 (idp9889824
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Another inefficiency is when a polymorphic variant constructor\n        has more than one parameter. Normal variants hold parameters as\n        a single flat block with multiple fields for each entry, but\n        polymorphic variants must adopt a more flexible uniform memory\n        representation since they may be re-used in a different context.\n        They allocate a tuple block for the parameters that is pointed\n        to from the argument field of the variant. Thus, there are three\n        additional words for such variants, along with an extra memory\n        indirection due to the tuple.\n      </blockquote>")))
 (idp9888224
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Polymorphic variants use more memory space when parameters are\n        included in the datatype constructors. Normal variants use the\n        tag byte to encode the variant value, but this byte is\n        insufficient to encode the hashed value for polymoprhic\n        variants. Therefore, they must allocate a new block (with tag\n        <code>0</code>) and store the value in there instead. This\n        means that polymorphic variants with constructors use one word\n        of memory more than normal variant constructors.\n      </blockquote>")))
 (idp9887632
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The hash function is designed to give the same results on 32-bit\n        and 64-bit architectures, so the memory representation is stable\n        across different CPUs and host types.\n      </blockquote>")))
 (idp9884032
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Polymorphic variants are more flexible than normal variants when\n        writing code, but can be less efficient at runtime. This is\n        because there isn't as much static compile-time information\n        available to optimise their memory layout. This isn't always the\n        case, however. A polymorphic variant without any parameters is\n        stored as an unboxed integer and so only takes up one word of\n        memory. Unlike normal variants, the integer value is determined\n        by apply a hash function to the <span><em>name</em></span> of the\n        variant. The hash function isn't exposed directly by the\n        compiler, but the <code>type_conv</code> library from Core\n        provides an alternative implementation.\n      </blockquote>")))
 (idp9882016
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Due to this encoding, there is a limit around 240 variants with\n        parameters that applies to each type definition, but the only\n        limit on the number of variants without parameters is the size\n        of the native integer (either 31- or 63-bits). This limit arises\n        because of the size of the tag byte, and that some of the high\n        numbered tags are reserved.\n      </blockquote>")))
 (idp9879840
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Some theorem provers such as Coq do output code which uses\n        <code>Obj</code> internally, but the external module\n        signatures never expose it. Unless you too have a machine proof\n        of correctness to accompany your use of <code>Obj</code>,\n        stay away from it except for debugging!\n      </blockquote>")))
 (idp9877888
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The <code>Obj</code> module is an undocumented module that\n        exposes the internals of the OCaml compiler and runtime. It is\n        very useful for examining and understanding how your code will\n        behave at runtime, but should <span><em>never</em></span> be used\n        for production code unless you understand the implications. The\n        module bypasses the OCaml type system, making memory corruption\n        and segmentation faults possible.\n      </blockquote>")))
 (idp9872352
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Lists are stored with a representation that is exactly the same\n        as if the list was written as a variant type with\n        <code>Head</code> and <code>Cons</code>. The empty\n        list <code>[]</code> is an integer <code>0</code>,\n        and subsequent blocks have tag <code>0</code> and two\n        parameters: a block with the current value, and a pointer to the\n        rest of the list.\n      </blockquote>")))
 (idp9863888
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        In the above example, the <code>Apple</code> and\n        <code>Kiwi</code> values are still stored as normal OCaml\n        integers with values <code>0</code> and\n        <code>1</code> respectively. The <code>Orange</code>\n        and <code>Pear</code> values both have parameters, and are\n        stored as blocks whose tags ascend from <code>0</code>\n        (and so <code>Pear</code> has a tag of\n        <code>1</code>, as the use of <code>Obj.tag</code>\n        verifies). Finally, the parameters are fields which contain\n        OCaml values within the block, and <code>Obj.field</code>\n        can be used to retrieve them.\n      </blockquote>")))
 (idp9861376
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Variants that have parameters arguments are a little more\n        complex. They are stored as blocks, with the value\n        <span><em>tags</em></span> ascending from 0 (counting from\n        leftmost variants with parameters). The parameters are stored as\n        words in the block.\n      </blockquote>")))
 (idp9858000
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n<code>Obj.magic</code> unsafely forces a type cast between\n        any two OCaml types; in this example the <code>int</code>\n        type hint retrieves the runtime integer value. The\n        <code>Obj.is_block</code> confirms that the value isn't a\n        more complex block, but just an OCaml <code>int</code>.\n      </blockquote>")))
 (idp9855552
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Basic variant types with no extra parameters for any of their\n        branches are simply stored as an OCaml integer, starting with\n        <code>0</code> for the first option and in ascending\n        order.\n      </blockquote>")))
 (idp9852528
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Notice that float tuples are <span><em>not</em></span> optimized\n        in the same way as float records or arrays, and so they have the\n        usual tuple tag value of <code>0</code>. Only records and\n        arrays can have the array optimization, and only if every single\n        field is a float.\n      </blockquote>")))
 (idp9849312
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        You can test this for yourself using the\n        <code>Obj.tag</code> function to check that the allocated\n        block has the expected runtime tag, and\n        <code>Obj.double_field</code> to retrieve a float from\n        within the block.\n      </blockquote>")))
 (idp9845824
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Since each floating-point value is boxed in a separate memory\n        block, it can be inefficient to handle large arrays of floats in\n        comparison to unboxed integers. OCaml therefore special-cases\n        records or arrays that contain <span><em>only</em></span>\n<code>float</code> types. These are stored in a block that\n        contains the floats packed directly in the data section, with\n        the <code>Double_array_tag</code> set to signal to the\n        collector that the contents are not OCaml values.\n      </blockquote>")))
 (idp9843328
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Floating point numbers in OCaml are always stored as full\n        double-precision values. Individual floating point values are\n        stored as a block with a single field that contains the number.\n        This block has the <code>Double_tag</code> set which\n        signals to the collector that the floating point value is not to\n        be scanned.\n      </blockquote>")))
 (idp9839984
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The <code>Obj.repr</code> function retrieves the runtime\n        representation of any OCaml value.\n        <code>Obj.is_block</code> checks the bottom bit to\n        determine if the value is a block header or an unboxed integer.\n      </blockquote>")))
 (idp9837632
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        You can check the difference between a block and a direct\n        integer yourself using the <code>Obj</code> module, which\n        exposes the internal representation of values to OCaml code.\n      </blockquote>")))
 (idp9836160
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Tuples, records and arrays are all represented identically at\n        runtime, with a block with tag <code>0</code>. Tuples and\n        records have constant sizes determined at compile-time, whereas\n        arrays can be of variable length. While arrays are restricted to\n        containing a single type of element in the OCaml type system,\n        this is not required by the memory representation.\n      </blockquote>")))
 (idp9833152
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        (<span><em>avsm</em></span>: explain that integer manipulation is\n        almost as fast due to isa quirks)\n      </blockquote>")))
 (idp9832000
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Since the lowest bit of an OCaml value is reserved, native OCaml\n        integers have a maximum allowable length of 31- or 63-bits,\n        depending on the host architecture. The rationale for reserving\n        the lowest bit is for efficiency. Pointers always point to\n        word-aligned addresses, and so their lower bits are normally\n        zero. By setting the lower bit to a non-zero value for integers,\n        the garbage collector can simply iterate over every header tag\n        to distinguish integers from pointers. This reduces the garbage\n        collection overhead on the overall program.\n      </blockquote>")))
 (idp9825664
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        Many basic types are stored directly as unboxed values at\n        runtime. The native <code>int</code> type is the most\n        obvious, although it drops a single bit of precision due to the\n        tag bit described earlier. Other atomic types such as the\n        <code>unit</code> and empty list <code>[]</code>\n        value are stored as constant integers. Boolean values have a\n        value of <code>0</code> and <code>1</code> for\n        <code>true</code> and <code>false</code>\n        respectively.\n      </blockquote>")))
 (idp9794896
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The exact representation of values inside a block depends on\n        their OCaml type. They are summarised in the table below, and\n        then we'll examine some of them in greater detail.\n      </blockquote>")))
 (idp9793008
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        (<span><em>avsm</em></span>: too much info here) If the header is\n        zero, then the object has been forwarded as part of minor\n        collection, and the first field points to the new location.\n        Also, if the block is on the\n        <code>oldify_todo_list</code>, part of the minor gc, then\n        the second field points to the next entry on the\n        oldify_todo_list.\n      </blockquote>")))
 (idp9790832
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        A block's tag byte is multi-purpose, and indicates whether the\n        data array represents opaque bytes or fields. If a block's tag\n        is greater than or equal to <code>No_scan_tag</code>\n        (251), then the block's data are all opaque bytes, and are not\n        scanned by the collector. The most common such block is the\n        <code>string</code> type, which we describe more below.\n      </blockquote>")))
 (idp9779520
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The size field records the length of the block in memory words.\n        Note that it is limited to 22-bits on 32-bit platforms, which is\n        the reason why OCaml strings are limited to 16MB on that\n        architecture. If you need bigger strings, either switch to a\n        64-bit host, or use the <code>Bigarray</code> module\n        (<span><em>avsm</em></span>: xref). The 2-bit color field is used\n        by the garbage collector to keep track of its status, and is not\n        exposed directly to OCaml programs.\n      </blockquote>")))
 (idp9777424
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        (<span><em>avsm</em></span>: pointers to blocks actually point\n        4/8 bytes into it, for some efficiency reason that I cannot\n        recall right now).\n      </blockquote>")))
 (idp9775568
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        An OCaml <span><em>block</em></span> is the basic unit of\n        allocation on the heap. A block consists of a one-word header\n        (either 32- or 64-bits) followed by variable-length data, which\n        is either opaque bytes or <span><em>fields</em></span>. The\n        collector never inspects opaque bytes, but fields are valid\n        OCaml values. The runtime always inspects fields, and follows\n        them as part of the garbage collection process described\n        earlier. Every block header has a multipurpose tag byte that\n        defines whether to interprete the subsequent data as opaque or\n        OCaml fields.\n      </blockquote>")))
 (idp9772480
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      If the lowest bit of the <code>value</code> is zero, then\n      the value is a pointer. A pointer value is stored unmodified,\n      since pointers are guaranteed to be word-aligned and the bottom\n      bits are always zero. If the pointer is inside an area managed by\n      the OCaml runtime, it is assumed to point to an OCaml\n      <span><em>block</em></span>. If it points outside the OCaml runtime\n      area, it is is treated as an opaque C pointer to some other system\n      resource.\n    </blockquote>")))
 (idp9769168
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      Every OCaml <span><em>value</em></span> is a single word that is\n      either an integer or a pointer. If the lowest bit of the word is\n      non-zero, the value is an unboxed integer. Several OCaml types map\n      onto this integer representation, including\n      <code>bool</code>, <code>int</code>, the empty list,\n      <code>unit</code>, and variants without constructors.\n      Integers are the only unboxed runtime values in OCaml, and are the\n      cheapest values to allocate.\n    </blockquote>")))
 (idp9766048
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The <code>Gc</code> module lets you control all these\n        parameters from your application, and we will discuss garbage\n        collection tuning in (<span><em>avsm</em></span>: crossref).\n      </blockquote>")))
 (idp9764800
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        A garbage collection must <span><em>stop the world</em></span>\n        (that is, halt the application) in order to ensure that blocks\n        can be safely moved. The mark and sweep phases run incrementally\n        over slices of memory, and are broken up into a number of steps\n        that are interspersed with the running OCaml program. Only a\n        compaction touches all the memory in one go, and is a relatively\n        rare operation.\n      </blockquote>")))
 (idp9763264
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The <span><em>sweep</em></span> phase sequentially scans all heap\n        memory and identifies dead blocks that weren't marked earlier.\n        The <span><em>compact</em></span> phase relocates live blocks to\n        eliminate the gaps of free memory between them and ensure memory\n        does not fragment.\n      </blockquote>")))
 (idp9761376
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The major heap consists of a number of chunks of memory, each\n        containing live blocks interspersed with regions of free memory.\n        The runtime system maintains a free list data structure that\n        indexes all the free memory, and this list is used to satisfy\n        allocation requests. OCaml uses mark and sweep garbage\n        collection for the major heap. The <span><em>mark</em></span>\n        phase to traverses the block graph and marks all live blocks by\n        setting a bit in the color tag of the block header.\n        (<span><em>avsm</em></span>: we only explain the color tag in the\n        next section, so rephrase or xref).\n      </blockquote>")))
 (idp9759152
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        One complexity of generational collection is that in order to\n        know which blocks in the minor heap are live, the collector must\n        know which minor-heap blocks are directly pointed to by\n        major-heap blocks. To do this, OCaml maintains a set of such\n        inter-generational pointers, and, through cooperation with the\n        compiler, uses a write barrier to update this set whenever a\n        major-heap block is modified to point at a minor-heap block.\n      </blockquote>")))
 (idp9757696
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n        The minor heap is one contiguous chunk of memory containing a\n        sequence of heap blocks that have been allocated. If there is\n        space, allocating a new block is a fast constant-time operation\n        in which the pointer to the end of the heap is incremented by\n        the desired size. To garbage collect the minor heap, OCaml uses\n        <span><em>copying collection</em></span> to copy all live blocks\n        in the minor heap to the major heap. This only takes work\n        proportional to the number of live blocks in the minor heap,\n        which is typically small according to the generational\n        hypothesis.\n      </blockquote>")))
 (idp9753552
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      With the typical OCaml programming style, many small blocks are\n      frequently allocated, used for a short period of time, and then\n      never used again. OCaml takes advantage of this fact to improve\n      the performance of allocation and collection by using a\n      <span><em>generational</em></span> garbage collector. This means\n      that it has different memory regions to hold blocks based on how\n      long the blocks have been alive. OCaml's heap is split in two;\n      there is a small, fixed-size <span><em>minor heap</em></span> used\n      for initially allocating most blocks, and a large, variable-sized\n      <span><em>major heap</em></span> for holding blocks that have been\n      alive longer or are larger than 4KB. A typical functional\n      programming style means that young blocks tend to die young, and\n      old blocks tend to stay around for longer than young ones (this is\n      referred to as the <span><em>generational hypothesis</em></span>).\n      To reflect this, OCaml uses different memory layouts and garbage\n      collection algorithms for the major and minor heaps.\n    </blockquote>")))
 (idp9749344
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      The garbage collector does not keep constant track of blocks as\n      they are allocated and used. Instead, it regularly scans blocks by\n      starting from a set of <span><em>roots</em></span>, which are\n      values that the application always has access to (such as the\n      stack). The GC maintains a directed graph in which heap blocks are\n      nodes, and there is an edge from heap block <code>b1</code>\n      to heap block <code>b2</code> if some field of\n      <code>b1</code> points to <code>b2</code>. All blocks\n      reachable from the roots by following edges in the graph must be\n      retained, and unreachable blocks can be reused.\n    </blockquote>")))
 (idp9747472
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      When there is'nt enough memory available to satisfy an allocation\n      request from the allocated heap blocks, the runtime system invokes\n      the <span><em>garbage collector</em></span> (or GC). An OCaml\n      program does not explicitly free a heap block when it is done with\n      it, and the GC must determine which heap blocks are\n      &quot;alive&quot; and which heap blocks are\n      <span><em>dead</em></span>, i.e. no longer in use. Dead blocks are\n      collected and their memory made available for re-use by the\n      application.\n    </blockquote>")))
 (idp9743712
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      An expression such as the record above requires a new block of\n      memory with two words of available space. One word holds the\n      <code>foo</code> field and the second word holds the\n      <code>bar</code> field. The OCaml compiler translates such\n      an expression into an explicit allocation for the block from\n      OCaml's runtime system: a C library that provides a collection of\n      routines that can be called by running OCaml programs. The runtime\n      system manages a <span><em>heap</em></span>, which a collection of\n      memory regions it obtains from the operating system using\n      <span><em>malloc(3)</em></span>. The OCaml runtime uses these\n      memory regions to hold <span><em>heap blocks</em></span>, which it\n      then fills up in response to allocation requests by the OCaml\n      program.\n    </blockquote>")))
 (idp9742304
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n      A running OCaml program uses blocks of memory (i.e. contiguous\n      sequences of words in RAM) to represent many of the values that it\n      deals with such as tuples, records, closures or arrays. An OCaml\n      program implicitly allocates a block of memory when such a value\n      is created.\n    </blockquote>")))
 (idp9740704
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n    Let's start by explaining the memory layout, and then move onto the\n    details of how C bindings work.\n  </blockquote>")))
 (idp9739040
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n    Since OCaml verifies these properties at compile time, it doesn't\n    need to keep track of as much information at runtime. Thus, later\n    stages of the compiler can discard and simplify the type\n    declarations to a much more minimal subset that's actually required\n    to distinguish polymorphic values at runtime. This is a major\n    performance win versus something like a Java or .NET method call,\n    where the runtime must look up the concrete instance of the object\n    and dispatch the method call. Those languages amortize some of the\n    cost via &quot;Just-in-Time&quot; dynamic patching, but OCaml\n    prefers runtime simplicity instead.\n  </blockquote>")))
 (idp9735792
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n    The OCaml compiler runs through several phases of during the\n    compilation process. After syntax checking, the next stage is\n    <span><em>type checking</em></span>. In a validly typed program, a\n    function cannot be applied with an unexpected type. For example, the\n    <code>print_endline</code> function must receive a single\n    <code>string</code> argument, and an <code>int</code>\n    will result in a type error.\n  </blockquote>")))
 (idp9733888
  ((file understanding-the-runtime-system.html)
   (html
    "<blockquote>\n    Much of the static type information contained within an OCaml\n    program is checked and discarded at compilation time, leaving a much\n    simpler <span><em>runtime</em></span> representation for values.\n    Understanding this difference is important for writing efficient\n    programs, and also for interfacing with C libraries that work\n    directly with the runtime system.\n  </blockquote>")))
 (idp7647504
  ((file records.html)
   (html
    "<blockquote>\n      Field iterators are useful for a variety of tasks, from building\n      validation functions to scaffolding the definition of a web-form\n      based on a record type, all with a guarantee that you've\n      exhaustively considered all elements of the field.\n    </blockquote>")))
 (idp7645664
  ((file records.html)
   (html
    "<blockquote>\n      The advantage of using field iterators is that when the definition\n      of <code>Logon</code> changes, <code>iter</code> will\n      change along with it, prompting you to handle whatever new cases\n      arise.\n    </blockquote>")))
 (idp7639808
  ((file records.html)
   (html
    "<blockquote>\n<code>fieldslib</code> also provides higher-level operators,\n      like <code>Fields.fold</code> and\n      <code>Fields.iter</code>, which let you iterate over all the\n      fields of a record. The following function uses\n      <code>Logon.Fields.iter</code> and\n      <code>show_field</code> to print out all the fields of a\n      <code>Logon</code> record.\n    </blockquote>")))
 (idp7637168
  ((file records.html)
   (html
    "<blockquote>\n      Here's an example of <code>show_field</code> in action.\n    </blockquote>")))
 (idp7633952
  ((file records.html)
   (html
    "<blockquote>\n      We can use these first class fields to do things like write a\n      generic function for displaying a record field. The function\n      <code>show_field</code> takes three arguments: the\n      <code>Field.t</code>, a function for converting the contents\n      of the field in question to a string, and the record type.\n    </blockquote>")))
 (idp7633168
  ((file records.html)
   (html
    "<blockquote>\n          The (optional) ability to set the record field, which is\n          present only if the field is mutable.\n        </blockquote>")))
 (idp7632320
  ((file records.html)
   (html
    "<blockquote>\n          The ability to do a functional update of that field\n        </blockquote>")))
 (idp7631552
  ((file records.html)
   (html
    "<blockquote>\n          The ability to extract the field\n        </blockquote>")))
 (idp7630784
  ((file records.html)
   (html
    "<blockquote>\n          The name of the field as a string\n        </blockquote>")))
 (idp7627120
  ((file records.html)
   (html
    "<blockquote>\n      In addition to generating field accessor functions,\n      <code>fieldslib</code> also creates a sub-module called\n      <code>Fields</code> that contains a first class\n      representative of each field, in the form of a value of type\n      <code>Field.t</code>. A <code>Field.t</code> bundles\n      up the following functionality of a record filed:\n    </blockquote>")))
 (idp7624864
  ((file records.html)
   (html
    "<blockquote>\n      Given that definition, we can use the function\n      <code>Logon.user</code> to extract the user field from a\n      logon message.\n    </blockquote>")))
 (idp7621424
  ((file records.html)
   (html
    "<blockquote>\n<code>fieldslib</code> is invoked by putting the\n      <code>with fields</code> annotation at the end of the\n      declaration of a record type. So, for example, we could have\n      defined <code>Logon</code> as follows.\n    </blockquote>")))
 (idp7618304
  ((file records.html)
   (html
    "<blockquote>\n      Here, we wrote a small function\n      <code>(fun x -&gt; x.Logon.user)</code> to access the\n      <code>user</code> field. This kind of accessor function is a\n      common enough pattern that that it would be convenient to generate\n      them automatically. The <code>fieldslib</code> syntax\n      extension that ships with <code>Core</code> does just that.\n    </blockquote>")))
 (idp7616016
  ((file records.html)
   (html
    "<blockquote>\n      Consider the following function for extracting the usernames from\n      a list of <code>Logon</code> messages.\n    </blockquote>")))
 (idp7613904
  ((file records.html)
   (html
    "<blockquote>\n      OCaml's policy of immutable-by-default is a good one, but\n      imperative programming does have its place. We'll discuss more\n      about how (and when) to use OCaml's imperative features in\n      <a href=\"a-guided-tour.html#imperative-programming\">the section called \226\128\156Imperative programming\226\128\157</a>.\n    </blockquote>")))
 (idp7612720
  ((file records.html)
   (html
    "<blockquote>\n      Note that <code>&lt;-</code> is not needed for\n      initialization, because all fields of a record, including mutable\n      ones, must be specified when the record is created.\n    </blockquote>")))
 (idp7609712
  ((file records.html)
   (html
    "<blockquote>\n      We then use the <code>&lt;-</code> operator for actually\n      changing the state. The side-effecting version of\n      <code>register_heartbeat</code> would be written as follows.\n    </blockquote>")))
 (idp7607312
  ((file records.html)
   (html
    "<blockquote>\n      Like most OCaml values, records are immutable by default. You can,\n      however, declare individual record fields as mutable. For example,\n      we could take the <code>client_info</code> type and make the\n      fields that may need to change over time mutable, as follows.\n    </blockquote>")))
 (idp7603920
  ((file records.html)
   (html
    "<blockquote>\n      The original implementation of\n      <code>register_heartbeat</code> would now be invalid, and\n      thus the compiler would warn us to think about how to handle this\n      new field. But the version using a functional update continues to\n      compile as is, even though it incorrectly ignores the new field.\n      The correct thing to do would be to update the code as follows.\n    </blockquote>")))
 (idp7601936
  ((file records.html)
   (html
    "<blockquote>\n      Functional updates make your code independent of the identity of\n      the fields in the record that are not changing. This is often what\n      you want, but it has downsides as well. In particular, if you\n      change the definition of your record to have more fields, the type\n      system will not prompt you to reconsider whether your update code\n      should affect those fields. Consider what happens if we decided to\n      add a field for the status message received on the last heartbeat.\n    </blockquote>")))
 (idp7599952
  ((file records.html)
   (html
    "<blockquote>\n      Given this, we can rewrite <code>register_heartbeat</code>\n      more concisely.\n    </blockquote>")))
 (idp7599392
  ((file records.html)
   (html
    "<blockquote>\n      The purpose of the functional update is to create a new record\n      based on an existing one, with a set of field changes layered on\n      top.\n    </blockquote>")))
 (idp7596704
  ((file records.html)
   (html
    "<blockquote>\n      This is fairly verbose, given that there's only one field that we\n      actually want to change, and all the others are just being copied\n      over from <code>t</code>. We can use OCaml's\n      <span><em>functional update</em></span> syntax to do this more\n      tersely. The syntax of a functional update is as follows.\n    </blockquote>")))
 (idp7594128
  ((file records.html)
   (html
    "<blockquote>\n      Fairly often, you will find yourself wanting to create a new\n      record that differs from an existing record in only a subset of\n      the fields. For example, imagine our logging server had a record\n      type for representing the state of a given client, including when\n      the last heartbeat was received from that client. The following\n      defines a type for representing this information, as well as a\n      function for updating the client information when a new heartbeat\n      arrives.\n    </blockquote>")))
 (idp7592480
  ((file records.html)
   (html
    "<blockquote>\n      For functions defined within the module where a given record is\n      defined, the module qualification goes away entirely. And indeed,\n      for things like constructors, defining it within the module is\n      often the best solution.\n    </blockquote>")))
 (idp7589328
  ((file records.html)
   (html
    "<blockquote>\n      The module name <code>Log_entry</code> is required to\n      qualify the fields, because this function is outside of the\n      <code>Log_entry</code> module where the record was defined.\n      OCaml only requires the module qualification for one record field,\n      however, so we can write this more concisely.\n    </blockquote>")))
 (idp7587536
  ((file records.html)
   (html
    "<blockquote>\n      Now, our heartbeat-creation function can be rendered as follows.\n    </blockquote>")))
 (idp7585584
  ((file records.html)
   (html
    "<blockquote>\n      Another approach is to mint a module for each type. This is\n      actually a broadly useful idiom, providing for each type a\n      namespace within which to put related values. Using this style we\n      would write:\n    </blockquote>")))
 (idp7584992
  ((file records.html)
   (html
    "<blockquote>\n      This eliminates the collisions and is simple enough to do. But it\n      leaves you with awkwardly named record fields, and adds needless\n      repetition and verbosity to your code.\n    </blockquote>")))
 (idp7583136
  ((file records.html)
   (html
    "<blockquote>\n      There are two common solutions to this problem. The first is to\n      add a prefix to each field name to make it unique, as shown below.\n    </blockquote>")))
 (idp7576896
  ((file records.html)
   (html
    "<blockquote>\n      The problem is that the declaration of <code>logon</code>\n      (and <code>heartbeat</code>) shadowed some of the fields of\n      <code>log_entry</code>. As a result, the fields\n      <code>time</code> and <code>session_id</code> are\n      assumed to be fields of <code>logon</code>, and\n      <code>important</code> and <code>message</code>, which\n      were not shadowed, are assumed to be fields of\n      <code>log_entry</code>. The compiler therefore complains\n      that we're trying to construct a record with fields from two\n      different record types.\n    </blockquote>")))
 (idp7575120
  ((file records.html)
   (html
    "<blockquote>\n      The fact that we reused field names will cause trouble when we try\n      to construct a message.\n    </blockquote>")))
 (idp7571120
  ((file records.html)
   (html
    "<blockquote>\n      Below, the <code>log_entry</code> message is used to deliver\n      a log entry to the server for processing. The\n      <code>logon</code> message is sent when a client initiates a\n      connection, and includes the identity of the user connecting and\n      credentials used for authentication. Finally, the\n      <code>heartbeat</code> message is periodically sent by the\n      client to demonstrate to the server that the client is alive and\n      connected. All of these messages include a session id and the time\n      the message was generated.\n    </blockquote>")))
 (idp7570448
  ((file records.html)
   (html
    "<blockquote>\n      Defining records with the same field names can be problematic.\n      Let's consider a simple example: building types to represent the\n      protocol used for a logging server. The following types represent\n      messages a server might receive from a client.\n    </blockquote>")))
 (idp7568720
  ((file records.html)
   (html
    "<blockquote>\n      Together, labeled arguments, field names, and field and label\n      punning, encourage a style where you propagate the same names\n      throughout your code-base. This is generally good practice, since\n      it encourages consistent naming, which makes it easier for new\n      people to navigate your source.\n    </blockquote>")))
 (idp7567088
  ((file records.html)
   (html
    "<blockquote>\n      This is considerably more concise than what you would get without\n      punning at all.\n    </blockquote>")))
 (idp7565472
  ((file records.html)
   (html
    "<blockquote>\n      You can take advantage of both field punning and label punning\n      when writing a function for constructing a record from labeled\n      arguments, as shown below.\n    </blockquote>")))
 (idp7564880
  ((file records.html)
   (html
    "<blockquote>\n      In the above code, we defined variables corresponding to the\n      record fields first, and then the record declaration itself simply\n      listed the fields that needed to be included.\n    </blockquote>")))
 (idp7562224
  ((file records.html)
   (html
    "<blockquote>\n      Field punning can also be used to construct a record. Consider the\n      following code for generating a <code>host_info</code>\n      record.\n    </blockquote>")))
 (idp7559760
  ((file records.html)
   (html
    "<blockquote>\n      When the name of a variable coincides with the name of a record\n      field, OCaml provides some handy syntactic shortcuts. For example,\n      the pattern in the following function binds all of the fields in\n      question to variables of the same name. This is called\n      <span><em>field punning</em></span>.\n    </blockquote>")))
 (idp7557584
  ((file records.html)
   (html
    "<blockquote>\n      Generally, the right default is to turn the warning for incomplete\n      record matches on, and to explicitly disable it with an\n      <code>_</code> where necessary.\n    </blockquote>")))
 (idp7555824
  ((file records.html)
   (html
    "<blockquote>\n      We can disable the warning for a given pattern by explicitly\n      acknowledging that we are ignoring extra fields. This is done by\n      adding an underscore to the pattern, as shown below.\n    </blockquote>")))
 (idp7552512
  ((file records.html)
   (html
    "<blockquote>\n      Happily, OCaml does offer an optional warning for missing fields\n      in a record pattern. With that warning turned on (which you can do\n      in the toplevel by typing\n      <code>#warnings &quot;+9&quot;</code>), the compiler will\n      warn about the missing field.\n    </blockquote>")))
 (idp7550576
  ((file records.html)
   (html
    "<blockquote>\n      The code for <code>host_info_to_string</code> would continue\n      to compile without change. In this particular case, it's pretty\n      clear that you might want to update\n      <code>host_info_to_string</code> in order to take into\n      account the new field, and it would be nice if the type system\n      would give you a warning about the change.\n    </blockquote>")))
 (idp7547808
  ((file records.html)
   (html
    "<blockquote>\n      As an example, imagine that we wanted to add a new field to our\n      <code>host_info</code> record called\n      <code>os_version</code>, as shown below.\n    </blockquote>")))
 (idp7546960
  ((file records.html)
   (html
    "<blockquote>\n      Another important characteristic of record patterns is that they\n      don't need to be complete; a pattern can mention only a subset of\n      the fields in the record. This can be convenient, but it's can\n      also be error prone. In particular, this means that when new\n      fields are added to the record, code that should be updated to\n      react to the presence of those new fields will not be flagged by\n      the compiler.\n    </blockquote>")))
 (idp7545008
  ((file records.html)
   (html
    "<blockquote>\n      Note that the pattern that we used had only a single case, rather\n      than using several cases separated by <code>|</code>s. We\n      only needed a single pattern because record patterns are\n      <span><em>irrefutable</em></span>, meaning that, because the layout\n      of a record is always the same, a record pattern match will never\n      fail at runtime. In general, types with a fixed structure, like\n      records and tuples, have irrefutable patterns, whereas types with\n      variable structure, like lists and variants, do not.\n    </blockquote>")))
 (idp7542336
  ((file records.html)
   (html
    "<blockquote>\n      Another way of getting information out of a record is by using a\n      pattern match, as in the definition of\n      <code>host_info_to_string</code> below.\n    </blockquote>")))
 (idp7539984
  ((file records.html)
   (html
    "<blockquote>\n    Once we have a record value in hand, we can extract elements from\n    the record field using dot-notation.\n  </blockquote>")))
 (idp7537920
  ((file records.html)
   (html
    "<blockquote>\n    You might wonder how the compiler inferred that\n    <code>my_host</code> is of type <code>host_info</code>.\n    The hook that the compiler uses in this case to figure out the type\n    is the record field names. It turns out that, within a given scope,\n    each record field name is associated with a unique record type.\n    Later in the chapter, we'll talk about what to do when you want to\n    have the same record fields in multiple records.\n  </blockquote>")))
 (idp7533856
  ((file records.html)
   (html
    "<blockquote>\n    We can construct a <code>host_info</code> just as easily. The\n    following code uses the <code>Shell</code> module from\n    <code>Core_extended</code> to dispatch commands to the shell\n    to extract the information we need about the computer we're running\n    on.\n  </blockquote>")))
 (idp7531744
  ((file records.html)
   (html
    "<blockquote>\n    Here's a simple example, a <code>host_info</code> record that\n    summarizes information about a given computer.\n  </blockquote>")))
 (idp7530128
  ((file records.html)
   (html
    "<blockquote>\n    A record represents a collection of values stored together as one,\n    where each component is identified by a different field name. The\n    basic syntax for a record type declaration is as follows.\n  </blockquote>")))
 (idp7528112
  ((file records.html)
   (html
    "<blockquote>\n    One of OCaml's best features is its concise and expressive system\n    for declaring new datatypes. Two key elements of that system are\n    <span><em>records</em></span> and <span><em>variants</em></span>, both\n    of which we discussed briefly in\n    <a href=\"a-guided-tour.html\">Chapter\194\1602, <i>A Guided Tour</i></a>. In this chapter we'll\n    cover records in more depth, covering more of the details of how\n    they work, as well as advice on how to use them effectively in your\n    software designs.\n  </blockquote>")))
 (idp4171136
  ((file prologue.html)
   (html
    "<blockquote>\n        Yaron obtained his PhD in Computer Science from Cornell\n        University, where he studied distributed systems. Yaron has\n        lectured, blogged and written about OCaml for years, with\n        articles published in Communications of the ACM and the Journal\n        of Functional Programming. He chairs the steering committee of\n        the Commercial Users of Functional Programming, and is a member\n        of the steering committee for the International Conference on\n        Functional Programming.\n      </blockquote>")))
 (idp6055888
  ((file prologue.html)
   (html
    "<blockquote>\n        Yaron Minsky heads the Technology group at Jane Street, a\n        proprietary trading firm that is the largest industrial user of\n        OCaml. He was responsible for introducing OCaml to the company\n        and for managing the company's transition to using OCaml for all\n        of its core infrastructure. Today, billions of dollars worth of\n        securities transactions flow each day through those systems.\n      </blockquote>")))
 (idp5825280
  ((file prologue.html)
   (html
    "<blockquote>\n        Prior to obtaining his PhD in 2006 from the University of\n        Cambridge, Anil had a diverse background in industry at Network\n        Appliance, NASA and Internet Vision. In addition to professional\n        and academic activities, he is an active member of the\n        open-source development community with the OpenBSD operating\n        system, is co-chair of the Commercial Uses of Functional\n        Programming workshop, and serves on the boards of startup\n        companies such as Ashima Arts where OCaml is extensively used.\n      </blockquote>")))
 (idp3869776
  ((file prologue.html)
   (html
    "<blockquote>\n        Anil Madhavapeddy is a Senior Research Fellow at the University\n        of Cambridge, based in the Systems Research Group. He was on the\n        original team that developed the Xen hypervisor, and helped\n        develop an industry-leading cloud management toolstack written\n        entirely in OCaml. This XenServer product has been deployed on\n        hundreds of thousands of physical hosts, and drives critical\n        infrastructure for many Fortune 500 companies.\n      </blockquote>")))
 (idp4982752
  ((file prologue.html)
   (html
    "<blockquote>\n        Prior to joining Google, Jason was an Assistant Professor of\n        Computer Science at Caltech, where his research was in reliable\n        and fault-tolerant computing systems, including programming\n        language design, formal methods, compilers, and new models of\n        distributed computation. He obtained his PhD in Computer Science\n        from Cornell University, where he studied programming languages.\n        He is the author of the MetaPRL system, a logical framework for\n        design and analysis of large software systems; OMake, an\n        advanced build system for large software projects. He is the\n        author of the textbook, <span><em>An Introduction to Objective\n        Caml</em></span> (unpublished).\n      </blockquote>")))
 (idp3366288
  ((file prologue.html)
   (html
    "<blockquote>\n        Jason Hickey is a Software Engineer at Google Inc. in Mountain\n        View, California. He is part of the team that designs and\n        develops the global computing infrastructure used to support\n        Google services, including the software systems for managing and\n        scheduling massively distributed computing resources.\n      </blockquote>")))
 (idp5890752
  ((file prologue.html)
   (html
    "<blockquote>\n      We believe that Core makes OCaml a better tool, and that's why\n      we'll present OCaml and Core together.\n    </blockquote>")))
 (idp5354640
  ((file prologue.html)
   (html
    "<blockquote>\n      But all is not lost! There is an effective alternative to the\n      OCaml standard library called Core. Jane Street, a company that\n      has been using OCaml for nearly a decade, developed Core for its\n      own internal use, but it was designed from the start with an eye\n      towards being a general-purpose standard library. Core is also\n      distributed with syntax-extensions which provide essential new\n      functionality to OCaml; and there are additional libraries, like\n      Core_extended and Async, that provide even more useful\n      functionality.\n    </blockquote>")))
 (idp4615856
  ((file prologue.html)
   (html
    "<blockquote>\n      A language on its own isn't enough. You also need a rich set of\n      libraries to base your applications on. A common source of\n      frustration for those learning OCaml is that the standard library\n      that ships with the OCaml compiler is not ideal. While it's well\n      implemented, it covers only a small subset of the functionality\n      you expect from a standard library, and the interfaces are\n      idiosyncratic and inconsistent.\n    </blockquote>")))
 (idp4741584
  ((file prologue.html)
   (html
    "<blockquote>\n      Among this worthy set of languages, OCaml stands apart because it\n      manages to provide a great deal of power while remaining highly\n      pragmatic, highly performant, and comparatively simple to use and\n      understand. It is this that makes OCaml a great choice for\n      programmers who want to step up to a better programming language,\n      and at the same time want to get practical work done.\n    </blockquote>")))
 (idp3949328
  ((file prologue.html)
   (html
    "<blockquote>\n      Despite their importance, these ideas have made only limited\n      inroads into mainstream languages. And when they do arrive there,\n      like higher-order functions in C# or parametric polymorphism in\n      Java, it's typically in a limited and awkward form. The only\n      languages that support these ideas well are statically-typed\n      functional programming languages like OCaml, F#, Haskell, Scala\n      and Standard-ML.\n    </blockquote>")))
 (idp4489104
  ((file prologue.html)
   (html
    "<blockquote>\n      Some of these features you already know and love, and some are\n      probably new to you. But as we hope to demonstrate over the course\n      of this book, it turns out that there is something transformative\n      about having them all together and able to interact with each\n      other in a single language.\n    </blockquote>")))
 (idp3681936
  ((file prologue.html)
   (html "<blockquote>\n          Type inference\n        </blockquote>")))
 (idp3434416
  ((file prologue.html)
   (html
    "<blockquote>\n          Algebraic datatypes and pattern-matching\n        </blockquote>")))
 (idp3807760
  ((file prologue.html)
   (html
    "<blockquote>\n          Support for programming with immutable values\n        </blockquote>")))
 (idp5567264
  ((file prologue.html)
   (html
    "<blockquote>\n          Parametric polymorphism\n        </blockquote>")))
 (idp5397904
  ((file prologue.html)
   (html
    "<blockquote>\n          Static type-checking\n        </blockquote>")))
 (idp4732432
  ((file prologue.html)
   (html
    "<blockquote>\n          First-class and higher-order functions\n        </blockquote>")))
 (idp2080624
  ((file prologue.html)
   (html "<blockquote>\n          Garbage collection\n        </blockquote>")))
 (idp5908256
  ((file prologue.html)
   (html
    "<blockquote>\n      But not all ideas about how to design a programming language are\n      created equal. Over the last 40 years, a few key language features\n      have emerged that together form a kind of sweet-spot in language\n      design. These features include:\n    </blockquote>")))
 (idp3931264
  ((file prologue.html)
   (html
    "<blockquote>\n      The programming languages that you use affect your productivity.\n      They affect how reliable your software is, how efficient it is,\n      how easy it is to read, to refactor, and to extend. And the\n      programming languages you know and use can deeply affect how you\n      think about programming and software design.\n    </blockquote>")))
 (idp2920304
  ((file prologue.html)
   (html
    "<blockquote>\n      Programming languages matter.\n    </blockquote>")))
 (idp5733728
  ((file prologue.html)
   (html
    "<blockquote>\n<span><em>(yminsky: this is something of a placeholder. We need a\n    real introduction that should talk, amongst other things, about what\n    kinds of applications OCaml is good for and why one should want to\n    learn it. Also, some coverage of who uses OCaml successfully\n    now.)</em></span>\n</blockquote>")))
 (idp10158784
  ((file performance-tuning-and-profiling.html)
   (html
    "<blockquote>\n        requires my dtrace/instruments patch for libasmrun\n      </blockquote>")))
 (idp10157120
  ((file performance-tuning-and-profiling.html)
   (html
    "<blockquote>\n        requires fabrice's frame pointer patch\n      </blockquote>")))
 (idp10155408
  ((file performance-tuning-and-profiling.html)
   (html
    "<blockquote>\n        requires shinwell's patch in ocaml trunk via opam\n      </blockquote>")))
 (idp10152560
  ((file performance-tuning-and-profiling.html)
   (html
    "<blockquote>\n      ocamlcp and call trace information\n    </blockquote>")))
 (idp10209744
  ((file parsing-with-ocamllex-and-ocamlyacc.html)
   (html "<blockquote>\n</blockquote>")))
 (idp10208032
  ((file packaging-and-build-systems.html)
   (html "<blockquote>\n</blockquote>")))
 (idp10206256
  ((file packaging-and-build-systems.html)
   (html "<blockquote>\n</blockquote>")))
 (idp10203504
  ((file packaging-and-build-systems.html)
   (html "<blockquote>\n</blockquote>")))
 (idp10201712
  ((file packaging-and-build-systems.html)
   (html "<blockquote>\n</blockquote>")))
 (idp10182912
  ((file packaging-and-build-systems.html)
   (html
    "<blockquote>\n        To obtain a bytecode executable, you need to compile a set of\n        <code>cmo</code> object files, and then link them into an\n        executable\n      </blockquote>")))
 (idp10167648
  ((file packaging-and-build-systems.html)
   (html
    "<blockquote>\n        Here are some of the intermediate files generated by\n        <code>ocamlc</code>:\n      </blockquote>")))
 (idp10165344
  ((file packaging-and-build-systems.html)
   (html
    "<blockquote>\n        The simplest code generator is the <code>ocamlc</code>\n        compiler, which outputs bytecode that is interpreted via the\n        <code>ocamlrun</code> runtime. The OCaml bytecode virtual\n        machine is a stack machine (much like the Java Virtual Machine),\n        with the exception of a single register that stores the most\n        recent result. This provides a simple runtime model that is easy\n        to implement or embed within other systems, but executes rather\n        slowly due to being interpreted.\n      </blockquote>")))
 (idp10162752
  ((file packaging-and-build-systems.html)
   (html
    "<blockquote>\n      There are two distinct compilers for OCaml code included in the\n      standard distribution. The first outputs bytecode that is\n      interpreted at runtime, and the second generates fast, efficient\n      native code directly. Both of these share the front-end\n      type-checking logic, and only diverge when it comes to code\n      generation.\n    </blockquote>")))
 (idp10160656
  ((file packaging-and-build-systems.html)
   (html
    "<blockquote>\n    The OCaml toolchain is structured much like a C compiler, with\n    several tools that generate intermediate files and finally link\n    against a runtime. The final outputs don't have to be just\n    executables. Many people embed OCaml code as object files that are\n    called from other applications, or even compile it to Javascript and\n    other esoteric targets. Let's start by covering some of the standard\n    OCaml tools, and then move on to some of the higher level methods\n    for packaging and publishing your code online.\n  </blockquote>")))
 (idp9729056
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        The mixin pattern isn't limited to non-polymorphic classes, of\n        course. We can use it to implement generic features as well. The\n        following mixin defines functional-style iteration in terms of\n        the imperative iterator pattern.\n      </blockquote>")))
 (idp9726896
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        In this particular case, the mixin works only for a collection\n        of integers, so we can't add the mixin to the polymorphic class\n        definition <code>['a] slist</code> itself. However, the\n        result of using the mixin is that the integer collection has a\n        method <code>sum</code>, and it is done with very little\n        of the fuss we would need if we used object composition instead.\n      </blockquote>")))
 (idp9724416
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        The collections are different is some ways, but they share a\n        common pattern for iteration that we can re-use. For a simple\n        example, let's define a mixin that implements an arithmetic sum\n        for a collection of integers.\n      </blockquote>")))
 (idp9720976
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        That's too abstract, so let's give an example based on\n        collections. In Section XXX:Objecttypes, we introduced the\n        <span><em>iterator</em></span> pattern, where an\n        <span><em>iterator</em></span> object is used to enumerate the\n        elements of a collection. Lots of containers can have iterators,\n        singly-linked lists, dictionaries, vectors, etc.\n      </blockquote>")))
 (idp9716736
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        In any case, if you're programming with objects, there's one\n        general pattern for multiple inheritance that is both useful and\n        reasonably simple, the <span><em>mixin</em></span> pattern.\n        Generically, a <span><em>mixin</em></span> is just a virtual\n        class that implements a feature based on another one. If you\n        have a class that implements methods <span><em>A</em></span>, and\n        you have a mixin <span><em>M</em></span> that provides methods\n        <span><em>B</em></span> from <span><em>A</em></span>, then you can\n        inherit from <span><em>M</em></span> -- &quot;mixing&quot; it in\n        -- to get features <span><em>B</em></span>.\n      </blockquote>")))
 (idp9715856
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        When should you use multiple inheritance? If you ask multiple\n        people, you're likely to get multiple (perhaps heated) answers.\n        Some will argue that multiple inheritance is overly complicated;\n        others will argue that inheritance is problematic in general,\n        and one should use object composition instead. But regardless of\n        who you talk to, you will rarely hear that multiple inheritance\n        is great and you should use it widely.\n      </blockquote>")))
 (idp9707168
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        To reiterate, to understand what inheritance means, replace each\n        <code>inherit</code> directive with its definition, and\n        take the last definition of each method or field. This holds\n        even for private methods. However, it does\n        <span><em>not</em></span> hold for private methods that are\n        &quot;really&quot; private, meaning that they have been hidden\n        by a type constraint. In the following definitions, there are\n        three definitions of the private method <code>g</code>.\n        However, the definition of <code>g</code> in\n        <code>m8</code> is not overridden, because it is not part\n        of the class type for <code>m8</code>.\n      </blockquote>")))
 (idp9703424
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Of course, it is unlikely that you will define two methods or\n        two fields of the same name in the same class. However, the\n        rules for inheritance follow the same pattern: the last\n        definition wins. In the following definition, the\n        <code>inherit</code> declaration comes last, so the method\n        definition <code>method get = 2</code> overrides the\n        previous definition, always returning 2.\n      </blockquote>")))
 (idp9701248
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Fields have similar behavior, though the compiler produces a\n        warning message about the override.\n      </blockquote>")))
 (idp9698608
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        First, let's consider what happens when we define a method more\n        than once. In the following example, the method\n        <code>get</code> is defined twice; the second definition\n        &quot;wins,&quot; meaning that it overrides the first one.\n      </blockquote>")))
 (idp9697920
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        If there is one thing to remember about inheritance in OCaml, it\n        is this: inheritance is like textual inclusion. If there is more\n        than one definition for a name, the last definition wins. Let's\n        look at some artificial, but illustrative, examples.\n      </blockquote>")))
 (idp9697136
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        The main &quot;trickiness&quot; of multiple inheritance is due\n        to naming -- what happens when a method or field with some name\n        is defined in more than one class?\n      </blockquote>")))
 (idp9694816
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      When a class inherits from more than one superclass, it is using\n      <span><em>multiple inheritance</em></span>. Multiple inheritance\n      extends the variety of ways in which classes can be combined, and\n      it can be quite useful, particularly with virtual classes.\n      However, it can be tricky to use, particularly when the\n      inheritance hierarchy is a graph rather than a tree, so it should\n      be used with care.\n    </blockquote>")))
 (idp9692144
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      This level of dependency on the implementation details is\n      possible, but it is hard to justify the use of a virtual class --\n      why not just define the <code>swap</code> method as part of\n      the concrete class? Virtual classes are better suited for\n      situations where there are multiple (useful) implementations of\n      the virtual parts. In most cases, this will be public virtual\n      methods.\n    </blockquote>")))
 (idp9690304
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We've been mentioning that fields can be virtual too. Here is\n      another implementation of the swapper, this time with direct\n      access to the array of values.\n    </blockquote>")))
 (idp9688544
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      One way to view a <code>virtual</code> class is that it is\n      like a functor, where the &quot;inputs&quot; are the declared, but\n      not defined, virtual methods and fields. The functor application\n      is implemented through inheritance, when virtual methods are given\n      concrete implementations.\n    </blockquote>")))
 (idp9686048
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Here's a different implementation using\n      <code>HashTbl</code>.\n    </blockquote>")))
 (idp9681856
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      At some future time, we may settle on a concrete implementation\n      for the vector. We can inherit from the\n      <code>abstract_swappable_bvector</code> to get the\n      <code>swap</code> method &quot;for free.&quot; Here's one\n      implementation using arrays.\n    </blockquote>")))
 (idp9676928
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      One way to do this is to declare the\n      <code>swappable_vector</code> abstractly, declaring the\n      methods <code>get</code> and <code>set</code>, but\n      leaving the implementation for later. However, the\n      <code>swap</code> method can be defined immediately.\n    </blockquote>")))
 (idp9671376
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In the previous section, we defined a class\n      <code>swappable_vector</code> that inherits from\n      <code>array_vector</code> and adds a <code>swap</code>\n      method. In fact, the <code>swap</code> method could be\n      defined for any object with <code>get</code> and\n      <code>set</code> methods; it doesn't have to be the specific\n      class <code>array_vector</code>.\n    </blockquote>")))
 (idp9668832
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A <span><em>virtual</em></span> class is a class where some methods\n      or fields are declared, but not implemented. This should not be\n      confused with the word &quot;virtual&quot; as it is used in C++.\n      In C++, a &quot;virtual&quot; method uses dynamic dispatch,\n      regular non-virtual methods use static dispatched. In OCaml,\n      <span><em>all</em></span> methods use dynamic dispatch, but the\n      keyword <span><em>virtual</em></span> means the method or field is\n      not implemented.\n    </blockquote>")))
 (idp9664176
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The key property of private methods is that they are visible to\n      subclasses, but not anywhere else. If you want the stronger\n      guarantee that a method is <span><em>really</em></span> private,\n      not even accessible in subclasses, you can use an explicit typing\n      that omits the method. In the following code, the\n      <code>move_up</code> method is explicitly omitted from the\n      object type, and it can't be invoked in subclasses.\n    </blockquote>")))
 (idp9662896
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The method <code>move_up</code> implements the process of\n      restoring heap order as a recursive method (though it would be\n      straightforward avoid the recursion and use iteration here).\n    </blockquote>")))
 (idp9657808
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Yet another reason for private methods is to factor the\n      implementation and support recursion. Moving along with this\n      example, let's build a binary heap, which is a binary tree in heap\n      order: where the label of parent elements is smaller than the\n      labels of its children. One efficient implementation is to use an\n      array to represent the values, where the root is at index 0, and\n      the children of a parent node at index <code>i</code> are at\n      indexes <code>2 * i</code> and <code>2 * i + 1</code>.\n      To insert a node into the tree, we add it as a leaf, and then\n      recursively move it up the tree until we restore heap order.\n    </blockquote>")))
 (idp9653008
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      To be precise, the method <code>ensure_capacity</code> is\n      part of the class type, but it is not part of the object type.\n      This means the object <code>v</code> has no method\n      <code>ensure_capacity</code>. However, it is available to\n      subclasses. We can extend the class, for example, to include a\n      method <code>swap</code> that swaps two elements.\n    </blockquote>")))
 (idp9646064
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      To illustrate, let's build a class <code>vector</code> that\n      contains an array of integers, resizing the storage array on\n      demand. The field <code>values</code> contains the actual\n      values, and the <code>get</code>, <code>set</code>,\n      and <code>length</code> methods implement the array access.\n      For clarity, the resizing operation is implemented as a private\n      method <code>ensure_capacity</code> that resizes the array\n      if necessary.\n    </blockquote>")))
 (idp9644624
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Methods can be declared <span><em>private</em></span>, which means\n      that they may be called by subclasses, but they are not visible\n      otherwise (similar to a <span><em>protected</em></span> method in\n      C++).\n    </blockquote>")))
 (idp9638048
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        The binary method <code>equals</code> is now implemented\n        in terms of the concrete type <code>shape_repr</code>. In\n        fact, the objects are now isomorphic to the\n        <code>shape_repr</code> type. When using this pattern, you\n        will not be able to hide the <code>repr</code> method, but\n        you can hide the type definition using the module system.\n      </blockquote>")))
 (idp9635184
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        If we want to define equality for shapes in general, the\n        remaining solution is to use the same approach as we described\n        for narrowing. That is, introduce a\n        <span><em>representation</em></span> type implemented using\n        variants, and implement the comparison based on the\n        representation type.\n      </blockquote>")))
 (idp9634368
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        The problem here is that the builtin polymorphic equality\n        compares the method implementations, not their return values.\n        The method implementations (the function values that implement\n        the methods) are different, so the equality comparison is false.\n        There are other reasons not to use the builtin polymorphic\n        equality, but these false negatives are a showstopper.\n      </blockquote>")))
 (idp9631952
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        One proposal we could consider is, since the problematic method\n        is equality, why not just drop it from the base type\n        <code>shape</code> and use polymorphic equality instead?\n        Unfortunately, the builtin equality has very poor behavior when\n        applied to objects.\n      </blockquote>")))
 (idp9631344
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        This problem is fundamental. Many languages solve it either with\n        narrowing (with dynamic type checking), or by method\n        overloading. Since OCaml has neither of these, what can we do?\n      </blockquote>")))
 (idp9628704
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        The problem is that a <code>square</code> expects to be\n        compared with a <code>square</code>, not an arbitrary\n        shape; similarly for <code>rectangle</code>.\n      </blockquote>")))
 (idp9623664
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        This works, but there is a problem lurking here. The method\n        <code>equals</code> takes an object of the exact type\n        <code>square</code> or <code>rectangle</code>.\n        Because of this, we can't define a common base class\n        <code>shape</code> that also includes an equality method.\n      </blockquote>")))
 (idp9619792
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        A <span><em>binary method</em></span> is a method that takes an\n        object of <code>self</code> type. One common example is\n        defining a method for equality.\n      </blockquote>")))
 (idp9617920
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        This pattern works, but it has drawbacks. In particular, the\n        recursive type definition should make it clear that this pattern\n        is essentially equivalent to using variants, and that objects do\n        not provide much value here.\n      </blockquote>")))
 (idp9614736
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Regardless, there is a solution if you find yourself in this\n        situation, which is to augment the classes with variants. You\n        can define a method <code>variant</code> that injects the\n        actual object into a variant type.\n      </blockquote>")))
 (idp9612240
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        In this case, it is much less clear how to augment the\n        <code>Shape</code> class to support this kind of pattern\n        analysis. It is also not obvious that object-oriented\n        programming is well-suited for this situation. Pattern matching\n        seems like a better fit.\n      </blockquote>")))
 (idp9609152
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        However, the situation is not always so obvious. The following\n        code checks whether an array of shapes looks like a\n        &quot;barbell,&quot; composed to two <code>Circle</code>\n        objects separated by a <code>Line</code>, where the\n        circles have the same radius.\n      </blockquote>")))
 (idp9606672
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Most programmers would consider this code to be\n        &quot;wrong.&quot; Instead of performing a case analysis on the\n        type of object, it would be better to define a method to return\n        the name of the shape. Instead of calling\n        <code>GetShapeName(s)</code>, we should call\n        <code>s.Name()</code> instead.\n      </blockquote>")))
 (idp9605088
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        More commonly, narrowing leads to poor object-oriented style.\n        Consider the following Java code, which returns the name of a\n        shape object.\n      </blockquote>")))
 (idp9602176
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        The design argument is this: narrowing violates abstraction. In\n        fact, with a structural typing system like in OCaml, narrowing\n        would essentially provide the ability to enumerate the methods\n        in an object. To check whether an object <code>obj</code>\n        has some method <code>foo : int</code>, one would attempt\n        a coercion <code>(obj :&gt; &lt; foo : int &gt;)</code>.\n      </blockquote>")))
 (idp9601584
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Why? There are two reasonable explanations, one based on a\n        design principle, and another technical (the technical reason is\n        simple: it is hard to implement).\n      </blockquote>")))
 (idp9600704
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Narrowing is <span><em>not permitted</em></span> in OCaml.\n        Period.\n      </blockquote>")))
 (idp9593888
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Narrowing, also called <span><em>down casting</em></span>, is the\n        ability to coerce an object to one of its subtypes. For example,\n        if we have a list of shapes <code>shape slist</code>, we\n        might know (for some reason) what the actual type of each shape\n        is. Perhaps we know that all objects in the list have type\n        <code>square</code>. In this case,\n        <span><em>narrowing</em></span> would allow the re-casting of the\n        object from type <code>shape</code> to type\n        <code>square</code>. Many languages support narrowing\n        through dynamic type checking. For example, in Java, a coercion\n        <code>(Square) x</code> is allowed if the value\n        <code>x</code> has type <code>Square</code> or one\n        of its subtypes; otherwise the coercion throws an exception.\n      </blockquote>")))
 (idp9588400
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        OCaml supports an abbreviation in this case, but it works only\n        for classes, not object types. The type expression\n        <code># classname</code> is an abbreviation for an elided\n        type containing all of the methods in the named class, and more.\n        Since <code>shape</code> is an object type, we can't write\n        <code>#shape</code>. However, if a class definition is\n        available, this abbreviation can be useful. The following\n        definition is exactly equivalent to the preceeding.\n      </blockquote>")))
 (idp9586336
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        This works, and it removes the need for explicit coercions. This\n        type is still fairly simple, but it does have the drawback that\n        the programmer needs to remember that the types\n        <code>&lt; area : float; ..&gt;</code> and\n        <code>shape</code> are related.\n      </blockquote>")))
 (idp9582496
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        A solution is to use an elided type. Instead of\n        <code>shape</code>, we can use the elided type\n        <code>&lt; area : float; .. &gt;</code>. In fact, once we\n        do this, it also becomes possible to use the\n        <code>slist</code> type.\n      </blockquote>")))
 (idp9580384
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Before we move to the next topic, there is one more thing to\n        address. The typing we gave above, using\n        <code>readonly_shape_slist</code>, requires that the\n        caller perform an explicit coercion before calling the\n        <code>total_area</code> function. We would like to give a\n        better type that avoids the coercion.\n      </blockquote>")))
 (idp9574768
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        This reasoning may seem fairly long and complicated, but it\n        should be pointed out that this typing\n        <span><em>works</em></span>, and in the end the type annotations\n        are fairly minor. In most typed object-oriented languages, the\n        coercion would simply not be possible. For example, in C++, a\n        STL type <code>slist&lt;T&gt;</code> is invariant in\n        <code>T</code>, it is simply not possible to use\n        <code>slist&lt;square&gt;</code> where\n        <code>slist&lt;shape&gt;</code> is expected (at least\n        safely). The situation is similar in Java, although Java\n        supports has an escape hatch that allows the program to fall\n        back to dynamic typing. The situation in OCaml is much better;\n        it works, it is statically checked, and the annotations are\n        pretty simple.\n      </blockquote>")))
 (idp9568400
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        In this particular case, depth subtyping on the\n        <code>iterator</code> method requires that\n        <code>square iterator</code> be a subtype of\n        <code>shape iterator</code>. Expanding the type definition\n        for the type <code>iterator</code>, we again invoke depth\n        subtyping, and we need to show that the type\n        <code>&lt; get : square &gt;</code> is a subtype of\n        <code>&lt;get : shape &gt;</code>, which follows because\n        <code>square</code> is a subtype of\n        <code>shape</code>.\n      </blockquote>")))
 (idp9561088
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Why does this work, why is a <code>square slist</code> a\n        subtype of <code>readonly_shape_slist</code>. The\n        reasoning is in two steps. First, the easy part is width\n        subtyping: we can drop the other methods to see that\n        <code>square slist</code> is a subtype of\n        <code>&lt; iterator : square iterator &gt;</code>. The\n        next step is to use <span><em>depth</em></span> subtyping, which,\n        in its general form, says that an object type\n        <code>&lt; m : t1 &gt;</code> is a subtype of a type\n        <code>&lt; m : t2&gt;</code> iff <code>t1</code> is\n        a subtype of <code>t2</code>. In other words, instead of\n        reasoning about the number of methods in a type (the width), the\n        number of methods is fixed, and we look within the method types\n        themselves (the &quot;depth&quot;).\n      </blockquote>")))
 (idp9556704
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n        Still, the <code>total_area</code> function should be\n        fine, in principle. It doesn't call <code>insert</code>,\n        so it isn't making that error. To make it work, we need to use a\n        more precise type that indicates we are not going to be mutating\n        the list. We define a type\n        <code>readonly_shape_slist</code> and confirm that we can\n        coerce the list of squares.\n      </blockquote>")))
 (idp9548896
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      It might seem tempting to give up at this point, especially\n      because the subtyping is not even true -- the type\n      <code>square slist</code> is not a subtype of\n      <code>shape slist</code>. The problem is with the\n      <code>insert</code> method. For\n      <code>shape slist</code>, the <code>insert</code>\n      method takes an arbitrary <code>shape</code> and inserts it\n      into the list. So if we could coerce a\n      <code>square slist</code> to a\n      <code>shape slist</code>, then it would be possible to\n      insert an arbitrary shape into the list, which would be an error.\n    </blockquote>")))
 (idp9543920
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We can also define a function to calculate the total area of a\n      list of shapes. There is no reason to restrict this to squares, it\n      should work for any list of shapes with type\n      <code>shape slist</code>. The problem is that doing so\n      raises some serious typing questions -- can a\n      <code>square slist</code> be passed to a function that\n      expects a <code>shape slist</code>? If we try it, the\n      compiler produces a verbose error message.\n    </blockquote>")))
 (idp9541408
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Next, let's take a seemingly tiny step forward, and start building\n      collections of shapes. It is easy enough to define a\n      <code>slist</code> of squares.\n    </blockquote>")))
 (idp9540544
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      This may seem absurd, but this concept is expressible in all\n      object-oriented languages. The contradiction is semantic -- we\n      know that in the real world, not all rectangles are squares; but\n      in the programming world, rectangles have all of the features of\n      squares (according to our definition), so they can be used just\n      like squares. Suffice it to say that it is usually better to avoid\n      such apparent contradictions.\n    </blockquote>")))
 (idp9536416
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The subtyping rules are purely technical, they have no relation to\n      object semantics. We can define a class\n      <code>rectangle</code> that has all of the methods of a\n      <code>square</code>, so it is a subtype of square and can be\n      used wherever a <code>square</code> is expected.\n    </blockquote>")))
 (idp9530320
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      What are the rules for subtyping? In general, object subtyping has\n      two general forms, called <span><em>width</em></span> and\n      <span><em>depth</em></span> subtyping. Width subtyping means that\n      an object type <span><em>A</em></span> is a a subtype of\n      <span><em>B</em></span>, if <span><em>A</em></span> has all of the\n      methods of <span><em>B</em></span>, and possibly more. A\n      <code>square</code> is a subtype of <code>shape</code>\n      because it implements all of the methods of\n      <code>shape</code> (the <code>area</code> method).\n    </blockquote>")))
 (idp9523232
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A <code>square</code> has a method <code>area</code>\n      just like a <code>shape</code>, and an additional method\n      <code>width</code>. Still, we expect a\n      <code>square</code> to be a <code>shape</code>, and it\n      is. The coercion <code>:&gt;</code> must be explicit.\n    </blockquote>")))
 (idp9520000
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      To explore this, let's define some simple classes for geometric\n      shapes. The generic type <code>shape</code> has a method to\n      compute the area, and a <code>square</code> is a specific\n      kind of shape.\n    </blockquote>")))
 (idp9513600
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Subtyping is a central concept in object-oriented programming. It\n      governs when an object with one type <span><em>A</em></span> can be\n      used in an expression that expects an object of another type\n      <span><em>B</em></span>. When this is true, we say that\n      <span><em>A</em></span> is a <span><em>subtype</em></span> of\n      <span><em>B</em></span>. Actually, more concretely, subtyping\n      determines when the coercion operator <code>e :&gt; t</code>\n      can be applied. This coercion works only if the expression\n      <code>e</code> has some type <code>s</code> and\n      <code>s</code> is a subtype of <code>t</code>.\n    </blockquote>")))
 (idp9507696
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      One more thing, in this example the function\n      <code>make</code> has type\n      <code>unit -&gt; 'a slist</code>. But wait, we've stressed\n      <span><em>classes are not types</em></span>, so what's up with\n      that? In fact, what we've said is entirely true, classes and class\n      names <span><em>are not</em></span> types. However, class names can\n      be used to stand for types. When the compiler sees a class name in\n      type position, it automatically constructs an object type from it\n      by erasing all the fields and keeping only the method types. In\n      this case, the type expression <code>'a slist</code> is\n      exactly equivalent to <code>'a t</code>.\n    </blockquote>")))
 (idp9503392
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In this signature, we've chosen to make nearly everything visible.\n      The class type for <code>slist</code> specifies the types of\n      the fields <code>first</code> and <code>last</code>,\n      as well ad the types of each of the methods. We've also included a\n      class type for <code>slist_iterator</code>, which is of\n      somewhat more questionable value, since the type doesn't appear in\n      the type for <code>slist</code> at all.\n    </blockquote>")))
 (idp9499296
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The abstract signature is simple because we ignore the classes.\n      But what if we want to include them in the signature, so that\n      other modules can inherit from the class definitions? For this, we\n      need to specify types for the classes, called <span><em>class\n      types</em></span>. Class types do not appear in mainstream\n      object-oriented programming languages, so you may not be familiar\n      with them, but the concept is pretty simple. A class type\n      specifies the type of each of the visible parts of the class,\n      including both fields and methods. Just like for module types, you\n      don't have to give a type for everything; anything you omit will\n      be hidden.\n    </blockquote>")))
 (idp9497472
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We have multiple choices in definining the module type, depending\n      on how much of the implementation we want to expose. At one\n      extreme, a maximally-abstract signature would completely hide the\n      class definitions.\n    </blockquote>")))
 (idp9493632
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Before we begin, let's wrap up the implementation in an explicit\n      module (we'll use explicit modules for illustration, but the\n      process is similar when we want to define a\n      <code>.mli</code> file). In keeping with the usual style for\n      modules, we define a type <code>'a t</code> to represent the\n      type of list values.\n    </blockquote>")))
 (idp9492352
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Once we have defined the list implementation, the next step is to\n      wrap it in a module or <code>.ml</code> file and give it a\n      type so that it can be used in the rest of our code. What is the\n      type?\n    </blockquote>")))
 (idp9488496
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We use the same object type <code>iterator</code> for\n      iterators, but implement it differently.\n    </blockquote>")))
 (idp9487104
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      There are some restriction on the use of the expression\n      <code>{&lt; ... &gt;}</code>. It can be used only within a\n      method body, and only the values of fields may be updated. Method\n      implementations are fixed at the time the object is created, they\n      cannot be changed dynamically.\n    </blockquote>")))
 (idp9482160
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A key part of the implementation is the definition of the method\n      <code>insert</code>. The expression\n      <code>{&lt; ... &gt;}</code> produces a copy of the current\n      object, with the same type, and the specified fields updated. In\n      other words, the <code>new_fst new_x</code> method produces\n      a copy of the object, with <code>x</code> replaced by\n      <code>new_x</code>. The original object is not modified, and\n      the value of <code>y</code> is also unaffected.\n    </blockquote>")))
 (idp9479104
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Indeed, in many programs, this makes sense, but it is by no means\n      required. Let's define an object-oriented version of lists similar\n      to the imperative list above. We'll implement it with a regular\n      list type <code>'a list</code>, and insertion will be to the\n      beginning of the list instead of to the end.\n    </blockquote>")))
 (idp9478448
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Many people consider object-oriented programming to be\n      intrinsically imperative, where an object is like a state machine.\n      Sending a message to an object causes it to change state,\n      possibily sending messages to other objects.\n    </blockquote>")))
 (idp9473680
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The solution is to use a type quantifier, as shown in the\n      following example. The method type must be specified directly\n      after the method name, which means that method parameters must be\n      expressed using a <code>fun</code> or\n      <code>function</code> expression.\n    </blockquote>")))
 (idp9467248
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      What about functional operations similar to\n      <code>List.map</code> or <code>List.fold</code>? In\n      general, these methods take a function that produces a value of\n      some other type than the elements of the set. For example, the\n      function <code>List.fold</code> has type\n      <code>'a list -&gt; ('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b</code>,\n      where <code>'b</code> is an arbitrary type. To replicate\n      this in the <code>slist</code> class, we need a method type\n      <code>('b -&gt; 'a -&gt; 'b) -&gt; 'b -&gt; 'b</code>, where\n      the method type is polymorphic over <code>'b</code>.\n    </blockquote>")))
 (idp9464288
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      We may also wish to define functional-style methods,\n      <code>iter f</code> takes a function <code>f</code>\n      and applies it to each of the elements of the list.\n    </blockquote>")))
 (idp9459056
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Finally, we add a method <code>iterator</code> to the slist\n      class to produce an iterator. To do so, we construct an\n      <code>slist_iterator</code> that refers to the first node in\n      the list, but we want to return a value with the object type\n      <code>iterator</code>. This requires an explicit coercion\n      using the <code>:&gt;</code> operator.\n    </blockquote>")))
 (idp9455664
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Next, we'll define an actual iterator for the class\n      <code>slist</code>. We can represent the position in the\n      list with a field <code>current</code>, following links as\n      we traverse the list.\n    </blockquote>")))
 (idp9453344
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      First, we'll define an object type <code>iterator</code>\n      that specifies the methods in an iterator.\n    </blockquote>")))
 (idp9452160
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      OCaml support both styles. In fact, OCaml is more flexible than\n      these approaches because an object type can be implemented by any\n      object with the appropriate methods, it does not have to be\n      specified by the object's class <span><em>a priori</em></span>.\n      We'll leave abstract classes for later. Let's demonstrate the\n      technique using object types.\n    </blockquote>")))
 (idp9449728
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      There are two common styles for defining abstract interfaces like\n      this. In Java, an iterator would normally be specified with an\n      interface, which specifies a set of method types. In languages\n      without interfaces, like C++, the specification would normally use\n      <span><em>abstract</em></span> classes to specify the methods\n      without implementing them (C++ uses the &quot;= 0&quot; definition\n      to mean &quot;not implemented&quot;).\n    </blockquote>")))
 (idp9447472
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      This definition of the class <code>slist</code> is not\n      complete, we can construct lists, but we also need to add the\n      ability to traverse the elements in the list. One common style for\n      doing this is to define a class for an <code>iterator</code>\n      object. An iterator provides a generic mechanism to inspect and\n      traverse the elements of a collection. This pattern isn't\n      restricted to lists, it can be used for many different kinds of\n      collections.\n    </blockquote>")))
 (idp9442032
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Next, we can define the list itself. We'll keep a field\n      <code>head</code> the refers to the first element in the\n      list, and <code>last</code> refers to the final element in\n      the list. The method <code>insert</code> adds an element to\n      the end of the list.\n    </blockquote>")))
 (idp9441120
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In general, we need to provide enough constraints so that the\n      compiler will infer the correct type. We can add type constraints\n      to the parameters, to the fields, and to the methods. It is a\n      matter of preference how many constraints to add. You can add type\n      constraints in all three places, but the extra text may not help\n      clarity. A convenient middle ground is to annotate the fields\n      and/or class parameters, and add constraints to methods only if\n      necessary.\n    </blockquote>")))
 (idp9435168
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The type annotations on the <code>val</code> declarations\n      are used to constrain type inference. If we omit these\n      annotations, the type inferred for the class will be &quot;too\n      polymorphic,&quot; <code>x</code> could have some type\n      <code>'b</code> and <code>next_node</code> some type\n      <code>'c option</code>.\n    </blockquote>")))
 (idp9430928
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The <code>value</code> is the value stored in the node, and\n      it can be retrieved and changed with the <code>get</code>\n      and <code>set</code> methods. The\n      <code>next_node</code> field is the link to the next element\n      in the stack. Note that the type parameter <code>['a]</code>\n      in the definition uses square brackets, but other uses of the type\n      can omit them (or use parentheses if there is more than one type\n      parameter).\n    </blockquote>")))
 (idp9426784
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Let's build an example of an imperative singly-linked list using\n      object-oriented techniques. First, we'll want to define a class\n      for a single element of the list. We'll call it a\n      <code>node</code>, and it will hold a value of type\n      <code>'a</code>. When defining the class, the type\n      parameters are placed in square brackets before the class name in\n      the class definition. We also need a parameter\n      <code>x</code> for the initial value.\n    </blockquote>")))
 (idp9425056
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A class definition serves as the <span><em>constructor</em></span>\n      for the class. In general, a class definition may have parameters\n      that must be provided as arguments when the object is created with\n      <code>new</code>.\n    </blockquote>")))
 (idp9417600
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Inheritance uses an existing class to define a new one. For\n      example, the following class definition supports an addition\n      method <code>moveby</code> that moves the point by a\n      relative amount. This also makes use of the\n      <code>(self : 'self)</code> binding after the\n      <code>object</code> keyword. The variable\n      <code>self</code> stands for the current object, allowing\n      self-invocation, and the type variable <code>'self</code>\n      stands for the type of the current object (which in general is a\n      subtype of <code>movable_point</code>).\n    </blockquote>")))
 (idp9416464
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>(yminsky: You say that inheritance uses an existing\n      class to define a new one, but the example below looks like using\n      an existing class to define a new module. Is that what's going on?\n      Or is a new class being created implicitly? If the latter, it\n      might be better to be more explicit in this example and name the\n      new class.)</em></span>\n</blockquote>")))
 (idp9414000
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      To produce an object, classes are instantiated with the keyword\n      <code>new</code>.\n    </blockquote>")))
 (idp9408176
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The type <code>class point : ... end</code> is a\n      <span><em>class type</em></span>. This particular type specifies\n      that the <code>point</code> class defines a mutable field\n      <code>x</code>, a method <code>get</code> that returns\n      an <code>int</code>, and a method <code>set</code>\n      with type <code>int -&gt; unit</code>.\n    </blockquote>")))
 (idp9405328
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In OCaml, class definitions must be defined as top-level\n      statements in a module. A class is not an object, and a class\n      definition is not an expression. The syntax for a class definition\n      uses the keyword <code>class</code>.\n    </blockquote>")))
 (idp9403744
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Programming with objects directly is great for encapsulation, but\n      one of the main goals of object-oriented programming is code\n      re-use through inheritance. For inheritance, we need to introduce\n      <span><em>classes</em></span>. In object-oriented programming, a\n      class is a &quot;recipe&quot; for creating objects. The recipe can\n      be changed by adding new methods and fields, or it can be changed\n      by modifying existing methods.\n    </blockquote>")))
 (idp9396816
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      An object of type <code>&lt; get:int; .. &gt;</code> can be\n      any object with a method <code>get:int</code>, it doesn't\n      matter how it is implemented. So far, we've constructed two\n      objects with that type; the function <code>make</code>\n      constructed one, and so did <code>average</code>. When the\n      method <code>#get</code> is invoked, the actual method that\n      is run is determined by the object.\n    </blockquote>")))
 (idp9393264
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In other words, the type <code>'a point</code> is equal to\n      <code>'a</code>, where\n      <code>'a = &lt; get : int; .. &gt;</code>. That may seem\n      like an odd way to say it, and in fact, this type definition is\n      not really an abbreviation because <code>'a</code> refers to\n      the entire type.\n    </blockquote>")))
 (idp9388576
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      A <code>..</code> in an object type is called a\n      <span><em>row variable</em></span> and this typing scheme is called\n      <span><em>row polymorphism</em></span>. Even though\n      <code>..</code> doesn't look like a type variable, it\n      actually is. The error message suggests a solution, which is to\n      add the <code>as 'a</code> type constraint.\n    </blockquote>")))
 (idp9385760
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The <code>..</code> in an object type is an elision,\n      standing for &quot;possibly more methods.&quot; It may not be\n      apparent from the syntax, but an elided object type is actually\n      polymorphic. If we try to write a type definition, we get an\n      obscure error.\n    </blockquote>")))
 (idp9378736
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Note that the type for <code>average</code> uses the object\n      type <code>&lt; get : int; .. &gt;</code>. The\n      <code>..</code> are ellipsis, standing for any other\n      methods. The type <code>&lt; get : int; .. &gt;</code>\n      specifies an object that must have at least a\n      <code>get</code> method, and possibly some others as well.\n      If we try using the exact type\n      <code>&lt; get : int &gt;</code> for an object with more\n      methods, type inference will fail.\n    </blockquote>")))
 (idp9375232
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Functions can also take object arguments. Let's construct a new\n      object <code>average</code> that's the average of any two\n      objects with a <code>get</code> method.\n    </blockquote>")))
 (idp9374352
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>(yminsky: Maybe this is a good time to talk about the\n      nature of object subtyping?)</em></span>\n</blockquote>")))
 (idp9369712
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Note that the types of the function <code>make</code> and\n      the returned object now use the polymorphic type\n      <code>'a</code>. When make is invoked on a concrete value\n      <code>5</code>, we get the same object type as before, with\n      type <code>int</code> for the value.\n    </blockquote>")))
 (idp9367744
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Objects can also be constructed by functions. If we want to\n      specify the initial value of the object, we can define a function\n      that takes the initial value and produces an object.\n    </blockquote>")))
 (idp9364400
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The object type is enclosed in angle brackets\n      <code>&lt; ... &gt;</code>, containing just the types of the\n      methods. Fields, like x, are not part of the public interface of\n      an object. All interaction with an object is through its methods.\n      The syntax for a method invocation (also called &quot;sending a\n      message&quot; to the object) uses the <code>#</code>\n      character.\n    </blockquote>")))
 (idp9361872
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      The object has an integer value <code>x</code>, a method\n      <code>get</code> that returns x, and a method\n      <code>set</code> that updates the value of x.\n    </blockquote>")))
 (idp9359616
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      OCaml is entirely different. Classes are used to construct objects\n      and support inheritance, including non-subtyping inheritance.\n      Classes are not types. Instead, objects have <span><em>object\n      types</em></span>, and if you want to use objects, you aren't\n      required to use classes at all. Here is an example of a simple\n      object.\n    </blockquote>")))
 (idp9357136
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      If you already know about object oriented programming in a\n      language like Java or C++, the OCaml object system may come as a\n      surprise. Foremost is the complete separation of subtyping and\n      inheritance in OCaml. In a language like Java, a class name is\n      also used as the type of objects created by instantiating it, and\n      the subtyping rule corresponds to inheritance. For example. if we\n      implement a class <code>Stack</code> in Java by inheriting\n      from a class <code>Deque</code>, we would be allowed to pass\n      a stack anywhere a deque is expected (this is a silly example of\n      course, practitioners will point out that we shouldn't do it).\n    </blockquote>")))
 (idp9354304
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In general, a rule of thumb might be: use classes and objects in\n      situations where dynamic binding is a big win, for example if you\n      have many similar variations in the implementation of a concept.\n      Real world examples are fairly rare, but one good example is\n      Xavier Leroy's\n      <a href=\"http://gallium.inria.fr/~xleroy/software.html#cryptokit\" target=\"_top\">Cryptokit</a>,\n      which provides a variety of cryptographic primitives that can be\n      combined in building-block style.\n    </blockquote>")))
 (idp9353600
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      In contrast, modules use static (lexical) scoping. If you want to\n      parameterize your module code so that some part of it can be\n      implemented later, you would write a function/functor. This is\n      more explicit, but often more verbose than overriding a method in\n      a class.\n    </blockquote>")))
 (idp9352256
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      Modules already provide these features in some form, but the main\n      focus of classes is on code re-use through inheritance and late\n      binding of methods. This is a critical property of classes: the\n      methods that implement an object are determined when the object is\n      instantiated, a form of <span><em>dynamic</em></span> binding. In\n      the meantime, while classes are being defined, it is possible (and\n      necessary) to refer to methods without knowing statically how they\n      will be implemented.\n    </blockquote>")))
 (idp9351072
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Inheritance</em></span>: the definition of one kind\n          of object can be re-used to produce a new kind of object.\n        </blockquote>")))
 (idp9349584
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Dynamic lookup</em></span>: when a message is sent to\n          an object, the method to be executed is determined by the\n          implementation of the object, not by some static property of\n          the program. In other words, different objects may react to\n          the same message in different ways.\n        </blockquote>")))
 (idp9345504
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Subtyping</em></span>: if an object\n          <code>a</code> has all the functionality of an object\n          <code>b</code>, then we may use <code>a</code> in\n          any context where <code>b</code> is expected.\n        </blockquote>")))
 (idp9344144
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>Abstraction</em></span>: the details of the\n          implementation are hidden in the object; the interface is just\n          the set of publically-accessible methods.\n        </blockquote>")))
 (idp9343120
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      What exactly is object-oriented programming? Mitchell [6] points\n      out four fundamental properties.\n    </blockquote>")))
 (idp9342352
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n      You might wonder when to use objects. First-class modules are more\n      expressive (a module can include types, classes and objects\n      cannot), and modules, functors, and algebraic data types offer a\n      wide range of ways to express program structure. In fact, many\n      seasoned OCaml programmers rarely use classes and objects, if at\n      all.\n    </blockquote>")))
 (idp9340464
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n    We've already seen several tools that OCaml provides for organizing\n    programs, particularly first-class modules. In addition, OCaml also\n    supports object-oriented programming. There are objects, classes,\n    and their associated types. Objects are good for encapsulation and\n    abstraction, and classes are good for code re-use.\n  </blockquote>")))
 (idp9339328
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>(yminsky: I'm not sure where we should say it, but OCaml's\n    object system is strikingly different from those that most people\n    are used to. It would be nice if we could call those differences out\n    clearly somewhere. The main difference I see is the fact that\n    subtyping and inheritance are not tied together, and that subtyping\n    is structural.)</em></span>\n</blockquote>")))
 (idp9338208
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>(yminsky: I wonder if it's worth emphasizing what makes\n    objects unique early on. I think of them as no better of an\n    encapsulation tool than closures. What makes them unique in my mind\n    is that they are some combination of lighter weight and more dynamic\n    than the alternatives (modules, records of closures,\n    etc.))</em></span>\n</blockquote>")))
 (idp9337328
  ((file object-oriented-programming.html)
   (html
    "<blockquote>\n<span><em>(yminsky: If we don't feel like these are\n    &quot;great&quot; tools, maybe we shouldn't say it!)</em></span>\n</blockquote>")))
 (idp9967824
  ((file managing-external-memory-with-bigarrays.html)
   (html
    "<blockquote>\n      The <code>CAML_BA_MANAGED_MASK</code> bits hold a value of\n      the <code>caml_ba_managed</code> enum that identifies\n      whether OCaml is responsible for freeing the\n      <code>data</code> or some other code is.\n    </blockquote>")))
 (idp9965776
  ((file managing-external-memory-with-bigarrays.html)
   (html
    "<blockquote>\n      The <code>CAML_BA_LAYOUT_MASK</code> bit says whether\n      multi-dimensional arrays are layed out C or Fortran style.\n    </blockquote>")))
 (idp9961664
  ((file managing-external-memory-with-bigarrays.html)
   (html
    "<blockquote>\n      The <code>CAML_BA_KIND_MASK</code> bits hold a value of the\n      <code>caml_ba_kind</code> enum that identifies the kind of\n      value in the bigarray <code>data</code>.\n    </blockquote>")))
 (idp9957184
  ((file managing-external-memory-with-bigarrays.html)
   (html
    "<blockquote>\n      The <code>data</code> is usually a pointer to a\n      <code>malloc</code>'ed chunk of memory, which the custom\n      finalizer operation <code>free</code>'s when the block is\n      free. The <code>flags</code> field encodes three values,\n      located in the bits as specified by three masks:\n    </blockquote>")))
 (idp9953376
  ((file managing-external-memory-with-bigarrays.html)
   (html
    "<blockquote>\n      An OCaml bigarray is a useful custom block provided as standard to\n      manipulate memory blocks outside the OCaml heap. It has\n      <code>Custom_tag</code> in the header, and the first word\n      points to the <code>custom_operations</code> struct for\n      bigarrays. Following this is a <code>caml_ba_array</code>\n      struct.\n    </blockquote>")))
 (idp7523840
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      This representation is perfectly adequate, but many OCaml\n      programmers would prefer a representation where the\n      <code>option</code> is &quot;hoisted&quot; to the\n      <code>node</code> type, meaning that we have two kinds of\n      nodes. In this case, the code is somewhat more succinct. In the\n      end, of course, the two versions are isomorphic.\n    </blockquote>")))
 (idp7520576
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      Similarly, if we're defining a type of binary trees, one choice is\n      to use <code>option</code> for the child node references. In\n      a binary search tree, each node in the tree is labeled with a\n      value and it has up to two children. The nodes in the tree follow\n      <span><em>prefix</em></span> order, meaning that the label of the\n      left child is smaller than the label of its parent, and the label\n      of the right child is larger than the label of the parent.\n    </blockquote>")))
 (idp7516592
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      We can also represent a data structure with NULL-pointers using\n      the <code>option</code> type. For example, let's build an\n      imperative singly-linked list, where new values are added to the\n      <span><em>end</em></span> of the list. In a standard imperative\n      language (like in the C++ Standard Template Library), NULL is used\n      to represent &quot;end of list.&quot; We'll use the\n      <code>option</code> type instead.\n    </blockquote>")))
 (idp7513040
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      In the most direct form, we can use an <code>option</code>\n      wherever some value is &quot;optional,&quot; with the usual\n      meaning. For example, if the architect of a programming language\n      is not always known, we could use a special string like\n      <code>&quot;unknown&quot;</code> to represent the\n      architect's name, but we might accidentally confuse it with the\n      name of a person. The more explicit alternative is to use an\n      option.\n    </blockquote>")))
 (idp7507056
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      That is, a value of type <code>'a option</code> is either\n      <code>None</code>, which means &quot;no value;&quot; or it\n      is <code>Some v</code>, which represents a value\n      <code>v</code>. There is nothing special about the\n      <code>option</code> type -- it is a variant type just like\n      any other. What it means is that checking for\n      <code>None</code> is <span><em>explicit</em></span>, it is\n      not possible to use <code>None</code> in a place where\n      <code>Some x</code> is expected.\n    </blockquote>")))
 (idp7505072
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      How do we get similar semantics in OCaml? The ubiquitous technique\n      is to use the <code>option</code> type, which has the\n      following definition.\n    </blockquote>")))
 (idp7502816
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      OCaml has no &quot;NULL&quot; or &quot;nil&quot; values.\n      Programmers coming from other languages are often surprised and\n      annoyed by this -- it seems really convenient to have a special\n      <code>NULL</code> value that represents concepts like\n      &quot;end of list&quot; or &quot;leaf node in a tree.&quot; The\n      possible benefit is that <span><em>every</em></span> pointer type\n      has a extra NULL value; the problem is that using the NULL value\n      as if it were a real value has weak or undefined semantics.\n    </blockquote>")))
 (idp7501072
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      The simple column-based interface described here is also a good\n      starting for building a richer API. You could for example build\n      specialized columns with different formatting and alignment rules,\n      which is easier to do with this interface than with the original\n      one based on passing in lists-of-lists.\n    </blockquote>")))
 (idp7500368
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      The code is a bit longer, but it's also less error prone. In\n      particular, several errors that might be made by the user are now\n      ruled out by the type system. For example, it's no longer possible\n      for the length of the header and the lengths of the rows to be\n      mismatched.\n    </blockquote>")))
 (idp7497808
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      And we can rewrite <code>print_langs</code> to use this new\n      interface as follows.\n    </blockquote>")))
 (idp7494640
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      Thus, the <code>column</code> functions creates a\n      <code>column</code> from a header string and a function for\n      extracting the text for that column associated with a given row.\n      Implementing this interface is quite simple:\n    </blockquote>")))
 (idp7491984
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      We can improve the table API by adding a type that is a\n      first-class representative for a column. We'd add the following to\n      the interface of <code>Text_table</code>:\n    </blockquote>")))
 (idp7490032
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      This is OK, but as you consider more complicated tables with more\n      columns, it becomes easier to make the mistake of having a\n      mismatch in between <code>headers</code> and\n      <code>to_row</code>. Also, adding, removing and reordering\n      columns becomes awkward, because changes need to be made in two\n      places.\n    </blockquote>")))
 (idp7488112
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      If we then wanted to render a table from a list of languages, we\n      might write something like this:\n    </blockquote>")))
 (idp7485488
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      In the tabulaton example that we used to start this chapter, the\n      <code>List</code> is not a good choice for each entry in the\n      table. Now, let's think about how you might actually use this\n      interface in practice. Usually, when you have data to render in a\n      table, the data entries are described more precisely by a record.\n      So, imagine that you start off with a record type for representing\n      information about a given programming language:\n    </blockquote>")))
 (idp7484768
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          The data in a list must have the same type.\n        </blockquote>")))
 (idp7483920
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          The list length is variable, not fixed.\n        </blockquote>")))
 (idp7483072
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          Large lists often have poor performance.\n        </blockquote>")))
 (idp7482048
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      Lists are fairly general, but there are several reasons why you\n      might not want to use them.\n    </blockquote>")))
 (idp7477216
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        As an aside, you might wonder why this implementation uses\n        explicit let-definitions for the result values\n        <code>f1</code>, <code>f2</code>, etc. The reason is\n        to force the order of evaluation, so that the the function\n        <code>f</code> is always applied to the list values\n        left-to-right (starting with the first element in the list). In\n        an expression like <code>[f x1; f x2; f x3]</code> the\n        order of evaluation is not specified by the language, any of the\n        subexpressions might be evaluated first (though we would often\n        expect evaluation order to be either left-to-right or\n        right-to-left). For functions that perform I/O, or have other\n        side-effects, left-to-right evaluation order is important (and\n        required).\n      </blockquote>")))
 (idp7475184
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        For performance, there are separate patterns for small lists\n        with up to 4 elements, then a recursive case for lists with five\n        or more elements. The <code>ctr</code> value limits the\n        recursion -- regular recursion is used for up to 1000 recursive\n        calls (which includes lists with up to 4000 elements), then the\n        tail-recursive function <code>map_slow</code> is used for\n        any remainder.\n      </blockquote>")))
 (idp7471840
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        Core takes a hybrid approach that can be illustrated with the\n        implementation of the function <code>Core_list.map</code>.\n      </blockquote>")))
 (idp7471072
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        In general, the choice of whether to use regular recursion vs.\n        tail recursion is not immediately obvious. Regular recursion is\n        often better for small lists (and other data structures), but it\n        is better to use tail recursion for very large lists --\n        especially because stack sizes limit the number of recursive\n        calls.\n      </blockquote>")))
 (idp7469232
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        Allocation of short-lived data in OCaml is quite cheap, so the\n        intermediate list is not very expensive. The performance of the\n        two implementations is not significantly different, with one\n        exception: the tail-recursive implementation will not cause a\n        stack overflow for large lists, while the simple\n        non-tail-recursive implementation will have problems with large\n        lists.\n      </blockquote>")))
 (idp7466592
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        The functions <code>tail_recursive_rev</code> and\n        <code>rev_map</code> are both tail-recursive, which means\n        that the function <code>map</code> is tail-recursive also.\n        The cost of doing so is that we construct an intermediate\n        reversed list that is immediately discarded. One way to think of\n        it is that instead of allocating a linear number of stack\n        frames, we allocate a linear number of cons-cells.\n      </blockquote>")))
 (idp7463472
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        If we use the same trick as we used for the\n        <code>length</code> method, we need to accumulate the\n        result <span><em>before</em></span> the recursive call, but this\n        collects the result in reverse order. One way to address it is\n        to construct the reserved result, then explicitly correct it\n        before returning.\n      </blockquote>")))
 (idp7461248
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        In other cases, it can be more problematic to use\n        tail-recursion. For example, consider the non tail-recursive\n        implemenation of <code>map</code> function, listed above.\n        The code is simple, but not efficient.\n      </blockquote>")))
 (idp7459440
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        To preserve the type of the <code>length</code> function,\n        we hide the tail-recursive implementation by nesting it. The\n        tail-recursive implementation performs the addition\n        <span><em>before</em></span> the recursive call, instead of\n        afterwards. Since the result of the recursive call is returned\n        without modification, the compiler branches directly to the\n        called procedure rather than allocating a new stack frame.\n      </blockquote>")))
 (idp7455856
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        In the definition of <code>length</code> above, the\n        expression containing the recursive call\n        <code>(length t) + 1</code> is <span><em>not</em></span>\n        tail recursive because 1 is added to the result. However, it is\n        easy to transform the function so that it is properly tail\n        recursive.\n      </blockquote>")))
 (idp7455152
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        Tail recursion occurs whenever the result of the recursive call\n        is returned immediately by the calling function. In this case,\n        the compiler optimizes the call by skipping the allocation of a\n        new stack frame, instead branching directly to the called\n        procedure.\n      </blockquote>")))
 (idp7452944
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        We can't do anything about <code>length</code> taking\n        linear time -- singly-linked lists of this kind don't have an\n        efficient <code>length</code> operation. However, we can\n        address the space problem using <span><em>tail\n        recursion</em></span>.\n      </blockquote>")))
 (idp7449904
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      In fact, this implementation of the function\n      <code>length</code> is worse than that, because the function\n      is recursive. In this implementation of the function, the\n      recursive call to <code>length t</code> is active at the\n      same time as the outer call, with the result that the runtime\n      needs to allocate stack frames for each recursive call, so this\n      function also takes linear space. For large lists, this is not\n      only inefficient, it can also result in stack overflow.\n    </blockquote>")))
 (idp7447680
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      Perhaps more important than those concerns is that naive list\n      traversal takes time linear in the length of the list. For\n      example, the following <code>length</code> function takes\n      linear time to count the number of elements in the list.\n    </blockquote>")))
 (idp7446336
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      Lists are ubiquitous in OCaml programs. They are easy to use and\n      reasonably efficient for small lists, but large lists can have\n      significant performance problems. The issue is that lists are\n      formed from separately allocated cons-cells. This has space\n      overhead because each value in the list is paired with a pointer\n      to the rest of the list. The separate allocation also reduces\n      locality, so it can result in poor cache behavior.\n    </blockquote>")))
 (idp7442992
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      The functions in the standard library can implemented in similar\n      ways. A straightforward, but inefficient, version of the\n      <code>List.map</code> function is as follows.\n    </blockquote>")))
 (idp7441216
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      For example, suppose we want to define a function to add 1 to each\n      element of a list. We have to consider both cases, 1) where the\n      list is empty, or 2) where it is a cons-cell.\n    </blockquote>")))
 (idp7437392
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      For a list, there are two possible shapes: the empty list\n      <code>[]</code> or a cons-cell <code>h :: t</code>. We\n      can use a <code>match</code> expression to perform the\n      pattern matching. In the case of a cons-cell, the variables\n      <code>h</code> and <code>t</code> in the pattern are\n      bound to the corresponding values in the list when the match is\n      performed.\n    </blockquote>")))
 (idp7436064
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      Constructing a list is really only half the story -- it would be\n      pretty useless to construct lists unless we can also pull them\n      apart. We need <span><em>destructors</em></span>, and for this we\n      use <span><em>pattern matching</em></span>, like we saw in the\n      previous chapter.\n    </blockquote>")))
 (idp7434672
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      TODO: IMAGE figures/04-list-01.svg\n    </blockquote>")))
 (idp7432176
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      The bracket syntax <code>[5; 3; 7]</code> is syntactic sugar\n      for a list with 3 cons-cells,\n      <code>5 :: 3 :: 7 :: []</code>. Each cell has two parts: 1)\n      a value, and 2) a pointer to the rest of the list. The final\n      pointer refers to the special value <code>[]</code>\n      representing the empty list.\n    </blockquote>")))
 (idp7426944
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          If <code>x</code> is a value and <code>l</code> is\n          a list, then the expression <code>x :: l</code>\n          constructs a new list where the first element is\n          <code>x</code>, and the rest is <code>l</code>.\n          The value corresponding to <code>x :: l</code> is\n          commonly called a <span><em>cons</em></span>-cell (the term\n          comes from Lisp, where <span><em>cons</em></span> is short for\n          &quot;constructor&quot;).\n        </blockquote>")))
 (idp7425792
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          [] is the <span><em>empty</em></span> list.\n        </blockquote>")))
 (idp7424720
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      We have seen how square brackets can be used to construct a list\n      of values, but there are really just two ways to construct a list\n      value.\n    </blockquote>")))
 (idp7422352
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      In the example, we see calls to <code>List</code> functions\n      in the standard library, in particular\n      <code>List.map</code>. How does this all work? To\n      understand, we need to consider first how lists are\n      <span><em>represented</em></span> internally, which follows from\n      the type definition and the way lists are constructed. Let's look\n      at the constructors first.\n    </blockquote>")))
 (idp7421376
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n<span><em>(yminsky: I wonder if this should come before the\n      example. The example kind of assumes a lot of information, some of\n      which was given in the guided tour, and some of which\n      wasn't.)</em></span>\n</blockquote>")))
 (idp7418192
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          And now we can write the function for rendering a full table.\n        </blockquote>")))
 (idp7415200
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          You might note that <code>render_row</code> and\n          <code>render_separator</code> share a bit of structure.\n          We can improve the code a bit by factoring that repeated\n          structure out:\n        </blockquote>")))
 (idp7413328
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          We can write a very similar piece of code for rendering the\n          data in an ordinary row.\n        </blockquote>")))
 (idp7412544
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          allocates one string of size 7, as well as a list of length 7.\n          At these small sizes, the differences don't amount to much,\n          but for assembling of large strings, it can be a serious\n          performance issue.\n        </blockquote>")))
 (idp7411056
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          will allocate a string of length 2, 3, 4, 5, 6 and 7, whereas\n          this code:\n        </blockquote>")))
 (idp7407456
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          In the above, we're using two different ways of concatenating\n          strings, <code>String.concat</code>, which operates on\n          lists of strings, and <code>^</code>, which is a\n          pairwise operator. You should avoid <code>^</code> for\n          joining long numbers of strings, since, it allocates a new\n          string every time it runs. Thus, the following code:\n        </blockquote>")))
 (idp7404992
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          We need the extra two-characters for each entry to account for\n          the one character of padding on each side of a string in the\n          table.\n        </blockquote>")))
 (idp7403456
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          Let's start with the separator row, which we can generate as\n          follows:\n        </blockquote>")))
 (idp7402448
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          and a separator row:\n        </blockquote>")))
 (idp7401248
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          Now we need to write the code to render a single row. There\n          are really two different kinds of rows that need to be\n          rendered; an ordinary row:\n        </blockquote>")))
 (idp7398960
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          Note that this code will throw an exception if any of the rows\n          has a different number of entries than the header. In\n          particular, <code>List.map2_exn</code> throws an\n          exception when its arguments have mismatched lengths.\n        </blockquote>")))
 (idp7395136
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          In the above we define a helper function,\n          <code>to_lengths</code> which uses\n          <code>List.map</code> and\n          <code>String.length</code> to convert a list of strings\n          to a list of string lengths. Then, starting with the lengths\n          of the headers, we use <code>List.fold</code> to join in\n          the lengths of the elements of each row by\n          <code>max</code>'ing them together element-wise.\n        </blockquote>")))
 (idp7393376
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n          To render the rows of the table, we'll first need the width of\n          the widest entry in each column. The following function does\n          just that.\n        </blockquote>")))
 (idp7391408
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        Now that we know what <code>render</code> is supposed to\n        do, let's dive into the implementation.\n      </blockquote>")))
 (idp7390112
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        you'll get the following output:\n      </blockquote>")))
 (idp7387808
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        If you invoke <code>render</code> as follows:\n      </blockquote>")))
 (idp7384832
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        We'll start with the interface. The code will go in a new module\n        called <code>Text_table</code> whose\n        <code>.mli</code> contains just the following function:\n      </blockquote>")))
 (idp7383904
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n<span><em>(yminsky: This is the first appearance of an mli file.\n        If we're going to introduce it here, we need to do a little more\n        explanation.)</em></span>\n</blockquote>")))
 (idp7383328
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n        One common programming task is displaying tabular data. In this\n        example, we will go over the design of a simple library to do\n        just that.\n      </blockquote>")))
 (idp7382400
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n<span><em>(yminsky: I wonder if the whole example should go\n        later in the section, after we've done more of the basis of\n        lists in this chapter.)</em></span>\n</blockquote>")))
 (idp7380480
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n<span><em>(yminsky: I would point out that they are the most\n      commonly used aggregate, rather than just that they're supported\n      by the standard library. Also, that way we avoid confusion in the\n      sentence. between the standard library and Core.)</em></span>\n</blockquote>")))
 (idp7379920
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      Lists are one of the most common ways to aggregate data in OCaml;\n      they are simple, and they are extensively supported by the\n      standard library.\n    </blockquote>")))
 (idp7378480
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n      As with any programming language, we need a way to represent\n      <span><em>data</em></span>, things like numbers, words, images,\n      etc., and we need a way to define <span><em>aggregates</em></span>\n      that bring together related values that represent some concept.\n    </blockquote>")))
 (idp7376752
  ((file lists-options-and-patterns.html)
   (html
    "<blockquote>\n<span><em>(Note, this chapter is incomplete. jyh is working on\n    it.)</em></span>\n</blockquote>")))
 (idp10253216
  ((file installation.html)
   (html
    "<blockquote>\n      Package listings are obtained by adding\n      <span><em>remotes</em></span> that provide package descriptions,\n      installation instructions and URLs.\n    </blockquote>")))
 (idp10251392
  ((file installation.html)
   (html
    "<blockquote>\n        Eclipse plugins: which one is maintained?\n      </blockquote>")))
 (idp10250176
  ((file installation.html)
   (html
    "<blockquote>\n        Vim users can use the built-in style, and\n        <a href=\"http://github.com/avsm/ocaml-annot\" target=\"_top\">ocaml-annot</a>\n        may also be useful.\n      </blockquote>")))
 (idp10249008
  ((file installation.html)
   (html
    "<blockquote>\n        Emacs users have tuareg and\n        <a href=\"http://www.typerex.org/\" target=\"_top\">Typerex</a>.\n      </blockquote>")))
 (idp10245840
  ((file installation.html)
   (html
    "<blockquote>\n        TODO: the <code>.ocamlinit</code> handling in OPAM is\n        being finalised and is tracked in\n        <a href=\"https://github.com/OCamlPro/opam/issues/185\" target=\"_top\">issue\n        185</a>.\n      </blockquote>")))
 (idp10241856
  ((file installation.html)
   (html
    "<blockquote>\n        The <code>utop</code> tool provides a convenient\n        interactive top-level, with full command history, command macros\n        and module name completion. An <code>.ocamlinit</code>\n        file in your home directory will initialise\n        <code>utop</code> with common libraries and syntax\n        extensions open, e.g.:\n      </blockquote>")))
 (idp10238032
  ((file installation.html)
   (html
    "<blockquote>\n        The new compiler will be compiled and installed into\n        <code>~/.opam/4.00.1+short-types</code> and the libraries\n        will be tracked separately from your system installation. You\n        can have any number of compilers installed simultaneously, but\n        only one can be active at any time.\n      </blockquote>")))
 (idp10235728
  ((file installation.html)
   (html
    "<blockquote>\n        The default compiler installed by OPAM uses the system OCaml\n        installation. You can use <code>opam switch</code> to swap\n        between different compiler versions, or experiment with a\n        different set of libraries or new compiler versions. For\n        instance, one of the alternate compilers is patched to simplify\n        the types that are output in the top-level. You can switch it to\n        by:\n      </blockquote>")))
 (idp10229376
  ((file installation.html)
   (html
    "<blockquote>\n        This will initialise OPAM with the default package set from\n        <code>opam.ocamlpro.com</code>, and install the\n        <code>utop</code> interactive top-level and the\n        <code>Async</code> library. OPAM figures out the minimal\n        set of dependencies required, and installs those too. The\n        <code>eval</code> command is sets your\n        <code>PATH</code> variable to point to the current active\n        compiler, and you should add this to your shell\n        <code>.profile</code> to run every time you open a new\n        command shell.\n      </blockquote>")))
 (idp10227296
  ((file installation.html)
   (html
    "<blockquote>\n        All of the OPAM state is held in the <code>.opam</code>\n        directory in your home directory, including compiler\n        installations. You should never need to switch to an admin user\n        to install packages.\n      </blockquote>")))
 (idp10225552
  ((file installation.html)
   (html
    "<blockquote>\n        Investigate Protzenko's Windows installer.\n      </blockquote>")))
 (idp10223888
  ((file installation.html)
   (html "<blockquote>\n        On Fedora/RHEL...?\n      </blockquote>")))
 (idp10222464
  ((file installation.html)
   (html
    "<blockquote>\n        On Debian Linux, you should install OCaml via binary packages,\n        and then install the latest OPAM release from source.\n      </blockquote>")))
 (idp10219200
  ((file installation.html)
   (html
    "<blockquote>\n        The easiest way to install OCaml on MacOS X is via the\n        <code>homebrew</code> package manager, available from\n        [http://github.com/mxcl/homebrew].\n      </blockquote>")))
 (idp10215872
  ((file installation.html)
   (html
    "<blockquote>\n      OPAM maintains multiple compiler and library installations, but\n      this can clash with a global installation of the\n      <code>ocamlfind</code> tool. Uninstall any existing copies\n      of <code>ocamlfind</code> before installing OPAM, and use\n      the OPAM version instead.\n    </blockquote>")))
 (idp10213824
  ((file installation.html)
   (html
    "<blockquote>\n      To install OPAM, you will need a working OCaml installation to\n      bootstrap the package manager. Once installed, all of the OPAM\n      state is held in the <code>$HOME/.opam</code> directory, and\n      you can reinitialise it by deleting this directory and starting\n      over.\n    </blockquote>")))
 (idp10211872
  ((file installation.html)
   (html
    "<blockquote>\n    For the purposes of this book, we'll use the OPAM source manager.\n    There are other alternatives available such as GODI and ODB, but not\n    covered here. Let's get started with OPAM now, as you will need it\n    to run the examples in the rest of the book. OPAM manages multiple\n    simultaneous OCaml compiler and library installations, tracks\n    library versions across upgrades, and recompiles dependencies\n    automatically if they get out of date.\n  </blockquote>")))
 (idp10211232
  ((file installation.html)
   (html
    "<blockquote>\n    The easiest way to install OCaml is via the binary packages\n    available in many operating systems. For day-to-day code\n    development, it is easier to use a source-based manager that lets\n    you recompile individual libraries easily.\n  </blockquote>")))
 (idp10149680
  ((file inside-the-runtime.html) (html "<blockquote>\n</blockquote>")))
 (idp10148032
  ((file inside-the-runtime.html) (html "<blockquote>\n</blockquote>")))
 (idp10145776
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        (<span><em>avsm</em></span>: I need to clarify this more,\n        possibly a diagram too. It's not really clear what the\n        implications of an impure heap are atm)\n      </blockquote>")))
 (idp10144544
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        If the marking is able to complete using just the gray list, it\n        will. Otherwise, once the gray list is emptied, the mark phase\n        will observe that the heap is impure and initiate a backup\n        approach to marking. In this approach it marks the heap as pure\n        and then walks through the entire heap block by block, in\n        increasing order of memory address. If it finds a gray block, it\n        adds it to the gray list and does a DFS marking using the gray\n        list as a stack in the usual way. Once the scan of the complete\n        heap is finished, the mark phase checks again whether the heap\n        has again become impure, and if so initiates another scan. These\n        full-heap scans will continue until a successful scan completes\n        without overflowing the gray list.\n      </blockquote>")))
 (idp10136592
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The <code>gray_vals</code> array initially has 2048\n        elements. <code>gray_vals_cur</code> starts at\n        <code>gray_vals</code>, and increases until it reachs\n        <code>gray_vals_end</code>, at which point the\n        <code>gray_vals</code> array is doubled, as long as its\n        size (in bytes) is less than 1/2^10th of the heap size\n        (<code>caml_stat_heap_size</code>). When the gray vals is\n        of its maximum allowed size, it isn't grown any further, and the\n        heap is marked as impure (<code>heap_is_pure=0</code>),\n        and last half of <code>gray_vals</code> is ignored (by\n        setting <code>gray_vals_cur</code> back to the middle of\n        the <code>gray_vals</code> array.\n      </blockquote>")))
 (idp10133296
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Marking maintains an array of gray blocks,\n        <code>gray_vals</code>. It uses as them as a stack,\n        pushing on a white block that is then colored gray, and popping\n        off a gray block when it is scanned and colored black. The\n        <code>gray_vals</code> array is allocated via\n        <span><em>malloc(3)</em></span>, and there is a pointer,\n        <code>gray_vals_cur</code>, to the next open spot in the\n        array.\n      </blockquote>")))
 (idp10130752
  ((file inside-the-runtime.html)
   (html "<blockquote>\n<code>Phase_sweep</code>\n</blockquote>")))
 (idp10128960
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n<code>Subphase_final</code>: initialise for the\n                sweep phase\n              </blockquote>")))
 (idp10127408
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n<code>Subphase_weak2</code>: remove dead weak\n                arrays, observe finalized values\n              </blockquote>")))
 (idp10125904
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n<code>Subphase_weak1</code>: clear weak pointers\n              </blockquote>")))
 (idp10124400
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n<code>Subphase_main</code>: main marking phase\n              </blockquote>")))
 (idp10122816
  ((file inside-the-runtime.html)
   (html "<blockquote>\n<code>Phase_mark</code>\n</blockquote>")))
 (idp10121360
  ((file inside-the-runtime.html)
   (html "<blockquote>\n<code>Phase_idle</code>\n</blockquote>")))
 (idp10120240
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The major heap collections operates incrementally, as the amount\n        of memory being tracked is a lot larger than the minor heap. The\n        major collector can be in any of a number of phases:\n      </blockquote>")))
 (idp10116336
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        (<span><em>avsm</em></span>: I dont think we've introduced weak\n        references yet, so this needs rearranging) At the end of the\n        depth-first search in minor collection, the collector scans the\n        <code>weak-ref</code> table, and clears any weak\n        references that are still pointing into the minor heap. The\n        collector then empties the <code>weak-ref</code> table and\n        the minor heap.\n      </blockquote>")))
 (idp10114560
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        (<span><em>avsm</em></span>: note from sweeks to investigate:\n        There is a hack for objects whose tag is\n        <code>Forward_tag</code> that does some kind of path\n        compression, or at least removal of one link, but I'm not sure\n        what's going on.)\n      </blockquote>")))
 (idp10112480
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Values that are known from the tag in their header to not\n        contain pointers are simply forwarded and completely copied, and\n        never placed on the <code>oldify_todo_list</code>. These\n        tags are all greater than <code>No_scan_tag</code> and\n        include strings and float arrays.\n      </blockquote>")))
 (idp10109568
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Each value on the <code>oldify_todo_list</code> is marked\n        as forwarded, and the first word points to the new block in the\n        major heap. That new version contains the actual value header,\n        the real first field of the value, and a link (pointer) to the\n        next value on the oldify_todo_list, or\n        <sub>NULL</sub> at the end of the list. Clearly this\n        approach won't work if an value has only one field, since there\n        will be no second field to store the link in. Values with\n        exactly one field are never put on the\n        <code>oldify_todo_list</code>; instead, the collector\n        immediately traverses them, essentially making a tail call in\n        the depth-first search.\n      </blockquote>")))
 (idp10107024
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Because a forwarded block might itself contain pointers, it must\n        at some point be scanned to see if those pointers point to\n        blocks in the minor heap, so that those blocks can also be\n        forwarded. The collector maintains a linked list (called the\n        <code>oldify_todo_list</code>) of forwarded objects that\n        it still needs to scan. That linked list looks like:\n      </blockquote>")))
 (idp10104448
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Moving a block between heaps is traditionally called\n        <span><em>forwarding</em></span>. The OCaml runtime code uses\n        that term as well as the term <span><em>oldify</em></span>, which\n        is useful to understand when profiling hotspots in your code.\n        The minor collector first visits all roots and forwards them if\n        they point to a block in the minor heap. When a block is\n        forwarded, the collector sets the tag of the original block to a\n        special <code>Forward_tag</code> (250), and the first\n        field of the original block to point to the new block. Then, if\n        the collector ever encounters a pointer to the original block\n        again, it can simply update the pointer directly into the\n        forwarded block.\n      </blockquote>")))
 (idp10102432
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            Intergenerational pointers in the\n            <code>caml_ref_table</code>\n            (<span><em>avsm</em></span>: xref above?)\n          </blockquote>")))
 (idp10101168
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            Finalized values (<span><em>avsm</em></span>: ?)\n          </blockquote>")))
 (idp10100352
  ((file inside-the-runtime.html)
   (html "<blockquote>\n            Global roots\n          </blockquote>")))
 (idp10097616
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            C stack(s), identified by <code>BeginRoots</code> or\n            <code>CAMLparam</code> in C code\n            (<span><em>avsm</em></span>: xref C bindings chapter)\n          </blockquote>")))
 (idp10096800
  ((file inside-the-runtime.html)
   (html "<blockquote>\n            OCaml stack(s)\n          </blockquote>")))
 (idp10094560
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The goal of minor collection is to empty the minor heap by\n        moving to the major heap every block in the minor heap that\n        might be used in the future, and updating each pointer to a\n        moved block to the new version of the block. A block is\n        <span><em>live</em></span> if is reachable by starting at some\n        <span><em>root</em></span> pointer into a block in the minor\n        heap,a nd then following pointers in blocks. There are many\n        different kinds of roots:\n      </blockquote>")))
 (idp10093776
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        For those familiar with garbage collection terminology, here is\n        OCaml's minor colection in one sentence. OCaml's minor\n        collection uses copying collection with forwarding pointers, and\n        does a depth-first traversal of the block graph using a stack\n        represented as a linked list threaded through blocks that need\n        to be scanned.\n      </blockquote>")))
 (idp10090096
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          (<span><em>avsm</em></span>: need to mention when a value is\n          allocated directly into the major heap somewhere)\n        </blockquote>")))
 (idp10089088
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          (<span><em>avsm</em></span>: it would be really nice to use a\n          benchmark suite here and shorten the example. Investigate the\n          options and edit this section)\n        </blockquote>")))
 (idp10088144
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          Notice the space/time tradeoff here. The mutable version runs\n          almost 4 times slower than the immutable one, but has\n          significantly fewer garbage collection cycles. Minor\n          collections in OCaml are very fast, and so it is often\n          acceptable to use immutable data structures in preference to\n          the more conventional mutable versions. On the other hand, if\n          you only rarely mutable a value, it can be faster to take the\n          write barrier hit and not allocate at all.\n        </blockquote>")))
 (idp10085232
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          This program defines a type <code>t1</code> that is\n          mutable, and <code>t2</code> that is immutable. The main\n          loop iterates over both fields and runs a simple counter. It\n          measures two things: the wallclock time that all the\n          iterations take, and the number of minor garbage collections\n          that occurred during the test. The results should look\n          something like this:\n        </blockquote>")))
 (idp10081872
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          Let's see this for ourselves with a simple test program:\n        </blockquote>")))
 (idp10079584
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          The write barrier is one of the reasons why using immutable\n          data structures can sometimes be faster than mutable records.\n          The OCaml compiler keeps track of any mutable types and adds a\n          call to <code>caml_modify</code> before making the\n          change. The <code>caml_modify</code> checks that the\n          remembered set is consistent, which, although reasonably\n          efficient, can be slower than simply allocating a fresh value\n          on the fast minor heap.\n        </blockquote>")))
 (idp10076208
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The same address can occur in <code>caml_ref_table</code>\n        multiple times if a block field is mutated repeatedly and\n        alternated between pointing at the minor heap and the major\n        heap. The field in <code>caml_ref_table</code> also may\n        not always point into the minor heap (if it was changed after\n        being added), since fields are never removed. The entire table\n        is cleared as part of the minor collection process.\n      </blockquote>")))
 (idp10073536
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        In that case the entry is added at\n        <code>caml_ref_table.ptr</code>, which is then\n        incremented. If <code>ptr</code> is already at\n        <code>limit</code>, the table is doubled in size before\n        adding the address.\n      </blockquote>")))
 (idp10072800
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            the field is being changed to point into the minor heap\n          </blockquote>")))
 (idp10071936
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            the field previously did not point to the minor heap\n          </blockquote>")))
 (idp10071088
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            a field in a block in the major heap is mutated\n          </blockquote>")))
 (idp10069376
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        An address is added to <code>caml_ref_table</code> when\n        all of these conditions are satisfied:\n      </blockquote>")))
 (idp10067872
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The relationships of the pointers are as follows:\n      </blockquote>")))
 (idp10064000
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Most incremental generational garbage collectors have to keep\n        careful track of values pointing from old generations to younger\n        ones. The OCaml runtime is no exception, and maintains a set of\n        addresses in the major heap that may point into the minor heap.\n        These addresses are <span><em>not</em></span> OCaml pointers, and\n        just literal memory addresses. The runtime ensures that it never\n        relocates values in the major heap unless this\n        &quot;remembered&quot; set is empty. The set is maintained as a\n        dynamically resized array of pointers, which is itself\n        maintained via a collection of pointers known as the\n        <code>caml_ref_table</code>.\n      </blockquote>")))
 (idp10061328
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          (<span><em>avsm</em></span>: 0 is the next-fit policy, which is\n          quite fast but can result in fragmentation. 1 is the first-fit\n          policy, which can be slower in some cases but can be better\n          for programs with fragmentation problems. )\n        </blockquote>")))
 (idp10059744
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          (<span><em>avsm</em></span>: this really needs a diagram)\n        </blockquote>")))
 (idp10050480
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          If we did manage to find something suitable in the\n          <code>flp</code> array, say at index\n          <code>i</code>, we need to update\n          <code>flp</code>. This update is rather complex, and the\n          reason why first-fit allocation is slower than next-fit. We\n          walk through the free list between <code>flp[i-1]</code>\n          and <code>flp[i]</code> and record every high point we\n          come across. Say we find <code>j</code> such points. We\n          move the upper portion of <code>flp</code> (from\n          <code>flp[i+1]</code> to the end) to the right by\n          <code>j</code> places and insert each new high point\n          into the array. There is a further corner case when adding in\n          <code>j</code> new high points would make\n          <code>flp</code> bigger than <code>FLP_MAX</code>.\n        </blockquote>")))
 (idp10047680
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          There's also the case when the <code>flp</code> array\n          has its ceiling size of <code>FLP_MAX</code> (default\n          100). Then we just start at the end of the\n          <code>flp</code> array and walk until we find something\n          big enough. This is known in the as a slow first-fit search,\n          since this linear walk may take a long time.\n        </blockquote>")))
 (idp10042000
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          If there's nothing big enough in the <code>flp</code>\n          array, we extend it by walking the free list starting at the\n          <span><em>last</em></span> pointer in the\n          <code>flp</code>-array, say <code>flp[N]</code>.\n          We extend the <code>flp</code> array along the way, so\n          that at each block, if this block is bigger than the current\n          last thing in <code>flp</code> (which is equivalent to\n          saying this is the biggest block we've ever seen, since the\n          blocks pointed to by the <sub>flp</sub> array are\n          increasing in size), we add it to the end of\n          <sub>flp</sub>. We stop this walk when we come\n          across a block big enough to house our desired new block.\n        </blockquote>")))
 (idp10039952
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          When allocating, we first check the flp-array. If\n          <code>flp[i]</code> is not big enough for our new block,\n          then we may as well skip to <code>flp[i+1]</code>,\n          because everything in the free list before then will also be\n          too small.\n        </blockquote>")))
 (idp10035488
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          The runtime maintains an ordered array of freelist chunks,\n          called the <code>flp</code> array. Imagine a function\n          mapping a block's index in the free list to its size. The flp\n          array pointers are to the high points of this graph. That is,\n          if you walk the free list between <code>flp[i]</code>\n          and <code>flp[i+1]</code>, you will come across blocks\n          that have sizes at most the size of <code>flp[i]</code>.\n          Furthermore this sequence of smaller-than-flp[i] blocks cannot\n          be extended, which is equivalent to saying\n          <code>size(flp[i+1]) &gt; size(flp[i])</code>.\n        </blockquote>")))
 (idp10034368
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          First-fit allocation focusses on reducing memory\n          fragmentation, at the expense of slower block allocation. For\n          some workloads, the reduction in the frequency in heap\n          compaction will outweigh the extra allocation cost.\n          (<span><em>avsm</em></span>: example?)\n        </blockquote>")))
 (idp10032352
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n          Next-fit allocation keeps a pointer to the block in the free\n          list that was most recently used to satisfy a request. When a\n          new request comes in, the allocator searches from the next\n          block until the end of the free list, and then from the\n          beginning of the free list up to that block.\n        </blockquote>")))
 (idp10030688
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Allocating a new block in the major heap always looks in the\n        free list. There are two allocation policies: first fit and next\n        fit (the default).\n      </blockquote>")))
 (idp10028224
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            If the free block is two or more words larger than the\n            requested block, it remains in the free list, with its\n            length shortened, and the end of the free block is returned\n            for the requested block. Since the allocated block is\n            right-justified within the free block, the linking of the\n            free list doesn't need to be changed at all as the block\n            that remains in the free list is the original one.\n          </blockquote>")))
 (idp10027152
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            If the free block is one word too large, it is unlinked from\n            the free list, and the first word is given a special header\n            recognizable to the collector as an unused word, while the\n            rest of the block is returned as the requested block.\n          </blockquote>")))
 (idp10026224
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            If the free block is exactly the right size, it is unlinked\n            from the free list and returned as the requested block.\n          </blockquote>")))
 (idp10025184
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        As soon as the runtime finds a free block that is larger than\n        the request, there are three possibilities:\n      </blockquote>")))
 (idp10022976
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The free space in the major heap's chunks is organized as a\n        singly linked list of OCaml blocks, ordered by increasing\n        virtual address. The runtime has a pointer to the first block in\n        the free list. A free list block is at least two words: a header\n        followed by a pointer to the next free-list block. The header\n        specifies the length of the block just as with a normal block.\n        (<span><em>avsm</em></span>: I'm not sure that this is quite\n        true. It seems from <code>freelist.c</code> that the\n        freelist blocks are normal OCaml blocks, with the first data\n        entry being the next pointer. when detached, they become normal\n        ocaml blocks)\n      </blockquote>")))
 (idp10020864
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        Allocating a block on the major heap first checks the free list\n        of blocks (see below). If there isn't enough room on the free\n        list, the runtime expands the major heap with a fresh block that\n        will be large enough. That block is then added to the free list,\n        and the free list is checked again (and this time will\n        definitely succeed).\n      </blockquote>")))
 (idp10018064
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The chunk's data area always starts on a page boundary, and its\n        size is a multiple of the page size (4KB). It contains a\n        contiguous sequence of heap blocks. These can be as small as one\n        or two 4KB pages, but are usually allocated in 1MB chunks (or\n        512KB on 32-bit architectures). You can modify these defaults by\n        editing <code>Heap_chunk_def</code> in\n        <code>byterun/config.h</code> and recompiling the runtime.\n        (<span><em>avsm</em></span>: talk about modifying the defaults in\n        a separate callout, as there are quite a few variables which can\n        be tweaked)\n      </blockquote>")))
 (idp10017344
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            a link to the next heap chunk in the list.\n          </blockquote>")))
 (idp10016416
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            an allocation size in bytes, used during heap compaction to\n            merge small blocks to defragment the heap.\n          </blockquote>")))
 (idp10015568
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            the size in bytes of the data area\n          </blockquote>")))
 (idp10014192
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n            the address of the memory that the chunk is in, as allocated\n            by <span><em>malloc(3)</em></span>. It is needed when the\n            chunk is freed.\n          </blockquote>")))
 (idp10012384
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The major heap is a singly linked list of contiguous memory\n        chunks, sorted in increasing order of virtual address. Each\n        chunk is a single memory chunk allocated via\n        <span><em>malloc(3)</em></span> and consists of a header and a\n        data area which contains OCaml blocks. A pointer to a heap chunk\n        points to the start of the data area, and access to the header\n        is done by a negative offset from this pointer. A chunk header\n        has:\n      </blockquote>")))
 (idp10007872
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        To force a minor gc to occur, one can set the\n        <code>caml_young_limit</code> to equal\n        <code>caml_young_end</code>, which causes signal handlers\n        to be run and to &quot;urge&quot; the runtime\n        (<span><em>avsm</em></span>: elaborate on this urging business,\n        and how to set young from within OCaml via\n        <code>Gc.??</code>).\n      </blockquote>")))
 (idp10001296
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        In a fresh minor heap, the <code>limit</code> will equal\n        the <code>start</code>, and the current\n        <code>ptr</code> will equal the <code>end</code>. As\n        blocks are allocated, <code>caml_young_ptr</code> will\n        decrease until it reaches <code>caml_young_limit</code>,\n        at which point a minor garbage collection is triggered. To\n        allocate a block in the minor heap, we decrement\n        <code>caml_young_ptr</code> by the size of the block\n        (including the header), and then set the the header to a valid\n        value. If there isn't enough space left for the block without\n        decrementing past the <code>limit</code>, a minor\n        collection is triggered.\n      </blockquote>")))
 (idp9998464
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The range of memory usable for allocation goes from the\n        <code>caml_young_start</code> to\n        <code>caml_young_end</code> C variables managed by the\n        runtime.\n      </blockquote>")))
 (idp9995968
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n        The minor heap is a contiguous chunk of virtual memory. Its size\n        is set on program startup and decided by the\n        <code>OCAMLRUNPARAM</code> environment variable\n        (<span><em>avsm</em></span>: xref), and then only changed later\n        by calls to <code>Gc.set</code>. The default size is 256k.\n      </blockquote>")))
 (idp9994176
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n      The page table starts with a size aiming to be between 25% and 50%\n      full of entries, and is automatically doubled in size if it\n      becomes half full. It is never shrunk.\n    </blockquote>")))
 (idp9978576
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n      The byte value stored is a bitwise <code>or</code> of the\n      following status bits:\n    </blockquote>")))
 (idp9976672
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n      Since the virtual memory space can be very large and sparsely used\n      (especially on a 64-bit CPU), the page table is implemented as a\n      hash table in which keys are page-aligned addresses and values are\n      a single byte. The hash table is represented as an array of words,\n      with each word being a key-value pair. The key-value pair is the\n      bitwise <code>or</code> of the virtual address of the start\n      of the page (which has zeros for its lower 12-bits due to being\n      aligned to 4KB), and the lower 8 bits are used for the value. To\n      look up an address, one masks out the lower 12-bits of the memory\n      address, compute a multiplicative hash to get a table index, and\n      then compares against the address (i.e. the key) at that index.\n      Linear probing is used to resolve collisions.\n    </blockquote>")))
 (idp9975536
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n      The runtime maintains a <span><em>page table</em></span> that\n      allows it to determine the status of any virtual memory address in\n      the operating system process. The status defines whether that\n      address is a page in use by the OCaml runtime, and if so, which of\n      the four purposes it is being used for.\n    </blockquote>")))
 (idp9974656
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n      The OCaml runtime divides the address space into memory pages of\n      4KB each (this is configurable by recompiling the runtime). At any\n      given time, every page that is in use is used for a single\n      purpose: major heap, minor heap, static data or code. The runtime\n      guarantees this by always allocating slightly more memory than\n      requested so that that it can choose align the memory it will\n      actually use at the beginning of a 4KB page.\n    </blockquote>")))
 (idp9972608
  ((file inside-the-runtime.html)
   (html
    "<blockquote>\n    (<span><em>avsm</em></span>: this chapter is still being chopped and\n    changed)\n  </blockquote>")))
 (idp9184864
  ((file input-and-output.html) (html "<blockquote>\n</blockquote>")))
 (idp8670864
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      However, there are times when imperative programming might provide\n      efficiency (as with lazy evaluation, or memoization), or you might\n      require techniques or data structures that are traditional\n      imperative (like graphs represented with adjacency lists), and in\n      these cases OCaml usually shines. Used with discretion, imperative\n      programming can lead to smaller, simpler programs.\n    </blockquote>")))
 (idp8669984
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The OCaml language supports a fairly standard imperative\n      programming model, with looping, assignment, mutable arrays,\n      records, and objects. If desired, we can write programs that\n      correspond directly to what we would have written in some other\n      imperative language like C or Java. Of course, doing so is really\n      not the best match -- if you want to write imperative programs,\n      you should probably use an imperative programming language.\n    </blockquote>")))
 (idp8666752
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        One advantage of this relaxed iteration semantics is peformance,\n        since iteration is largely unsynchronized. Another advantage is\n        that deadlock is less likely. If we were to\n        <span><em>lock</em></span> the bucket during iteration, then\n        changes to that bucket would not be allowed during iteration\n        (even by the iterating thread). We might allow lock recursion to\n        allow mutations by the iterating thread, but in general the\n        synchronization might involve multiple threads, resulting in\n        deadlock. Lock-free iteration ensures that the\n        <code>ConcurrentHashMap</code> will not be involved in a\n        deadlock cycle.\n      </blockquote>")))
 (idp8664688
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        All method are unsychronized except the method\n        <code>remove</code>, which mutates the bucket. As a\n        consequence, it means that hash operations that add and remove\n        elements from the list can happen concurrently with iteration.\n        Again, this is great from a performance perspective, but it\n        means that iteration has non-sequential semantics. In\n        particular, whenever iteration enters a new bucket, subsequent\n        concurrent operations that add new elements or remove old ones\n        have <span><em>no effect</em></span> on the iteration. Iteration\n        advances through that bucket as if it were unchanged.\n      </blockquote>")))
 (idp8656752
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        For the final part of the implementation, let's define\n        imperative iteration. The iterator object contains a bucket\n        index, and the field <code>elements</code> refers to some\n        suffix of the list stored in the bucket. The\n        <code>value</code> method returns the current elements,\n        and the <code>next</code> method advances the\n        <code>elements</code> field. The method\n        <code>normalize</code> is used to maintain the invariant\n        that the <code>elements</code> field always refers to a\n        value in the table unless the iterator has advanced past the\n        final element. The <code>remove</code> method removes the\n        current element from the bucket in which it is stored.\n      </blockquote>")))
 (idp8653840
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note, OCaml does not a <span><em>guarantee</em></span> this\n        semantics. The OCaml implementation may change to support\n        parallelism. If it does, the memory semantics will change\n        accordingly. The simplest fix is just to synchronize the access.\n        Performance of <code>find</code> operations will decrease\n        somewhat due to contention.\n      </blockquote>")))
 (idp8652864
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Unfortunately, for some processor architectures, primary memory\n        does not have sequential semantics, due to caching and other\n        effects. Fortunately for us, OCaml does provide sequential\n        memory semantics due to its threading model where: 1) only one\n        thread executes at a time, and 2) there is a memory barrier the\n        prevents reordering of thread context switches and memort\n        operations, and 3) the compiler does not reorder memory\n        operations in ways that would violate sequential memory\n        semantics.\n      </blockquote>")))
 (idp8646384
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The reasoning has to do with two things: 1) the semantics we\n        expect from the table, and 2) the OCaml memory model. Ideally,\n        the semantics we would expect is <span><em>sequential\n        semantics</em></span>, meaning that all memory operations are\n        processed in <span><em>some</em></span> sequence that is\n        compatible with the order in which they were performed in each\n        thread. Thus, if some thread adds two entries for keys\n        <code>K1</code> and <code>K2</code> in sequential\n        order, then all other threads will see either, 1) neither entry,\n        or 2) a entry for <code>K1</code>, or 3) a entry for both\n        <code>K1</code> and <code>K2</code>, but it will\n        <span><em>not</em></span> see an entry for <code>K2</code>\n        without also having an entry for <code>K1</code>.\n      </blockquote>")))
 (idp8645808
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        From a performance perspective, this is clearly a win, because\n        retrieving elements from the table has no locking at all. But\n        why is it valid?\n      </blockquote>")))
 (idp8643664
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The function to find an association in the table is similar --\n        we jsut find the entry in the table and return the value part.\n        However, this particular implementation is somewhat more subtle,\n        because it omits the synchronization step, examining the bucket\n        <span><em>without</em></span> acquiring the lock.\n      </blockquote>")))
 (idp8641856
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Removing an element from the table is similar. If here is a\n        previous entry in the table, the entry is removed. Otherwise,\n        the table is left unchanged.\n      </blockquote>")))
 (idp8638064
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        To add a new entry to the table, the <code>add</code>\n        function acquires the bucket lock, then uses\n        <code>find_assoc</code> to look for an existing\n        association. If one is found, the <code>value</code> is\n        updated in-place to the new value. Otherwise, a new entry is\n        added to the beginning of the bucket.\n      </blockquote>")))
 (idp8634528
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that the <code>synchronize</code> function is\n        <span><em>not</em></span> exception-safe, meaning that if\n        evaluation of <code>f ()</code> raises an exception, the\n        lock will not be released. An exception-safe version would catch\n        all exceptions; when an exception is raised, the lock would be\n        released, and the exception re-raised.\n      </blockquote>")))
 (idp8632048
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The locks are intended to partition the table into multiple\n        sub-parts, where each lock provides synchronization for a\n        contiguous range of buckets. To make synchronization each we\n        define a function <code>synchronize</code> that takes a\n        bucket index and a function, and evaluates the function with the\n        bucket lock acquired, releasing the lock before returning.\n      </blockquote>")))
 (idp8627584
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Each bucket is an <span><em>association list</em></span>, meaning\n        that it is list of key/value pairs that implement a dictionary.\n        We can start the implementation by defining dictionary\n        operations for association lists. The function\n        <code>find_assoc</code> finds the value associated with a\n        key, and <code>remove_assoc</code> removes an association.\n        Both functions raise an exception <code>Not_found</code>\n        if the list does not contain the association.\n      </blockquote>")))
 (idp8625728
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Each <code>element</code> is a key/value pair, where the\n        value is mutable so that the <code>add</code> function can\n        mutate it in place. For this implementation, we'll use 32 locks,\n        and start with 256 buckets.\n      </blockquote>")))
 (idp8622800
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We'll use the same basic construction that we used to implement\n        the <code>HashMap</code> -- a hash table contains an array\n        of buckets. In addition we'll add locking to ensure that\n        concurrent operations do not interfere. In addition, to reduce\n        lock contention, we'll use an array of locks to partition the\n        table into multiple parts. If operations are randomly\n        disitribted, this should reduce lock contention.\n      </blockquote>")))
 (idp8620896
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Let's extend our hash table example to support concurrency. To\n        begin, let's first give the signature of the module we will\n        implement. The table has operations to add, remove, and find\n        elements, and it also supports imperative iterators.\n      </blockquote>")))
 (idp8618528
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Out of all of these choices, the simplest one is to use the\n        <code>Async</code> model and cooperative multitasking.\n        However, let's go ahead and work through some examples of using\n        traditional concurrent programming using locks and other\n        synchronization primitives to build a concurrency library.\n      </blockquote>")))
 (idp8617104
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            Give in, and use threads, and the standard synchronization\n            toolkit that comes with OCaml, including locks\n            (<code>Mutex</code>), condition variables, etc.\n          </blockquote>")))
 (idp8616112
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            Do not share mutable data between threads. In practice, this\n            usually includes explicit communication channels between\n            threads that otherwise have isolated state.\n          </blockquote>")))
 (idp8613840
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            Use <span><em>cooperative</em></span> multitasking, where\n            only one thread runs at a time, and context switches are\n            <span><em>voluntary</em></span>. This is the dominant model\n            in <code>Async</code>.\n          </blockquote>")))
 (idp8612944
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n            Do not use assignment, mutable data structures, or perform\n            input/output in threads.\n          </blockquote>")))
 (idp8611840
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        In general the interaction of concurrency with imperative\n        programs causes problems with races. There are many techniques\n        you can use to address the issue.\n      </blockquote>")))
 (idp8609856
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      When we run this program, it produces a deterministic output.\n    </blockquote>")))
 (idp8606832
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      If this is not the behavior that was expected, one solution is to\n      use a <code>Mutex</code> to ensure that the increment\n      operation is atomic. We can allocate a lock with\n      <code>Mutex.create</code>, then acquire the lock in the loop\n      body.\n    </blockquote>")))
 (idp8604800
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This represents a nearly perfect interleaving of the thread\n      executions. Each thread fetches the value from the\n      <code>value</code> reference cell, prints the value, then\n      performs the assignment. Since both threads effectively run in\n      lockstep, the final value in the <code>value</code>\n      reference cell is the same as if there were just one thread\n      running.\n    </blockquote>")))
 (idp8603376
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The exact behavior of the program is nondeterminstic -- it depends\n      on the relative sopeed of the two theads. One output is listed\n      below.\n    </blockquote>")))
 (idp8600256
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The reference cell <code>value</code> holds a shared value\n      that is incremented 10 times, in a loop, by the\n      <code>loop</code> function. Each iteration of the loop\n      prints the current value, then assigns the new value. We create\n      two threads with the <code>Thread.create</code> expressions,\n      then use <code>Thread.join</code> to block until the threads\n      terminate.\n    </blockquote>")))
 (idp8597904
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      When threads share imperative state, this gives rise to the\n      standard synchronization issues, where multiple threads may be\n      mutating shared state at the same time. To illustrate, let's write\n      a program with two threads that increment a shared reference cell\n      concurrently.\n    </blockquote>")))
 (idp8596832
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The OCaml standard library supports threads, where individual\n      threads of control can be created that run concurrently (but only\n      one thread at a time), and context switches are\n      <span><em>involuntary</em></span>, meaning that a thread may be\n      preempted at any time.\n    </blockquote>")))
 (idp8596032
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Concurrency is another tool OCaml programmers can use to simplify\n      programs in certain cases. In OCaml, threads do not introduce\n      parallelism; only one thread may be running at a time. However,\n      threads can be used to simplify control flow -- a program can\n      devote some threads to reading input, others for performing work,\n      others for producing output, etc.\n    </blockquote>")))
 (idp8589216
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The module <code>WeakHash</code> has the semantics of a\n        set of elements. The <code>WeakHash.merge</code> function\n        retrieves an element if it already exists, or adds it otherwise.\n        The constructors are much as before.\n      </blockquote>")))
 (idp8586560
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The weak hash table requires that hash and equality functions be\n        provided explicitly, so we construct a module\n        <code>HashExp</code> that defines the\n        <code>equal</code> and <code>hash</code> functions.\n        Note that equality and hashing are both constant-time functions\n        -- equality can rely on physical equality of subexpressions, and\n        hashing can use the explcitly represented hash values.\n      </blockquote>")))
 (idp8584224
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We define the type <code>WExp.t</code> much as before,\n        except including the hash code for the <code>Plus</code>\n        and <code>Times</code> expressions.\n      </blockquote>")))
 (idp8582816
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        To deal with this problem, we can use &quot;weak&quot; hash\n        tables, implemented in the <code>Weak</code> module in the\n        OCaml standard library. The main difference is that a weak table\n        may drop values that are no longer being used elsewhere. Weak\n        tables are tied into the garbage collector, which removes values\n        that are no longer live.\n      </blockquote>")))
 (idp8581728
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        A more serious problem is that the hash table holds onto\n        expressions <span><em>forever</em></span>, even if they are no\n        longer used in the program. This can result in a space leak that\n        cancels out any space saving we had in the first place, perhaps\n        making it even worse.\n      </blockquote>")))
 (idp8580896
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        There is two issues with hash-consing as we have just defined\n        it. A minor problem is that hashing is linear in the size of the\n        expression. This can be fixed by storing the hash code in the\n        expression itself, avoiding the recursive computation. If\n        expressions are small, this won't be much of a benefit, but it\n        can save time if large expressions are frequently constructed.\n      </blockquote>")))
 (idp8577568
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Expressions that are not equal are equal are not physically\n        equal either, however common subexpressions are equal.\n      </blockquote>")))
 (idp8575824
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that expressions that are structurally equal are now also\n        physically equal.\n      </blockquote>")))
 (idp8573760
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The implementation defines a hash table\n        <code>table</code>, and a <code>merge</code>\n        function that merges an expression into the table, returning the\n        previous value if there was one, or inserting a new value if\n        there is not. The constructors can rely on the fact that\n        subexpressions have already been hash-consed, so they simply\n        call the merge function to memoize the value.\n      </blockquote>")))
 (idp8566800
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The type <code>Exp.t</code> is declared as\n        <code>private</code>, meaning that pattern matching can be\n        used on the expressions outside the module, but expressions\n        can't be constructed without explicitly using the constructors\n        <code>num</code>, <code>var</code>,\n        <code>plus</code>, <code>times</code> provided by\n        the <code>Exp</code> module. These functions enforce the\n        hash-consing, ensuring that structurally equal expressions are\n        mapped to physically equal representations.\n      </blockquote>")))
 (idp8565376
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        One of the simplest ways to implement hash-consing is to use a\n        hash-table to remember (memoize) values that have already been\n        created. To illustrate, let's define a kind of numerical\n        expression <code>Exp.t</code> consisting of integers,\n        variables, addition, and multiplication (we can define more\n        operators, but let's keep the example simple).\n      </blockquote>")))
 (idp8563232
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        &quot;Hash consing&quot; is a technique to share values that are\n        structurally equal. The term comes from Lisp, where the\n        technique is used to share s-expressions that are equal. In some\n        situations, hash-consing can result in dramatic performance\n        improvements in two ways. First, space can be reduced by using a\n        single physical representation for values that are equal.\n        Second, values can be compared for equality using the\n        constant-time physical equality operator <code>==</code>.\n      </blockquote>")))
 (idp8561616
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Note that this use of memoization relies on side-effects to\n        cache intermediate computations, but it doesn't change the\n        values of the function. Its purpose is to improve performance.\n      </blockquote>")))
 (idp8559344
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Next, let's construct a memoized version of the function, where\n        the recursive calls are made through a memo table. This makes a\n        dramatic improvement in performance. Since the recursive calls\n        are computed just once, the complexity is linear, and the\n        computation is fast.\n      </blockquote>")))
 (idp8556480
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        The complexity of this function is exponential\n        <span><em>O(2^i)</em></span>, because for large inputs the\n        function computes two similar-sized subproblems. To illustrate,\n        let's time the computation using the <code>Sys.time</code>\n        function to measure the wall clock.\n      </blockquote>")))
 (idp8553920
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        Memoization is useful for <span><em>dynamic\n        programming</em></span>, where problems are solved by breraking\n        them down into simpler subproblems. If subproblems occur more\n        than once, memoization can be used to avoid recomputing the\n        subproblem. A canonical example of this is the Fibonacci\n        sequence, which is defined by the following program, which\n        produces the sequence <span><em>0, 1, 1, 2, 3, 5, 8, 13, 21,\n        ...</em></span> starting from 0.\n      </blockquote>")))
 (idp8551072
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n        We can generalize lazy computations to function\n        <span><em>memoization</em></span>, where we save the result of\n        function applications to avoid their recomputation. One simple\n        implementation is to use a hash table to save the values by side\n        effect.\n      </blockquote>")))
 (idp8544320
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The <code>'a delayed</code> type contains a delayed value\n      represented as a function, or else an actual value. The\n      <code>ImpLazy.force</code> function forces the computation;\n      if it is delayed, the function is evaluated, and the value is\n      mutated to save the resulting value. Subsequent calls to\n      <code>ImpLazy.force</code> will fall into the\n      <code>Value</code> case, without needing to reevaluate the\n      function. The main difference between our module\n      <code>ImpLazy</code> and the builtin module\n      <code>Lazy</code> is the nice syntax for the latter. Rather\n      than writing <code>ImpLazy.create (fun () -&gt; e)</code>,\n      the builtin syntax is just <code>lazy e</code>.\n    </blockquote>")))
 (idp8541408
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The builtin <code>lazy</code> computation has a nice syntax,\n      but the technique is pretty generic, and we can implement it with\n      a mutable value.\n    </blockquote>")))
 (idp8537824
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      One of the simplest of these is the builtin lazy computation. The\n      keyword <code>lazy</code> can be used to prefix any\n      expression, returning a value of type\n      <code>'a Lazy.t</code>. The computation is delayed until\n      forced with the <code>Lazy.force</code> function, and then\n      saved thereafter.\n    </blockquote>")))
 (idp8537056
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There are many instances where imperative programming is used to\n      change or improve the performance characteristics of a program,\n      without otherwise changing the behavior. In other words, the\n      program could be written without side-effects, but performance is\n      improved by techniques like lazy computation, caching,\n      memoization, etc.\n    </blockquote>")))
 (idp8534080
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The <code>iterator</code> function returns in iterator that\n      refers to the first element in the table (if the table is\n      non-empty). The <code>find</code> function searches for an\n      element in the table, returning an iterator referring to that\n      value if found, or else the an iterator at the end of the table.\n    </blockquote>")))
 (idp8531696
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now that the iterator is defined, we can complete the\n      <code>IterableHashMap</code> implementation.\n    </blockquote>")))
 (idp8525296
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There are several more things to note. The syntax\n      <code>object (self) ... end</code> means that the variable\n      <code>self</code> refers to the object itself, allowing\n      other method in the object to be called (like\n      <code>self#normalize</code>). The fields\n      <code>index</code> and <code>dlist_it</code> are\n      declared as <code>val mutable</code>, which means that they\n      can be modified by assignment using the <code>&lt;-</code>\n      syntax seen in the <code>normalize</code> method. Finally,\n      the object also has an <code>initializer</code> expression,\n      which is called when the object is first created, in this case\n      normalizing the iterator.\n    </blockquote>")))
 (idp8520176
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The <code>normalize</code> method is declared a\n      <code>private</code>, so that it does not appear as part of\n      the iterator type. The <code>has_value</code> and\n      <code>value</code> methods delagate directly to the list\n      iterator. The <code>next</code> and\n      <code>remove</code> methods also delagate to the list\n      iterator; however, since the iterator has been mutated, the\n      <code>normalize</code> method is called to advance to the\n      next element.\n    </blockquote>")))
 (idp8518512
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The iterator implementation relies on a &quot;normal&quot; form,\n      where the list iterator <span><em>always</em></span> refers to an\n      element. This is handled by the <code>normalize</code>\n      method, which advances past empty buckets until either a non-empty\n      bucket is found, or the end of the table is reached.\n    </blockquote>")))
 (idp8513600
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We can define iterators in the hash table as a pair of a bucket\n      index and <code>DList</code> iterator into the bucket. To\n      define this as an object, we'll introduce a few more object\n      concepts, including mutable fields, private methods, and\n      initializers. The function\n      <code>make_iterator table index_ dlist_it_</code> returns an\n      iterator for the bucket with index <code>index_</code> and\n      list iterator <code>dlist_it_</code>.\n    </blockquote>")))
 (idp8508208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The implementation of <code>IterableHashMap</code> is\n      similar to the original <code>HashMap</code> using lists,\n      except now we will use doubly-linked lists. The\n      <code>create</code> function creates an array of\n      doubly-linked lists. The <code>add</code> function first\n      removes any existing entry, then add the new element to the front\n      of the bucket.\n    </blockquote>")))
 (idp8504832
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Let's return to the example of hash tables, but this time let's\n      define an iterator-style interface. We'll use the same\n      <code>iterator</code> object type as we did for\n      doubly-linked lists, but this time the iteration is over key/value\n      pairs. The signature changes slightly, the main change being tat\n      the <code>find</code> function returns an iterator. This\n      allows retrieval of the value associated with a key, and it also\n      allows the entry to be deleted.\n    </blockquote>")))
 (idp8501232
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      We have seen the definition of all of the functions except\n      <code>find</code>, which searches for an element in the list\n      (sequentially), returning an iterator that refers to that element\n      if it exists. The implementation simply creates an iterator, then\n      uses a loop to search sequentially for the element. If the element\n      is found, the returned iterator refers to that value, otherwise\n      the iterator does not have a value.\n    </blockquote>")))
 (idp8497888
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Now that we have defined iterators, let's declare the complete\n      signature for doubly-linked lists as a module. The type of\n      elements <code>'a element</code> is internal to the\n      implementation, and the type of lists\n      <code>'a DList.t</code> is abstract.\n    </blockquote>")))
 (idp8494608
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note that the doubly-linked list is a <span><em>cyclic</em></span>\n      data structure. Most notably, the builtin equality <span><em>does\n      not work</em></span> in general with cyclic values.\n    </blockquote>")))
 (idp8486032
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The reference cell <code>current</code> holds the current\n      position in the list. The method <code>has_value</code>\n      returns true if <code>current</code> refers to an element,\n      <code>value</code> returns the element, and\n      <code>next</code> advances the iterator. The method\n      <code>remove</code> unlinks the <code>current</code>\n      element by setting the previous element's <code>next</code>\n      pointer, and the next's elements <code>previous</code>\n      pointer, then advancing <code>current</code> to the next\n      element. The following example illustrates the semantics.\n    </blockquote>")))
 (idp8482272
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Next, to define the iterator implementation, we implement each of\n      the methods, bracketed by <code>object ... end</code>,\n      declaring each method with the <code>method</code> keyword.\n    </blockquote>")))
 (idp8479872
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Each of the labeled parts <code>has_value</code>,\n      <code>value</code>, etc. are object\n      <span><em>methods</em></span>. This object type corresponds to an\n      <span><em>interface</em></span> consisting of a set of methods.\n    </blockquote>")))
 (idp8477472
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      First, we need to define a generic iterator type. For clarity,\n      we'll use a more verbose type than in Java. We'll separate\n      retrieving a value from advacing to the next element. The object\n      type is specified like a record type, but using angle brackets\n      <code>&lt; ... &gt;</code>.\n    </blockquote>")))
 (idp8476736
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      You can skip forward to the Objects chapter for more informatation\n      about objects, but we'll be using basic objects, which are just\n      collections of methods, similar to having a record of functions --\n      we could also implement the iterator as a record of functions, but\n      the code would be somewhat more verbose.\n    </blockquote>")))
 (idp8475056
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      When we define a similar iterator concept in OCaml, we need to\n      choose how to represent it. We <span><em>could</em></span> define a\n      separate iterator type for each kind of container, but this would\n      be inconvenient, since iterators have similar behavior for many\n      different kinds of containers. To define a\n      <span><em>generic</em></span> iterator, there are several\n      reasonable choices: we can use first-class modules, or we can use\n      objects. The simpler approach is to use objects.\n    </blockquote>")))
 (idp8471808
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      At any time, a <code>Iterator</code> object refers\n      (optionally) to some element of a container. The\n      <code>hasNext()</code> method returns true if the iterator\n      refers to an element; the method <code>next()</code> returns\n      the element, and also advances to the next one; and\n      <code>remove()</code> removes the last element returned by\n      the iterator.\n    </blockquote>")))
 (idp8470240
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Let's define a Java-style kind of generic iterator object that\n      allows manual enumeration and mutation of the container. Here is\n      the Java interface.\n    </blockquote>")))
 (idp8468112
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This style of iteration is concise and completely general.\n      However, with imperative containers, we often want more control.\n      We may not want to iterate through all elements, and we often want\n      to mutate the container as we iterate. One conventional way to do\n      this is to define a generic <code>iterator</code> type that\n      can be used to enumerate and/or mutate the elements in a\n      container. This is a style seen, for example, in Java (type\n      <code>Iterator</code>) or the C++ Standard Template Library.\n    </blockquote>")))
 (idp8465472
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Defining this for doubly-linked lists is simple enough. The\n      following function iterates through the list, applying the\n      function <code>f</code> to each element in turn.\n    </blockquote>")))
 (idp8460928
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      When defining containers like lists, dictionaries, trees, etc. it\n      is conventional to define some kind of iteration to allow the\n      elements of the collection to be enumerated. When the containers\n      are immutable, like <code>'a list</code>, this is normaly\n      done with functions like <code>iter</code>,\n      <code>map</code>, and <code>fold</code>. Each of these\n      iteration functions takes a function that will be applied to each\n      of the elements in order.\n    </blockquote>")))
 (idp8456128
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The function <code>pop_front</code> performs the unlinking.\n      There are three cases, 1) the list has one element, so it becomes\n      empty, 2) the list has more than one element, so the second\n      element is relinked, or 3) the list is empty, which is an error.\n      In the second case, the list <code>l</code> is set to point\n      to the second element, the <code>previous</code> field is\n      set to <code>None</code>, and <code>v</code> is\n      returned.\n    </blockquote>")))
 (idp8454240
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      For illustration the <code>front</code> function uses\n      pattern matching on the reference cell -- it would be equivalent\n      to write an explicit dereference\n      <code>let front l = match !l with Some { value = v } -&gt; v | None -&gt; ...</code>.\n    </blockquote>")))
 (idp8451216
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      To complete this initial part of the implementation, let's define\n      function <code>front</code> to return the first element, and\n      <code>pop_front</code> to remove it.\n    </blockquote>")))
 (idp8448112
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Also note, the precedence of a <code>match</code> expression\n      is very low, so to separate it from the following assignment\n      <code>l := Some new_front</code>, we surround the match in a\n      <code>begin ... end</code> bracketing (we could also use\n      parentheses). If we did not, the final assignment would become\n      part of the <code>None -&gt; ...</code> case, which is not\n      what we want.\n    </blockquote>")))
 (idp8445376
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      There are a few more things to note. First, semicolon\n      <code>;</code> is a <span><em>separator</em></span>, not a\n      terminator, like it is in C or Java. The compiler is somewhat\n      relaxed about parsing a terminating semicolon, so it may work for\n      you, but you should not rely on it.\n    </blockquote>")))
 (idp8439168
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      In general, when a sequence expression\n      <code>expr1; expr2</code> is evaluated,\n      <code>expr1</code> is evaluated first, and then\n      <code>expr2</code>. The expression <code>expr1</code>\n      must have type <code>unit</code>, and the the value of\n      <code>expr2</code> is returned as the value of the entire\n      sequence. So, for example, the sequence\n      <code>print_string &quot;hello world&quot;; 1 + 2</code>\n      first prints the string\n      <code>&quot;hello world&quot;</code>, then returns the\n      integer <code>3</code>.\n    </blockquote>")))
 (idp8434032
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This example introduces the <span><em>sequencing</em></span>\n      operator <code>;</code>. In the case where the list is\n      non-empty (the <code>Some el</code> case in the\n      <code>match</code>), we first set\n      <code>el.previous</code> to refer to the\n      <code>new_front</code> element, and next set\n      <code>new_front.next</code> to refer to\n      <code>el</code>.\n    </blockquote>")))
 (idp8431648
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Next, let's define the function that inserts a value onto the\n      front of the list as a new first element. We define a new element\n      <code>new_front</code>, link in the new element, and set the\n      list references.\n    </blockquote>")))
 (idp8428768
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The function <code>create</code> creates an empty list. The\n      function <code>is_empty l</code> dereferences the list using\n      the <code>!</code> operator, returning true if the value is\n      <code>None</code>, or false otherwise.\n    </blockquote>")))
 (idp8424576
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The list itself is either empty, or it refers to the first element\n      of the list. We use the type\n      <code>type 'a dlist = 'a element option ref</code>; the\n      <code>ref</code> allows the list to be mutated, and the\n      value is either <code>None</code> for the empty list, or\n      <code>Some first_element</code> if the list is non-empty.\n    </blockquote>")))
 (idp8421968
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      For doubly-linked lists, we define an element\n      <code>'a element</code> with a reference both to the\n      previous and next elements. The elements at the ends have nothing\n      to refer to, so we use an option to allow the reference to be\n      <code>None</code>. The element record fields are declared as\n      <code>mutable</code> to allow them to be modified when the\n      list is mutated.\n    </blockquote>")))
 (idp8419920
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Another common imperative data structure is the doubly-linked\n      list, which allows traversal in both directions, as well as O(1)\n      deletion of any element. Doubly-linked lists are a\n      <span><em>cyclic</em></span> data structure, meaning that it is\n      possible to follow a nontrivial sequence of references from an\n      element, through other elements, back to itself. Cyclic data\n      structures can be constructed only through side-effects, by\n      constructing a set of data elements first, then using assignment\n      to set up the references. (Some kinds of cyclic data structures\n      can also be constructed with <code>let rec</code>.)\n    </blockquote>")))
 (idp8417168
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      A while-loop iterates until the condition is false.\n    </blockquote>")))
 (idp8415024
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      A downto loop\n      <code>for = &lt;initial&gt; downto &lt;final&gt; do &lt;body&gt; done</code>\n      advances downward by 1 on each iteration.\n    </blockquote>")))
 (idp8410208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      A loop\n      <code>for index = &lt;initial&gt; to &lt;final&gt; do &lt;body&gt; done</code>\n      advances by from the <code>&lt;initial&gt;</code> integer to\n      the <code>&lt;final&gt;</code> one (inclusive). The\n      iterations are evaluated if <code>&lt;final&gt;</code> is\n      smaller than <code>&lt;initial&gt;</code>.\n    </blockquote>")))
 (idp8406208
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      The <code>iter</code> function iterates through all of the\n      elements in the table using a <code>for</code> loop. There\n      are two kinds of loops in OCaml, <code>for</code> loops and\n      <code>while</code> loops.\n    </blockquote>")))
 (idp8400000
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      As the example shows, reference cells are actually just a short\n      form for record operations. The <code>ref</code> type is a\n      record with a single mutable field <code>contents</code>,\n      with the following definition. The expression\n      <code>!x</code> is equivalent to\n      <code>x.contents</code>, and <code>x := e</code> is\n      equivalent to <code>x.contents &lt;- e</code>.\n    </blockquote>")))
 (idp8397552
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>refcell := expr</code> replaces the contents of\n          the reference cell.\n        </blockquote>")))
 (idp8396080
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>! refcell</code> returns the contents of the\n          reference cell.\n        </blockquote>")))
 (idp8393952
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>ref expr</code> constructs a reference cell\n          containing the value defined by the expression\n          <code>expr</code>.\n        </blockquote>")))
 (idp8392352
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      Note that <span><em>variables are not mutable</em></span>.\n      Variables can refer to mutable data, but the binding of a variable\n      cannot be changed. For convenience, OCaml defines a type of\n      &quot;reference cell,&quot; that is a like a &quot;box&quot; where\n      the contents can be mutated.\n    </blockquote>")))
 (idp8389840
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>object.label &lt;- expr</code>: Object field\n          assignment. The field <code>label</code> must be\n          declared as <code>mutable</code>.\n        </blockquote>")))
 (idp8387200
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>record.label &lt;- expr</code>: Record field\n          assignment. The field <code>label</code> must be\n          declared as <code>mutable</code>.\n        </blockquote>")))
 (idp8385184
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>string.[index] &lt;- char</code>: String element\n          assignment. See also the <code>String.blit</code>\n          functions for mutating substrings.\n        </blockquote>")))
 (idp8383088
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n<code>array.(index) &lt;- expr</code>: Array field\n          assignment. See also the <code>Array.blit</code>\n          functions for mutating multiple fields at once.\n        </blockquote>")))
 (idp8380944
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n      This example illustrates <span><em>one</em></span> of the mutating\n      operations in OCaml: array field assignment. There are just three\n      others: the contents of a string can be mutated, and so can record\n      and object fields that have been declared as\n      <code>mutable</code>.\n    </blockquote>")))
 (idp8374144
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    The hash table is implemented as an array of buckets (the array is\n    fixed-size, in this example). The OCaml runtime provides a builtin\n    polymorphic hash function <code>Hashtbl.hash</code> that works\n    for almost any value in OCaml, excluding functions and abstract\n    values like C data. The <code>create</code> function creates a\n    new array where all buckets are empty. The <code>add</code>\n    function uses the hash function to determine the appropriate bucket,\n    then adds a new key/value association to the bucket through an array\n    <span><em>assignment</em></span>\n<code>table.(index) &lt;- (key, data) :: table.(index)</code>,\n    which <span><em>replaces</em></span> the bucket with a new one where\n    the new key/value pair is added to the front of the list. The\n    <code>find</code> function performs a linear search through\n    the appropriate bucket to find the value associated with a key. The\n    <code>iter</code> function iterates through each of the\n    elements in the buckets.\n  </blockquote>")))
 (idp8364384
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    The signature for the <code>HashMap</code> declares the type\n    of dictionaries <code>('a, 'b) t</code>, with keys of type\n    <code>'a</code> and associated values of type\n    <code>'b</code>. It also includes three functions. The\n    <code>create</code> function constructs an empty dictionary.\n    The <code>add</code> function adds a key/value association in\n    the dictionary, by <span><em>side-effect</em></span>. That is, the\n    hash table is modified <span><em>in place</em></span>, and any\n    references to the table will be able to observe the change.\n    Furthermore, the <code>add</code> method doesn't return a\n    useful value; the type <code>unit</code> contains just the\n    trivial value <code>()</code>, which is used by convention to\n    represent &quot;nothing.&quot; The <code>find</code> function\n    returns the value associated with a key, raising the exception\n    <code>Not_found</code> if the table does not contain the key.\n    The <code>iter</code> function iterates through all of the\n    elements in the table, applying the function <code>f</code> to\n    each element in turn.\n  </blockquote>")))
 (idp8360608
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    To illustrate imperative programming, let's start by implementing a\n    hash table. Hash tables are an efficient way to implement imperative\n    <span><em>dictionaries</em></span>. There are full-featured\n    implementations of hash tables in Core as well as in the OCaml\n    standard library. For illustration, we'll construct just a basic\n    dictionary using <span><em>open hashing</em></span>, where the hash\n    table consists of an array of buckets, each of which contain a\n    linked list of elements. We'll use regular (pure) OCaml lists, and\n    an array for the buckets.\n  </blockquote>")))
 (idp8358768
  ((file imperative-programming-1.html)
   (html
    "<blockquote>\n    The OCaml programming language is <span><em>functional</em></span>,\n    meaning that functions are first-class values that can be passed\n    around like any other. However, this doesn't mean that OCaml\n    programs are <span><em>pure</em></span>. The language includes\n    assignment, mutable values like arrays and strings. Evaluation order\n    is strict and sequential. In principle, you can port many imperative\n    programs directly to OCaml. If you find yourself doing this a lot,\n    then OCaml may not be the right programming language for your\n    problem. However, there are times when imperative programming is\n    both appropriate and efficient, and OCaml shines at supporting\n    programs with both functional and imperative aspects.\n  </blockquote>")))
 (idp9181232
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now, let's consider what happens to the design when we want to\n        make the interface of a service a bit more realistic. In\n        particular, right now services are created without any\n        configuration. Let's add a config type to each service, and\n        change the interface of <code>Bundle</code> so that\n        services can be registered along with their configs. At the same\n        time, we'll change the <code>Bundle</code> API to allow\n        services to be changed dynamically, rather than just added at\n        creation time.\n      </blockquote>")))
 (idp9179504
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        And now we can go ahead and start up the client.\n      </blockquote>")))
 (idp9176864
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now we'll create a couple of toy services. One service is a\n        counter that can be updated by query; and the other service\n        lists a directory. The last line then kicks off the shell with\n        the services we've defined.\n      </blockquote>")))
 (idp9171440
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        To see this system in action, we need to define some services,\n        create the corresponding bundle, and then hook that bundle up to\n        some kind of client. For simplicity, we'll build a simple\n        command-line interface. There are two functions below:\n        <code>handle_one</code>, which handles a single\n        interaction; and <code>handle_loop</code>, which creates\n        the bundle and then runs <code>handle_one</code> in a\n        loop.\n      </blockquote>")))
 (idp9169936
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Last of all, we define a function for looking up the names of\n        the available services.\n      </blockquote>")))
 (idp9167904
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now we can write the function for the bundle to handle requests.\n        The handler will examine the s-expression to determine the body\n        of the query and the name of the service to dispatch to. It then\n        looks up the handler calls it to generate the response.\n      </blockquote>")))
 (idp9165904
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Note that the <code>Service.t</code> that is created is\n        referenced by the corresponding request handler, so that it is\n        effectively hidden behind the function in the\n        <code>handlers</code> table.\n      </blockquote>")))
 (idp9162080
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The next thing we need is a function for creating a\n        <code>Bundle.t</code>. This <code>create</code>\n        function builds a table to hold the request handlers, and then\n        iterates through the services, unpacking each module,\n        constructing the request handler, and then putting that request\n        handler in the table.\n      </blockquote>")))
 (idp9157888
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The first part of <code>service.ml</code> is just the\n        preliminaries: the definition of the module type\n        <code>S</code>, and the definition of the type\n        <code>Bundle.t</code>.\n      </blockquote>")))
 (idp9154912
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now let's look at how to implement <code>Service</code>.\n        The core datastructure of <code>Bundle</code> is a\n        hashtable of request handlers, one per service. Each request\n        handler is a function of type\n        <code>(Sexp.t -&gt; Sexp.t Or_error.t)</code>. These\n        request handlers really stand in for the underlying service,\n        with the particular state of the service in question being\n        hidden inside of the request handler.\n      </blockquote>")))
 (idp9152976
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        where <code>&lt;service_name&gt;</code> is the service\n        that should handle the request, and\n        <code>&lt;body&gt;</code> is the body of the request.\n      </blockquote>")))
 (idp9149376
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Here, a service has a state, represented by the type\n        <code>t</code>, a name by which the service can be\n        referenced, a function <code>create</code> for\n        instantiating a service, and a function by which a service can\n        actually handle a request. Here, requests and responses are\n        delivered as s-expressions. At the <code>Bundle</code>\n        level, the s-expression of a request is expected to be formatted\n        as follows:\n      </blockquote>")))
 (idp9144944
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The following is a first attempt at an interface for our\n        <code>Service</code> module, which contains both a module\n        type <code>S</code>, which is the interface that a service\n        should meet, as well as a <code>Bundle</code> module which\n        is for combining multiple services.\n      </blockquote>")))
 (idp9144160
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        This section describes the design of a library for bundling\n        together multiple services, where a service is a piece of code\n        that exports a query interface. A service bundle combines\n        together multiple individual services under a single query\n        interface that works by dispatching incoming queries to the\n        appropriate underlying service.\n      </blockquote>")))
 (idp9141280
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Finally, we can convert the resulting first-class module back to\n        an ordinary module, and then include that so it becomes part of\n        the body of our module.\n      </blockquote>")))
 (idp9139408
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        We can choose the first-class module that we want based on\n        looking up an environment variable.\n      </blockquote>")))
 (idp9136928
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        To do this, you'd first need an interface <code>S</code>\n        that all of the different multiplexer implementations would need\n        to match, and then an implementation of each multiplexer.\n      </blockquote>")))
 (idp9132416
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Consider an application that does I/O multiplexing using a\n        system call like <code>select</code> to determine which\n        file descriptors are ready to use. There are in fact multiple\n        APIs you might want to use, including <code>select</code>\n        itself, <code>epoll</code>, and <code>libev</code>,\n        where different multiplexers make somewhat different performance\n        and portability trade-offs. You could support all of these in\n        one application by defining a single module, let's call it\n        <code>Mutliplexer</code>, whose implementation is chosen\n        at run-time based on an environment variable.\n      </blockquote>")))
 (idp9131840
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Perhaps the simplest thing you can do with first-class modules\n        that you can't do without them is to pick the implementation of\n        a module at runtime.\n      </blockquote>")))
 (idp9129904
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          _(jyh: This is a rough draft, I'm not sure about the ordering\n          and the topics, yet. Switching back to Ron's text now.)\n        </blockquote>")))
 (idp9129376
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Let's look a some other more typical examples, where dynamic\n          module selection is more localized.\n        </blockquote>")))
 (idp9127968
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          The syntactic load here is pretty high, requiring a\n          <code>let module</code> expression to name every\n          intermediate value. First-class modules are fairly new to the\n          language, and this is likely to change, but in the meantime\n          the syntactic load can be pretty daunting.\n        </blockquote>")))
 (idp9125760
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Now that the construction is done, the usage is similar to the\n          imperative case, except that now the data structure is\n          functional.\n        </blockquote>")))
 (idp9120848
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          The recursion here is particularly important. The functions\n          <code>map</code> and <code>add</code> return new\n          collections, so they call the function <code>make</code>\n          recursively. The explicit polymorphic type\n          <code>make : 'a. 'a list -&gt; 'a Container.t</code>\n          means that the function <code>make</code> is properly\n          polymorphic, so that the <code>map</code> function is\n          polymorphic.\n        </blockquote>")))
 (idp9116224
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          With this first technicality out of the way, the next one is\n          how to construct values of type\n          <code>Container.t</code>. In the imperative version of\n          the stack, we used a function\n          <code>make_list_stack</code>. We want to do the same\n          here, but the function definition must be both recursive and\n          polymorphic.\n        </blockquote>")))
 (idp9110160
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          There are several ways to write this model, but this\n          definition is convenient because it defines both a module type\n          <code>Container.T</code> and a value type\n          <code>'a Container.t</code>. The outer recursive module\n          <code>Container</code> allows the module type\n          <code>T</code> to refer to the value type\n          <code>t</code> and <span><em>vice versa</em></span>. Note\n          that the module <code>Container</code> is defined as\n          itself (as <code>Container</code>).\n        </blockquote>")))
 (idp9106720
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Recursive modules provide a solution, but it requires a\n          &quot;trick&quot;, where we define a module that is equal to\n          itself. This module contains only type definitions, and the\n          only purpose of the outer recursive module is to allow the\n          recursion in the definition. While we're at it, let's include\n          a <code>map</code> function with the usual semantics.\n        </blockquote>")))
 (idp9106144
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          The problem here is that module type definitions are not\n          recursive -- we can't use the type being defined in its own\n          definition.\n        </blockquote>")))
 (idp9103328
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Imperative data structures have simpler types that functional\n          ones because the return type of imperative functions is just\n          <code>unit</code>. When we look at pure functional data\n          structures, we immediately run into a problem with type\n          recursion.\n        </blockquote>")))
 (idp9101424
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          We could go on to define other containers, sets, dictionaries,\n          queues, etc. but the implementations would be similar to what\n          we have seen. Instead, let's look at functional data\n          structures, which require a little more work to express.\n        </blockquote>")))
 (idp9100080
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          The <code>demo</code> function is entirely oblivious to\n          the implementation of the stack. Instead of passing a module\n          implementation based on lists, we could pass a different\n          implementation based on arrays.\n        </blockquote>")))
 (idp9096448
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Note the use of the explicit type parameter\n          <code>element</code>. This is required because the use\n          of a type variable in the module definition (like\n          <code>type elt = 'a</code>) would be rejected by the\n          compiler. The construction and use of the stack is\n          straightforward.\n        </blockquote>")))
 (idp9092592
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Now that the types are defined, the next step is to define a\n          concrete container implementation. For this simple example,\n          we'll use a list to represent a stack. The function\n          <code>make_list_stack</code> constructs module\n          implementation using a <code>let module</code>\n          construction, then returns the result.\n        </blockquote>")))
 (idp9089120
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          For imperative containers, will also want functions to mutate\n          the contents by adding or removing elements. For example, a\n          stack can be implemented as a module <code>Stack</code>\n          that includes all the functions in the generic\n          <code>Container</code> module, as well as functions to\n          push and pop elements.\n        </blockquote>")))
 (idp9084048
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Let's start by defining an abstract container interface. It\n        contains some elements of type <code>elt</code>, and\n        functions to examine and iterate through the contents. For\n        convenience, we also define a normal type\n        <code>'a container</code> to represent containers with\n        elements of type <code>'a</code>.\n      </blockquote>")))
 (idp9079808
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        To explore the topic more fully, let's implement a system of\n        dynamic containers. OCaml already provides a set of standard\n        containers like <code>List</code>, <code>Set</code>,\n        <code>Hashtbl</code>, etc., but these types have to be\n        selected statically. If a function expects a value of type\n        <code>Set.Make(ElementType).t</code>, then you have to\n        pass it a set of exactly that type. What we would like is a kind\n        of container where the container implementation is chosen by the\n        caller. We define an abstract <span><em>interface</em></span>, as\n        a module type, then define one or more concrete module\n        implementations.\n      </blockquote>")))
 (idp9077808
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        So far, we haven't done anything that really needs modules. The\n        type <code>Shape</code> could just as well be specified as\n        a record type\n        <code>type shape = { area : int; position : int * int; ... }</code>.\n      </blockquote>")))
 (idp9072080
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        For mutable shapes, it isn't much different, but we have to\n        include the state as values in the module implementations. For\n        this, we'll define a representation type <code>t</code> in\n        the module implementation, and for rectangles, a value\n        <code>rect</code> of that type. The code for lines is\n        similar.\n      </blockquote>")))
 (idp9069808
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        With first-class modules, the situation changes, but we have to\n        dispense with the representation type altogether. For immutable\n        shapes, the implementation is now trivial.\n      </blockquote>")))
 (idp9069008
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        In fact, confronted with this boilerplate, we would probably\n        choose not use modules at all, but simply define a single module\n        with a variant type and the code for all of the shapes. This\n        isn't to say that separate code for separate shapes is bad, it\n        just means that the language doesn't support it well (at least\n        with standard modules).\n      </blockquote>")))
 (idp9066288
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Next, if we want to define a generic shape that is either a\n        rectangle or a line, we would probably use a variant type. The\n        following module <code>Shapes</code> is entirely\n        boilerplate. We define the variant type, then functions to\n        perform a dynamic dispatch based on the type of object.\n      </blockquote>")))
 (idp9059632
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Let's compare the style of &quot;standard&quot; modules to\n        first-class modules, using a simple library of abstract\n        geometric shapes. In a &quot;standard&quot; module definition,\n        we would define the shapes using abstract data types, where\n        there is a type <code>t</code> that defines the actual\n        representation, and the module would include functions that\n        operate on the values of type <code>t</code>. In the\n        following code, the module type <code>Shape</code> defines\n        the type of generic shape, and the modules\n        <code>Rectangle</code> and <code>Line</code>\n        implement some concrete shapes.\n      </blockquote>")))
 (idp9058512
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>(yminsky: using &quot;standard&quot; in quotes seems a\n        little awkward. Maybe just drop the quotes, and talk about\n        standard or ordinary modules directly?)</em></span>\n</blockquote>")))
 (idp9057504
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>(yminsky: I'm not in solve with the example. It feels\n        in some sense too artificial, and that aside, when you get to\n        the end of the example, you haven't really gotten any juice of\n        first-class modules)</em></span>\n</blockquote>")))
 (idp9055616
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Of course, all we've really done with this example is come up\n        with a more cumbersome way of working with integers. Let's see\n        what happens when with work with more complex abstract types.\n      </blockquote>")))
 (idp9052912
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        With these functions in hand, we can start operating on our\n        <code>(module X_int)</code>'s in a more natural style,\n        taking full advantage of the concision and simplicity of the\n        core language.\n      </blockquote>")))
 (idp9047104
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Using these conversions as building blocks, we can create tools\n        for working with first-class modules in a natural way. The\n        following shows the definition of two function,\n        <code>to_int</code>, which converts a\n        <code>(module X_int)</code> into an\n        <code>int</code>. And <code>plus</code>, which adds\n        two <code>(module X_int)</code>s.\n      </blockquote>")))
 (idp9044160
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        To get at the contents of <code>three</code>, we need to\n        unpack it into a module again, which we can do using the\n        <code>val</code> keyword.\n      </blockquote>")))
 (idp9042912
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Note that the type of the first-class module,\n        <code>(module X_int)</code>, is based on the name of the\n        signature that we used in constructing it.\n      </blockquote>")))
 (idp9040640
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        We can then create a first-class module using the\n        <code>module</code> keyword.\n      </blockquote>")))
 (idp9038928
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        A first-class module is created by packaging up a module with a\n        signature that it satisfies. The following defines a simple\n        signature and a module that matches it.\n      </blockquote>")))
 (idp9038336
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Much as we did with functors, we'll start out with an utterly\n        trivial example, to allow us to show the basic mechanics of\n        first class modules with a minimum of fuss.\n      </blockquote>")))
 (idp9036064
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n      OCaml provides a way around this stratification in the form of\n      <span><em>first-class modules</em></span>. First-class modules are\n      ordinary values that can be created from and converted back to\n      regular modules. As we'll see, letting modules into the core\n      language makes it possible to use more flexible and dynamic\n      module-oriented designs.)_\n    </blockquote>")))
 (idp9035120
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n      _(jyh: Original text You can think of OCaml as being broken up\n      into two sub-language: a core language that is concerned with\n      values and types, and a module language that is concerned with\n      modules and module signatures. These sub-languages are stratified,\n      in that modules can contain types and values, but ordinary values\n      can't contain modules or module types. That means you can't do\n      things like define a variable whose definition is a module, or a\n      function that takes a module as an argument.\n    </blockquote>")))
 (idp9034352
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n      This is not say that first-class modules should be used\n      indiscriminately. When you pass modules as values, the reason is\n      to support dynamic behavior, and this can have a negative impact\n      on understandability. As we proceed, we'll compare first-class\n      modules to other techniques, and suggest alternatives when it\n      seems appropriate.\n    </blockquote>")))
 (idp9033376
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>(yminsky: I wouldn't say they're strictly more\n      expressive. For example, they don't give you a way of expressing\n      sub typing relationships effectively, which objects\n      do.)</em></span>\n</blockquote>")))
 (idp9031456
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n      Next, we'll relax this restriction with <span><em>first-class\n      modules</em></span>. &quot;First-class&quot; means that modules can\n      be passed around as ordinary values that can be created from and\n      converted back to regular modules. This is a relatively recent\n      addition to the OCaml language, and while it might seem trivial to\n      say, it has profound consequences on the language. First-class\n      modules are strictly more expressive than any other organization\n      mechanism, including classes and objects. Once you use first-class\n      modules, you'll never want to go back.\n    </blockquote>")))
 (idp9030608
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>(yminsky: consider dropping &quot;Yet&quot; in the\n      above.)</em></span>\n</blockquote>")))
 (idp9029200
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>(yminsky: Instead of saying that ml and mli files are a\n      simplified module system, maybe say that they &quot;provide a\n      simple way of creating modules and interfaces&quot;, or some such?\n      It's not like there's a simplified module system floating\n      around)</em></span>\n</blockquote>")))
 (idp9026016
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n      OCaml provides several mechanisms for organizing your programs,\n      including modules and functors, files and compilation units, and\n      classes and objects. Files and compilation units\n      (<code>.ml</code> and <code>.mli</code> files) are\n      really just a simplified module system. Classes and objects are a\n      different form of organization altogether (as we'll see in\n      <a href=\"object-oriented-programming.html\">Chapter\194\16014, <i>Object Oriented Programming</i></a>. Yet, in\n      each of these cases, there is a clear separation between types and\n      values -- values cannot contain types, and types cannot contain\n      values. And since modules can contain types, modules can't be\n      values.\n    </blockquote>")))
 (idp9025456
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n      _(jyh: I'm going to start some new text on FCM. We might want\n      another chapter, but let's see how it goes. I've kept Ron's\n      original text below.)\n    </blockquote>")))
 (idp9020288
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n            Support for so-called monadic libraries, like the ones\n            discussed in <a href=\"error-handling.html\">Chapter\194\1608, <i>Error Handling</i></a> and\n            <a href=\"concurrent-programming-with-async.html\">Chapter\194\16013, <i>Concurrent Programming with Async</i></a>.\n            Here, the functor is used to provide a collection of\n            standard helper functions based on the core\n            <code>bind</code> and <code>return</code>\n            operators.\n          </blockquote>")))
 (idp9019424
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n            Hash-based datastructures like hash sets and hash heaps.\n          </blockquote>")))
 (idp9017824
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n            Comparison-based datastructures like maps and sets, based on\n            the <code>Comparable</code> interface.\n          </blockquote>")))
 (idp9016768
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        This pattern comes up quite a bit in Core. It's used to\n        implement various standard bits of functionality, including:\n      </blockquote>")))
 (idp9012192
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        In order to apply the functor, we'll put the definition of\n        <code>Fqueue</code> in a sub-module called\n        <code>T</code>, and then call\n        <code>Foldable.Extend</code> on <code>T</code>.\n        Here's how that code would look.\n      </blockquote>")))
 (idp9009696
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now we can apply this to <code>Fqueue</code>. First, we\n        can extend the interface:\n      </blockquote>")))
 (idp9007488
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Finally, we can define the functor itself.\n      </blockquote>")))
 (idp9005568
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        We'll also need a signature for the helper functions we're going\n        to generate. This just represents some of the helper functions\n        we can derive from fold, but it's enough to give you a flavor of\n        what you can do.\n      </blockquote>")))
 (idp9003184
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Let's create a new module, <code>Foldable</code>, that\n        contains support for this. The first thing we'll need is a\n        signature to describe a container that supports fold.\n      </blockquote>")))
 (idp9001344
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        As it happens, many of these helper functions can be derived\n        mechanically from just the fold function we already implemented.\n        Rather than write all of these helper functions by hand for\n        every new container type, we can instead use a functor to write\n        the code for these once and for all, basing them off of the\n        <code>fold</code> function.\n      </blockquote>")))
 (idp9000496
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The code above works fine, but the interface it implements is\n        unfortunately quite skeletal; there are lots of useful helper\n        functions that one might want that aren't there. And\n        implementing those helper functions can be something of a dull\n        affair, since you need to implement essentially the same helper\n        functions for multiple different data structures in essentially\n        the same way.\n      </blockquote>")))
 (idp8998096
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Here's a concrete implementation.\n      </blockquote>")))
 (idp8995824
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        A standard trick for implementing functional queues efficiently\n        is to maintain both an input and an output list, where the input\n        list is ordered to make <code>enqueue</code> fast, and the\n        output list is ordered to make <code>dequeue</code> fast.\n        When the output list is empty, the input list is reversed and\n        becomes the new output list. Thinking through why this is\n        efficient is a worthwhile exercise, but we won't dwell on that\n        here.\n      </blockquote>")))
 (idp8993712
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The following is a minimal interface for a functional queue. A\n        functional queue is simply a functional version of a FIFO\n        (first-in, first-out) queue. Being functional, operations on the\n        queue return new queues, rather than modifying the queues that\n        were passed in.\n      </blockquote>")))
 (idp8993072
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        One common use of functors is to generate type-specific\n        functionality for a given module in a standardized way. We'll\n        think about this in the context of an example of creating a\n        simple data structure.\n      </blockquote>")))
 (idp8990144
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          And now, we can use that sexp-converter in the ordinary way:\n        </blockquote>")))
 (idp8987200
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Also note that we have been careful to override the\n          sexp-converter here to ensure that the datastructures\n          invariants are still maintained when reading in from an\n          s-expression.\n        </blockquote>")))
 (idp8984368
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          We can modify <code>Make_interval</code> to use the\n          <code>Sexpable</code> interface, for both its input and\n          its output. Note the use of destructive substitution to\n          combine multiple signatures together. This is important\n          because it stops the <code>type t</code>'s from the\n          different signatures from interfering with each other.\n        </blockquote>")))
 (idp8982048
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Happily, Core comes with a built in interface for just this\n          purpose called <code>Sexpable</code>, which is defined\n          as follows:\n        </blockquote>")))
 (idp8977792
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          The problem is that <code>with sexp</code> adds code for\n          defining the s-expression converters, and that code assumes\n          that <code>Endpoint</code> has the appropriate\n          sexp-conversion functions for <code>Endpoint.t</code>.\n          But all we know about <code>Endpoint</code> is that it\n          satisfies the <code>Comparable</code> interface, which\n          doesn't say anything about s-expressions.\n        </blockquote>")))
 (idp8973696
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Another feature that we might want for our interval module is\n          the ability to serialize the type, in particular, by\n          converting to s-expressions. If we simply invoke the\n          <code>sexplib</code> macros by adding\n          <code>with sexp</code> to the definition of\n          <code>t</code>, though, we'll get an error:\n        </blockquote>")))
 (idp8968640
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          The interface is precisely what we want, and we didn't need to\n          define the <code>endpoint</code> type alias in the body\n          of the module. If we instantiate this module, we'll see that\n          it works properly: we can construct new intervals, but\n          <code>t</code> is abstract, and so we can't directly\n          access the constructors and violate the invariants of the data\n          structure.\n        </blockquote>")))
 (idp8965184
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          There's now no mention of n <code>endpoint</code>, all\n          occurrences of that type having been replaced by\n          <code>int</code>. As with sharing constraints, we can\n          also use this in the context of a functor.\n        </blockquote>")))
 (idp8962672
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Here's an example of what we get if we use destructive\n          substitution to specialize the\n          <code>Interval_intf</code> interface to integer\n          intervals.\n        </blockquote>")))
 (idp8958688
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          where <code>S</code> is a signature,\n          <code>t</code> is a type inside of <code>S</code>,\n          and <code>s</code> is a different type. The following\n          shows how we could use this with\n          <code>Make_interval</code>.\n        </blockquote>")))
 (idp8952832
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          Sharing constraints basically do the job, but the approach we\n          used has some downsides. In particular, we've now been stuck\n          with the useless type declaration of\n          <code>endpoint</code> that clutters up both the\n          interface and the implementation. A better solution would be\n          to modify the <code>Interval_intf</code> signature by\n          replacing <code>endpoint</code> with\n          <code>Endpoint.t</code> everywhere it shows up, making\n          <code>endpoint</code> unnecessary. We can do just this\n          using what's called <span><em>destructive\n          substitution</em></span>. Here's the basic syntax.\n        </blockquote>")))
 (idp8948464
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          So now, the interface is as it was, except that\n          <code>endpoint</code> is now known to be equal to\n          <code>Endpoint.t</code>. As a result of that type\n          equality, we can now do things like construct intervals again.\n        </blockquote>")))
 (idp8944784
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          And we can also use it in the context of a functor, where the\n          right-hand side of the sharing constraint is an element of the\n          functor argument. Thus, we expose an equality between a type\n          in the output of the functor (in this case, the type\n          <code>endpoint</code>) and a type in its input\n          (<code>Endpoint.t</code>).\n        </blockquote>")))
 (idp8937936
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          where <code>S</code> is a module type,\n          <code>t</code> is a type inside of <code>S</code>,\n          and <code>s</code> is a different type. The result of\n          this expression is a new signature that's been modified so\n          that it exposes the fact that <code>t</code> is equal to\n          <code>s</code>. We can use a sharing constraint to\n          create a specialized version of\n          <code>Interval_intf</code> for integer intervals.\n        </blockquote>")))
 (idp8932896
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          To fix this, we need to expose the fact that\n          <code>endpoint</code> is equal to\n          <code>Int.t</code> (or more generally,\n          <code>Endpoint.t</code>, where\n          <code>Endpoint</code> is the argument to the functor).\n          One way of doing this is through a <span><em>sharing\n          constraint</em></span>, which allows you to tell the compiler\n          to expose the fact that a given type is equal to some other\n          type. The syntax for a sharing constraint on a module type is\n          as follows.\n        </blockquote>")))
 (idp8930336
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          The resulting module is abstract, but unfortunately, it's too\n          abstract. In particular, we haven't exposed the type\n          <code>endpoint</code>, which means that we can't even\n          construct an interval anymore.\n        </blockquote>")))
 (idp8924096
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          This interface includes the type <code>endpoint</code>\n          to represent the type of the endpoints of the interval. Given\n          this interface, we can redo our definition of\n          <code>Make_interval</code>, as follows. Notice that we\n          added the type <code>endpoint</code> to the\n          implementation of the module to make the implementation match\n          <code>Interval_intf</code>.\n        </blockquote>")))
 (idp8920752
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          To make <code>Int_interval.t</code> abstract, we need to\n          apply an interface to the output of the\n          <code>Make_interval</code>. Here's an explicit interface\n          that we can use for that purpose.\n        </blockquote>")))
 (idp8916720
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n          There's a problem with <code>Make_interval</code>. The\n          code we wrote depends on the invariant that the upper bound of\n          an interval is greater than its lower bound, but that\n          invariant can be violated. The invariant is enforced by the\n          create function, but because <code>Interval.t</code> is\n          not abstract, we can bypass the <code>create</code>\n          function.\n        </blockquote>")))
 (idp8914944
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        This is important, because confusing the two kinds of intervals\n        would be a semantic error, and it's an easy one to make. The\n        ability of functors to mint new types is a useful trick that\n        comes up a lot.\n      </blockquote>")))
 (idp8911712
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Importantly, <code>Rev_int_interval.t</code> is a\n        different type than <code>Int_interval.t</code>, even\n        though its physical representation is the same. Indeed, the type\n        system will prevent us from confusing them.\n      </blockquote>")))
 (idp8908640
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The behavior of <code>Rev_int_interval</code> is of course\n        different from <code>Int_interval</code>, as we can see\n        below.\n      </blockquote>")))
 (idp8906912
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        This design gives us the freedom to use any comparison function\n        we want for comparing the endpoints. We could, for example,\n        create a type of int interval with the order of the comparison\n        reversed, as follows:\n      </blockquote>")))
 (idp8904496
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now we can use the newly defined <code>Int_interval</code>\n        module like any ordinary module.\n      </blockquote>")))
 (idp8901776
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        This works because many modules in Core, including\n        <code>Int</code> and <code>String</code>, satisfy an\n        extended version of the <code>Comparable</code> signature\n        described above. As a general matter, having standardized\n        signatures is a good practice, both because a more uniform\n        codebase is easier to navigate, and because it makes functors\n        easier to use.\n      </blockquote>")))
 (idp8898912
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        If we choose our interfaces to be aligned with the standards of\n        our libraries, then we often don't have to construct a custom\n        module for a given functor. In this case, for example, we can\n        directly use the <code>Int</code> or\n        <code>String</code> modules provided by Core.\n      </blockquote>")))
 (idp8897024
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        We can instantiate the functor by applying it to a module with\n        the right signature. In the following, we provide the functor\n        input as an anonymous module.\n      </blockquote>")))
 (idp8890560
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now that we have the <code>Comparable</code> interface, we\n        can write the implementation of our interval module. In this\n        module, we'll represent an interval with a variant type, which\n        is either <code>Empty</code> or\n        <code>Interval (x,y)</code>, where <code>x</code>\n        and <code>y</code> are the bounds of the interval.\n      </blockquote>")))
 (idp8887472
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The comparison function follows the standard OCaml idiom for\n        such functions, returning <code>0</code> if the two\n        elements are equal, a positive number if the first element is\n        larger than the second, and a negative number if the first\n        element is smaller than the second. Thus, we could rewrite the\n        standard comparison functions on top of\n        <code>compare</code> as shown below.\n      </blockquote>")))
 (idp8885152
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        First we'll define a module type that captures the information\n        we'll need about the endpoint type. This interface, which we'll\n        call <code>Comparable</code>, contains just two things: a\n        comparison function, and the type of the values to be compared.\n      </blockquote>")))
 (idp8884368
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        We'll now look at a more complex example, which will give us an\n        opportunity to learn more about how functors work. In\n        particular, we'll walk through the design of a library for\n        computing with intervals. This library will be functorized over\n        the type of the endpoints of the intervals and the ordering of\n        those endpoints.\n      </blockquote>")))
 (idp8877600
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        In this case, we applied <code>Increment</code> to a\n        module whose signature is exactly equal to\n        <code>X_int</code>. But we can apply\n        <code>Increment</code> to any module that satisfies\n        <code>X_int</code>. So, for example,\n        <code>Increment</code> can take as its input a module that\n        has more fields than are contemplated in\n        <code>X_int</code>, as shown below.\n      </blockquote>")))
 (idp8875536
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Here's what <code>Increment</code> looks like in action.\n      </blockquote>")))
 (idp8874352
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        We can see that the inferred module type of the output is now\n        written out explicitly, rather than being a reference to the\n        named signature <code>X_int</code>.\n      </blockquote>")))
 (idp8872736
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        The following shows what happens when we omit the module type\n        for the output of the functor.\n      </blockquote>")))
 (idp8871856
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        One thing that immediately jumps out about functors is that\n        they're considerably more heavyweight syntactically than\n        ordinary functions. For one thing, functors require explicit\n        type annotations, which ordinary functions do not. Here, we've\n        specified the module type for both the input and output of the\n        functor. Technically, only the type on the input is mandatory,\n        although in practice, one often specifies both.\n      </blockquote>")))
 (idp8870256
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        Now, we can use that module type to write the increment functor.\n      </blockquote>")))
 (idp8867376
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        More precisely, we'll create a functor that takes a module\n        containing a single integer variable <code>x</code>, and\n        returns a new module with <code>x</code> incremented by\n        one. The first step is to define a module type which will\n        describe the input and output of the functor.\n      </blockquote>")))
 (idp8866848
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n        We'll start by considering the simplest possible example: a\n        functor for incrementing an integer.\n      </blockquote>")))
 (idp8864608
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>Instantiating modules with state</em></span>. Modules\n          can contain mutable state, and that means that you'll\n          occasionally want to have multiple instantiations of a\n          particular module, each with its own separate and independent\n          mutable state. Functors let you automate the construction of\n          such modules.\n        </blockquote>")))
 (idp8862928
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>Auto-extension of modules</em></span>. Sometimes,\n          there is some functionality that you want to build in a\n          standard way for different types, in each case based on a some\n          piece of type-specific logic. For example, you might want to\n          add a slew of comparison operators derived from a base\n          comparison function. To do this by hand would require a lot of\n          repetitive code for each type, but functors let you write this\n          logic just once and apply it to many different types.\n        </blockquote>")))
 (idp8861536
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n<span><em>Dependency injection</em></span>, or making the\n          implementations of some components of a system swappable. This\n          is particularly useful when you want to mock up parts of your\n          system for testing and simulation purposes.\n        </blockquote>")))
 (idp8860448
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n      Functors are, roughly speaking, functions from modules to modules,\n      and they can be used to solve a variety of code-structuring\n      problems, including:\n    </blockquote>")))
 (idp8858752
  ((file functors-and-first-class-modules.html)
   (html
    "<blockquote>\n    Up until now, we've seen modules play a limited role, serving as a\n    mechanism for organizing code into units with specified interfaces.\n    But OCaml's module system plays a bigger role in the language,\n    acting as a powerful toolset for structuring large-scale systems.\n    This chapter will introduce you to functors and first class modules,\n    which greatly increase the power of the module system.\n  </blockquote>")))
 (idp8855696
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          In this case, <code>ocamlbuild</code> will notice the\n          error and complain:\n        </blockquote>")))
 (idp8853232
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The problem manifests in a different way if we create circular\n          references between files. We could create such a situation by\n          adding a reference to Freq from <code>counter.ml</code>,\n          <span><em>e.g.</em></span>, by adding the following line:\n        </blockquote>")))
 (idp8851856
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          then when we try to build, we'll get this error:\n        </blockquote>")))
 (idp8849104
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The simplest case of this is that a module can not directly\n          refer to itself (although definitions within a module can\n          refer to each other in the ordinary way). So, if we tried to\n          add a reference to <code>Counter</code> from within\n          <code>counter.ml</code>:\n        </blockquote>")))
 (idp8848496
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The same is true at the module level. By default, circular\n          dependencies between modules is not allowed, and indeed,\n          circular dependencies among files is never allowed.\n        </blockquote>")))
 (idp8846096
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          In most cases, OCaml doesn't allow circular dependencies,\n          <span><em>i.e.</em></span>, a collection of definitions that\n          all refer to each other. If you want to create such\n          definitions, you typically have to mark them specially. For\n          example, when defining a set of mutually recursive values, you\n          need to define them using <code>let rec</code> rather\n          than ordinary <code>let</code>.\n        </blockquote>")))
 (idp8844432
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Order is similarly important in other parts of the signature,\n          including the order in which record fields are declared and\n          the order of arguments (including labeled and optional\n          arguments) to a function.\n        </blockquote>")))
 (idp8842400
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          that will lead to a compilation error:\n        </blockquote>")))
 (idp8838240
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Type definitions that show up in an <code>mli</code>\n          need to match up with corresponding definitions in the\n          <code>ml</code>. Consider again the example of the type\n          <code>median</code>. The order of the declaration of\n          variants matters to the OCaml compiler so, if the definition\n          of <code>median</code> in the implementation lists those\n          options in a different order:\n        </blockquote>")))
 (idp8836752
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          A missing type definition will lead to a similar error.\n        </blockquote>")))
 (idp8835152
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          Now, if we try to compile without actually adding the\n          implementation, we'll get this error:\n        </blockquote>")))
 (idp8832480
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          We might decide that we want a new function in\n          <code>Counter</code> for pulling out the frequency count\n          of a given string. We can update the <code>mli</code> by\n          adding the following line.\n        </blockquote>")))
 (idp8830528
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          This error message is a bit intimidating at first, and it\n          takes a bit of thought to see where the first type, which is\n          the type of [touch] in the implementation, doesn't match the\n          second one, which is the type of [touch] in the interface. You\n          need to recognize that [t] is in fact a [Core.Std.Map.t], and\n          the problem is that in the first type, the first argument is a\n          map while the second is the key to that map, but the order is\n          swapped in the second type.\n        </blockquote>")))
 (idp8827760
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          and then try to compile <code>Counter</code> (by writing\n          <code>ocamlbuild -use-ocamlfind counter.cmo</code>),\n          we'll get the following error:\n        </blockquote>")))
 (idp8824960
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n          The simplest kind of error is where the type specified in the\n          signature does not match up with the type in the\n          implementation of the module. As an example, if we replace the\n          <code>val</code> declaration in\n          <code>counter.mli</code> by swapping the types of the\n          first two arguments:\n        </blockquote>")))
 (idp8822304
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        When OCaml compiles a program with an <code>ml</code> and\n        an <code>mli</code>, it will complain if it detects a\n        mismatch between the two. Here are some of the common errors\n        you'll run into.\n      </blockquote>")))
 (idp8819632
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            There's another even more lightweight syntax for local\n            opens, which is particularly useful for small expressions:\n          </blockquote>")))
 (idp8818000
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            In the above, <code>of_int</code> and the infix\n            operators are the ones from <code>Int64</code> module.\n          </blockquote>")))
 (idp8816080
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            If you do need to do an open, it's better to do a\n            <span><em>local open</em></span>. There are two syntaxes for\n            local opens. For example, you can write:\n          </blockquote>")))
 (idp8813792
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            Because the module name <code>C</code> only exists for\n            a short scope, it's easy to read and remember what\n            <code>C</code> stands for. Rebinding modules to very\n            short names at the top-level of your module is usually a\n            mistake.\n          </blockquote>")))
 (idp8812080
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            ...you could write\n          </blockquote>")))
 (idp8810224
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            One alternative to local opens that makes your code terser\n            without giving up on explicitness is to locally rebind the\n            name of a module. So, instead of writing:\n          </blockquote>")))
 (idp8807984
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n            Opening modules at the top-level of a module should be done\n            quite sparingly, and generally only with modules that have\n            been specifically designed to be opened, like\n            <code>Core.Std</code> or\n            <code>Option.Monad_infix</code>.\n          </blockquote>")))
 (idp8807008
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Here's some general advice on how to deal with opens.\n      </blockquote>")))
 (idp8805616
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n<code>open</code> is essential when dealing with something\n        like a standard library, but it's generally good style to keep\n        opening of modules to a minimum. Opening a module is basically a\n        tradeoff between terseness and explicitness - the more modules\n        you open, the harder it is to look at an identifier and figure\n        out where it's defined.\n      </blockquote>")))
 (idp8801728
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The basic purpose of <code>open</code> is to extend the\n        namespaces that OCaml searches when trying to resolve an\n        identifier. Roughly, if you open a module <code>M</code>,\n        then every subsequent time you look for an identifier\n        <code>foo</code>, the module system will look in\n        <code>M</code> for a value named <code>foo</code>.\n        This is true for all kinds of identifiers, including types, type\n        constructors, values and modules.\n      </blockquote>")))
 (idp8799920
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        One useful primitive in OCaml's module language is the\n        <code>open</code> directive. We've seen that already in\n        the <code>open Core.Std</code> that has been at the top of\n        our source files.\n      </blockquote>")))
 (idp8795744
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        We can also combine this with the use of the include directive\n        to add some extra functionality to such a module. Thus, we could\n        have rewritten the definition of <code>Hostname</code>\n        above as follows to add a function\n        <code>Hostname.mine</code> that returns the hostname of\n        the present machine.\n      </blockquote>")))
 (idp8792480
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        We could have written this slightly differently, by giving the\n        signature its own top-level <code>module type</code>\n        declaration, making it possible to in a lightweight way create\n        multiple distinct types with the same underlying implementation.\n      </blockquote>")))
 (idp8791056
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The basic structure of a module declaration like this is:\n      </blockquote>")))
 (idp8789216
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Here's how you might create such a type, within a module:\n      </blockquote>")))
 (idp8787632
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Up until now, we've only considered modules that correspond to\n        files, like <code>counter.ml</code>. But modules (and\n        module signatures) can be nested inside other modules. As a\n        simple example, consider a program that needs to deal with some\n        class of identifier like a username. Rather than just keeping\n        usernames as strings, you might want to mint an abstract type,\n        so that the type-system will help you to not confuse usernames\n        with other string data that is floating around your program.\n      </blockquote>")))
 (idp8783664
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        And if we then put <code>open Common</code> after\n        <code>open Core.Std</code> at the top of each file in our\n        project, then references to <code>List</code> will\n        automatically go to <code>Ext_list</code> instead.\n      </blockquote>")))
 (idp8779824
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        And we can now use <code>Ext_list</code> as a replacement\n        for <code>List</code>. If we want to use\n        <code>Ext_list</code> in preference to\n        <code>List</code> in our project, we can create a file of\n        common definitions:\n      </blockquote>")))
 (idp8776480
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Now, what about the interface of this new module? It turns out\n        that include works on the signature language as well, so we can\n        pull essentially the same trick to write an\n        <code>mli</code> for this new module. The only trick is\n        that we need to get our hands on the signature for the list\n        module, which can be done using\n        <code>module type of</code>.\n      </blockquote>")))
 (idp8772672
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        One natural application of <code>include</code> is to\n        create one module which is an extension of another one. For\n        example, imagine you wanted to build an extended version of the\n        <code>List</code> module, where you've added some\n        functionality not present in the module as distributed in Core.\n        We can do this easily using <code>include</code>:\n      </blockquote>")))
 (idp8771424
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        OCaml provides a number of tools for manipulating modules. One\n        particularly useful one is the <code>include</code>\n        directive, which is used to include the contents of one module\n        into another.\n      </blockquote>")))
 (idp8768928
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The decision of whether a given type should be abstract or\n        concrete is an important one. Abstract types give you more\n        control over how values are created and accessed, and makes it\n        easier to enforce invariants beyond the what's enforced by the\n        type itself; concrete types let you expose more detail and\n        structure to client code in a lightweight way. The right choice\n        depends very much on the context.\n      </blockquote>")))
 (idp8765968
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Now, to expose this usefully in the interface, we need to expose\n        both the function and the type <code>median</code> with\n        its definition. We'd do that by adding these lines to the\n        <code>counter.mli</code>:\n      </blockquote>")))
 (idp8762560
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        For example, imagine we wanted to add a function to\n        <code>Counter</code> for returning the line with the\n        median frequency count. If the number of lines is even, then\n        there is no precise median, so the function would return the two\n        lines before and after the median instead. We'll use a custom\n        type to represent the fact that there are two possible return\n        values. Here's a possible implementation.\n      </blockquote>")))
 (idp8760240
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        In our frequency-count example, the module\n        <code>Counter</code> had an abstract type\n        <code>Counter.t</code> for representing a collection of\n        frequency counts. Sometimes, you'll want to make a type in your\n        interface <span><em>concrete</em></span>, by including the type\n        definition in the interface.\n      </blockquote>")))
 (idp8755184
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Now we can turn to optimizing the implementation of\n        <code>Counter</code>. Here's an alternate and far more\n        efficient implementation, based on the <code>Map</code>\n        datastructure in Core.\n      </blockquote>")))
 (idp8752000
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        This is because <code>freq.ml</code> depends on the fact\n        that frequency counts are represented as association lists, a\n        fact that we've just hidden. We just need to fix the code to use\n        <code>Counter.empty</code> instead of\n        <code>[]</code> and <code>Counter.to_list</code> to\n        get the association list out at the end for processing and\n        printing.\n      </blockquote>")))
 (idp8750064
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        If we now try to compile <code>freq.ml</code>, we'll get\n        the following error:\n      </blockquote>")))
 (idp8747728
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Here's a rewrite of <code>counter.ml</code> to match this\n        signature.\n      </blockquote>")))
 (idp8744768
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        Note that we needed to add <code>empty</code> and\n        <code>to_list</code> to <code>Counter</code>, since\n        otherwise, there would be no way to create a\n        <code>Counter.t</code> or get data out of one.\n      </blockquote>")))
 (idp8741968
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        To actually hide the fact that frequency counts are represented\n        as association lists, we need to make the type of frequency\n        counts <span><em>abstract</em></span>. A type is abstract if its\n        name is exposed in the interface, but its definition is not.\n        Here's an abstract interface for <code>Counter</code>:\n      </blockquote>")))
 (idp8739040
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        and are used to expose the existence of a given value in the\n        module. Here's an interface that describes the current contents\n        of <code>Counter</code>. We can save this as\n        <code>counter.mli</code> and compile, and the program will\n        build as before.\n      </blockquote>")))
 (idp8733616
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        The first step towards hiding the implementation details of\n        <code>Counter</code> is to create an interface file,\n        <code>counter.mli</code>, which controls how\n        <code>counter</code> is accessed. Let's start by writing\n        down a simple descriptive interface, <span><em>i.e.</em></span>,\n        an interface that describes what's currently available in\n        <code>Counter</code> without hiding anything. We'll use\n        <code>val</code> declarations in the\n        <code>mli</code>, which have the following syntax\n      </blockquote>")))
 (idp8731648
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        you'll see that it depends on the fact that the empty set of\n        frequency counts is represented as an empty list. We'd like to\n        prevent this kind of dependency, so that we can change the\n        implementation of <code>Counter</code> without needing to\n        change client code like that in <code>freq.ml</code>.\n      </blockquote>")))
 (idp8727744
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n        While we've pushed some of the logic to the\n        <code>Counter</code> module, the code in\n        <code>freq.ml</code> can still depend on the details of\n        the implementation of <code>Counter</code>. Indeed, if you\n        look at the invocation of <code>build_counts</code>:\n      </blockquote>")))
 (idp8721584
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can now rewrite <code>freq.ml</code> to use\n      <code>Counter</code>. Note that the resulting code can still\n      be built with <code>build.sh</code>, since\n      <code>ocamlbuild</code> will discover dependencies and\n      realize that <code>counter.ml</code> needs to be compiled.\n    </blockquote>")))
 (idp8718528
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We'll start by creating a file, <code>counter.ml</code>,\n      that contains the logic for maintaining the association list used\n      to describe the counts. The key function, called\n      <code>touch</code>, updates the association list with the\n      information that a given line should be added to the frequency\n      counts.\n    </blockquote>")))
 (idp8717776
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can fix this problem by replacing association lists with a more\n      efficient datastructure. To do that, we'll first factor out the\n      key functionality into a separate module with an explicit\n      interface. We can consider alternative (and more efficient)\n      implementations once we have a clear interface to program against.\n    </blockquote>")))
 (idp8715728
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Let's consider how we can use modules to refactor the\n      implementation of <code>freq.ml</code>. Remember that the\n      variable <code>counts</code> contains an association list\n      representing the counts of the lines seen so far. But updating an\n      association list takes time linear in the length of the list,\n      meaning that the time complexity of processing a file is quadratic\n      in the number of distinct lines in the file.\n    </blockquote>")))
 (idp8713040
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Source files in OCaml are tied into the module system, with each\n      file compiling down into a module whose name is derived from the\n      name of the file. We've encountered modules before, for example,\n      when we used functions like <code>find</code> and\n      <code>add</code> from the <code>List.Assoc</code>\n      module. At it's simplest, you can think of a module as a\n      collection of definitions that are stored within a namespace.\n    </blockquote>")))
 (idp8711200
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      As a general matter, production executables should usually be\n      built using the native-code compiler, but it sometimes makes sense\n      to use bytecode for development builds. And, of course, bytecode\n      makes sense when targeting a platform not supported by the native\n      code compiler.\n    </blockquote>")))
 (idp8708848
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Aside from performance, executables generated by the two compilers\n      have nearly identical behavior. There are a few things to be aware\n      of. First, the byte-code compiler can be used on more\n      architectures, and has some better tool support; in particular,\n      the OCaml debugger only works with byte-code. Also, the byte-code\n      compiler compiles faster than the native code compiler. Also, in\n      order to run a bytecode executable you typically need to have\n      OCaml installed on the system in question. That's not strictly\n      required, though, since you can a byte-code executable with an\n      embedded runtime, using the <code>-custom</code> compiler\n      flag.\n    </blockquote>")))
 (idp8705648
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      OCaml ships with two compilers---the <code>ocamlc</code>\n      byte-code compiler, and the <code>ocamlopt</code>\n      native-code compiler. Programs compiled with\n      <code>ocamlc</code> are interpreted by a virtual machine,\n      while programs compiled with <code>ocamlopt</code> are\n      compiled to native machine code to be run on a specific operating\n      system and processor architecture.\n    </blockquote>")))
 (idp8702928
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can now run the our program from the command-line. The\n      following line extracts strings from the\n      <code>ocamlopt</code> executable, and then reports the most\n      frequently occurring ones.\n    </blockquote>")))
 (idp8700672
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If we'd invoked <code>ocamlbuild</code> with a target of\n      <code>freq.native</code> instead of\n      <code>freq.byte</code>, we would have gotten native-code\n      instead.\n    </blockquote>")))
 (idp8699040
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We can then invoke <code>ocamlbuild</code> to build the\n      executable in question.\n    </blockquote>")))
 (idp8695792
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      The purpose of the <code>_tags</code> file is to specify\n      which compilation options are required for which files. In this\n      case, we're telling <code>ocamlbuild</code> to link in the\n      <code>core</code> package and to turn on threading, output\n      of annotation files, and debugging support for all files (the\n      condition <code>true</code> causes the options to be applied\n      to every file in the project.)\n    </blockquote>")))
 (idp8692000
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      While this works well enough for a one-file project, more\n      complicated builds will require a tool to orchestrate the build.\n      One great tool for this task is <code>ocamlbuild</code>,\n      which is shipped with the OCaml compiler. We'll talk more about\n      <code>ocamlbuild</code> in\n      <a href=\"packaging-and-build-systems.html\">Chapter\194\16019, <i>Packaging and Build Systems</i></a>, but for\n      now, we'll just walk through the steps required for this simple\n      application. First, create a <code>_tags</code> file,\n      containing the following lines.\n    </blockquote>")))
 (idp8687440
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Here we're using <code>ocamlfind</code>, a tool which itself\n      invokes other parts of the ocaml toolchain (in this case,\n      <code>ocamlc</code>) with the appropriate flags to link in\n      particular libraries and packages. Here,\n      <code>-package core</code> is asking\n      <code>ocamlfind</code> to link in the Core library,\n      <code>-linkpkg</code> is required to do the final linking in\n      of packages for building a runnable executable, and\n      <code>-thread</code> turns on threading support, which is\n      required for Core.\n    </blockquote>")))
 (idp8685552
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      But in this case, this command will fail with the error\n      <code>Unbound module Core</code>. We need a somewhat more\n      complex invocation to get Core linked in:\n    </blockquote>")))
 (idp8684416
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      If we weren't using Core or any other external libraries, we could\n      build the executable like this:\n    </blockquote>")))
 (idp8680848
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      Unlike C, programs in OCaml do not have a unique\n      <code>main</code> function. When an OCaml program is\n      evaluated, all the statements in the implementation files are\n      evaluated in order. These implementation files can contain\n      arbitrary expressions, not just function definitions. In this\n      example, the declaration starting with <code>let () =</code>\n      plays the role of the <code>main</code> declaration, kicking\n      off the processing. But really the entire file is evaluated at\n      startup, and so in some sense the full codebase is one big\n      <code>main</code> function.\n    </blockquote>")))
 (idp8674928
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n      We'll start with an example: a utility that reads lines from\n      <code>stdin</code>, computing a frequency count of the lines\n      that have been read in. At the end, the 10 lines with the highest\n      frequency counts are written out. Here's a simple implementation,\n      which we'll save as the file <code>freq.ml</code>. Note that\n      we're using several functions from the\n      <code>List.Assoc</code> module, which provides utility\n      functions for interacting with association lists,\n      <span><em>i.e.</em></span>, lists of key/value pairs.\n    </blockquote>")))
 (idp8673472
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n    In this chapter, we'll show you how to build an OCaml program from a\n    collection of files, as well as the basics of working with modules\n    and module signatures.\n  </blockquote>")))
 (idp8672688
  ((file files-modules-and-programs.html)
   (html
    "<blockquote>\n    We've so far experienced OCaml largely through the toplevel. As you\n    move from exercises to real-world programs, you'll need to leave the\n    toplevel behind and start building programs from files. Files are\n    more than just a convenient way to store and manage your code; in\n    OCaml, they also act as boundaries that divide your program into\n    conceptual units.\n  </blockquote>")))
 (idp8356112
  ((file error-handling.html)
   (html
    "<blockquote>\n        And then we can re-raise that exception:\n      </blockquote>")))
 (idp8352416
  ((file error-handling.html)
   (html
    "<blockquote>\n        And <code>Result</code> and <code>Or_error</code>\n        have similar <code>try_with</code> functions. So, we could\n        write:\n      </blockquote>")))
 (idp8350288
  ((file error-handling.html)
   (html
    "<blockquote>\n        Both exceptions and error-aware types are necessary parts of\n        programming in OCaml. As such, you often need to move between\n        these two worlds. Happily, Core comes with some useful helper\n        functions to help you do just that. For example, given a piece\n        of code that can throw an exception, you can capture that\n        exception into an option as follows:\n      </blockquote>")))
 (idp8348896
  ((file error-handling.html) (html "<blockquote>\n</blockquote>")))
 (idp8346688
  ((file error-handling.html)
   (html
    "<blockquote>\n        Backtraces can also be obtained at runtime. In particular,\n        <code>Exn.backtrace</code> will return the backtrace of\n        the most recently thrown exception.\n      </blockquote>")))
 (idp8344464
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can get more information from OCaml if we turn on stack\n        traces. This can be done by setting the\n        <code>OCAMLRUNPARAM</code> environment variable, as shown:\n      </blockquote>")))
 (idp8343792
  ((file error-handling.html)
   (html
    "<blockquote>\n        The example in question is short enough that it's quite easy to\n        see where the error came from. But in a complex program, simply\n        knowing which exception was thrown is usually not enough\n        information to figure out what went wrong.\n      </blockquote>")))
 (idp8342432
  ((file error-handling.html)
   (html
    "<blockquote>\n        If we build and run this program, we'll get a pretty\n        uninformative error:\n      </blockquote>")))
 (idp8340480
  ((file error-handling.html)
   (html
    "<blockquote>\n        A big part of the point of exceptions is to give useful\n        debugging information. But at first glance, OCaml's exceptions\n        can be less than informative. Consider the following simple\n        program.\n      </blockquote>")))
 (idp8338352
  ((file error-handling.html)
   (html
    "<blockquote>\n        At which point, it makes sense to simply use the non-exception\n        throwing function, <code>List.Assoc.find</code>, instead.\n      </blockquote>")))
 (idp8336432
  ((file error-handling.html)
   (html
    "<blockquote>\n        This kind of problem is hard to detect in advance, because the\n        type system doesn't tell us what kinds of exceptions a given\n        function might throw. Because of this kind of confusion, it's\n        usually better to avoid catching specific exceptions. In this\n        case, we can improve the code by catching the exception in a\n        narrower scope.\n      </blockquote>")))
 (idp8332864
  ((file error-handling.html)
   (html
    "<blockquote>\n        This implementation is more problematic than it looks. In\n        particular, what happens if <code>compute_weight</code>\n        itself throws an exception? Ideally,\n        <code>lookup_weight</code> should propagate that exception\n        on, but if the exception happens to be\n        <code>Not_found</code>, then that's not what will happen:\n      </blockquote>")))
 (idp8331184
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can implement such a function using exceptions as follows:\n      </blockquote>")))
 (idp8327232
  ((file error-handling.html)
   (html
    "<blockquote>\n        OCaml's exception-handling system allows you to tune your\n        error-recovery logic to the particular error that was thrown.\n        For example, <code>List.find_exn</code> always throws\n        <code>Not_found</code>. You can take advantage of this in\n        your code, for example, let's define a function called\n        <code>lookup_weight</code>, with the following signature:\n      </blockquote>")))
 (idp8321520
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can fix this using Core's <code>protect</code>\n        function. The basic purpose of <code>protect</code> is to\n        ensure that the <code>finally</code> thunk will be called\n        when <code>f</code> exits, whether it exited normally or\n        with an exception. Here's how it could be used to fix\n        <code>load_config</code>.\n      </blockquote>")))
 (idp8319504
  ((file error-handling.html)
   (html
    "<blockquote>\n        The problem with this code is that the function that loads the\n        s-expression and parses it into a <code>Config.t</code>\n        might throw an exception if the config file in question is\n        malformed. Unfortunately, that means that the\n        <code>In_channel.t</code> that was opened will never be\n        closed, leading to a file-descriptor leak.\n      </blockquote>")))
 (idp8317856
  ((file error-handling.html)
   (html
    "<blockquote>\n        One headache with exceptions is that they can terminate your\n        execution at unexpected places, leaving your program in an\n        awkward state. Consider the following code snippet:\n      </blockquote>")))
 (idp8314736
  ((file error-handling.html)
   (html
    "<blockquote>\n        But if evaluating <code>&lt;expr&gt;</code> leads to an\n        exception being thrown, then the exception will be fed to the\n        pattern match statements following the <code>with</code>.\n        If the exception matches a pattern, then the expression on the\n        right hand side of that pattern will be evaluated. Otherwise,\n        the original exception continues up the call stack, to be\n        handled by the next outer exception handler, or terminate the\n        program if there is none.\n      </blockquote>")))
 (idp8311696
  ((file error-handling.html)
   (html
    "<blockquote>\n        A <code>try</code>/<code>with</code> clause would\n        first evaluate <code>&lt;expr&gt;</code>, and if that\n        evaluation completes without returning an exception, then the\n        value of the overall expression is the value of\n        <code>&lt;expr&gt;</code>.\n      </blockquote>")))
 (idp8309008
  ((file error-handling.html)
   (html
    "<blockquote>\n        In OCaml, an exception handler is declared using a\n        <code>try</code>/<code>with</code> statement. Here's\n        the basic syntax.\n      </blockquote>")))
 (idp8307984
  ((file error-handling.html)
   (html
    "<blockquote>\n        So far, we've only seen exceptions fully terminate the execution\n        of a computation. But often, we want a program to be able to\n        respond to and recover from an exception. This is achieved\n        through the use of <span><em>exception handlers</em></span>.\n      </blockquote>")))
 (idp8304960
  ((file error-handling.html)
   (html
    "<blockquote>\n      The period in front of <code>Wrong_date</code> is there\n      because the representation generated by\n      <code>with sexp</code> includes the full module path of the\n      module where the exception in question is defined. This is quite\n      useful in tracking down which precise exception is being reported.\n      In this case, since we've declared the exception at the toplevel,\n      that module path is trivial.\n    </blockquote>")))
 (idp8302704
  ((file error-handling.html)
   (html
    "<blockquote>\n      But if you declare the exception using\n      <code>with sexp</code> (and the constituent types have sexp\n      converters), we'll get something with more information.\n    </blockquote>")))
 (idp8301120
  ((file error-handling.html)
   (html
    "<blockquote>\n      OCaml can't always generate a useful textual representation of\n      your exception, for example:\n    </blockquote>")))
 (idp8298592
  ((file error-handling.html)
   (html
    "<blockquote>\n      This all matters because it means that the return type of\n      <code>raise</code> can be whatever it needs to be to fit in\n      to the context it is called in. Thus, the type system will let us\n      throw an exception anywhere in a program.\n    </blockquote>")))
 (idp8297488
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>forever</code> doesn't return a value for a different\n      reason: it is an infinite loop.\n    </blockquote>")))
 (idp8293168
  ((file error-handling.html)
   (html
    "<blockquote>\n      Having the return type be an otherwise unused type variable\n      <code>'a</code> suggests that <code>raise</code> could\n      return a value of any type. That seems impossible, and it is.\n      <code>raise</code> has this type because it never returns at\n      all. This behavior isn't restricted to functions like\n      <code>raise</code> that terminate by throwing exceptions.\n      Here's another example of a function that doesn't return a value.\n    </blockquote>")))
 (idp8291152
  ((file error-handling.html)
   (html
    "<blockquote>\n      In the above example, <code>raise</code> throws the\n      exception, thus terminating the computation. The type of raise is\n      a bit surprising when you first see it:\n    </blockquote>")))
 (idp8290000
  ((file error-handling.html)
   (html
    "<blockquote>\n      Note that we named the function <code>find_exn</code> to\n      warn the user that the function routinely throws exceptions, a\n      convention that is used heavily in Core.\n    </blockquote>")))
 (idp8287360
  ((file error-handling.html)
   (html
    "<blockquote>\n      Here's an example of a function for looking up a key in an\n      <span><em>association list</em></span>, <span><em>i.e.</em></span> a\n      list of key/value pairs which uses this newly-defined exception:\n    </blockquote>")))
 (idp8285296
  ((file error-handling.html)
   (html
    "<blockquote>\n      In addition to built-in exceptions like\n      <code>Divide_by_zero</code>, OCaml lets you define your own.\n    </blockquote>")))
 (idp8283680
  ((file error-handling.html)
   (html
    "<blockquote>\n      And an exception can terminate a computation even if it happens\n      nested a few levels deep in a computation.\n    </blockquote>")))
 (idp8282304
  ((file error-handling.html)
   (html
    "<blockquote>\n      We'll see an exception triggered in OCaml if, for example, we try\n      to divide an integer by zero:\n    </blockquote>")))
 (idp8281536
  ((file error-handling.html)
   (html
    "<blockquote>\n      Exceptions in OCaml are not that different from exceptions in many\n      other languages, like Java, C# and Python. In all these cases,\n      exceptions are a way to terminate a computation and report an\n      error, while providing a mechanism to catch and handle (and\n      possibly recover from) exceptions that are triggered by\n      sub-computations.\n    </blockquote>")))
 (idp8277824
  ((file error-handling.html)
   (html
    "<blockquote>\n        These error-handling functions are valuable because they let you\n        express your error handling both explicitly and concisely. We've\n        only discussed these functions in the context of the\n        <code>Option</code> module, but similar functionality is\n        available in both <code>Result</code> and\n        <code>Or_error</code>.\n      </blockquote>")))
 (idp8272496
  ((file error-handling.html)
   (html
    "<blockquote>\n        There are other useful idioms encoded in the functions in\n        <code>Option</code>. Another example is\n        <code>Option.both</code>, which takes two optional values\n        and produces a new optional pair that is <code>None</code>\n        if either of its arguments are <code>None</code>. Using\n        <code>Option.both</code>, we can make\n        <code>compute_bounds</code> even shorter.\n      </blockquote>")))
 (idp8270832
  ((file error-handling.html)
   (html
    "<blockquote>\n        This is a bit easier to read if we write it with fewer\n        parentheses and less indentation, as follows.\n      </blockquote>")))
 (idp8267376
  ((file error-handling.html)
   (html
    "<blockquote>\n        Note that we locally open the\n        <code>Option.Monad_infix</code> module to get access to\n        the infix operator <code>&gt;&gt;=</code>. The module is\n        called <code>Monad_infix</code> because the bind operator\n        is part of a sub-interface called <code>Monad</code>,\n        which we'll talk about more in\n        <a href=\"concurrent-programming-with-async.html\">Chapter\194\16013, <i>Concurrent Programming with Async</i></a>.\n      </blockquote>")))
 (idp8261136
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>bind</code> is a way of sequencing together\n        error-producing functions so that that the first one to produce\n        an error terminates the computation. In particular,\n        <code>None &gt;&gt;= f</code> returns\n        <code>None</code> without calling <code>f</code>,\n        and <code>Some x &gt;&gt;= f</code> returns\n        <code>f x</code>. We can use a nested sequence of these\n        binds to express a multi-stage computation that can fail at any\n        stage. Here's a rewrite <code>compute_bounds</code> in\n        this style.\n      </blockquote>")))
 (idp8256912
  ((file error-handling.html)
   (html
    "<blockquote>\n        As you write more error handling code, you'll discover that\n        certain patterns start to emerge. A number of these common\n        patterns been codified in the interfaces of modules like\n        <code>Option</code> and <code>Result</code>. One\n        particularly useful one is built around the function\n        <code>bind</code>, which is both an ordinary function and\n        an infix operator <code>&gt;&gt;=</code>, both with the\n        same type signature:\n      </blockquote>")))
 (idp8253072
  ((file error-handling.html)
   (html
    "<blockquote>\n        The type <code>'a Or_error.t</code> is just a shorthand\n        for <code>('a,Error.t) Result.t</code>, and it is, after\n        <code>option</code>, the most common way of returning\n        errors in Core.\n      </blockquote>")))
 (idp8251184
  ((file error-handling.html)
   (html
    "<blockquote>\n        Error also has operations for transforming errors. For example,\n        it's often useful to augment an error with some extra\n        information about the context of the error, or to combine\n        multiplier errors together. <code>Error.of_list</code> and\n        <code>Error.tag</code> fill these roles.\n      </blockquote>")))
 (idp8249968
  ((file error-handling.html)
   (html
    "<blockquote>\n        Here, the declaration\n        <code>&lt;:sexp_of&lt;float * string list * int&gt;&gt;</code>\n        asks Sexplib to generate the sexp-converter for the tuple.\n      </blockquote>")))
 (idp8246112
  ((file error-handling.html)
   (html
    "<blockquote>\n        Here, the value <code>Time.epoch</code> is included in the\n        error, but <code>Time.sexp_of_t</code>, which is used for\n        converting the time to an s-expression, isn't run until the\n        error is converted to a string. Using the Sexplib\n        syntax-extension, which is discussed in more detail in chapter\n        {{SYNTAX}}, we can inline create an s-expression converter for a\n        collection of types, thus allowing us to register multiple\n        pieces of data in an <code>Error.t</code>.\n      </blockquote>")))
 (idp8243696
  ((file error-handling.html)
   (html
    "<blockquote>\n        We can also create an <code>Error.t</code> based on an\n        s-expression converter. This is probably the most common idiom\n        in Core.\n      </blockquote>")))
 (idp8241984
  ((file error-handling.html)
   (html
    "<blockquote>\n        In this case, we can benefit from the laziness of\n        <code>Error</code>, since the thunk won't be called until\n        the <code>Error.t</code> is converted to a string.\n      </blockquote>")))
 (idp8239808
  ((file error-handling.html)
   (html
    "<blockquote>\n        A more interesting construction message from a performance point\n        of view is to construct an <code>Error.t</code> from a\n        thunk:\n      </blockquote>")))
 (idp8236816
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Error</code> gets around this issue through\n        laziness. In particular, an <code>Error.t</code> allows\n        you to put off generation of the actual error string until you\n        actually need, which means a lot of the time you never have to\n        construct it at all. You can of course construct an error\n        directly from a string:\n      </blockquote>")))
 (idp8236096
  ((file error-handling.html)
   (html
    "<blockquote>\n        It might not be obvious at first why efficiency is an issue at\n        all. But generating error messages is an expensive business. An\n        ASCII representation of a type can be quite time-consuming to\n        construct, particularly if it includes expensive-to-convert\n        numerical datatypes.\n      </blockquote>")))
 (idp8234928
  ((file error-handling.html)
   (html
    "<blockquote>\n        Core's answer to this question is the <code>Error.t</code>\n        type, which tries to forge a good compromise between efficiency,\n        convenience and control over the presentation of errors.\n      </blockquote>")))
 (idp8234384
  ((file error-handling.html)
   (html
    "<blockquote>\n        But which type to choose? Is it better to represent errors as\n        strings? Or S-expressions? Or something else entirely?\n      </blockquote>")))
 (idp8233072
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Result.t</code> gives you complete freedom to choose\n        the type of value you use to represent errors, but it's often\n        useful to standardize on an error type. Among other things, this\n        makes it easier to write utility functions to automate common\n        error handling patterns.\n      </blockquote>")))
 (idp8230064
  ((file error-handling.html)
   (html
    "<blockquote>\n        without first opening the <code>Result</code> module.\n      </blockquote>")))
 (idp8224560
  ((file error-handling.html)
   (html
    "<blockquote>\n        A <code>Result.t</code> is essentially an option augmented\n        with the ability to store other information in the error case.\n        Like <code>Some</code> and <code>None</code> for\n        options, the constructors <code>Ok</code> and\n        <code>Error</code> are promoted to the top-level by\n        <code>Core.Std</code>. As such, we can write:\n      </blockquote>")))
 (idp8222480
  ((file error-handling.html)
   (html
    "<blockquote>\n<code>Result.t</code> is meant to address this deficiency.\n        Here's the definition:\n      </blockquote>")))
 (idp8221216
  ((file error-handling.html)
   (html
    "<blockquote>\n        Options aren't always a sufficiently expressive way to report\n        errors. Specifically, when you encode an error as\n        <code>None</code>, there's nowhere to say anything about\n        the nature of the error.\n      </blockquote>")))
 (idp8219024
  ((file error-handling.html)
   (html
    "<blockquote>\n      The use of options to encode errors underlines the fact that it's\n      not clear whether a particular outcome, like not finding something\n      on a list, is really an error, or just another valid outcome of\n      your function. This turns out to be very context-dependent, and\n      error-aware return types give you a uniform way of handling the\n      result that works well for both situations.\n    </blockquote>")))
 (idp8213728
  ((file error-handling.html)
   (html
    "<blockquote>\n      The match statement is used to handle the error cases, propagating\n      an error in <code>hd</code> or <code>last</code> into\n      the return value of <code>compute_bounds</code>. On the\n      other hand, in <code>find_mismatches</code> below, errors\n      encountered during the computation do not propagate to the return\n      value of the function. <code>find_mismatches</code> takes\n      two hashtables as its arguments and tries to find keys that are\n      stored in both. As such, a failure to find a key in one of the\n      tables isn't really an error.\n    </blockquote>")))
 (idp8209168
  ((file error-handling.html)
   (html
    "<blockquote>\n      The function <code>compute_bounds</code> below is an example\n      of how you can handle errors in this style. The function takes a\n      list and a comparison function, and returns upper and lower bounds\n      for the list by finding the smallest and largest element on the\n      list. <code>List.hd</code> and <code>List.last</code>,\n      which return <code>None</code> when they encounter an empty\n      list, are used to extract the largest and smallest element of the\n      list.\n    </blockquote>")))
 (idp8208496
  ((file error-handling.html)
   (html
    "<blockquote>\n      Having errors be explicit in the return values of your functions\n      tells the caller that there is an error that needs to be handled.\n      The caller can then handle the error explicitly, either recovering\n      from the error or propagating it onward.\n    </blockquote>")))
 (idp8206816
  ((file error-handling.html)
   (html
    "<blockquote>\n      The option in the return type indicates that the function may not\n      succeed in finding a suitable element, as you can see below.\n    </blockquote>")))
 (idp8204720
  ((file error-handling.html)
   (html
    "<blockquote>\n      The best way in OCaml to signal an error is to include that error\n      in your return value. Consider the type of the\n      <code>find</code> function in the list module.\n    </blockquote>")))
 (idp8203312
  ((file error-handling.html)
   (html
    "<blockquote>\n    We'll start by describing the two basic approaches for reporting\n    errors in OCaml: error-aware return types and exceptions.\n  </blockquote>")))
 (idp8202608
  ((file error-handling.html)
   (html
    "<blockquote>\n    Thankfully, OCaml has powerful tools for handling errors reliably\n    and with a minimum of pain. In this chapter we'll discuss some of\n    the different approaches in OCaml to handling errors, and give some\n    advice on how to design interfaces that help rather than hinder\n    error handling.\n  </blockquote>")))
 (idp8201872
  ((file error-handling.html)
   (html
    "<blockquote>\n    Nobody likes dealing with errors. It's tedious, it's easy to get\n    wrong, and it's usually just not as fun as planning out how your\n    program is going to succeed. But error handling is important, and\n    however much you don't like thinking about it, having your software\n    fail due to poor error handling code is worse.\n  </blockquote>")))
 (idp8196368
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      Similarly, sometimes you simultaneously want an accessor to a\n      field of a record and a textual representation of the name of that\n      field. This might come up if you were validating a field and\n      needed the string representation to generate an error message, or\n      if you wanted to scaffold a form in a GUI automatically based on\n      the fields of a record. Fieldslib provides a module\n      <code>Field</code> for this purpose. Here's some code for\n      creating <code>Field.t</code>'s for all the fields of our\n      type <code>t</code>.\n    </blockquote>")))
 (idp8194800
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      One common idiom when using records is to provide field accessor\n      functions for a particular record.\n    </blockquote>")))
 (idp8189888
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      Here's a small complete example of a program that can read and\n      write values using bin-io. Here, the serialization is of types\n      that might be used as part of a message-queue, where each message\n      has a topic, some content, and a source, which is in turn a\n      hostname and a port.\n    </blockquote>")))
 (idp8188448
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      Bin_prot is a library designed to address these issues by\n      providing fast serialization in a compact binary format. Kicking\n      off the syntax extension is done by putting\n      <code>with bin_io</code>. (This looks a bit unsightly in the\n      top-level because of all the definitions that are generated. We'll\n      elide those definitions here, but you can see it for yourself in\n      the toplevel.)\n    </blockquote>")))
 (idp8184864
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      S-expressions are a good serialization format when you need\n      something machine-parseable as well as human readable and\n      editable. But Sexplib's s-expressions are not particularly\n      performant. There are a number of reasons for this. For one thing,\n      s-expression serialization goes through an intermediate type,\n      <code>Sexp.t</code>, which must be allocated and is then\n      typically thrown away, putting non-trivial pressure on the GC. In\n      addition, parsing and printing to strings in an ASCII format can\n      be expensive for types like <code>int</code>s,\n      <code>float</code>s and <code>Time.t</code>s where\n      some real computation needs to be done to produce or parse the\n      ASCII representation.\n    </blockquote>")))
 (idp8181248
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          You might prefer to make the syntax a bit less\n          parenthesis-laden by dropping the parentheses around the list.\n          <code>sexp_list</code> gives us this alternate syntax:\n        </blockquote>")))
 (idp8179472
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          One problem with the auto-generated sexp-converters is that\n          they can have more parentheses than one would ideally like.\n          Consider, for example, the following variant type:\n        </blockquote>")))
 (idp8175200
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          But what if we want a field to be optional,\n          <span><em>i.e.</em></span>, we want to allow it to be omitted\n          from the record entirely? In that case, we can mark it with\n          <code>sexp_option</code>:\n        </blockquote>")))
 (idp8170016
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          Another common directive is <code>sexp_opaque</code>,\n          which is used to make an optional field in a record. Ordinary\n          optional values are represented either as\n          <code>()</code> for <code>None</code>, or as\n          <code>(x)</code> for <code>Some x</code>. If you\n          put an option in a record field, then the record field will\n          always be required, and its value will be presented in the way\n          an ordinary optional value would. For example:\n        </blockquote>")))
 (idp8166480
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          And if we now convert a value of this type to an s-expression,\n          we'll see the contents of field <code>a</code> marked as\n          opaque:\n        </blockquote>")))
 (idp8164256
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          But with <code>sexp_opaque</code>, we won't:\n        </blockquote>")))
 (idp8160256
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          The most commonly used directive is\n          <code>sexp_opaque</code>, whose purpose is to mark a\n          given component of a type as being unconvertible. Anything\n          marked with <code>sexp_opaque</code> will be presented\n          as the atom <code>&lt;opaque&gt;</code> by the to-sexp\n          converter, and will trigger an exception from the from-sexp\n          converter. Note that the type of a component marked as opaque\n          doesn't need to have a sexp-converter defined. Here, if we\n          define a type without a sexp-converter, and then try to use it\n          another type with a sexp-converter, we'll error out:\n        </blockquote>")))
 (idp8158272
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Sexplib supports a collection of directives for modifying the\n        default behavior of the auto-generated sexp-converters. These\n        directives allow you to customize the way in which types are\n        represented as s-expressions without having to write a custom\n        parser. We describe these directives below.\n      </blockquote>")))
 (idp8156656
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        In the above error, &quot;foo.scm:3:4&quot; tells us that the\n        error occurred on &quot;foo.scm&quot;, line 3, character 4,\n        which is a much better start for figuring out what has gone\n        wrong.\n      </blockquote>")))
 (idp8154992
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        and run it again, we'll get the following much more helpful\n        error message:\n      </blockquote>")))
 (idp8152928
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        But there's hope! If we make small change to the\n        <code>run</code> function as follows:\n      </blockquote>")))
 (idp8152176
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        If all you have is the error message and the string, it's not\n        terribly informative. In particular, you know that the parsing\n        error-ed out on the atom &quot;not-an-integer&quot;, but you\n        don't know which one! In a large file, this kind of bad error\n        message can be pure misery.\n      </blockquote>")))
 (idp8150960
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        you'll get the following error:\n      </blockquote>")))
 (idp8149776
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        If you were to run this on a malformatted file, say, this one:\n      </blockquote>")))
 (idp8147824
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        There are two steps to deserializing a type from an\n        s-expression: first, converting the bytes in a file to an\n        s-expression, and the second, converting that s-expression into\n        the type in question. One problem with this is that it can be\n        hard to localize errors to the right place using this scheme.\n        Consider the following example:\n      </blockquote>")))
 (idp8145520
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We call the function <code>of_sexp_error</code> to raise\n        an exception because that improves the error reporting that\n        Sexplib can provide when a conversion fails.\n      </blockquote>")))
 (idp8143520
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We can fix this problem by writing a custom sexp-converter, in\n        this case, using the sexp-converter that we already have:\n      </blockquote>")))
 (idp8138480
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        One easy mistake to make when dealing with sexp converters is to\n        ignore the fact that those converters can violate the invariants\n        of your code. For example, the <code>Int_interval</code>\n        module depends for the correctness of the\n        <code>is_empty</code> check on the fact that for any value\n        <code>Range (x,y)</code>, <code>y</code> is greater\n        than or equal to <code>x</code>. The\n        <code>create</code> function preserves this invariant, but\n        the <code>t_of_sexp</code> function does not.\n      </blockquote>")))
 (idp8136032
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        at which point <code>test_interval.ml</code> will compile\n        again, and if we run it, we'll get the following output:\n      </blockquote>")))
 (idp8134656
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        But Sexplib has a shorthand for this as well, so that we can\n        instead write simply:\n      </blockquote>")))
 (idp8133328
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We could export the types by hand:\n      </blockquote>")))
 (idp8131968
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        then we'll get the following error:\n      </blockquote>")))
 (idp8128976
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        But we're still missing something: we haven't created an\n        <code>mli</code> for <code>Int_interval</code> yet.\n        Note that we need to explicitly export the s-expression\n        converters that were created within the ml. If we don't:\n      </blockquote>")))
 (idp8127408
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We can now use this module as follows:\n      </blockquote>")))
 (idp8125200
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The most important functionality provided by Sexplib is the\n        auto-generation of converters for new types. We've seen a bit of\n        how this works already, but let's walk through a complete\n        example. Here's the source for the beginning of a library for\n        representing integer intervals.\n      </blockquote>")))
 (idp8123088
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        (In the above, we use <code>Exn.handle_uncaught</code> to\n        make sure that the exception gets printed out in full detail.)\n      </blockquote>")))
 (idp8120720
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        If we introduce an error into our s-expression, by, say,\n        deleting the open-paren in front of <code>bar</code>,\n        we'll get a parse error:\n      </blockquote>")))
 (idp8119552
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Note that the comments were dropped from the file upon reading.\n        This is expected, since there's no place in the\n        <code>Sexp.t</code> type to store comments.\n      </blockquote>")))
 (idp8118064
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        we can load it up and print it back out again:\n      </blockquote>")))
 (idp8116192
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Sexplib's format for s-expressions is pretty straightforward: an\n        s-expression is written down as a nested parenthetical\n        expression, with whitespace-separated strings as the atoms.\n        Quotes are used for atoms that contain parenthesis or spaces\n        themselves, backslash is the escape character, and semicolons\n        are used to introduce comments. Thus, if you create the\n        following file:\n      </blockquote>")))
 (idp8113808
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      We'll discuss each of these syntax extensions in detail, starting\n      with Sexplib.\n    </blockquote>")))
 (idp8111952
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<span><strong>Pa_typehash</strong></span>: generates a\n          hash value for a type definition, <span><em>i.e.</em></span>,\n          an integer that is highly unlikely to be the same for two\n          distinct types.\n        </blockquote>")))
 (idp8110464
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<span><strong>Pa_compare</strong></span>: generates\n          efficient, type-specialized comparison functions.\n        </blockquote>")))
 (idp8108896
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<span><strong>Variantslib</strong></span>: like Fieldslib\n          for variants, producing first-class variants and other helper\n          functions for interacting with variant types.\n        </blockquote>")))
 (idp8107328
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<span><strong>Fieldslib</strong></span>: generates\n          first-class values that represent fields of a record, as well\n          as accessor functions and setters for mutable record fields.\n        </blockquote>")))
 (idp8105840
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<span><strong>Bin_prot</strong></span>: provides\n          serialization to an efficient binary format.\n        </blockquote>")))
 (idp8104368
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<span><strong>Sexplib</strong></span>: provides\n          serialization for s-expressions.\n        </blockquote>")))
 (idp8103376
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      There are several syntax extensions distributed with Core,\n      including:\n    </blockquote>")))
 (idp8102688
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      The syntax-extensions in Core that we're going to discuss all have\n      this same basic structure: they auto-generate code based on type\n      definitions, implementing functionality that you could in theory\n      have implemented by hand, but with far less programmer effort.\n    </blockquote>")))
 (idp8101584
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      (You can ignore <code>t_of_sexp__</code>, which is a helper\n      function that is needed in very rare cases.)\n    </blockquote>")))
 (idp8098768
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      Given how mechanical the code is, you could imagine writing a\n      program that inspected the type definition and auto-generated the\n      conversion code for you. That is precisely where syntax extensions\n      come in. Using Sexplib and adding <code>with sexp</code> as\n      an annotation to our type definition, we get the functions we want\n      for free.\n    </blockquote>")))
 (idp8097088
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      This is somewhat tiresome to write, and it gets more so when you\n      consider the parser, <span><em>i.e.</em></span>,\n      <code>t_of_sexp</code>, which is considerably more complex.\n      Writing this kind of parsing and printing code by hand is\n      mechanical and error prone, not to mention a drag.\n    </blockquote>")))
 (idp8095008
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      But what if you want a function to convert some brand new type to\n      an s-expression? You can of course write it yourself:\n    </blockquote>")))
 (idp8093744
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      Notice that <code>List.sexp_of_t</code> is polymorphic, and\n      takes as its first argument another conversion function to handle\n      the elements of the list to be converted. Core uses this scheme\n      more generally for defining sexp-converters for polymorphic types.\n    </blockquote>")))
 (idp8091952
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      In addition, most of the base types in Core support conversion to\n      and from s-expressions. For example, we can write:\n    </blockquote>")))
 (idp8089424
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      An s-expression is in essence a nested parenthetical list whose\n      atomic values are strings. The <code>Sexp</code> module\n      comes with functionality for parsing and printing s-expressions.\n    </blockquote>")))
 (idp8087824
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      S-expressions are nested paranthetical strings whose atomic values\n      are strings. They were first popularized by the Lisp programming\n      language in the 1960s, and have remained a simple way to encode\n      data structures since then.\n    </blockquote>")))
 (idp8087184
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      So far, we've talked about interoperating with formats that are\n      usually defined by third-parties. It's also very common to just\n      exchange and persist OCaml values safely, so we'll discuss how to\n      do this now.\n    </blockquote>")))
 (idp8085568
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        TODO use Cow.Html to generate a more complete Atom feed.\n      </blockquote>")))
 (idp8084176
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        TODO finish the atom example.\n      </blockquote>")))
 (idp8083792
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html "<blockquote>\n        TODO antiquotations.\n      </blockquote>")))
 (idp8080624
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        There's another interesting bit of new syntax in the\n        <code>xml_of_date</code> function known as a\n        <span><em>quotation</em></span>. OCaml not only allows code to be\n        generated during pre-processing, but also to override the core\n        language grammar with new constructs. The most common way of\n        doing this is by embedding the custom grammars inside\n        <code>&lt;:foo&lt; ... &gt;&gt;</code> tags, where\n        <code>foo</code> represents the particular grammar being\n        used. In the case of COW, this lets you generate XMLM-compatible\n        OCaml values just by typing in XML tags.\n      </blockquote>")))
 (idp8079072
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The Atom date field is a good example. We define it as a tuple\n        of integers, but the format mandated by the specification is\n        actually a free-form text format and not XML. However, because\n        the syntax extension generates normal OCaml functions, we can\n        just override the <code>xml_of_date</code> function with a\n        custom one which returns the correct XML fragment. Any\n        references further down the module will just use our overridden\n        version and ignore the auto-generated one.\n      </blockquote>")))
 (idp8078352
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We've now filled in more of the Atom schema with these records.\n        The first problem we run into is that occasionally there is a\n        mismatch between the syntax extension's idea of what the\n        auto-generated XML should look like, and the reality of the\n        protocol you are mapping to.\n      </blockquote>")))
 (idp8076368
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        This is convenient, but just one small portion of Atom. How do\n        we express the full Atom scheme from earlier? The answer is with\n        just a few more records that match the Atom XML schema.\n      </blockquote>")))
 (idp8074784
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        This will generate the following XML output on the terminal when\n        you execute it:\n      </blockquote>")))
 (idp8072176
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        If we run <code>xml_of_author</code> and convert the\n        result to a human-readable string, our complete example looks\n        like:\n      </blockquote>")))
 (idp8068352
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Notice that the <code>with xml</code> clause has been\n        replaced with a new <code>xml_of_author</code> function\n        that has been generated for you. It accepts an\n        <code>author</code> value and returns an\n        <code>Xml.t</code> value. The generated code isn't really\n        meant to be human-readable, but you don't normally see it when\n        using the syntax extension (we've only dumped it out here to\n        illustrate how <code>camlp4</code> works).\n      </blockquote>")))
 (idp8064736
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Let's see the OCaml code that has been generated for our\n        <code>author</code> record after it has been preprocessed:\n      </blockquote>")))
 (idp8062640
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        You can supply <code>ocamlfind</code> with a number of\n        different predicates to define the type of build you are running\n        (preprocessing, compilation or linking). The final part of the\n        script invokes the <code>camlp4o</code> binary on your ML\n        source file and outputs the transformed source code to your\n        terminal.\n      </blockquote>")))
 (idp8058896
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The OCaml compiler can call <code>camlp4</code>\n        automatically during a compilation to preprocess the source\n        files. This is specified via the <code>-pp</code> flag to\n        the compiler. You don't normally need to specify this flag\n        yourself. Use the <code>ocamlfind</code> utility instead\n        to generate the right command-line flags for you. Here's a small\n        shell script which preprocesses a source file with the COW\n        syntax extension:\n      </blockquote>")))
 (idp8056352
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        This is a standard record type definition with the addition of\n        <code>with xml</code> at the end. This uses a syntax\n        extension to signify that we wish to generate boilerplate code\n        for handling this record as an XML document.\n      </blockquote>")))
 (idp8054192
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Let's start to build up an Atom specification using Cow. First,\n        the <code>&lt;author&gt;</code> tag can be represented\n        with the following type:\n      </blockquote>")))
 (idp8053008
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        One caveat to bear in mind is that COW isn't fully compatible\n        with Core yet, and so you must use the syntax extension before\n        opening the Core modules. (<span><em>avsm</em></span>: we can fix\n        this easily, but note is here as a warning to reviewers).\n      </blockquote>")))
 (idp8050480
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The COW library and syntax extension can be installed via OPAM\n        by <code>opam install cow</code>. There are two OCamlfind\n        packages installed: the library is called <code>cow</code>\n        and the syntax extension is activated with the\n        <code>cow.syntax</code> package.\n      </blockquote>")))
 (idp8049232
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We want to build this by minimising the amount of repetitive XML\n        generation code. The &quot;Caml on the Web&quot; (COW) library\n        provides a syntax extension that is useful here.\n      </blockquote>")))
 (idp8047088
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Here's an example of an Atom feed:\n      </blockquote>")))
 (idp8046272
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We'll use the Atom 1.0 syndication format as our example here.\n        Atom feeds allow web-based programs (such as browsers) to poll a\n        website for updates. The website owner publishes a feed of\n        content in a standardized XML format via HTTP. This feed is then\n        parsed by clients and compared against previously downloaded\n        versions to determine which contents are available.\n      </blockquote>")))
 (idp8044336
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The OCaml distribution provides the <code>camlp4</code>\n        tool for this purpose, which you can view as a type-safe\n        preprocessor. Camlp4 operates by loading in a set of syntax\n        extension modules that transform the Abstract Syntax Tree (AST)\n        of OCaml, usually by adding nodes that generate code. We'll talk\n        about how to build your own syntax extensions later in the book,\n        but for now we'll describe how to <span><em>use</em></span>\n        several syntax extensions that make it easier to manipulate\n        external data formats such as XML.\n      </blockquote>")))
 (idp8043648
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        In the earlier JSON chapter, we explained how to construct\n        records by creating the records directly. You can do exactly the\n        same thing for XML, but there is also a more automated method\n        available by using OCaml's facility for syntax extensions.\n      </blockquote>")))
 (idp8039472
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>filter_tag</code> combinator accepts a\n        <code>tree list</code> parameter and outputs a\n        <code>tree list</code>. This lets us easily chain together\n        the results of one filter to another, and hence select\n        hierarchical XML tags very easily. When we get to the\n        <code>&lt;Text&gt;</code> tag, we iterate over all the\n        results and print each one individually.\n      </blockquote>")))
 (idp8036192
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Once we have these helper functions, the selection of all the\n        <code>&lt;Text&gt;</code> tags is a matter of chaining the\n        combinators together to peform the selection over the\n        <code>tree</code> data structure.\n      </blockquote>")))
 (idp8034048
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Notice the use of a <span><em>guard pattern</em></span> in the\n        <code>filter_tag</code> pattern match. This looks for an\n        <code>Element</code> tag that matches the name parameter,\n        and concatenates the results with the accumulator list.\n      </blockquote>")))
 (idp8032576
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        (<span><em>avsm</em></span>: have we explained\n        <code>fold_left</code> before this section or does it need\n        a full intro?)\n      </blockquote>")))
 (idp8029968
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The implementation of these signatures fold over the\n        <code>tree</code> structure to filter the tags which match\n        the desired tag name. A similar version that matches on tag\n        attributes is left as an exercise for you to try.\n      </blockquote>")))
 (idp8026416
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The type <code>tree</code> can be pattern-matched and\n        traversed like a normal OCaml data structure. Let's see how this\n        works by extracting out all the &quot;Related Topics&quot; in\n        the example document. First, we'll need a few helper combinator\n        functions to filter through tags and trees, with the following\n        signature:\n      </blockquote>")))
 (idp8024192
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Signals enforce a very iterative style of parsing XML, as your\n        program has to deal with signals arriving serially. It's often\n        more convenient to deal with complete XML documents directly\n        in-memory as an OCaml data structure. You can convert a signal\n        stream into an OCaml structure by defining the following data\n        type and helper functions:\n      </blockquote>")))
 (idp8017056
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>xml_id</code> function begins by reading one\n        signal, which will always be a <code>Dtd</code>. The\n        recursive <code>pull</code> function is then invoked to\n        iterate over the remaining signals. This uses\n        <code>Xmlm.peek</code> to inspect the current input signal\n        and immediately output it. The rest of the function is not\n        strictly necessary, but it tracks that all of the tags that have\n        been started via the <code>El_start</code> signal are also\n        closed by a corresponding <code>El_end</code> signal. Once\n        the <code>pull</code> function has finished due to the\n        opening tag being closed, the <code>Xmlm.eoi</code>\n        function verifies that the &quot;end of input&quot; has been\n        reached.\n      </blockquote>")))
 (idp8014480
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>Fun</code> channel returns one character at a\n        time as an integer, and <code>String</code> starts parsing\n        an OCaml string from the given integer offset. Both of these are\n        will normally be used in preference to\n        <code>Channel</code>, which uses an interface that is\n        deprecated in Core.\n      </blockquote>")))
 (idp8010224
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Let's start at the bottom, where we open up input and output\n        channels to pass to <code>Xmlm</code> parser. The\n        <code>input</code> and <code>output</code>\n        constructor functions use a polymorphic variant to define the\n        mechanism that the library should use to read the document.\n        <code>Channel</code> is the simplest, but there are\n        several others available.\n      </blockquote>")))
 (idp8007968
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Let's take a shot at handling signals by writing the XML\n        identity function that parses some XML and outputs it again.\n        There is no explicit buffering required since this uses the XMLM\n        streaming API.\n      </blockquote>")))
 (idp8002960
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        XMLM outputs an ordered sequence of these signals to your code\n        as it parses the document. The first <code>signal</code>\n        when inputting an XML document is always a\n        <code>Dtd</code>. The DTD (or <span><em>document type\n        description</em></span>) optionally defines which tags are\n        allowed within the XML document. Some XML parsers can validate a\n        document against a DTD, but XMLM is a\n        <span><em>non-validating</em></span> parser that reads the DTD if\n        present, but disregards its contents. The\n        <code>El_start</code> and <code>El_end</code>\n        signals indicate the opening and closing of tags, and\n        <code>Data</code> passes the free-form information\n        contained between tags.\n      </blockquote>")))
 (idp8000880
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The type of a <code>signal</code> reveals the basic\n        structure of the streaming API in XMLM:\n      </blockquote>")))
 (idp7997440
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          A well-formed sequence of <code>signal</code>s\n          represents an XML document tree traversal in depth-first\n          order. Input pulls a well-formed sequence of\n          <code>signal</code>s from a data source and output\n          pushes a well-formed sequence of <code>signal</code>s to\n          a data destination. Functions are provided to easily transform\n          sequences of <code>signal</code>s to/from arborescent\n          data structures.\n        </blockquote>")))
 (idp7996656
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The XMLM documentation is a good place to read about the overall\n        layout of the library. It tells us that:\n      </blockquote>")))
 (idp7993120
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      The XML document is structured as a series of\n      <code>&lt;tags&gt;</code> that are closed by an end\n      <code>&lt;/tag&gt;</code>. The opening tags have an optional\n      set of key/value attributes and usually contain text data or\n      further tags within them. If the XML document is large, we don't\n      want to read the whole thing into memory before processing it.\n      Luckily we don't have to, as there are two parsing strategies for\n      XML: a low-level <span><em>streaming</em></span> API that parses a\n      document incrementally, and a simpler but more inefficient tree\n      API. We'll start with the streaming API first, as the tree API is\n      built on top of it.\n    </blockquote>")))
 (idp7989008
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      Since XML is such a common web format, we've taken our example\n      document from the\n      <a href=\"http://duckduckgo.com\" target=\"_top\">DuckDuckGo</a> search\n      engine. This is a smaller search engine than the usual suspects,\n      but has the advantage of a freely available API that doesn't\n      require you to register before using it. We'll talk more about how\n      to use the live API later in\n      <a href=\"concurrent-programming-with-async.html\">Chapter\194\16013, <i>Concurrent Programming with Async</i></a>, but\n      for now here's what a shortened XML search response from\n      DuckDuckGo looks like:\n    </blockquote>")))
 (idp7986432
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      The remainder of this section uses the freely available XMLM\n      library. It's easiest to obtain it via OPAM (see\n      <a href=\"packaging-and-build-systems.html\">Chapter\194\16019, <i>Packaging and Build Systems</i></a> for\n      installation instructions). You need to run\n      <code>opam install xmlm</code> once OPAM is installed. The\n      library documentation is also readable\n      <a href=\"http://erratique.ch/software/xmlm/doc/Xmlm\" target=\"_top\">online</a>.\n    </blockquote>")))
 (idp7984368
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      XML is a markup language designed to store tree-structured data in\n      a format that is (somewhat) human- and machine-readable. Like\n      JSON, it is a textual format commonly used in web technologies,\n      with a complete\n      <a href=\"http://www.w3.org/TR/REC-xml/\" target=\"_top\">specification</a>\n      available online. A complete description is beyond the scope of\n      this book, but we'll explain how to manipulate it now.\n    </blockquote>")))
 (idp7981632
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        We'll also return to the Github example here later in the book\n        when discussing the Async networking library, and you can find\n        the full ATD specification for Github in the\n        <a href=\"http://github.com/avsm/ocaml-github\" target=\"_top\"><code>ocaml-github</code></a>\n        repository.\n      </blockquote>")))
 (idp7979504
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The full ATD specification is quite sophisticated (and well\n        documented online at its homepage). The ATD compiler can also\n        target formats other than JSON, and also outputs code for other\n        languages such as Java if you need more interoperability. There\n        are also several similar projects you can investigate which\n        automate the code generation process:\n        <a href=\"http://piqi.org\" target=\"_top\">Piqi</a> uses the Google\n        protobuf format, and\n        <a href=\"http://thrift.apache.org\" target=\"_top\">Thrift</a> supports a\n        huge variety of other programming languages.\n      </blockquote>")))
 (idp7978080
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<code>-j-defaults</code>: force the output a JSON\n            value even if the specification defines it as the default\n            value for that field.\n          </blockquote>")))
 (idp7976528
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<code>-j-custom-fields FUNCTION</code>: call a custom\n            function for every unknown field encountered, instead of\n            raising a parsing exception.\n          </blockquote>")))
 (idp7975024
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<code>-j-std</code>: work in standard JSON mode, and\n            never print non-standard JSON extensions.\n          </blockquote>")))
 (idp7973200
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        This is pretty convenient! We've written a single ATD file, and\n        all the OCaml boilerplate to convert between JSON and a strongly\n        typed record has been generated for us. You can control various\n        aspects of the serializer by passing flags to\n        <code>atdgen</code>. The important ones for JSON are:\n      </blockquote>")))
 (idp7968912
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>Github_t</code> module only contains the type\n        definitions, while <code>Github_j</code> has a concrete\n        serialization module to and from JSON. You can read the\n        <code>github_j.mli</code> to see the full interface, but\n        the important functions for most uses are the conversion\n        functions to and from a string. For our example above, this\n        looks like:\n      </blockquote>")))
 (idp7966256
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        There is an obvious correspondence to the ATD definition. Note\n        in particular that field names in separate OCaml records cannot\n        shadow each other, and so we specifically prefix every field\n        with a prefix to distinguish it from other records. For example,\n        <code>&lt;ocaml field_prefix=&quot;auth_req_&quot;&gt;</code>\n        in the ATD spec prefixes every field name in the generated\n        <code>authorization_request</code> record with\n        <code>auth_req</code>.\n      </blockquote>")))
 (idp7963040
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        This will generate some new files in your current directory.\n        <code>Github_t.ml</code> and\n        <code>Github_t.mli</code> will contain an OCaml module\n        with types defines that correspond to the ATD file. It looks\n        like this:\n      </blockquote>")))
 (idp7961584
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The ATD spec can be compiled to a number of OCaml targets. Let's\n        run the compiler twice, to generate some OCaml type definitions,\n        and a JSON serialiser.\n      </blockquote>")))
 (idp7960192
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        ATD is (deliberately) similar to OCaml type definitions. Each\n        field can include extra annotations to customise the parsing\n        code for a particular backend. For example, the Github\n        <code>scope</code> field above is defined as a variant\n        type, but with the actual JSON values being defined explicitly\n        (as lower-case versions).\n      </blockquote>")))
 (idp7957216
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Let's go straight into looking at an example of how this works,\n        by using a small portion of the Github API. Github is a popular\n        code hosting and sharing website that provides a JSON-based web\n        <a href=\"http://developer.github.com\" target=\"_top\">API</a>. The ATD\n        code fragment below describes the Github authorization API. It\n        is based on a pseudo-standard web protocol known as OAuth, and\n        is used to authorized users to access Github services.\n      </blockquote>")))
 (idp7955840
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The idea behind ATD is to specify the format of the JSON in a\n        separate file, and then run a compiler\n        (<code>atdgen</code>) that outputs OCaml code to construct\n        and parse JSON values. This means that you don't need to write\n        any OCaml parsing code at all, as it will all be auto-generated\n        for you.\n      </blockquote>")))
 (idp7954544
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The combinators described earlier make it fairly easy to extract\n        fields from JSON records, but the process is still pretty\n        manual. We'll talk about how to do larger-scale JSON parsing\n        now, using a domain-specific language known as\n        <a href=\"http://oss.wink.com/atdgen/\" target=\"_top\">ATD</a>.\n      </blockquote>")))
 (idp7949440
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          The only purpose of these extensions is to make the data\n          representation more expressive without having to refer to the\n          original OCaml types. You can always cast a\n          <code>Safe.json</code> to a\n          <code>Basic.json</code> type by using the\n          <code>to_basic</code> function as follows:\n        </blockquote>")))
 (idp7946752
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n              The <code>Variant</code> type encodes OCaml variants\n              more explicitly, as\n              <code>&lt;&quot;Foo&quot;&gt;</code> or\n              <code>&lt;&quot;Bar&quot;:123&gt;</code> for a\n              variant with parameters.\n            </blockquote>")))
 (idp7944736
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n              The <code>Tuple</code> type is stored as\n              <code>(&quot;abc&quot;, 123)</code> instead of a\n              list.\n            </blockquote>")))
 (idp7941360
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n              The <code>lit</code> suffix denotes that the value\n              is stored as a JSON string. For example, a\n              <code>Floatlit</code> will be stored as\n              <code>&quot;1.234&quot;</code> instead of\n              <code>1.234</code>.\n            </blockquote>")))
 (idp7940384
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          The extensions includes with Yojson include:\n        </blockquote>")))
 (idp7936528
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          You should immediately be able to spot a benefit of using\n          polymorphic variants here. A standard JSON type such as a\n          <code>String</code> will type-check against both the\n          <code>Basic</code> module and also the non-standard\n          <code>Safe</code> module. However, if you use extension\n          values such as <code>Tuple</code> with the\n          <code>Basic</code> module, they will not be a valid\n          sub-type and the compiler will complain.\n        </blockquote>")))
 (idp7932976
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          The standard JSON types are <span><em>really</em></span> basic,\n          and OCaml types are far more expressive. Yojson supports an\n          extended JSON format for those times when you're not\n          interoperating with external systems and just want a\n          convenient human-readable local format. The\n          <code>Yojson.Safe.json</code> type is a superset of the\n          <code>Basic</code> polymorphic variant, and looks like\n          this:\n        </blockquote>")))
 (idp7931232
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n<span><em>avsm</em></span>: segway into memory representation of\n        polyvariants here?\n      </blockquote>")))
 (idp7927184
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        In this case, we've marked the <code>x</code> as being of\n        type <code>Yojson.Basic.json</code>, and the compiler\n        immediately spots that the argument to the\n        <code>Assoc</code> variant has the incorrect type. This\n        illustrates the strengths and drawbacks of using polymorphic\n        variants: they make it possible to easily subtype across module\n        boundaries (the <code>Basic</code> and\n        <code>Safe</code> in Yojson's case), but the error\n        messages can be more confusing. However, a bit of careful manual\n        type annotation is all it takes to make tracking down such\n        issues much easier.\n      </blockquote>")))
 (idp7924848
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The type error above isn't <span><em>wrong</em></span> as such,\n        but can be inconvenient to wade through for larger values. An\n        easy way to narrow down this sort of type error is to add\n        explicit type annotations as a compiler hint about your\n        intentions:\n      </blockquote>")))
 (idp7918448
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        In the example above, although the value that\n        <code>x</code> has is compatible with the type\n        <code>json</code>, it's not explicitly defined as such.\n        The type inference engine will figure out a type that is based\n        on how the value <code>x</code> is used, and in this case\n        only the <code>Assoc</code> and <code>String</code>\n        variants are present. One difficulty you will encounter is that\n        type errors involving polymorphic variants can be quite verbose\n        if you make a mistake in your code. For example, suppose you\n        build an <code>Assoc</code> and include a single value\n        instead of a list of keys:\n      </blockquote>")))
 (idp7915360
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        To build and print JSON values, you can just construct values of\n        type <code>json</code> and call the\n        <code>to_string</code> function. There are also\n        pretty-printing functions that lay out the output in a more\n        human-readable style:\n      </blockquote>")))
 (idp7913408
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          In the last part of the example, we simply print the parsed\n          fields since they are just normal OCaml values. This technique\n          of using chained parsing functions is very powerful in\n          combination with the OCaml type system. Many errors that don't\n          make sense at runtime (for example, mixing up lists and\n          objects) will be caught statically via a type error.\n        </blockquote>")))
 (idp7908832
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n              The <code>is_online</code> and\n              <code>is_translated</code> fields are optional in\n              our JSON schema, and no error is raised if they are not\n              present in the JSON array. The resulting OCaml type is a\n              <code>string option</code> to reflect this. In our\n              example, only <code>is_online</code> is present and\n              <code>is_translated</code> will be\n              <code>None</code>.\n            </blockquote>")))
 (idp7905312
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n              The <code>tags</code> field is similar to\n              <code>title</code>, but are passed through the\n              <code>to_list</code> combinator since they are a\n              JSON list. The <code>filter_string</code> combinator\n              folds all of the strings in the JSON list into an OCaml\n              list (any non-strings also in there are simply ignored).\n            </blockquote>")))
 (idp7903104
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n              For the <code>title</code> string, the\n              <code>member</code> combinator extracts the key from\n              the array, and casts it to an OCaml string. An exception\n              is raised if the JSON value is not a string.\n            </blockquote>")))
 (idp7900256
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          This introduces the <code>Yojson.Basic.Util</code>\n          module, which contains <span><em>combinator</em></span>\n          functions for JSON manipulation. Combinators are a style of\n          function that can be chained together using the\n          <code>|!</code> pipe operator to select and convert\n          values out of the JSON structure. Let's examine some of them\n          in more detail:\n        </blockquote>")))
 (idp7897248
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n          Now that we've figured out how to parse the example JSON, lets\n          see how we can manipulate it from OCaml code with a more\n          complete example.\n        </blockquote>")))
 (idp7894400
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        If you feel like hanging your OCaml interpreter, you can verify\n        what happens with recursive values for yourself:\n      </blockquote>")))
 (idp7889856
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        It's quite easy to mix up the use of <code>=</code> and\n        <code>==</code>, so Core disables the\n        <code>==</code> operator and provides\n        <code>phys_equal</code> instead. You'll see a type error\n        if you use <code>==</code> anywhere:\n      </blockquote>")))
 (idp7887552
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>=</code> structural equality operator\n        recursively inspects each field in the two values and tests them\n        individually for equality. In the JSON parsing example, every\n        field will be traversed and checked, and they will check out as\n        equal. Crucially, if your data structure is cyclical (that is, a\n        value recursively points back to another field within the same\n        structure), the <code>=</code> operator will never\n        terminate, and your program will hang! In this situation, you\n        must use the physical equality operator, or write a custom\n        comparison function that breaks the recursion.\n      </blockquote>")))
 (idp7884912
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>==</code> physical equality test will match if\n        two data structures have precisely the same pointer in memory.\n        Two data structures that have identical contents, but are\n        constructed separately, will not match using this operator. In\n        the JSON example, the <code>json1</code> and\n        <code>json2</code> values are not identical and so would\n        fail the physical equality test.\n      </blockquote>")))
 (idp7881776
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        If you come from a C/C++ background, you will probably\n        reflexively use <code>==</code> to test two values for\n        equality. In OCaml, <code>==</code> tests for\n        <span><em>physical</em></span> equality, and <code>=</code>\n        tests for <span><em>structural</em></span> equality.\n      </blockquote>")))
 (idp7876080
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>from_file</code> function accepts an input\n        filename and takes care of opening and closing it for you. It's\n        far more common to use <code>from_string</code> to\n        construct a JSON value from an OCaml <code>string</code>.\n        These strings can come from a network connection (we'll see more\n        of this in\n        <a href=\"concurrent-programming-with-async.html\">Chapter\194\16013, <i>Concurrent Programming with Async</i></a>)\n        or even a database. Finally, the example checks that the two\n        input mechanisms actually resulted in the same OCaml data\n        structure.\n      </blockquote>")))
 (idp7872672
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The <code>in_channel</code> constructor is from the\n        original OCaml standard library, and its use is considered\n        deprecated when using the Core standard library. This leaves us\n        with two ways of parsing the JSON: either from a string buffer,\n        or from a file on a filesystem. The next example shows both in\n        action, assuming the JSON record is stored in a file called\n        <span><em>book.json</em></span>:\n      </blockquote>")))
 (idp7870880
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        When first reading these interfaces, you can generally ignore\n        the optional arguments (which have the question marks in the\n        type signature), as they will be filled in with sensible values.\n        The signature for these values with the optional elements\n        removed makes their purpose quite clear:\n      </blockquote>")))
 (idp7867856
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        Let's parse the earlier JSON string example into this type now.\n        The first stop is the <code>Yojson.Basic</code>\n        documentation, where we find these helpful functions:\n      </blockquote>")))
 (idp7864192
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n        The JSON specification has very few data types, and Yojson\n        implements these in the <code>Yojson.Basic</code> module.\n        The <code>json</code> type shown below is sufficient to\n        express any valid JSON structure. Note that some of the types\n        are recursive, so that fields can contain references to more\n        JSON fields, and that it also specifically includes a\n        <code>Null</code> variant for empty fields.\n      </blockquote>")))
 (idp7860336
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      There are several JSON libraries available for OCaml. For this\n      chapter, we've picked the\n      <a href=\"http://mjambon.com/yojson.html\" target=\"_top\"><code>Yojson</code></a>\n      library. The easiest way to install it is by using the OPAM\n      package manager (see\n      <a href=\"packaging-and-build-systems.html\">Chapter\194\16019, <i>Packaging and Build Systems</i></a> for\n      installation instructions). Once OPAM is working, you will need to\n      run <code>opam install yojson</code>.\n    </blockquote>")))
 (idp7858224
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      Our first task is to parse the JSON into a more structured OCaml\n      type so that we can use static typing more effectively. When\n      manipulating JSON in Python or Ruby, you might write unit tests to\n      check that you have handled unusual inputs. The OCaml model\n      prefers compile-time static checking as well as unit tests. For\n      example, using pattern matching can warn you if you've not checked\n      that a value can be <code>Null</code> as well as contain an\n      actual value.\n    </blockquote>")))
 (idp7856224
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      This free-form nature of JSON types is both a blessing and a\n      curse. It's very easy to generate JSON values, but code parsing\n      them also has to cope with handling subtle variations in how\n      values are represented. For example, what if the\n      <code>pages</code> value above is actually represented as a\n      string value of <code>&quot;450&quot;</code> instead of an\n      integer?\n    </blockquote>")))
 (idp7854208
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      JSON values usually start with an object at the top level that\n      contains a set of key/value pairs. The keys must be strings, but\n      values can be any JSON type. In the example above,\n      <code>tags</code> is a string list, while the\n      <code>authors</code> field contains a list of records.\n      Unlike OCaml lists, JSON lists can contain completely different\n      JSON types within them.\n    </blockquote>")))
 (idp7852272
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      JSON consists of just two basic structures: an unordered\n      collection of key/value pairs, and an ordered list of values.\n      Values can be strings, booleans, floats, integers or null. Let's\n      see what an example JSON record for a book description looks like:\n    </blockquote>")))
 (idp7850784
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n      JSON is a lightweight data-interchange format often used in web\n      services and browsers. It is described in\n      <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" target=\"_top\">RFC4627</a>,\n      and is designed to be easy to parse and generate. You'll run into\n      JSON very often when working with modern APIs, and so we'll cover\n      several different ways to manipulate it in this chapter. Along the\n      way we'll introduce new libraries and syntax extensions which make\n      the job easier.\n    </blockquote>")))
 (idp7849216
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n    We'll start off by looking at JSON and XML first, as they are very\n    common third-party data formats. After that, we'll introduce some\n    syntax extensions in Core that make it really easy to manipulate\n    s-expressions and safe binary serialisers directly from OCaml types.\n  </blockquote>")))
 (idp7847632
  ((file data-serialization-with-json-xml-and-s-expressions.html)
   (html
    "<blockquote>\n    Data serialization, <span><em>i.e.</em></span> reading and writing\n    program data to a sequence of bytes, is an important and common\n    programming task. Sometimes you need to match someone else's data\n    format (such as XML), and other times you just want to quickly dump\n    some values to disk and read them back later. To this end, OCaml\n    comes with several techniques for data serialization depending on\n    what your problem is.\n  </blockquote>")))
 (idp9335472
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Explain libev and why its needed here.\n    </blockquote>")))
 (idp9334384
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Show how we can use a monadic style to bind to the Github API and\n      make simple JSON requests/responses.\n    </blockquote>")))
 (idp9332672
  ((file concurrent-programming-with-async.html)
   (html "<blockquote>\n</blockquote>")))
 (idp9331056
  ((file concurrent-programming-with-async.html)
   (html "<blockquote>\n</blockquote>")))
 (idp9329280
  ((file concurrent-programming-with-async.html)
   (html "<blockquote>\n</blockquote>")))
 (idp9326240
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Try modifying the <code>Deferred.any</code> in the above\n      example to use some of the other thread joining functions above,\n      such as <code>Deferred.both</code>.\n    </blockquote>")))
 (idp9309888
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The <code>Deferred</code> module has a number of other ways\n      to select between multiple threads, such as:\n    </blockquote>")))
 (idp9306928
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Both of the threads encode the time intervals in their return\n      value so that you can can easily verify the calculations (you\n      could also simply print the time spans to the console as they are\n      calculated and simplify the return types). You can see this by\n      executing the <code>flip</code> function at the toplevel a\n      few times.\n    </blockquote>")))
 (idp9303168
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      This introduces a couple of new time-related Async functions. The\n      <code>Time</code> module contains functions to express both\n      absolute and relative temporal relationships. In our coin flipping\n      example, we create a relative time span of 3 seconds, and then\n      permute it randomly twice by 75%. We then create two threads,\n      <code>coin_heads</code> and <code>coin_tails</code>\n      which return after their respective intervals. Finally,\n      <code>Deferred.any</code> waits for the first thread which\n      completes and returns its value, ignoring the remaining\n      undetermined threads.\n    </blockquote>")))
 (idp9300304
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Our examples so far have been with static threads, and now we'll\n      look at how to coordinate multiple threads and timeouts. Let's\n      write a program that spawns two threads, each of which sleep for\n      some random time and return either &quot;Heads&quot; or\n      &quot;Tails&quot;, and the quickest thread returns its value.\n    </blockquote>")))
 (idp9298032
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      (<span><em>avsm</em></span>: this utop feature not actually\n      implemented yet for Async, but works for Lwt)\n    </blockquote>")))
 (idp9296768
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      In the second evaluation of <code>fn</code>, the top-level\n      detected the return type of a future and evaluated the result into\n      a concrete string.\n    </blockquote>")))
 (idp9292656
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Async threads can be evaluated from the toplevel by wrapping them\n      in <code>Thread_safe.block_on_async_exn</code>, which spawns\n      a system thread that waits until a result is available. The\n      <code>utop</code> top-level automatically detects\n      <code>Deferred.t</code> types that are entered interactively\n      and wraps them in this function for you automatically.\n    </blockquote>")))
 (idp9285536
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The <code>&gt;&gt;=</code> operator is exactly the same as\n      <code>bind</code> and unpacks the integer future into the\n      <code>y</code> variable. The subsequent closure receives the\n      unpacked integer and builds a new string future. It can be a\n      little verbose to keep calling <code>bind</code> and\n      <code>return</code>, and so the <code>&gt;&gt;|</code>\n      operator maps a non-Async function across a future value. In the\n      second example, the future value of <code>x</code> is mapped\n      to <code>string_of_int</code> directly, and the result is a\n      <code>string</code> future.\n    </blockquote>")))
 (idp9282176
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Binding callbacks is to deferred values is the most common way to\n      compose blocking operations, and inline operators are provided to\n      make it easier to use. In the fragment below, we see\n      <code>&gt;&gt;=</code> and <code>&gt;&gt;|</code> used\n      in similar ways to convert an integer into a string:\n    </blockquote>")))
 (idp9281648
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      _(avsm: do we talk about Monads earlier in the Core chapter? I\n      presume we do, since the Option monad is very useful)\n    </blockquote>")))
 (idp9273584
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n<code>return</code>, <code>bind</code> and the\n      <code>Deferred.t</code> type all contain polymorphic type\n      variables (the <code>'a</code>) which represent the type of\n      the thread, and are inferred based on how they are used in your\n      code. The <code>'a</code> type of the argument passed to the\n      <code>bind</code> callback <span><em>must</em></span> be the\n      same as the <code>'a Deferred.t</code> of the input thread,\n      preventing runtime mismatches between thread callbacks. Both\n      <code>bind</code> and <code>return</code> form a\n      design pattern in functional programming known as\n      <span><em>monads</em></span>, and you will run across this\n      signature in many applications beyond just threads.\n    </blockquote>")))
 (idp9270576
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Let's examine the function signatures of <code>bind</code>\n      and <code>return</code> more closely.\n    </blockquote>")))
 (idp9264960
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Here, we've bound a function to <code>x</code> that will\n      convert the <code>int</code> to a <code>string</code>.\n      Notice that while both <code>x</code> and\n      <code>y</code> share a common <code>Deferred.t</code>\n      type, their type variables differ and so they cannot be\n      interchangably used except in polymorphic functions. This is\n      useful when refactoring large codebases, as you can tell if any\n      function will block simply by the presence of an\n      <code>Deferred.t</code> in the signature.\n    </blockquote>")))
 (idp9259376
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      The basic type of an Async thread is a\n      <code>Deferred.t</code>, which can be constructed by the\n      <code>return</code> function. The type parameter (in this\n      case <code>int</code>) represents the ultimate type of the\n      thread once it has completed in the future. This return value\n      cannot be used directly while it is wrapped in a\n      <code>Deferred.t</code> as it may not be available yet.\n      Instead, we <code>bind</code> a function closure that is\n      called once the value is eventually ready.\n    </blockquote>")))
 (idp9256160
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Lets begin by constructing a simple thread. Async follows the Core\n      convention and provides an <code>Async.Std</code> that\n      provides threaded variants of many standard library functions. The\n      examples throughout this chapter assume that\n      <code>Async.Std</code> is open in your environment.\n    </blockquote>")))
 (idp9255312
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Async threads are co-operative and never preempt each other, and\n      the library internally converts blocking code into a single event\n      loop. The threads are normal OCaml heap-allocated values (without\n      any runtime magic!) and are therefore very fast to allocate.\n      Concurrency is mostly limited only by your available main memory,\n      or operating system limits on non-memory resources such as file\n      descriptors.\n    </blockquote>")))
 (idp9254800
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Now that we've seen the search example above, let's examine how\n      Async works in more detail.\n    </blockquote>")))
 (idp9251120
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Another alternative is to run an Async function in a separate\n        system thread. You can do this by wrapping the function in the\n        <code>Async.Thread_safe.block_on_async_exn</code>. The\n        <code>utop</code> top-level does this automatically for\n        you if you attempt to evaluate an Async function interactively.\n      </blockquote>")))
 (idp9249696
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        When you run the search example, you'll notice that the\n        application doesn't terminate even when all of the searches are\n        complete. The Async scheduler doesn't terminate by default, and\n        so most applications will listen for a signal to exit or simply\n        use <code>CTRL-C</code> to interrupt it from a console.\n      </blockquote>")))
 (idp9246096
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The <code>Deferred.List</code> module lets you specify\n        exactly how to map over a collection of futures. The searches\n        will be executed simultaneously, and the map thread will\n        complete once all of the sub-threads are complete. If you\n        replace the <code>Parallel</code> parameter with\n        <code>Serial</code>, the map will wait for each search to\n        fully complete before issuing the next one.\n      </blockquote>")))
 (idp9244128
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        A single connection isn't that interesting from a concurrency\n        perspective. Luckily, Async makes it very easy to run multiple\n        parallel searches:\n      </blockquote>")))
 (idp9243168
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Let's actually use the search function to run a real query now.\n        The fragment above spawns a single search, and then fires up the\n        Async scheduler. The scheduler is where all the work happens,\n        and must be started in every application that uses Async.\n        Without it, logging won't be output, nor will blocked functions\n        ever wake up. When the scheduler is active, it is waiting for\n        incoming I/O events and waking up function callbacks that were\n        sleeping on that particular file descriptor or timeout.\n      </blockquote>")))
 (idp9240336
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        In this case, the HTTP body probably isn't very large, so we\n        just iterate over the Pipe's contents until we have the full\n        HTTP body in a <code>Buffer.t</code>. Once the full body\n        has been retrieved into our buffer, the next callback passes it\n        through the JSON parser and returns a human-readable string of\n        the search description that DuckDuckGo gave us.\n      </blockquote>")))
 (idp9235984
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The <code>ddg_query</code> function invokes the HTTP\n        client call, and returns a tuple containing the response codes\n        and headers, and a <code>string Pipe.Reader</code>. Pipes\n        in Async are often used to transmit large amounts of data\n        between two processes or concurrent threads. The\n        <code>Cohttp</code> library creates a\n        <code>Pipe.Writer</code> which it outputs the HTTP body\n        into, and provides your application with the\n        <code>Reader</code> end.\n      </blockquote>")))
 (idp9231184
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The <code>Deferred.t</code> represents a\n        <span><em>future</em></span> value whose result is not available\n        yet. You can &quot;wait&quot; for the result by binding a\n        callback using the <code>&gt;&gt;=</code> operator (which\n        is imported when you open <code>Async.Std</code>). This is\n        the same monad pattern available in other Core libraries such as\n        <code>Option</code>, but instead of operating on optional\n        values, we are now mapping over future values. We'll come back\n        to monads later in this chapter. (<span><em>avsm</em></span>:\n        TODO xref)\n      </blockquote>")))
 (idp9228400
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        For this code, you'll need to OPAM install the\n        <code>cohttp</code> library. The\n        <code>Cohttp_async.Client</code> module executes the HTTP\n        call, and returns a status and response body wrapped. This whole\n        result is wrapped in a type you haven't seen before:\n        <code>Async.Deferred.t</code>.\n      </blockquote>")))
 (idp9226048
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Now that we've written those utility functions, let's look at\n        the Async code that performs the actual search:\n      </blockquote>")))
 (idp9220576
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Notice that we use options here instead of throwing exceptions\n        on an error. When the <code>Option</code> module is\n        opened, it provides a <code>map</code> operator\n        (<code>&gt;&gt;|</code>) which calls the bound closure if\n        the value exists. If no result is found, then the\n        <code>Yojson.Safe.to_string</code> conversion function is\n        simply ignored, and a <code>None</code> returned.\n      </blockquote>")))
 (idp9217072
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        We're expecting the DuckDuckGo response to be a record, with an\n        optional <code>Description</code> field being one of the\n        keys in the record. The\n        <code>get_definition_from_json</code> does a pattern match\n        on this, and returns an optional string if a definition is found\n        within the result.\n      </blockquote>")))
 (idp9213888
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The input <code>string</code> is parsed using\n        <code>Yojson.Safe.from_string</code> into an OCaml data\n        type. The JSON values are represented using polymorphic\n        variants, and can thus be pattern matched more easily once they\n        have been parsed by Yojson.\n      </blockquote>")))
 (idp9211136
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        There are a few non-standard extensions to JSON, so Yojson\n        exposes them as the <code>Basic</code> and\n        <code>Safe</code> sub-modules. It doesn't really matter\n        which one we pick for this simple example, so we'll go with\n        <code>Safe</code>.\n      </blockquote>")))
 (idp9208640
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        The HTTP response from DuckDuckGo is in JSON, a common (and\n        thankfully simple) format that is specified in\n        <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" target=\"_top\">RFC4627</a>.\n        There are quite a few JSON parsers available for OCaml, and\n        we've picked\n        <a href=\"http://mjambon.com/yojson.html\" target=\"_top\"><code>Yojson</code></a>\n        for this example.\n      </blockquote>")))
 (idp9206320
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        Note that the URI manipulation functions are all\n        <span><em>pure</em></span> functions which return a new URI\n        value, and never modify the input. This makes it easier to pass\n        around URI values through your application stack without fear of\n        modification.\n      </blockquote>")))
 (idp9203584
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        A <code>Uri.t</code> is constructed from the\n        <code>Uri.of_string</code> function, and a query parameter\n        <code>q</code> is added with the desired search query. The\n        library takes care of encoding the URI correctly when outputting\n        it in the network protocol.\n      </blockquote>")))
 (idp9199936
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n        You're hopefully familiar with HTTP URLs, which identify\n        endpoints across the World Wide Web. These are actually part of\n        a more general family known as Uniform Resource Identifiers\n        (URIs). The full URI specification is defined in\n        <a href=\"http://tools.ietf.org/html/rfc3986\" target=\"_top\">RFC3986</a>\n        (and is rather complicated!). Luckily, the\n        <code>ocaml-uri</code> library provides a strongly-typed\n        interface which takes care of much of the hassle.\n      </blockquote>")))
 (idp9196880
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      This code uses a couple of new libraries we haven't seen before.\n      You will need to OPAM install <code>uri</code> and\n      <code>yojson</code> (refer to chapter {{{installation}}} if\n      you need help). Let's see how to implement them first.\n    </blockquote>")))
 (idp9194752
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      Before we can make the HTTP calls, we need a couple of helper\n      functions with the following signature.\n    </blockquote>")))
 (idp9193264
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n      DuckDuckGo is a search engine with a freely available search\n      interface. A DuckDuckGo search is executed by making an HTTP\n      request to <code>api.duckduckgo.com</code>. The result comes\n      back in either JSON or XML format, depending on what was requested\n      in the original query string. Let's write some functions that\n      construct the right URI and can parse the resulting JSON.\n    </blockquote>")))
 (idp9190160
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    The <code>Async</code> OCaml library offers a hybrid model\n    that lets you write event-driven code that can block\n    <span><em>without</em></span> the complexity of preemptive threading.\n    Let's dive straight into an example to see what this looks like, and\n    then explain some of the new concepts. We're going to search for\n    definitions of English terms using the DuckDuckGo search engine.\n  </blockquote>")))
 (idp9189424
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    Event-driven systems usually only execute a single task at a time\n    and require less locking. However, the program structure can often\n    descend into a maze of event callbacks for even a simple operation\n    that blocks a few times. Code readability matters, and so we'd like\n    to avoid such spaghetti control flow.\n  </blockquote>")))
 (idp9188736
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    Both of these mechanisms have tradeoffs. Preemptive threads require\n    their own memory stacks and can be memory hungry. The operating\n    system can also arbitrarily interleave the execution of threads, and\n    so they require careful locking around shared data structures.\n  </blockquote>")))
 (idp9187936
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    You've probably used preemptive system threads before in some\n    programming languages such as Java or C#. In this model, each task\n    is usually given an operating system thread of its own. Other\n    languages such as Javascript are single-threaded, and applications\n    must register function callbacks to be triggered upon external\n    events (such as a timeout or browser click).\n  </blockquote>")))
 (idp9187296
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    Efficiency really matters here, as busy servers can often handle\n    tens of thousands of simultaneous connections. An equally important\n    concern is readable source code, where the control flow of the\n    program is obvious at a glance.\n  </blockquote>")))
 (idp9186400
  ((file concurrent-programming-with-async.html)
   (html
    "<blockquote>\n    When you start building OCaml code that interfaces with external\n    systems, you'll soon need to handle concurrent operations. Consider\n    the case of a web server sending a large file to many clients, or a\n    GUI waiting for a mouse clicks. These applications often need to\n    block while waiting for input for a particular task, and process\n    something else during that time. Meanwhile, when new data does\n    appear, the blocked task needs to be resumed as quickly as possible.\n  </blockquote>")))
 (idp7093344
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      That's it for our guided tour! There are plenty of features left\n      to touch upon and lots of details to explain, but the hope is that\n      this has given you enough of a feel for the language that you have\n      a sense as to what to expect, and will be comfortable reading\n      examples in the rest of the book.\n    </blockquote>")))
 (idp7091632
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        More work is needed to make a really usable command-line\n        programming, including a proper command-line parsing interface\n        and better error handling.\n      </blockquote>")))
 (idp7089104
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The <code>.native</code> suffix indicates that we're\n        building a native-code executable, which we'll discuss more in\n        <a href=\"files-modules-and-programs.html\">Chapter\194\16010, <i>Files, Modules and Programs</i></a>. Once the\n        build completes, we can use the resulting program like any\n        command-line utility. In this example, we can just type in a\n        sequence of numbers, one per line, hitting control-d to exit\n        when the input is complete.\n      </blockquote>")))
 (idp7087376
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        With our <code>_tags</code> file in place, we can build\n        our executable by issuing this command.\n      </blockquote>")))
 (idp7083616
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We can use <code>ocamlbuild</code> to compile the program.\n        We'll need to create a file, in the same directory as\n        <code>sum.ml</code>, called <code>_tags</code>. We\n        can put the following in <code>_tags</code> to indicate\n        that we're building against Core, and that threads should be\n        enabled, which is a required by Core.\n      </blockquote>")))
 (idp7078144
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      After <code>read_and_accumulate</code> returns, the total\n      needs to be printed. This is done using the\n      <code>printf</code> command, which provides support for\n      type-safe format strings, similar to what you'll find in a variety\n      of languages. The format string is parsed by the compiler and used\n      to determine the number and type of the remaining arguments that\n      are required for <code>printf</code>. In this case, there is\n      a single formatting directive, <code>%F</code>, so\n      <code>printf</code> expects one additional argument of type\n      <code>float</code>.\n    </blockquote>")))
 (idp7074272
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      This is our first use of OCaml's input and output routines. The\n      function <code>read_and_accumulate</code> uses\n      <code>In_channel.input_line</code> to read in lines one by\n      one from the standard input, adding each number to its accumulated\n      sum as it goes. Note that <code>input_line</code> returns an\n      optional value, with <code>None</code> indicating the end of\n      the input. Note that <code>read_and_accumulate</code> is a\n      recursive function, invoking itself to read the next line, until\n      the last line is reached.\n    </blockquote>")))
 (idp7072016
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Here's the code, which you can save in a file called\n      <code>sum.ml</code>.\n    </blockquote>")))
 (idp7071360
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've played with the basic features of the language using\n      the toplevel. Now we'll create a simple, complete stand-along\n      program that does something useful: sum up a list of numbers read\n      in from the UNIX standard input.\n    </blockquote>")))
 (idp7068352
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here's an example run of this code.\n      </blockquote>")))
 (idp7067088
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note that the semi-colon after the first array assignment\n        doesn't terminate the scope of the let-binding, so the variable\n        <code>j</code> remains in scope until the end of the body\n        of the for loop.\n      </blockquote>")))
 (idp7061840
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Along with mutable data structures, OCaml gives you constructs\n        like <code>while</code> and <code>for</code> loops\n        for interacting with them. Here, for example, is a piece of\n        imperative code for permuting an array. Here, we use the\n        <code>Random</code> module as our source of randomness.\n        (<code>Random</code> starts out with a deterministic seed,\n        but you can call <code>Random.self_init</code> to get a\n        new random seed chosen.)\n      </blockquote>")))
 (idp7060256
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        A ref is really just an example of a mutable record, but in\n        practice, it's the standard way of dealing with a single mutable\n        value in a computation.\n      </blockquote>")))
 (idp7058368
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        There are a handful of useful functions and operators defined\n        for refs to make them more convenient to work with.\n      </blockquote>")))
 (idp7056112
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We can declare a single mutable value by using a\n        <code>ref</code>, which is a record type with a single\n        mutable field that is defined in the standard library.\n      </blockquote>")))
 (idp7052320
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here's an example of <code>create</code> and\n        <code>update</code> in action.\n      </blockquote>")))
 (idp7048480
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        If it doesn't convey any information, then what is\n        <code>unit</code> good for? Most of the time,\n        <code>unit</code> acts as a placeholder. Thus, we use\n        <code>unit</code> for the return value of a function like\n        <code>update</code> that operates by side effect rather\n        than by returning a value, and for the argument to a function\n        like <code>create</code> that doesn't require any\n        information to be passed into it in order to run.\n      </blockquote>")))
 (idp7044176
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        A new and somewhat odd type has cropped up in this example:\n        <code>unit</code>. What makes <code>unit</code>\n        different is that there is only one value of type\n        <code>unit</code>, which is written <code>()</code>.\n        Because <code>unit</code> has only one inhabitant, a value\n        of type <code>unit</code> can't convey any information.\n      </blockquote>")))
 (idp7043536
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note the use in the above code of single semi-colons to sequence\n        operations. When we were working purely functionally, this\n        wasn't necessary, but you start needing it when your code is\n        acting by side-effect.\n      </blockquote>")))
 (idp7039904
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>create</code> returns a\n        <code>running_sum</code> corresponding to the empty set,\n        and <code>update rsum x</code> changes\n        <code>rsum</code> to reflect the addition of\n        <code>x</code> to its set of samples, by updating the\n        number of samples, the sum, and the sum of squares.\n      </blockquote>")))
 (idp7037440
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        We also need functions to create and update\n        <code>running_sum</code>s:\n      </blockquote>")))
 (idp7034992
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The fields in <code>running_sum</code> are designed to be\n        easy to extend incrementally, and sufficient to compute means\n        and standard deviations, as shown below.\n      </blockquote>")))
 (idp7033216
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        The array is an important mutable datastructure, but it's not\n        the only one. Records, which are immutable by default, can be\n        declared with specific fields as being mutable. Here's a small\n        example of a datastructure for storing a running statistical\n        summary of a collection of numbers. Here's the basic data\n        structure:\n      </blockquote>")))
 (idp7029744
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        the <code>.(i)</code> syntax is used to refer to an\n        element of an array, and the <code>&lt;-</code> syntax is\n        for modification. Because the elements of the array are counted\n        starting at zero, element <code>.(2)</code> is the third\n        element.\n      </blockquote>")))
 (idp7028304
  ((file a-guided-tour.html)
   (html "<blockquote>\n        Here's an example.\n      </blockquote>")))
 (idp7027376
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Perhaps the simplest mutable datastructure in OCaml is the\n        array. Arrays in OCaml are very similar to arrays in other\n        languages like C: they are fixed width, indexing starts at 0,\n        and accessing or modifying an array element is a constant-time\n        operation. Arrays are more compact in terms of memory\n        utilization than most other data structures in OCaml, including\n        lists. OCaml uses three words per element of a list, but only\n        one per element of an array.\n      </blockquote>")))
 (idp7025776
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Functional code is the default in OCaml, with variable bindings\n      and most datastructures being immutable. But OCaml also has\n      excellent support for imperative programming, including mutable\n      data structures like arrays and hashtables and control-flow\n      constructs like for and while loops.\n    </blockquote>")))
 (idp7023904
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've only written so-called <span><em>pure</em></span> or\n      <span><em>functional</em></span> code, meaning that we didn't write\n      any code that modified a variable or value after its creation.\n      This is a quite different style from\n      <span><em>imperative</em></span> programming, where computations\n      are structured as sequences of instructions that operate by\n      modifying state as they go.\n    </blockquote>")))
 (idp7018480
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      You might at this point notice that the use of\n      <code>match</code> here is reminiscent of how we used\n      <code>match</code> with <code>option</code> and\n      <code>list</code>. This is no accident:\n      <code>option</code> and <code>list</code> are really\n      just examples of variant types that happen to be important enough\n      to be defined in the standard library (and in the case of lists,\n      to have some special syntax).\n    </blockquote>")))
 (idp7011712
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The <code>|</code> character separates the different cases\n      of the variant (the first <code>|</code> is optional), and\n      each case has a tag, like <code>Circle</code>,\n      <code>Rect</code> and <code>Scene</code>, to\n      distinguish that case from the others. Here's how we might write a\n      function for testing whether a point is in the interior of some\n      element of a list of <code>scene_element</code>s.\n    </blockquote>")))
 (idp7009664
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now, imagine that you want to combine multiple objects of these\n      types together as a description of a multi-object scene. You need\n      some unified way of representing these objects together in a\n      single type. One way of doing this is using a\n      <span><em>variant</em></span> type:\n    </blockquote>")))
 (idp7007984
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      And we can of course include our newly defined types as components\n      in larger types, as in the following types, each of which is a\n      description of a different geometric object.\n    </blockquote>")))
 (idp7006512
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can also use dot-notation for accessing record fields:\n    </blockquote>")))
 (idp7004560
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can write the pattern match even more tersely, using what's\n      called <span><em>field punning</em></span>. In particular, when the\n      name of the field and the name of the variable coincide, we don't\n      have to write them both down. Thus, the magnitude function can be\n      rewritten as follows.\n    </blockquote>")))
 (idp7002976
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      And we can get access to the contents of these types using pattern\n      matching:\n    </blockquote>")))
 (idp7000512
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>point2d</code> is a <span><em>record</em></span> type,\n      which you can think of as a tuple where the individual fields are\n      named, rather than being defined positionally. Record types are\n      easy enough to construct:\n    </blockquote>")))
 (idp6998880
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      So far, we've looked only at data structures that were predefined\n      in the language, like lists and tuples. But OCaml also allows us\n      to define new datatypes. Here's a toy example of a datatype\n      representing a point in 2-dimensional space:\n    </blockquote>")))
 (idp6995024
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In OCaml, however, nulls are explicit. A value of type\n        <code>string * string</code> always actually contains two\n        two well-defined values of type <code>string</code>. If\n        you want to allow, say, the first of those, to possibly be\n        absent, then you need to change the type to something like\n        <code>string option * string</code>. As we'll see, this\n        explicitness allows the compiler to provide a great deal of help\n        in making sure you're correctly handing the possibility of\n        missing data.\n      </blockquote>")))
 (idp6993792
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Options are important because they are the standard way in OCaml\n        to encode a value that might not be there. This is different\n        from most other languages, including Java and C#, where most if\n        not all datatypes are <span><em>nullable</em></span>, meaning\n        that, whatever their type is, any given value also contains the\n        possibility of being a null value. In such languages, null is\n        lurking everywhere.\n      </blockquote>")))
 (idp6989792
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In this case, we can rewrite <code>print_log_entry</code>\n        using <code>Option.value</code>, which returns the content\n        of an option if the option is <code>Some</code>, or a\n        default value if the option is <code>None</code>.\n      </blockquote>")))
 (idp6986480
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here, we again use a <code>match</code> statement for\n        handling the two possible states of an option. It's worth noting\n        that we don't necessarily need to use an explicit\n        <code>match</code> statement in this case. We can instead\n        use some built in functions from the <code>Option</code>\n        module, which, like the <code>List</code> module for\n        lists, is a place where you can find a large collection of\n        useful functions for working with options.\n      </blockquote>")))
 (idp6983376
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        To get a value out of an option, we use pattern matching, as we\n        did with tuples and lists. Consider the following simple\n        function for printing a log entry given an optional time and a\n        message. If no time is provided (<span><em>i.e.</em></span>, if\n        the time is <code>None</code>), the current time is\n        computed and used in its place.\n      </blockquote>")))
 (idp6980320
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>Some</code> and <code>None</code> are\n        constructors, like <code>::</code> and\n        <code>[]</code> for lists, which let you build optional\n        values. You can think of an option as a specialized list that\n        can only have zero or one element.\n      </blockquote>")))
 (idp6978704
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Another common data structure in OCaml is the option. An option\n        is used to express that a value might or might not be present.\n        For example,\n      </blockquote>")))
 (idp6976128
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In the last few examples, our list processing code involved a\n          lot of recursive functions. In practice, this isn't usually\n          necessary. Most of the time, you'll find yourself happy to use\n          the iteration functions found in the <code>List</code>\n          module. But it's good to know how to use recursion when you\n          need to do something new that's not already supported.\n        </blockquote>")))
 (idp6971872
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Note that this code used another variant of the list pattern,\n          <code>[hd]</code>, to match a list with a single\n          element. We can do this to match a list with any fixed number\n          of elements, <span><em>e.g.</em></span>,\n          <code>[x;y;z]</code> will match any list with exactly\n          three elements, and will bind those elements to the variables\n          <code>x</code>, <code>y</code> and\n          <code>z</code>.\n        </blockquote>")))
 (idp6969920
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          This indicates that we're missing a case, in particular we\n          don't handle one-element lists. That's easy enough to fix by\n          adding another case to the match:\n        </blockquote>")))
 (idp6968528
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Again, the first arm of the match is the base case, and the\n          second is the inductive. Unfortunately, this code has a\n          problem. If you type it into the top-level, you'll see this\n          error:\n        </blockquote>")))
 (idp6966320
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We can introduce more complicated list patterns as well.\n          Here's a function for destuttering a list,\n          <span><em>i.e.</em></span>, for removing sequential duplicates.\n        </blockquote>")))
 (idp6964384
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Note that we had to use the <code>rec</code> keyword to\n          allow <code>sum</code> to refer to itself. And, as you\n          might imagine, the base case and inductive case are different\n          arms of the match. In particular, the base case is that of the\n          empty list, and the inductive case is that of a list of zero\n          or more elements.\n        </blockquote>")))
 (idp6962576
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          When writing recursive list functions, this separation between\n          the base cases and the inductive cases is often done using\n          pattern matching. Here's a simple example of a function that\n          sums the elements of a list.\n        </blockquote>")))
 (idp6960992
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Recursive functions, or, functions that call themselves, are\n          an important technique in OCaml and in any functional\n          language. The typical approach to designing a recursive\n          function is to separate the logic into a set of <span><em>base\n          cases</em></span>, that can be solved directly, and a set of\n          <span><em>inductive cases</em></span>, where the function\n          breaks the problem down into smaller pieces and then calls\n          itself to solve those smaller problems.\n        </blockquote>")))
 (idp6956624
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The first pattern, <code>first :: the_rest</code>,\n          covers the case where <code>languages</code> has at\n          least one element, since every list except for the empty list\n          can be written down with one or more <code>::</code>'s.\n          The second pattern, <code>[]</code>, matches only the\n          empty list. These cases are exhaustive (every list is either\n          empty, or has at least one element), and the compiler can\n          detect that exhaustiveness, which is why it doesn't spit out a\n          warning.\n        </blockquote>")))
 (idp6954784
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Note that we included a comment in the above code. OCaml\n          comments are bounded by <code>(*</code> and\n          <code>*)</code>, and can be nested arbitrarily and cover\n          multiple lines.\n        </blockquote>")))
 (idp6951776
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here's a new version of\n          <code>my_favorite_language</code> that uses\n          <code>match</code>, and doesn't trigger a compiler\n          warning.\n        </blockquote>")))
 (idp6948352
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          A <code>match</code> statement is a kind of juiced-up\n          version of the switch statement found in <code>C</code>\n          and <code>Java</code>. It essentially lets you list a\n          sequence of patterns (separated by <code>|</code>\n          characters --- the one before the first case is optional), and\n          the compiler then dispatches to the code following the first\n          matched pattern. And, as we've already seen, we can name new\n          variables in our patterns that correspond to sub-structures of\n          the value being matched.\n        </blockquote>")))
 (idp6947168
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          You can avoid these warnings, and more importantly make sure\n          that your code actually handles all of the possible cases, by\n          using a <code>match</code> statement instead.\n        </blockquote>")))
 (idp6944720
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The warning comes because the compiler can't be certain that\n          the pattern match won't lead to a runtime error. Indeed, the\n          warning gives an example of a pattern that won't match, the\n          empty list, <code>[]</code>. We can see this in action\n          below.\n        </blockquote>")))
 (idp6942832
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          If you try the above example in the toplevel, however, you'll\n          see that it spits out an error:\n        </blockquote>")))
 (idp6940448
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          By pattern matching using <code>::</code>, we've broken\n          off the first element of <code>languages</code> from the\n          rest of the list. If you know Lisp or Scheme, what we've done\n          is the equivalent of using <code>car</code> to grab the\n          first element of a list.\n        </blockquote>")))
 (idp6937696
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The elements of a list can be accessed through\n          pattern-matching. List patterns are based on the two list\n          constructors, <code>[]</code> and <code>::</code>.\n          Here's a simple example.\n        </blockquote>")))
 (idp6933344
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          The bracket notation for lists is really just syntactic sugar\n          for <code>::</code>. Thus, the following declarations\n          are all equivalent. Note that <code>[]</code> is used to\n          represent the empty list.\n        </blockquote>")))
 (idp6931952
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here, we're creating a new extended list, not changing the\n          list we started with, as you can see below.\n        </blockquote>")))
 (idp6929824
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In addition to constructing lists using brackets, we can use\n          the operator <code>::</code> for adding elements to the\n          front of a list.\n        </blockquote>")))
 (idp6927328
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We'll learn more about labeled arguments and why they're\n          important in\n          <a href=\"variables-and-functions.html\">Chapter\194\1603, <i>Variables and Functions</i></a>.\n        </blockquote>")))
 (idp6924208
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          In this example, the function <code>String.length</code>\n          is passed using under the <span><em>labeled\n          argument</em></span> <code>~f</code>. Labels allow you to\n          specify function arguments by name rather than by position. As\n          you can see below, we can change the order of labeled\n          arguments without changing the function's behavior.\n        </blockquote>")))
 (idp6922352
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>List.map</code> takes two arguments: a list, and a\n          function for transforming the elements of that list. Note that\n          <code>List.map</code> creates a new list and does not\n          modify the original.\n        </blockquote>")))
 (idp6920944
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Here's something a little more complicated. We can compute the\n          list of the lengths of each language as follows.\n        </blockquote>")))
 (idp6918816
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          OCaml comes with a <code>List</code> module that has a\n          rich collection of functions for working with lists. We can\n          access values from within a module by using dot-notation.\n          Here, for example, is how we compute the length of a list.\n        </blockquote>")))
 (idp6915328
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Note that you can't mix elements of different types on the same\n        list, as we did with tuples.\n      </blockquote>")))
 (idp6913696
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Where tuples let you combine a fixed number of items,\n        potentially of different types, lists let you hold any number of\n        items of the same type. For example:\n      </blockquote>")))
 (idp6912112
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This is just a first taste of pattern matching. Pattern matching\n        is a pervasive tool in OCaml, and as you'll see, it has\n        surprising power.\n      </blockquote>")))
 (idp6909808
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Pattern matching can also show up in function arguments. Here's\n        a function for computing the distance between two points on the\n        plane, where each point is represented as a pair of\n        <code>float</code>s. The pattern matching syntax lets us\n        get at the values we need with a minimum of fuss.\n      </blockquote>")))
 (idp6906720
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Here, the <code>(x,y)</code> on the left-hand side of the\n        <code>let</code> is the pattern. This pattern lets us mint\n        the new variables <code>x</code> and <code>y</code>,\n        each bound to different components of the value being matched.\n        Note that the same syntax is used both for constructing and for\n        pattern-matching on tuples.\n      </blockquote>")))
 (idp6905216
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        You can extract the components of a tuple using OCaml's\n        pattern-matching syntax. For example:\n      </blockquote>")))
 (idp6902240
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        For the mathematically inclined, the <code>*</code>\n        character is used because the set of all pairs of type\n        <code>t * s</code> corresponds to the Cartesian product of\n        the set of elements of type <code>t</code> and the set of\n        elements of type <code>s</code>.\n      </blockquote>")))
 (idp6898096
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        So far we've encountered a handful of basic types like\n        <code>int</code>, <code>float</code> and\n        <code>string</code> as well as function types like\n        <code>string -&gt; int</code>. But we haven't yet talked\n        about any data structures. We'll start by looking at a\n        particularly simple data structure, the tuple. You can create a\n        tuple by joining values together with a comma:\n      </blockquote>")))
 (idp184320
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        but this code works fine, even though it contains an branch that\n        would throw an exception if it were ever reached.\n      </blockquote>")))
 (idp182128
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        One important distinction is that type errors will stop you\n        whether or not the offending code is ever actually executed.\n        Thus, you get an error from typing in this code:\n      </blockquote>")))
 (idp180640
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        are compile-time errors, whereas an error that can't be caught\n        by the type system, like division by zero, leads to a runtime\n        exception.\n      </blockquote>")))
 (idp178720
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Working in the top-level somewhat obscures the difference\n        between run-time and compile time errors, but that difference is\n        still there. Generally, type errors, like this one:\n      </blockquote>")))
 (idp6879840
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        There's a big difference in OCaml (and really in any compiled\n        language) between errors that are caught at compile time and\n        those that are caught at run-time. It's better to catch errors\n        as early as possible in the development process, and compilation\n        time is best of all.\n      </blockquote>")))
 (idp6874080
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In this example, <code>big_number</code> requires that\n        <code>'a</code> be of type <code>int</code>, whereas\n        <code>&quot;short&quot;</code> and\n        <code>&quot;loooooong&quot;</code> require that\n        <code>'a</code> be of type <code>string</code>, and\n        they can't all be right at the same time. This kind of\n        genericity is called <span><em>parametric\n        polymorphism</em></span>, and is very similar to generics in C#\n        and Java.\n      </blockquote>")))
 (idp6868816
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Both <code>long_string</code> and\n        <code>big_number</code> are functions, and each is passed\n        to <code>first_if_true</code> with two other arguments of\n        the appropriate type (strings in the first example, and integers\n        in the second). But we can't mix and match two different\n        concrete types for <code>'a</code> in the same use of\n        <code>first_if_true</code>.\n      </blockquote>")))
 (idp6867392
  ((file a-guided-tour.html)
   (html "<blockquote>\n        And we can also write:\n      </blockquote>")))
 (idp6865952
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        This genericity means that we can write:\n      </blockquote>")))
 (idp6859968
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        we see that rather than choose a single concrete type, OCaml has\n        introduced a <span><em>type variable</em></span>\n<code>'a</code> to express that the type is generic. In\n        particular, the type of the <code>test</code> argument is\n        <code>('a -&gt; bool)</code>, which means that test is a\n        one-argument function whose return value is\n        <code>bool</code>, and whose argument could be of any type\n        <code>'a</code>. But, whatever type <code>'a</code>\n        is, it has to be the same as the type of the other two\n        arguments, <code>x</code> and <code>y</code>.\n      </blockquote>")))
 (idp6850864
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>first_if_true</code> takes as its arguments a\n        function <code>test</code>, and two values,\n        <code>x</code> and <code>y</code>, where\n        <code>x</code> is to be returned if\n        <code>test x</code> evaluates to <code>true</code>,\n        and <code>y</code> otherwise. So what's the type of\n        <code>first_if_true</code>? There are no obvious clues\n        such as arithmetic operators or literals to tell you what the\n        type of <code>x</code> and <code>y</code> are. That\n        makes it seem like one could use this\n        <code>first_if_true</code> on values of any type. Indeed,\n        if we look at the type returned by the toplevel:\n      </blockquote>")))
 (idp6849456
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Sometimes, there isn't enough information to fully determine the\n        concrete type of a given value. Consider this function.\n      </blockquote>")))
 (idp296928
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        In the above, we've marked every argument to the function with\n        its type, with the final annotation indicating the type of the\n        return value. Such type annotations can actually go around any\n        value in an OCaml program, and can be useful for figuring out\n        why a given program is failing to compile.\n      </blockquote>")))
 (idp294016
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Over time, you'll build a rough intuition for how the OCaml\n        inference engine works, which makes it easier to reason through\n        your programs. One way of making it easier to understand the\n        types is to add explicit type annotations. These annotations\n        never change the behavior of an OCaml program, but they can\n        serve as useful documentation, as well as catch unintended type\n        changes. Here's an annotated version of\n        <code>sum_if_true</code>:\n      </blockquote>")))
 (idp292768
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        Together, that nails down the the types of all the variables,\n        which determines the overall type of\n        <code>sum_if_true</code>.\n      </blockquote>")))
 (idp290688
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n            The fact that <code>+</code> returns an int implies\n            that the return value of <code>sum_if_true</code> must\n            be int.\n          </blockquote>")))
 (idp287136
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>test x</code> is used as the condition in an\n            <code>if</code> statement, so the return type of\n            <code>test</code> must be <code>bool</code>.\n          </blockquote>")))
 (idp282144
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n<code>test</code> is passed <code>x</code> as an\n            argument. Since <code>x</code> has type\n            <code>int</code>, the input type of\n            <code>test</code> must be <code>int</code>.\n          </blockquote>")))
 (idp276464
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n            OCaml requires that both arms of an <code>if</code>\n            statement return the same type, so the expression\n            <code>if test x then x else 0</code> requires that\n            <code>x</code> must be the same type as\n            <code>0</code>, which is <code>int</code>. By\n            the same logic we can conclude that <code>y</code> has\n            type <code>int</code>.\n          </blockquote>")))
 (idp274688
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As an example, let's walk through the process of inferring the\n        type of <code>sum_if_true</code>.\n      </blockquote>")))
 (idp273632
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        OCaml determines the type of an expression using a technique\n        called <span><em>type-inference</em></span>, by which it infers\n        the type of a given expression based on what it already knows\n        about the types of other related variables, and on constraints\n        on the types that arise from the structure of the code.\n      </blockquote>")))
 (idp429504
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n        As the types we encounter get more complicated, you might ask\n        yourself how OCaml is able to figure them out, given that we\n        didn't write down any explicit type information.\n      </blockquote>")))
 (idp426512
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      If we look at the inferred type signature in detail, we see that\n      the first argument is a function that takes an int and returns a\n      boolean, and that the remaining two arguments are integers. Here's\n      an example of this function in action.\n    </blockquote>")))
 (idp424656
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can even write functions that take other functions as\n      arguments. Here's an example of a function that takes three\n      arguments: a test function and two integer arguments. The function\n      returns the sum of the integers that pass the test.\n    </blockquote>")))
 (idp422848
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      describes a function that takes two <code>int</code>\n      arguments and returns a <code>float</code>.\n    </blockquote>")))
 (idp379840
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The notation for the type-signature of a multi-argument functions\n      may be a little surprising at first, but we'll explain where it\n      comes from when we get to function currying in\n      <a href=\"variables-and-functions.html\">Chapter\194\1603, <i>Variables and Functions</i></a>. For the\n      moment, think of the arrows as separating different arguments of\n      the function, with the type after the final arrow being the return\n      value of the function. Thus,\n    </blockquote>")))
 (idp4984928
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now that we're creating more interesting values like functions,\n      the types have gotten more interesting too.\n      <code>int -&gt; int</code> is a function type, in this case\n      indicating a function that takes an <code>int</code> and\n      returns an <code>int</code>. We can also write functions\n      that take multiple arguments.\n    </blockquote>")))
 (idp3682832
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      When using <code>let</code> to define a function, the first\n      identifier after the <code>let</code> is the function name,\n      and each subsequent identifier is a different argument to the\n      function. Thus, <code>square</code> is a function with a\n      single argument.\n    </blockquote>")))
 (idp5597904
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      The <code>let</code> syntax can also be used for creating\n      functions:\n    </blockquote>")))
 (idp4839584
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      After a new variable is created, the toplevel tells us the name of\n      the variable, in addition to its type and value.\n    </blockquote>")))
 (idp3947280
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      We can also create variables to name the value of a given\n      expression, using the <code>let</code> syntax.\n    </blockquote>")))
 (idp4758912
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          OCaml carefully distinguishes between\n          <code>float</code>, the type for floating point numbers\n          and <code>int</code>. The types have different literals\n          (<code>6.</code> instead of <code>6</code>) and\n          different infix operators (<code>+.</code> instead of\n          <code>+</code>), and OCaml doesn't do any automated\n          casting between the types. This can be a bit of a nuisance,\n          but it has its benefits, since it prevents some kinds of bugs\n          that arise in other languages due to unexpected differences\n          between the behavior of <code>int</code> and\n          <code>float</code>.\n        </blockquote>")))
 (idp5383632
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          Function arguments are separated by spaces, instead of by\n          parenthesis and commas, which is more like the UNIX shell than\n          C or Java.\n        </blockquote>")))
 (idp5104144
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          After evaluating an expression, the toplevel spits out both\n          the type of the result and the result itself.\n        </blockquote>")))
 (idp5138272
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n          We needed to type <code>;;</code> in order to tell the\n          toplevel that it should evaluate an expression. This is a\n          peculiarity of the toplevel that is not required in\n          stand-alone programs.\n        </blockquote>")))
 (idp3828224
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      By and large, this is pretty similar to what you'd find in any\n      programming language, but there are a few things that jump right\n      out at you.\n    </blockquote>")))
 (idp2963040
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Now that we have Core open, let's try a few simple numerical\n      calculations.\n    </blockquote>")))
 (idp5089808
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n      Let's spin up the toplevel and open the\n      <code>Core.Std</code> module to get access to Core's\n      libraries. Don't forget to open <code>Core.Std</code>, since\n      without it, many of the examples below will fail.\n    </blockquote>")))
 (idp3886576
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    You can exit utop by pressing <code>control-D</code> and\n    return.\n  </blockquote>")))
 (idp5597648
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    Before proceeding, make sure you have the Core library installed.\n    You can do this easily via the OPAM package manager, which is\n    explained in <a href=\"installation.html\">Chapter\194\16021, <i>Installation</i></a>. In a\n    nutshell, you need to:\n  </blockquote>")))
 (idp5369008
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    You should have a working toplevel as you go through this chapter,\n    so you can try out the examples as you go. There is a\n    zero-configuration browser-based toplevel that you can use for this,\n    which you can find here:\n  </blockquote>")))
 (idp3452896
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    We'll present this guided tour using the <code>utop</code>\n    OCaml toplevel, an interactive shell that lets you type in\n    expressions and evaluate them interactively. When you get to the\n    point of running real programs, you'll want to leave the toplevel\n    behind, but it's a great tool for getting to know the language.\n  </blockquote>")))
 (idp4368624
  ((file a-guided-tour.html)
   (html
    "<blockquote>\n    This chapter gives an overview of OCaml by walking through a series\n    of small examples that cover most of the major features of the\n    language. This should give a sense of what OCaml can do, without\n    getting too deep in any one topic.\n  </blockquote>"))))
