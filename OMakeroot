open build/OCaml
DefineCommandVars()

.PHONY: lib clean app \
        install_lib uninstall_lib

################################################################################
# General Project Information
PROJECT = rwo
VERSION = dev

if $(test -e .git)
  GIT_COMMIT = 'Some "$(shell git rev-parse HEAD)"'
  export
else
  GIT_COMMIT = 'None'
  export

LIB_NAME = $(PROJECT)
LIB_MODULES[] =
  $(removesuffix $(basename $(ls lib/*.ml)))
  $(removesuffix $(removesuffix $(basename $(ls lib/*.ml.m4))))
LIB_PACKAGES = core async sexplib.syntax \
               netstring cow cow.syntax \
               compiler-libs.toplevel oloop

APP_NAME = $(PROJECT)
APP_MODULES[] = $(removesuffix $(basename $(ls app/*.ml)))
APP_PACKAGES = $(LIB_PACKAGES)

HTML_CHAPTER_FILES[] = $(basename $(ls book/[0-9][0-9]*.html))
HTML_FILES[] =
  $(HTML_CHAPTER_FILES)
  index.html
  faqs.html
  install.html
  toc.html

################################################################################
# Build Parameters
USE_OCAMLFIND = true
if $(not $(OCAMLFIND_EXISTS))
   eprintln(Required package ocamlfind not found.)
   exit 1

NATIVE_ENABLED = false #$(OCAMLOPT_EXISTS)
BYTE_ENABLED = $(OCAMLC_EXISTS)

OCAMLFLAGS = -bin-annot -annot -w A-4-33-40-41-42-44-45-48 -thread -safe-string -short-paths
OCAMLCFLAGS =
OCAMLOPTFLAGS =
OCAML_LINK_FLAGS = -linkpkg
OCAML_BYTE_LINK_FLAGS =
OCAML_NATIVE_LINK_FLAGS =
OCAMLFINDFLAGS = -syntax camlp4o

################################################################################
# Sub-directories
.SUBDIRS: .
  mkdir -p _build/lib
  mkdir -p _build/app
  mkdir -p _build/site
  vmount(-l, lib/, _build/lib/)
  vmount(-l, app/, _build/app/)

  ##############################################################################
  # Library
  .SUBDIRS: _build/lib
    OCAMLPACKS[] = $(LIB_PACKAGES)

    %.ml: %.ml.m4 :value: $(GIT_COMMIT)
      m4 -D GIT_COMMIT=$(GIT_COMMIT) $< > $@

    lib: $(OCamlLibrary $(LIB_NAME), $(LIB_MODULES))

    .DEFAULT: lib


  ##############################################################################
  # Command Line App
  .SUBDIRS: _build/app
    OCAML_LIBS = ../lib/$(LIB_NAME)
    OCAMLINCLUDES += $(dir ../lib/)
    OCAMLPACKS[] = $(APP_PACKAGES)

    app: $(OCamlProgram $(APP_NAME), $(APP_MODULES))

    .DEFAULT: app


  ##############################################################################
  # HTML Book
  .SUBDIRS: _build/site

    foreach(file => ..., $(HTML_CHAPTER_FILES))
      $(file): $(ROOT)/book/$(file) ../app/$(APP_NAME)
        if $(defined PYGMENTIZE)
          $(ROOT)/_build/app/$(APP_NAME) build chapter -pygmentize -o ./ -repo-root $(ROOT) $<
        else
          $(ROOT)/_build/app/$(APP_NAME) build chapter -o ./ -repo-root $(ROOT) $<

    index.html: ../app/$(APP_NAME)
      $(ROOT)/_build/app/$(APP_NAME) build frontpage -o ./ -repo-root $(ROOT)

    faqs.html: $(ROOT)/book/faqs.html ../app/$(APP_NAME)
      $(ROOT)/_build/app/$(APP_NAME) build faqs -o ./ -repo-root $(ROOT)

    install.html: $(ROOT)/book/install.html ../app/$(APP_NAME)
      $(ROOT)/_build/app/$(APP_NAME) build install -o ./ -repo-root $(ROOT)

    toc.html: ../app/$(APP_NAME)
      $(ROOT)/_build/app/$(APP_NAME) build toc -o ./ -repo-root $(ROOT)

    .DEFAULT: $(HTML_FILES)
      rsync -av $(ROOT)/book/images $(ROOT)/book/css $(ROOT)/book/js ./


################################################################################
# Install and Uninstall

if $(not $(defined OPAM_PACKAGE_NAME))
  OPAM_PACKAGE_NAME = OCaml-Book
  export

OCAMLFIND_PACKAGE_NAME = $(OPAM_PACKAGE_NAME)

_build/META: :value: $(VERSION)
  echo version = \"$(VERSION)\" > $@
  echo "archive(byte) = \"$(LIB_NAME).cma\"" >> $@
  echo "requires = \"$(LIB_PACKAGES)\"" >> $@

install_lib: uninstall_lib _build/META
  ocamlfind install $(OCAMLFIND_PACKAGE_NAME) \
    _build/META \
    _build/lib/*.cm[aix]

uninstall_lib:
  ocamlfind remove $(OCAMLFIND_PACKAGE_NAME)

$(OPAM_PACKAGE_NAME).install:
  echo $"bin: [" > $@
  echo "  "\"?_build/app/$(APP_NAME).run\" {\"$(APP_NAME)\"} >> $@
  echo "  "\"?_build/app/$(APP_NAME).opt\" {\"$(APP_NAME)\"} >> $@
  echo $"]" >> $@


################################################################################
# Clean Up
clean:
  rm -rf _build $(OPAM_PACKAGE_NAME).install numbers.txt
  rm -rf OMakefile.omc OMakeroot.omc .omakedb .omakedb.lock

