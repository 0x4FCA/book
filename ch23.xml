<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="the-compiler-backend-byte-code-and-native-code">
  <title>The Compiler Backend: Bytecode and Native code</title>

  <para>Once OCaml has passed the type checking stage, it can stop emitting
  syntax and type errors and begin the process of compiling the well-formed
  modules into executable code.</para>

  <para>In this chapter, we'll cover the following topics:</para>

  <itemizedlist>
    <listitem>
      <para>The untyped intermediate lambda code where pattern matching is
      optimized</para>
    </listitem>

    <listitem>
      <para>The bytecode <command moreinfo="none">ocamlc</command> compiler
      and <command moreinfo="none">ocamlrun</command> interpreter</para>
    </listitem>

    <listitem>
      <para>The native code <command moreinfo="none">ocamlopt</command> code
      generator, and debugging and profiling native code</para>
    </listitem>
  </itemizedlist>

  <sect1 id="the-untyped-lambda-form">
    <title>The Untyped Lambda Form</title>

    <para>The first code generation phase eliminates all the static type
    information into a simpler intermediate <emphasis>lambda form</emphasis>.
    The lambda form discards higher-level constructs such as modules and
    objects and replaces them with simpler values such as records and function
    pointers. Pattern matches are also analyzed and compiled into highly
    optimized automata.<indexterm class="singular">
        <primary>lambda form code</primary>

        <secondary>basics of</secondary>
      </indexterm><indexterm class="startofrange" id="CPuntype">
        <primary>compilation process</primary>

        <secondary>untyped lambda form</secondary>
      </indexterm></para>

    <para>The lambda form is the key stage that discards the OCaml type information and maps the
      source code to the runtime memory model described in <xref
        linkend="memory-representation-of-values"/>. This stage also performs some optimizations,
      most notably converting pattern-match statements into more optimized but low-level
      statements.</para>

    <sect2 id="pattern-matching-optimization">
      <title>Pattern Matching Optimization</title>

      <para>The compiler dumps the lambda form in an s-expression syntax if you add the <phrase
          role="keep-together"><literal moreinfo="none">-dlambda</literal></phrase> directive to the
        command line. Let's use this to learn more about how the OCaml pattern-matching engine works
        by building three different pattern matches and comparing their lambda forms.<indexterm
          class="singular">
          <primary>pattern matching</primary>
          <secondary>optimization in lambda form code</secondary>
        </indexterm><indexterm class="singular">
          <primary>lambda form code</primary>
          <secondary>pattern matching optimization</secondary>
        </indexterm></para>

      <para>Let's start by creating a straightforward exhaustive pattern match
      using four normal variants:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/pattern_monomorphic_large.ml">OCaml</ulink></para>

      <programlisting format="linespecific" language="ocaml">type t = | Alice | Bob | Charlie | David

let test v =
  match v with
  | Alice   -&gt; 100
  | Bob     -&gt; 101
  | Charlie -&gt; 102
  | David   -&gt; 103</programlisting>

      <para>The lambda output for this code looks like this:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/lambda_for_pattern_monomorphic_large.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -dlambda -c pattern_monomorphic_large.ml 2&gt;&amp;1</userinput>
<computeroutput moreinfo="none">(setglobal Pattern_monomorphic_large!</computeroutput>
<computeroutput moreinfo="none">  (let</computeroutput>
<computeroutput moreinfo="none">    (test/1013</computeroutput>
<computeroutput moreinfo="none">       (function v/1014</computeroutput>
<computeroutput moreinfo="none">         (switch* v/1014</computeroutput>
<computeroutput moreinfo="none">          case int 0: 100</computeroutput>
<computeroutput moreinfo="none">          case int 1: 101</computeroutput>
<computeroutput moreinfo="none">          case int 2: 102</computeroutput>
<computeroutput moreinfo="none">          case int 3: 103)))</computeroutput>
<computeroutput moreinfo="none">    (makeblock 0 test/1013)))</computeroutput></programlisting>

      <para>It's not important to understand every detail of this internal
      form, and it is explicitly undocumented since it can change across
      compiler revisions. Despite these caveats, some interesting points
      emerge from reading it:</para>

      <itemizedlist>
        <listitem>
          <para>There are no mention of modules or types any more. Global
          values are created via <literal moreinfo="none">setglobal</literal>,
          and OCaml values are constructed by <literal
          moreinfo="none">makeblock</literal>. The blocks are the runtime
          values you should remember from <xref
          linkend="memory-representation-of-values"/>.</para>
        </listitem>

        <listitem>
          <para>The pattern match has turned into a switch case that jumps to the right case
            depending on the header tag of <literal moreinfo="none">v</literal>. Recall that
            variants without parameters are stored in memory as integers in the order which they
            appear. The pattern-matching engine knows this and has transformed the pattern into an
            efficient jump table.</para>
        </listitem>

        <listitem>
          <para>Values are addressed by a unique name that distinguishes shadowed values by
            appending a number (e.g., <literal moreinfo="none">v/1014</literal>). The type safety
            checks in the earlier phase ensure that these low-level accesses never violate runtime
            memory safety, so this layer doesn't do any dynamic checks. Unwise use of unsafe
            features such as the <literal moreinfo="none">Obj.magic</literal> module can still
            easily induce crashes at this level.</para>
        </listitem>
      </itemizedlist>

      <para>The compiler computes a jump table in order to handle all four
      cases. If we drop the number of variants to just two, then there's no
      need for the complexity of computing this table:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/pattern_monomorphic_small.ml">OCaml</ulink></para>

      <programlisting format="linespecific" language="ocaml">type t = | Alice | Bob 

let test v =
  match v with
  | Alice   -&gt; 100
  | Bob     -&gt; 101</programlisting>

      <para>The lambda output for this code is now quite different:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/lambda_for_pattern_monomorphic_small.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -dlambda -c pattern_monomorphic_small.ml 2&gt;&amp;1</userinput>
<computeroutput moreinfo="none">(setglobal Pattern_monomorphic_small!</computeroutput>
<computeroutput moreinfo="none">  (let (test/1011 (function v/1012 (if (!= v/1012 0) 101 100)))</computeroutput>
<computeroutput moreinfo="none">    (makeblock 0 test/1011)))</computeroutput></programlisting>

      <para>The compiler emits simpler conditional jumps rather than setting
      up a jump table, since it statically determines that the range of
      possible variants is small enough. Finally, let's look at the same code,
      but with polymorphic variants instead of normal variants:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/pattern_polymorphic.ml">OCaml</ulink></para>

      <programlisting format="linespecific" language="ocaml">let test v =
  match v with
  | `Alice   -&gt; 100
  | `Bob     -&gt; 101
  | `Charlie -&gt; 102
  | `David   -&gt; 103
  | `Eve     -&gt; 104</programlisting>

      <para>The lambda form for this also shows up the runtime representation
      of polymorphic variants:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/lambda_for_pattern_polymorphic.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -dlambda -c pattern_polymorphic.ml 2&gt;&amp;1</userinput>
<computeroutput moreinfo="none">(setglobal Pattern_polymorphic!</computeroutput>
<computeroutput moreinfo="none">  (let</computeroutput>
<computeroutput moreinfo="none">    (test/1008</computeroutput>
<computeroutput moreinfo="none">       (function v/1009</computeroutput>
<computeroutput moreinfo="none">         (if (!= v/1009 3306965)</computeroutput>
<computeroutput moreinfo="none">           (if (&gt;= v/1009 482771474) (if (&gt;= v/1009 884917024) 100 102)</computeroutput>
<computeroutput moreinfo="none">             (if (&gt;= v/1009 3457716) 104 103))</computeroutput>
<computeroutput moreinfo="none">           101)))</computeroutput>
<computeroutput moreinfo="none">    (makeblock 0 test/1008)))</computeroutput></programlisting>

      <para>We mentioned in <xref linkend="variants"/> that pattern matching over polymorphic
        variants is slightly less efficient, and it should be clearer why this is the case now.
        Polymorphic variants have a runtime value that's calculated by hashing the variant name, and
        so the compiler can't use a jump table as it does for normal variants. Instead, it creates a
        decision tree that compares the hash values against the input variable in as few comparisons
        as possible.<indexterm class="singular">
          <primary>pattern matching</primary>
          <secondary>fundamental algorithms in</secondary>
        </indexterm><indexterm class="singular">
          <primary>polymorphic variant types</primary>
          <secondary sortas="pattern matching">vs. pattern matching</secondary>
        </indexterm></para>

      <note>
        <title>Learning More About Pattern Matching Compilation</title>

        <para>Pattern matching is an important part of OCaml programming.
        You'll often encounter deeply nested pattern matches over complex data
        structures in real code. A good paper that describes the fundamental
        algorithms implemented in OCaml is <ulink
        url="http://dl.acm.org/citation.cfm?id=507641">"Optimizing pattern
        matching"</ulink> by Fabrice Le Fessant and Luc Maranget.</para>

        <para>The paper describes the backtracking algorithm used in classical pattern matching
          compilation, and also several OCaml-specific optimizations, such as the use of
          exhaustiveness information and control flow optimizations via static exceptions.</para>

        <para>It's not essential that you understand all of this just to use
        pattern matching, of course, but it'll give you insight as to why
        pattern matching is such a lightweight language construct to use in
        OCaml code.</para>
      </note>
    </sect2>

    <sect2 id="benchmarking-pattern-matching">
      <title>Benchmarking Pattern Matching</title>

      <para>Let's benchmark these three pattern-matching techniques to quantify their runtime costs
        more accurately. The <literal moreinfo="none">Core_bench</literal> module runs the tests
        thousands of times and also calculates statistical variance of the results. You'll need to
          <literal moreinfo="none">opam install core_bench</literal> to get the library:<indexterm
          class="singular">
          <primary>pattern matching</primary>
          <secondary>benchmarking of</secondary>
        </indexterm><indexterm class="singular">
          <primary>lambda form code</primary>
          <secondary>pattern matching benchmarking</secondary>
        </indexterm></para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-bench/bench_patterns.ml">OCaml</ulink></para>

      <programlisting format="linespecific" language="ocaml">open Core.Std
open Core_bench.Std

type t = | Alice | Bob 
type s = | A | B | C | D | E

let polymorphic_pattern () =
  let test v =
    match v with
    | `Alice   -&gt; 100
    | `Bob     -&gt; 101
    | `Charlie -&gt; 102
    | `David   -&gt; 103
    | `Eve     -&gt; 104
  in
  List.iter ~f:(fun v -&gt; ignore(test v))
    [`Alice; `Bob; `Charlie; `David]

let monomorphic_pattern_small () =
  let test v =
    match v with
    | Alice   -&gt; 100
    | Bob     -&gt; 101 in
  List.iter ~f:(fun v -&gt; ignore(test v))
    [ Alice; Bob ]

let monomorphic_pattern_large () =
  let test v =
    match v with
    | A       -&gt; 100
    | B       -&gt; 101
    | C       -&gt; 102
    | D       -&gt; 103
    | E       -&gt; 104
  in
  List.iter ~f:(fun v -&gt; ignore(test v))
    [ A; B; C; D ]

let tests = [
  "Polymorphic pattern", polymorphic_pattern;
  "Monomorphic larger pattern", monomorphic_pattern_large;
  "Monomorphic small pattern", monomorphic_pattern_small;
]

let () =
  List.map tests ~f:(fun (name,test) -&gt; Bench.Test.create ~name test)
  |&gt; Bench.make_command
  |&gt; Command.run</programlisting>

      <para>Building and executing this example will run for around 30 seconds
      by default, and you'll see the results summarized in a neat
      table:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-bench/run_bench_patterns.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">corebuild -pkg core_bench bench_patterns.native</userinput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">./bench_patterns.native -ascii</userinput>
<computeroutput moreinfo="none">Estimated testing time 30s (change using -quota SECS).</computeroutput>
<computeroutput moreinfo="none">                                                     </computeroutput>
<computeroutput moreinfo="none">  Name                         Time (ns)   % of max  </computeroutput>
<computeroutput moreinfo="none"> ---------------------------- ----------- ---------- </computeroutput>
<computeroutput moreinfo="none">  Polymorphic pattern              31.51     100.00  </computeroutput>
<computeroutput moreinfo="none">  Monomorphic larger pattern       29.19      92.62  </computeroutput>
<computeroutput moreinfo="none">  Monomorphic small pattern        16.25      51.57  </computeroutput>
<computeroutput moreinfo="none">                                                     </computeroutput></programlisting>

      <para>These results confirm the performance hypothesis that we obtained earlier by inspecting
        the lambda code. The shortest running time comes from the small conditional pattern match,
        and polymorphic variant pattern matching is the slowest. There isn't a hugely significant
        difference in these examples, but you can use the same techniques to peer into the innards
        of your own source code and narrow down any performance hotspots.</para>

      <para>The lambda form is primarily a stepping stone to the bytecode
      executable format that we'll cover next. It's often easier to look at
      the textual output from this stage than to wade through the native
      assembly code from compiled executables.<indexterm class="endofrange"
      startref="CPuntype"/></para>
    </sect2>
  </sect1>

  <sect1 id="generating-portable-bytecode">
    <title>Generating Portable Bytecode</title>

    <para>After the lambda form has been generated, we are very close to
    having executable code. The OCaml toolchain branches into two separate
    compilers at this point. We'll describe the bytecode compiler first, which
    consists of two pieces:<indexterm class="singular">
        <primary>OCaml toolchain</primary>

        <secondary>ocamlrun</secondary>
      </indexterm><indexterm class="singular">
        <primary>OCaml toolchain</primary>

        <secondary>ocamlc</secondary>
      </indexterm><indexterm class="singular">
        <primary>bytecode compiler</primary>

        <secondary>tools used</secondary>
      </indexterm><indexterm class="startofrange" id="CPportbyte">
        <primary>compilation process</primary>

        <secondary>portable bytecode</secondary>
      </indexterm></para>

    <variablelist>
      <varlistentry>
        <term><command moreinfo="none">ocamlc</command></term>

        <listitem>
          <para>Compiles files into a bytecode that is a close mapping to the
          lambda form</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><command moreinfo="none">ocamlrun</command></term>

        <listitem>
          <para>A portable interpreter that executes the bytecode</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The big advantage of using bytecode is simplicity, portability, and compilation speed. The
      mapping from the lambda form to bytecode is straightforward, and this results in predictable
      (but slow) execution speed.</para>

    <para>The bytecode interpreter implements a stack-based virtual machine. The OCaml stack and an
      associated accumulator store values that consist of:<indexterm class="singular">
        <primary>bytecode compiler</primary>
        <secondary>values stored by</secondary>
      </indexterm><indexterm class="singular">
        <primary>code offset values</primary>
      </indexterm><indexterm class="singular">
        <primary>block values</primary>
      </indexterm><indexterm class="singular">
        <primary>long values</primary>
      </indexterm><indexterm class="singular">
        <primary>values</primary>
        <secondary>stored by bytecode compiler</secondary>
      </indexterm></para>

    <variablelist>
      <varlistentry>
        <term>long</term>

        <listitem>
          <para>Values that correspond to an OCaml <literal
          moreinfo="none">int</literal> type</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>block</term>

        <listitem>
          <para>Values that contain the block header and a memory address with
          the data fields that contain further OCaml values indexed by an
          integer</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>code offset</term>

        <listitem>
          <para>Values that are relative to the starting code address</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The interpreter virtual machine only has seven registers in total: the program counter,
      stack pointer, accumulator, exception and argument pointers, and environment and global data.
      You can display the bytecode instructions in textual form via <literal moreinfo="none"
        >-dinstr</literal>. Try this on one of our earlier pattern-matching examples:</para>

    <para role="sourcecode"><ulink role="orm:hideurl:ital"
    url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/instr_for_pattern_monomorphic_small.out">Terminal</ulink></para>

    <programlisting format="linespecific" language="console"><prompt
        moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -dinstr pattern_monomorphic_small.ml 2&gt;&amp;1</userinput>
<computeroutput moreinfo="none">	branch L2</computeroutput>
<computeroutput moreinfo="none">L1:	acc 0</computeroutput>
<computeroutput moreinfo="none">	push</computeroutput>
<computeroutput moreinfo="none">	const 0</computeroutput>
<computeroutput moreinfo="none">	neqint</computeroutput>
<computeroutput moreinfo="none">	branchifnot L3</computeroutput>
<computeroutput moreinfo="none">	const 101</computeroutput>
<computeroutput moreinfo="none">	return 1</computeroutput>
<computeroutput moreinfo="none">L3:	const 100</computeroutput>
<computeroutput moreinfo="none">	return 1</computeroutput>
<computeroutput moreinfo="none">L2:	closure L1, 0</computeroutput>
<computeroutput moreinfo="none">	push</computeroutput>
<computeroutput moreinfo="none">	acc 0</computeroutput>
<computeroutput moreinfo="none">	makeblock 1, 0</computeroutput>
<computeroutput moreinfo="none">	pop 1</computeroutput>
<computeroutput moreinfo="none">	setglobal Pattern_monomorphic_small!</computeroutput>
<computeroutput moreinfo="none"> </computeroutput></programlisting>

    <para>The preceding bytecode has been simplified from the lambda form into
    a set of simple instructions that are executed serially by the
    interpreter.</para>

    <para>There are around 140 instructions in total, but most are just minor
    variants of commonly encountered operations (e.g., function application at
    a specific arity). You can find full details <ulink
    url="http://cadmium.x9c.fr/distrib/caml-instructions.pdf">online</ulink>.<indexterm
        class="singular">
        <primary>bytecode compiler</primary>

        <secondary>instruction set for</secondary>
      </indexterm></para>

    <note>
      <title>Where Did the Bytecode Instruction Set Come From?</title>

      <para>The bytecode interpreter is much slower than compiled native code,
      but is still remarkably performant for an interpreter without a JIT
      compiler. Its efficiency can be traced back to Xavier Leroy's
      ground-breaking work in 1990, <ulink
      url="http://hal.inria.fr/docs/00/07/00/49/PS/RT-0117.ps">"The ZINC
      experiment: An Economical Implementation of the ML
      Language".</ulink></para>

      <para>This paper laid the theoretical basis for the implementation of an instruction set for a
        strictly evaluated functional language such as OCaml. The bytecode interpreter in modern
        OCaml is still based on the ZINC model. The native code compiler uses a different model
        since it uses CPU registers for function calls instead of always passing arguments on the
        stack, as the bytecode interpreter does.</para>

      <para>Understanding the reasoning behind the different implementations
      of the bytecode interpreter and the native compiler is a very useful
      exercise for any budding language hacker.</para>
    </note>

    <sect2 id="compiling-and-linking-bytecode">
      <title>Compiling and Linking Bytecode</title>

      <para>The <command moreinfo="none">ocamlc</command> command compiles
      individual <literal moreinfo="none">ml</literal> files into bytecode
      files that have a <literal moreinfo="none">cmo</literal> extension. The
      compiled bytecode files are matched with the associated <literal
      moreinfo="none">cmi</literal> interface, which contains the type
      signature exported to other compilation units.<indexterm
          class="singular">
          <primary>bytecode compiler</primary>

          <secondary>compiling and linking code</secondary>
        </indexterm></para>

      <para>A typical OCaml library consists of multiple source files, and
      hence multiple <literal moreinfo="none">cmo</literal> files that all
      need to be passed as command-line arguments to use the library from
      other code. The compiler can combine these multiple files into a more
      convenient single archive file by using the <literal
      moreinfo="none">-a</literal> flag. Bytecode archives are denoted by the
      <literal moreinfo="none">cma</literal> extension.</para>

      <para>The individual objects in the library are linked as regular
      <literal moreinfo="none">cmo</literal> files in the order specified when
      the library file was built. If an object file within the library isn't
      referenced elsewhere in the program, then it isn't included in the final
      binary unless the <literal moreinfo="none">-linkall</literal> flag
      forces its inclusion. This behavior is analogous to how C handles object
      files and archives (<literal moreinfo="none">.o</literal> and <literal
      moreinfo="none">.a</literal>, respectively).</para>

      <para>The bytecode files are then linked together with the OCaml
      standard library to produce an executable program. The order in which
      <literal moreinfo="none">.cmo</literal> arguments are presented on the
      command line defines the order in which compilation units are
      initialized at runtime. Remember that OCaml has no single <literal
      moreinfo="none">main</literal> function like C, so this link order is
      more important than in C programs.</para>
    </sect2>

    <sect2 id="executing-bytecode">
      <title>Executing Bytecode</title>

      <para>The bytecode runtime comprises three parts: the bytecode interpreter, GC, and a set of C
        functions that implement the primitive operations. The bytecode contains instructions to
        call these C functions when required.</para>

      <para>The OCaml linker produces bytecode that targets the standard OCaml
      runtime by default, and so needs to know about any C functions that are
      referenced from other libraries that aren't loaded by default.</para>

      <para>Information about these extra libraries can be specified while
      linking a bytecode archive:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/link_dllib.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -a -o mylib.cma a.cmo b.cmo -dllib -lmylib</userinput>
</programlisting>

      <para>The <literal moreinfo="none">dllib</literal> flag embeds the
      arguments in the archive file. Any subsequent packages linking this
      archive will also include the extra C linking directive. This in turn
      lets the interpreter dynamically load the external library symbols when
      it executes the bytecode.</para>

      <para>You can also generate a complete standalone executable that
      bundles the <command moreinfo="none">ocamlrun</command> interpreter with
      the bytecode in a single binary. This is known as a <emphasis>custom
      runtime</emphasis> mode and is built as follows:<indexterm
          class="singular">
          <primary>custom runtime mode</primary>
        </indexterm></para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/link_custom.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -a -o mylib.cma -custom a.cmo b.cmo -cclib -lmylib</userinput>
</programlisting>

      <para>OCamlbuild takes care of many of these details with its built-in rules. The <literal
          moreinfo="none">%.byte</literal> rule that you've been using throughout the book builds a
        bytecode executable, and adding the <literal moreinfo="none">custom</literal> tag will
        bundle the interpreter with it, too.<indexterm class="singular">
          <primary>%.byte rule</primary>
        </indexterm></para>

      <para>The custom mode is the most similar mode to native code
      compilation, as both generate standalone executables. There are quite a
      few other options available for compiling bytecode (notably with shared
      libraries or building custom runtimes). Full details can be found in the
      <ulink
      url="http://caml.inria.fr/pub/docs/manual-ocaml/manual022.html">OCaml</ulink>.</para>
    </sect2>

    <sect2 id="embedding-ocaml-bytecode-in-c">
      <title>Embedding OCaml Bytecode in C</title>

      <para>A consequence of using the bytecode compiler is that the final link phase must be
        performed by <command moreinfo="none">ocamlc</command>. However, you might sometimes want to
        embed your OCaml code inside an existing C application. OCaml also supports this mode of
        operation via the <phrase role="keep-together"><literal moreinfo="none">-output-obj</literal></phrase>
          directive.<indexterm class="singular">
          <primary>C object files</primary>
        </indexterm></para>

      <para>This mode causes <command moreinfo="none">ocamlc</command> to output an object file
        containing the bytecode for the OCaml part of the program, as well as a <literal
          moreinfo="none">caml_startup</literal> function. All of the OCaml modules are linked into
        this object file as bytecode, just as they would be for an executable.</para>

      <para>This object file can then be linked with C code using the standard C compiler, needing
        only the bytecode runtime library (which is installed as <literal moreinfo="none"
          >libcamlrun.a</literal>). Creating an executable just requires you to link the runtime
        library with the bytecode object file. Here's an example to show how it all fits
        together.</para>

      <para>Create two OCaml source files that contain a single print
      line:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/embed_me1.ml">OCaml</ulink></para>

      <programlisting format="linespecific" language="ocaml">let () = print_endline "hello embedded world 1"</programlisting>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/embed_me2.ml">OCaml</ulink></para>

      <programlisting format="linespecific" language="ocaml">let () = print_endline "hello embedded world 2"</programlisting>

      <para>Next, create a C file to be your main entry point:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
          url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/main.c"
          >C</ulink></para>

      <programlisting format="linespecific" language="c">#include &lt;stdio.h&gt;
#include &lt;caml/alloc.h&gt;
#include &lt;caml/mlvalues.h&gt;
#include &lt;caml/memory.h&gt;
#include &lt;caml/callback.h&gt;

int 
main (int argc, char **argv)
{
  printf("Before calling OCaml\n");
  fflush(stdout);
  caml_startup (argv);
  printf("After calling OCaml\n");
  return 0;
}</programlisting>

      <para>Now compile the OCaml files into a standalone object file:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/build_embed.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">rm -f embed_out.c</userinput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -output-obj -o embed_out.o embed_me1.ml embed_me2.ml</userinput></programlisting>

      <para>After this point, you no longer need the OCaml compiler, as
      <literal moreinfo="none">embed_out.o</literal> has all of the OCaml code
      compiled and linked into a single object file. Compile an output binary
      using <command moreinfo="none">gcc</command> to test this out:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/build_embed_binary.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">gcc -fPIC -Wall -I`ocamlc -where` -L`ocamlc -where` -ltermcap -lm -ldl \</userinput>
<computeroutput moreinfo="none">  -o finalbc.native main.c embed_out.o -lcamlrun</computeroutput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">./finalbc.native</userinput>
<computeroutput moreinfo="none">Before calling OCaml</computeroutput>
<computeroutput moreinfo="none">hello embedded world 1</computeroutput>
<computeroutput moreinfo="none">hello embedded world 2</computeroutput>
<computeroutput moreinfo="none">After calling OCaml</computeroutput></programlisting>

      <para>You can inspect the commands that <command
      moreinfo="none">ocamlc</command> is invoking by adding <literal
      moreinfo="none">-verbose</literal> to the command line to help figure
      out the GCC command line if you get stuck. You can even obtain the C
      source code to the <literal moreinfo="none">-output-obj</literal> result
      by specifying a <literal moreinfo="none">.c</literal> output file
      extension instead of the <literal moreinfo="none">.o</literal> we used
      earlier:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/build_embed_c.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlc -output-obj -o embed_out.c embed_me1.ml embed_me2.ml</userinput>
</programlisting>

      <para>Embedding OCaml code like this lets you write OCaml that
      interfaces with any environment that works with a C compiler. You can
      even cross back from the C code into OCaml by using the <literal
      moreinfo="none">Callback</literal> module to register named entry points
      in the OCaml code. This is explained in detail in the <ulink
      url="http://caml.inria.fr/pub/docs/manual-ocaml/manual033.html#toc149">interfacing
      with C</ulink> section of the OCaml manual.<indexterm class="endofrange"
      startref="CPportbyte"/></para>
    </sect2>
  </sect1>

  <sect1 id="compiling-fast-native-code">
    <title>Compiling Fast Native Code</title>

    <para>The native code compiler is ultimately the tool that most production
    OCaml code goes through. It compiles the lambda form into fast native code
    executables, with cross-module inlining and additional optimization passes
    that the bytecode interpreter doesn't perform. Care is taken to ensure
    compatibility with the bytecode runtime, so the same code should run
    identically when compiled with either toolchain.<indexterm
        class="singular">
        <primary>cmi files</primary>
      </indexterm><indexterm class="singular">
        <primary>files</primary>

        <secondary>cmi files</secondary>
      </indexterm><indexterm class="singular">
        <primary>cmx files</primary>
      </indexterm><indexterm class="singular">
        <primary>files</primary>

        <secondary>cmx files</secondary>
      </indexterm><indexterm class="singular">
        <primary>o files</primary>
      </indexterm><indexterm class="singular">
        <primary>files</primary>

        <secondary>o files</secondary>
      </indexterm><indexterm class="singular">
        <primary>OCaml toolchain</primary>

        <secondary>ocamlopt</secondary>
      </indexterm><indexterm class="singular">
        <primary>native-code compiler</primary>

        <secondary>benefits of</secondary>
      </indexterm><indexterm class="startofrange" id="CPfast">
        <primary>compilation process</primary>

        <secondary>fast native code</secondary>
      </indexterm></para>

    <para>The <command moreinfo="none">ocamlopt</command> command is the
    frontend to the native code compiler and has a very similar interface to
    <command moreinfo="none">ocamlc</command>. It also accepts <literal
    moreinfo="none">ml</literal> and <literal moreinfo="none">mli</literal>
    files, but compiles them to:</para>

    <itemizedlist>
      <listitem>
        <para>A <literal moreinfo="none">.o</literal> file containing native
        object code</para>
      </listitem>

      <listitem>
        <para>A <literal moreinfo="none">.cmx</literal> file containing extra
        information for linking and cross-module optimization</para>
      </listitem>

      <listitem>
        <para>A <literal moreinfo="none">.cmi</literal> compiled interface
        file that is the same as the bytecode compiler</para>
      </listitem>
    </itemizedlist>

    <para>When the compiler links modules together into an executable, it uses
    the contents of the <literal moreinfo="none">cmx</literal> files to
    perform cross-module inlining across compilation units. This can be a
    significant speedup for standard library functions that are frequently
    used outside of their module.</para>

    <para>Collections of <literal moreinfo="none">.cmx</literal> and <literal
    moreinfo="none">.o</literal> files can also be be linked into a <literal
    moreinfo="none">.cmxa</literal> archive by passing the <literal
    moreinfo="none">-a</literal> flag to the compiler. However, unlike the
    bytecode version, you must keep the individual <literal
    moreinfo="none">cmx</literal> files in the compiler search path so that
    they are available for cross-module inlining. If you don't do this, the
    compilation will still succeed, but you will have missed out on an
    important optimization and have slower binaries.</para>

    <sect2 id="inspecting-assembly-output">
      <title>Inspecting Assembly Output</title>

      <para>The native code compiler generates assembly language that is then
      passed to the system assembler for compiling into object files. You can
      get <command moreinfo="none">ocamlopt</command> to output the assembly
      by passing the <literal moreinfo="none">-S</literal> flag to the
      compiler command line.<indexterm class="singular">
          <primary>native-code compiler</primary>

          <secondary>inspecting assembly output</secondary>
        </indexterm></para>

      <para>The assembly code is highly architecture-specific, so the following discussion assumes
        an Intel or AMD 64-bit platform. We've generated the example code using <literal
          moreinfo="none">-inline 20</literal> and <literal moreinfo="none">-nodynlink</literal>
        since it's best to generate assembly code with the full optimizations that the compiler
        supports. Even though these optimizations make the code a bit harder to read, it will give
        you a more accurate picture of what executes on the CPU. Don't forget that you can use the
        lambda code from earlier to get a slightly higher-level picture of the code if you get lost
        in the more verbose assembly.</para>

      <sect3 id="the-impact-of-polymorphic-comparison">
        <title>The impact of polymorphic comparison</title>

        <para>We warned you in <xref linkend="maps-and-hash-tables"/> that using polymorphic
          comparison is both convenient and perilous. Let's look at precisely what the difference is
          at the assembly language level now.<indexterm class="singular">
            <primary>polymorphic comparisons</primary>
          </indexterm></para>

        <para>First let's create a comparison function where we've explicitly annotated the types,
          so the compiler knows that only integers are being compared:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/compare_mono.ml">OCaml</ulink></para>

        <programlisting format="linespecific" language="ocaml">let cmp (a:int) (b:int) =
  if a &gt; b then a else b</programlisting>

        <para>Now compile this into assembly and read the resulting <literal
        moreinfo="none">compare_mono.S</literal> file. This file extension may
        be lowercase on some platforms such as Linux:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/asm_from_compare_mono.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><prompt
            moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlopt -inline 20 -nodynlink -S compare_mono.ml</userinput>
</programlisting>

        <para>If you've never seen assembly language before, then the contents
        may be rather scary. While you'll need to learn x86 assembly to fully
        understand it, we'll try to give you some basic instructions to spot
        patterns in this section. The excerpt of the implementation of the
        <literal moreinfo="none">cmp</literal> function can be found
        below:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
            url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/cmp.S"
            >Assembly</ulink></para>

        <programlisting format="linespecific" language="gas">_camlCompare_mono__cmp_1008:
        .cfi_startproc
.L101:
        cmpq    %rbx, %rax
        jle     .L100
        ret
        .align  2
.L100:
        movq    %rbx, %rax
        ret
        .cfi_endproc</programlisting>

        <para>The <literal
        moreinfo="none">_camlCompare_mono__cmp_1008</literal> is an assembly
        label that has been computed from the module name (<literal
        moreinfo="none">Compare_mono</literal>) and the function name
        (<literal moreinfo="none">cmp_1008</literal>). The numeric suffix for
        the function name comes straight from the lambda form (which you can
        inspect using <literal moreinfo="none">-dlambda</literal>, but in this
        case isn't necessary).</para>

        <para>The arguments to <literal moreinfo="none">cmp</literal> are
        passed in the <literal moreinfo="none">%rbx</literal> and <literal
        moreinfo="none">%rax</literal> registers, and compared using the
        <literal moreinfo="none">jle</literal> "jump if less than or equal"
        instruction. This requires both the arguments to be immediate integers
        to work. Now let's see what happens if our OCaml code omits the type
        annotations and is a polymorphic comparison instead:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/compare_poly.ml">OCaml</ulink></para>

        <programlisting format="linespecific" language="ocaml">let cmp a b =
  if a &gt; b then a else b</programlisting>

        <para>Compiling this code with <literal moreinfo="none">-S</literal>
        results in a significantly more complex assembly output for the same
        function:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
            url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/compare_poly_asm.S"
            >Assembly</ulink></para>

        <programlisting format="linespecific" language="gas">_camlCompare_poly__cmp_1008:
        .cfi_startproc
        subq    $24, %rsp
        .cfi_adjust_cfa_offset  24
.L101:
        movq    %rax, 8(%rsp)
        movq    %rbx, 0(%rsp)
        movq    %rax, %rdi
        movq    %rbx, %rsi
        leaq    _caml_greaterthan(%rip), %rax
        call    _caml_c_call
.L102:
        leaq    _caml_young_ptr(%rip), %r11
        movq    (%r11), %r15
        cmpq    $1, %rax
        je      .L100
        movq    8(%rsp), %rax
        addq    $24, %rsp
        .cfi_adjust_cfa_offset  -24
        ret
        .cfi_adjust_cfa_offset  24
        .align  2
.L100:
        movq    0(%rsp), %rax
        addq    $24, %rsp
        .cfi_adjust_cfa_offset  -24
        ret
        .cfi_adjust_cfa_offset  24
        .cfi_endproc</programlisting>

        <para>The <literal moreinfo="none">.cfi</literal> directives are assembler hints that
          contain Call Frame Information that lets the debugger provide more sensible backtraces,
          and they have no effect on runtime performance. Notice that the rest of the implementation
          is no longer a simple register comparison. Instead, the arguments are pushed on the stack
          (the <literal moreinfo="none">%rsp</literal> register), and a C function call is invoked
          by placing a pointer to <literal moreinfo="none">caml_greaterthan</literal> in <literal
            moreinfo="none">%rax</literal> and jumping to <literal moreinfo="none"
            >caml_c_call</literal>.<indexterm class="singular">
            <primary>backtraces</primary>
          </indexterm></para>

        <para>OCaml on x86_64 architectures caches the location of the minor
        heap in the <literal moreinfo="none">%r15</literal> register since
        it's so frequently referenced in OCaml functions. The minor heap
        pointer can also be changed by the C code that's being called (e.g.,
        when it allocates OCaml values), and so <literal
        moreinfo="none">%r15</literal> is restored after returning from the
        <literal moreinfo="none">caml_greaterthan</literal> call. Finally, the
        return value of the comparison is popped from the stack and
        returned.</para>
      </sect3>

      <sect3 id="benchmarking-polymorphic-comparison">
        <title>Benchmarking polymorphic comparison</title>

        <para>You don't have to fully understand the intricacies of assembly
        language to see that this polymorphic comparison is much heavier than
        the simple monomorphic integer comparison from earlier. Let's confirm
        this hypothesis again by writing a quick <literal
        moreinfo="none">Core_bench</literal> test with both functions:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-bench/bench_poly_and_mono.ml">OCaml</ulink></para>

        <programlisting format="linespecific" language="ocaml">open Core.Std
open Core_bench.Std

let polymorphic_compare () =
  let cmp a b = if a &gt; b then a else b in
  for i = 0 to 1000 do
    ignore(cmp 0 i)
  done

let monomorphic_compare () =
  let cmp (a:int) (b:int) =
    if a &gt; b then a else b in
  for i = 0 to 1000 do
    ignore(cmp 0 i)
  done

let tests =
  [ "Polymorphic comparison", polymorphic_compare;
    "Monomorphic comparison", monomorphic_compare ]

let () =
  List.map tests ~f:(fun (name,test) -&gt; Bench.Test.create ~name test)
  |&gt; Bench.make_command
  |&gt; Command.run</programlisting>

        <para>Running this shows quite a significant runtime difference
        between the two:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-bench/run_bench_poly_and_mono.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><prompt
            moreinfo="none">$ </prompt><userinput moreinfo="none">corebuild -pkg core_bench bench_poly_and_mono.native</userinput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">./bench_poly_and_mono.native -ascii</userinput>
<computeroutput moreinfo="none">Estimated testing time 20s (change using -quota SECS).</computeroutput>
<computeroutput moreinfo="none">                                                 </computeroutput>
<computeroutput moreinfo="none">  Name                     Time (ns)   % of max  </computeroutput>
<computeroutput moreinfo="none"> ------------------------ ----------- ---------- </computeroutput>
<computeroutput moreinfo="none">  Polymorphic comparison      13_919     100.00  </computeroutput>
<computeroutput moreinfo="none">  Monomorphic comparison         815       5.86  </computeroutput>
<computeroutput moreinfo="none">                                                 </computeroutput></programlisting>

        <para>We see that the polymorphic comparison is close to 20 times slower! These results
          shouldn't be taken too seriously, as this is a very narrow test that, like all such
          microbenchmarks, isn't representative of more complex codebases. However, if you're
          building numerical code that runs many iterations in a tight inner loop, it's worth
          manually peering at the produced assembly code to see if you can hand-optimize it.</para>
      </sect3>
    </sect2>

    <sect2 id="debugging-native-code-binaries">
      <title>Debugging Native Code Binaries</title>

      <para>The native code compiler builds executables that can be debugged using conventional
        system debuggers such as GNU <command moreinfo="none">gdb</command>. You need to compile
        your libraries with the <literal moreinfo="none">-g</literal> option to add the debug
        information to the output, just as you need to with C compilers.<indexterm class="singular">
          <primary>debugging</primary>
          <secondary>native code binaries</secondary>
        </indexterm><indexterm class="singular">
          <primary>native-code compiler</primary>
          <secondary>debugging binaries</secondary>
        </indexterm></para>

      <para>Extra debugging information is inserted into the output assembly
      when the library is compiled in debug mode. These include the CFI stubs
      you will have noticed in the profiling output earlier (<literal
      moreinfo="none">.cfi_start_proc</literal> and <literal
      moreinfo="none">.cfi_end_proc</literal> to delimit an OCaml function
      call, for example).</para>

      <sect3 id="understanding-name-mangling">
        <title>Understanding name mangling</title>

        <para>So how do you refer to OCaml functions in an interactive debugger like <command
            moreinfo="none">gdb</command>? The first thing you need to know is how OCaml function
          names compile down to symbol names in the compiled object files, a procedure generally
          called <emphasis>name mangling</emphasis>.<indexterm class="singular">
            <primary>gdb debugger</primary>
          </indexterm><indexterm class="singular">
            <primary>debugging</primary>
            <secondary>interactive debuggers</secondary>
          </indexterm><indexterm class="singular">
            <primary>functions</primary>
            <secondary>name mangling of</secondary>
          </indexterm><indexterm class="singular">
            <primary>name mangling</primary>
          </indexterm></para>

        <para>Each OCaml source file is compiled into a native object file that must export a unique
          set of symbols to comply with the C binary interface. This means that any OCaml values
          that may be used by another compilation unit need to be mapped onto a symbol name. This
          mapping has to account for OCaml language features such as nested modules, anonymous
          functions, and variable names that shadow one another.</para>

        <para>The conversion follows some straightforward rules for named
        variables and functions:</para>

        <itemizedlist>
          <listitem>
            <para>The symbol is prefixed by <literal
            moreinfo="none">caml</literal> and the local module name, with
            dots replaced by underscores.</para>
          </listitem>

          <listitem>
            <para>This is followed by a double <literal
            moreinfo="none">__</literal> suffix and the variable name.</para>
          </listitem>

          <listitem>
            <para>The variable name is also suffixed by a <literal moreinfo="none">_</literal> and a
              number. This is the result of the lambda compilation, which replaces each variable
              name with a unique value within the module. You can determine this number by examining
              the <literal moreinfo="none">-dlambda</literal> output from <command moreinfo="none"
                >ocamlopt</command>.</para>
          </listitem>
        </itemizedlist>

        <para>Anonymous functions are hard to predict without inspecting
        intermediate compiler output. If you need to debug them, it's usually
        easier to modify the source code to let-bind the anonymous function to
        a variable name.</para>
      </sect3>

      <sect3 id="interactive-breakpoints-with-the-gnu-debugger">
        <title>Interactive breakpoints with the GNU debugger</title>

        <para>Let's see name mangling in action with some interactive
        debugging using GNU <command moreinfo="none">gdb</command>.<indexterm
            class="singular">
            <primary>GNU debugger</primary>
          </indexterm></para>

        <caution>
          <title>Beware gdb on Mac OS X</title>

          <para>The examples here assume that you are running <command
          moreinfo="none">gdb</command> on either Linux or FreeBSD. Mac OS X
          10.8 does have <command moreinfo="none">gdb</command> installed, but
          it's a rather quirky experience that doesn't reliably interpret the
          debugging information contained in the native binaries. This can
          result in function names showing up as raw symbols such as <literal
          moreinfo="none">.L101</literal> instead of their more human-readable
          form.</para>

          <para>For OCaml 4.1, we'd recommend you do native code debugging on
          an alternate platform such as Linux, or manually look at the
          assembly code output to map the symbol names onto their precise
          OCaml functions.</para>
          <para>MacOS 10.9 removes <command>gdb</command> entirely and uses the lldb debugger from
            the LLVM project by default. Many of the guidelines here still apply since the debug
            information embedded in the binary output can be interpreted by lldb (or any other
            DWARF-aware debugger), but the command-line interfaces to lldb is different from
              <command>gdb</command>. Refer to the lldb manual for more information.</para>
        </caution>

        <para>Let's write a mutually recursive function that selects alternating values from a list.
          This isn't tail-recursive, so our stack size will grow as we single-step through the
          execution:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/alternate_list.ml">OCaml</ulink></para>

        <programlisting format="linespecific" language="ocaml">open Core.Std

let rec take =
  function
  |[] -&gt; []
  |hd::tl -&gt; hd :: (skip tl)
and skip =
  function
  |[] -&gt; []
  |_::tl -&gt; take tl

let () =
  take [1;2;3;4;5;6;7;8;9]
  |&gt; List.map ~f:string_of_int
  |&gt; String.concat ~sep:","
  |&gt; print_endline</programlisting>

        <para>Compile and run this with debugging symbols. You should see the
        following output:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-bench/run_alternate_list.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><prompt
            moreinfo="none">$ </prompt><userinput moreinfo="none">corebuild -tag debug alternate_list.native</userinput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">./alternate_list.native -ascii</userinput>
<computeroutput moreinfo="none">1,3,5,7,9</computeroutput></programlisting>

        <para>Now we can run this interactively within <command
        moreinfo="none">gdb</command>:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/gdb_alternate0.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><prompt
            moreinfo="none">$ </prompt><userinput moreinfo="none">gdb ./alternate_list.native</userinput>
<computeroutput moreinfo="none">GNU gdb (GDB) 7.4.1-debian</computeroutput>
<computeroutput moreinfo="none">Copyright (C) 2012 Free Software Foundation, Inc.</computeroutput>
<computeroutput moreinfo="none">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</computeroutput>
<computeroutput moreinfo="none">This is free software: you are free to change and redistribute it.</computeroutput>
<computeroutput moreinfo="none">There is NO WARRANTY, to the extent permitted by law.  Type "show copying"</computeroutput>
<computeroutput moreinfo="none">and "show warranty" for details.</computeroutput>
<computeroutput moreinfo="none">This GDB was configured as "x86_64-linux-gnu".</computeroutput>
<computeroutput moreinfo="none">For bug reporting instructions, please see:</computeroutput>
<computeroutput moreinfo="none">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</computeroutput>
<computeroutput moreinfo="none">Reading symbols from /home/avsm/alternate_list.native...done.</computeroutput>
<computeroutput moreinfo="none">(gdb)</computeroutput></programlisting>

        <para>The <command moreinfo="none">gdb</command> prompt lets you enter
        debug directives. Let's set the program to break just before the first
        call to <literal moreinfo="none">take</literal>:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/gdb_alternate1.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><computeroutput
            moreinfo="none">(gdb) break camlAlternate_list__take_69242 </computeroutput>
<computeroutput moreinfo="none">Breakpoint 1 at 0x5658d0: file alternate_list.ml, line 5.</computeroutput></programlisting>

        <para>We used the C symbol name by following the name mangling rules defined earlier. A
          convenient way to figure out the full name is by tab completion. Just type in a portion of
          the name and press the &lt;tab&gt; key to see a list of possible completions.</para>

        <para>Once you've set the breakpoint, start the program
        executing:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/gdb_alternate2.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><computeroutput
            moreinfo="none">(gdb) run</computeroutput>
<computeroutput moreinfo="none">Starting program: /home/avsm/alternate_list.native</computeroutput>
<computeroutput moreinfo="none">[Thread debugging using libthread_db enabled]</computeroutput>
<computeroutput moreinfo="none">Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".</computeroutput>
<computeroutput moreinfo="none"> </computeroutput>
<computeroutput moreinfo="none">Breakpoint 1, camlAlternate_list__take_69242 () at alternate_list.ml:5</computeroutput>
<computeroutput moreinfo="none">4         function</computeroutput></programlisting>

        <para>The binary has run until the first take invocation and stopped,
        waiting for further instructions. GDB has lots of features, so let's
        continue the program and check the stacktrace after a couple of
        recursions:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/gdb_alternate3.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><computeroutput
            moreinfo="none">(gdb) cont</computeroutput>
<computeroutput moreinfo="none">Continuing.</computeroutput>
<computeroutput moreinfo="none"> </computeroutput>
<computeroutput moreinfo="none">Breakpoint 1, camlAlternate_list__take_69242 () at alternate_list.ml:5</computeroutput>
<computeroutput moreinfo="none">4         function</computeroutput>
<computeroutput moreinfo="none">(gdb) cont</computeroutput>
<computeroutput moreinfo="none">Continuing.</computeroutput>
<computeroutput moreinfo="none"> </computeroutput>
<computeroutput moreinfo="none">Breakpoint 1, camlAlternate_list__take_69242 () at alternate_list.ml:5</computeroutput>
<computeroutput moreinfo="none">4         function</computeroutput>
<computeroutput moreinfo="none">(gdb) bt</computeroutput>
<computeroutput moreinfo="none">#0  camlAlternate_list__take_69242 () at alternate_list.ml:4</computeroutput>
<computeroutput moreinfo="none">#1  0x00000000005658e7 in camlAlternate_list__take_69242 () at alternate_list.ml:6</computeroutput>
<computeroutput moreinfo="none">#2  0x00000000005658e7 in camlAlternate_list__take_69242 () at alternate_list.ml:6</computeroutput>
<computeroutput moreinfo="none">#3  0x00000000005659f7 in camlAlternate_list__entry () at alternate_list.ml:14</computeroutput>
<computeroutput moreinfo="none">#4  0x0000000000560029 in caml_program ()</computeroutput>
<computeroutput moreinfo="none">#5  0x000000000080984a in caml_start_program ()</computeroutput>
<computeroutput moreinfo="none">#6  0x00000000008099a0 in ?? ()</computeroutput>
<computeroutput moreinfo="none">#7  0x0000000000000000 in ?? ()</computeroutput>
<computeroutput moreinfo="none">(gdb) clear camlAlternate_list__take_69242</computeroutput>
<computeroutput moreinfo="none">Deleted breakpoint 1 </computeroutput>
<computeroutput moreinfo="none">(gdb) cont</computeroutput>
<computeroutput moreinfo="none">Continuing.</computeroutput>
<computeroutput moreinfo="none">1,3,5,7,9</computeroutput>
<computeroutput moreinfo="none">[Inferior 1 (process 3546) exited normally]</computeroutput></programlisting>

        <para>The <literal moreinfo="none">cont</literal> command resumes execution after a
          breakpoint has paused it, <literal moreinfo="none">bt</literal> displays a stack
          backtrace, and <literal moreinfo="none">clear</literal> deletes the breakpoint so the
          application can execute until completion. GDB has a host of other features we won't cover
          here, but you can view more guidelines via Mark Shinwell's talk on <ulink
            url="http://www.youtube.com/watch?v=NF2WpWnB-nk&lt;">"Real-world debugging in
            OCaml."</ulink></para>

        <para>One very useful feature of OCaml native code is that C and OCaml share the same stack.
          This means that GDB backtraces can give you a combined view of what's going on in your
          program <emphasis>and</emphasis> runtime library. This includes any calls to C libraries
          or even callbacks into OCaml from the C layer if you're in an environment which embeds the
          OCaml runtime as a library.</para>
      </sect3>
    </sect2>

    <sect2 id="profiling-native-code">
      <title>Profiling Native Code</title>

      <para>The recording and analysis of where your application spends its
      execution time is known as <emphasis>performance profiling</emphasis>.
      OCaml native code binaries can be profiled just like any other C binary,
      by using the name mangling described earlier to map between OCaml
      variable names and the profiler output.<indexterm class="singular">
          <primary>profiling</primary>
        </indexterm><indexterm class="singular">
          <primary>performance profiling</primary>
        </indexterm><indexterm class="singular">
          <primary>native-code compiler</primary>

          <secondary>performance profiling</secondary>
        </indexterm></para>

      <para>Most profiling tools benefit from having some instrumentation
      included in the binary. OCaml supports two such tools:</para>

      <itemizedlist>
        <listitem>
          <para>GNU <command moreinfo="none">gprof</command>, to measure execution time and call
            graphs</para>
        </listitem>

        <listitem>
          <para>The <ulink url="https://perf.wiki.kernel.org/">Perf</ulink>
          profiling framework in modern versions of Linux</para>
        </listitem>
      </itemizedlist>

      <para>Note that many other tools that operate on native binaries, such as Valgrind, will work
        just fine with OCaml as long as the program is linked with the <literal moreinfo="none"
          >-g</literal> flag to embed debugging symbols.</para>

      <sect3 id="gprof">
        <title>Gprof</title>

        <para><command moreinfo="none">gprof</command> produces an execution
        profile of an OCaml program by recording a call graph of which
        functions call one another, and recording the time these calls take
        during the program execution.<indexterm class="singular">
            <primary>gprof code profiler</primary>
          </indexterm></para>

        <para>Getting precise information out of <command
        moreinfo="none">gprof</command> requires passing the <literal
        moreinfo="none">-p</literal> flag to the native code compiler when
        compiling <emphasis>and</emphasis> linking the binary. This generates
        extra code that records profile information to a file called <literal
        moreinfo="none">gmon.out</literal> when the program is executed. This
        profile information can then be examined using <command
        moreinfo="none">gprof</command>.</para>
      </sect3>

      <sect3 id="perf">
        <title>Perf</title>

        <para>Perf is a more modern alternative to <command
        moreinfo="none">gprof</command> that doesn't require you to instrument
        the binary. Instead, it uses hardware counters and debug information
        within the binary to record information accurately.</para>

        <para>Run Perf on a compiled binary to record information first. We'll use our write barrier
          benchmark from earlier, which measures memory allocation versus in-place
          modification:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/perf_record.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><prompt
            moreinfo="none">$ </prompt><userinput moreinfo="none">perf record -g ./barrier_bench.native</userinput>
<computeroutput moreinfo="none">Estimated testing time 20s (change using -quota SECS).</computeroutput>
<computeroutput moreinfo="none"> </computeroutput>
<computeroutput moreinfo="none">  Name        Time (ns)             Time 95ci   Percentage</computeroutput>
<computeroutput moreinfo="none">  ----        ---------             ---------   ----------</computeroutput>
<computeroutput moreinfo="none">  mutable     7_306_219   7_250_234-7_372_469        96.83</computeroutput>
<computeroutput moreinfo="none">  immutable   7_545_126   7_537_837-7_551_193       100.00</computeroutput>
<computeroutput moreinfo="none"> </computeroutput>
<computeroutput moreinfo="none">[ perf record: Woken up 11 times to write data ]</computeroutput>
<computeroutput moreinfo="none">[ perf record: Captured and wrote 2.722 MB perf.data (~118926 samples) ]</computeroutput>
<computeroutput moreinfo="none">perf record -g ./barrier.native</computeroutput>
<computeroutput moreinfo="none">Estimated testing time 20s (change using -quota SECS).</computeroutput>
<computeroutput moreinfo="none"> </computeroutput>
<computeroutput moreinfo="none">  Name        Time (ns)             Time 95ci   Percentage</computeroutput>
<computeroutput moreinfo="none">  ----        ---------             ---------   ----------</computeroutput>
<computeroutput moreinfo="none">  mutable     7_306_219   7_250_234-7_372_469        96.83</computeroutput>
<computeroutput moreinfo="none">  immutable   7_545_126   7_537_837-7_551_193       100.00</computeroutput>
<computeroutput moreinfo="none"> </computeroutput>
<computeroutput moreinfo="none">[ perf record: Woken up 11 times to write data ]</computeroutput>
<computeroutput moreinfo="none">[ perf record: Captured and wrote 2.722 MB perf.data (~118926 samples) ]</computeroutput></programlisting>

        <para>When this completes, you can interactively explore the
        results:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/perf_report.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><prompt
            moreinfo="none">$ </prompt><userinput moreinfo="none">perf report -g</userinput>
<computeroutput moreinfo="none">+  48.86%  barrier.native  barrier.native  [.] camlBarrier__test_immutable_69282</computeroutput>
<computeroutput moreinfo="none">+  30.22%  barrier.native  barrier.native  [.] camlBarrier__test_mutable_69279</computeroutput>
<computeroutput moreinfo="none">+  20.22%  barrier.native  barrier.native  [.] caml_modify</computeroutput></programlisting>

        <para>This trace broadly reflects the results of the benchmark itself.
        The mutable benchmark consists of the combination of the call to
        <literal moreinfo="none">test_mutable</literal> and the <literal
        moreinfo="none">caml_modify</literal> write barrier function in the
        runtime. This adds up to slightly over half the execution time of the
        application.</para>

        <para>Perf has a growing collection of other commands that let you archive these runs and
          compare them against each other. You can read more on the <ulink
            url="http://perf.wiki.kernel.org">home page</ulink>.<indexterm class="singular">
            <primary>frame pointers</primary>
          </indexterm></para>

        <sidebar>
          <title>Using the Frame Pointer to Get More Accurate Traces</title>

          <para>Although Perf doesn't require adding in explicit probes to the
          binary, it does need to understand how to unwind function calls so
          that the kernel can accurately record the function backtrace for
          every event.</para>

          <para>OCaml stack frames are too complex for Perf to understand
          directly, and so it needs the compiler to fall back to using the
          same conventions as C for function calls. On 64-bit Intel systems,
          this means that a special register known as the <emphasis>frame
          pointer</emphasis> is used to record function call history.</para>

          <para>Using the frame pointer in this fashion means a slowdown
          (typically around 3-5%) since it's no longer available for
          general-purpose use. OCaml 4.1 thus makes the frame pointer an
          optional feature that can be used to improve the resolution of Perf
          traces.</para>

          <para>OPAM provides a compiler switch that compiles OCaml with the
          frame pointer activated:</para>

          <para role="sourcecode"><ulink role="orm:hideurl:ital"
          url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end/opam_switch.out">Terminal</ulink></para>

          <programlisting format="linespecific" language="console"><prompt moreinfo="none">$ </prompt><userinput moreinfo="none">opam switch 4.01.0+fp</userinput>
</programlisting>

          <para>Using the frame pointer changes the OCaml calling convention,
          but OPAM takes care of recompiling all your libraries with the new
          interface. You can read more about this on the OCamlPro <ulink
          url="http://www.ocamlpro.com/blog/2012/08/08/profile-native-code.html">OCaml</ulink>.</para>
        </sidebar>
      </sect3>
    </sect2>

    <sect2 id="embedding-native-code-in-c">
      <title>Embedding Native Code in C</title>

      <para>The native code compiler normally links a complete executable, but
      can also output a standalone native object file just as the bytecode
      compiler can. This object file has no further dependencies on OCaml
      except for the runtime library.<indexterm class="singular">
          <primary>libasmrun.a library</primary>
        </indexterm><indexterm class="singular">
          <primary>native-code compiler</primary>

          <secondary>embedding code in C</secondary>
        </indexterm></para>

      <para>The native code runtime is a different library from the bytecode one, and is installed
        as <literal moreinfo="none">libasmrun.a</literal> in the OCaml standard library
        directory.</para>

      <para>Try this custom linking by using the same source files from the
      bytecode embedding example earlier in this chapter:</para>

      <para role="sourcecode"><ulink role="orm:hideurl:ital"
      url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/build_embed_native.out">Terminal</ulink></para>

      <programlisting format="linespecific" language="console"><prompt
          moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlopt -output-obj -o embed_native.o embed_me1.ml embed_me2.ml</userinput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">gcc -Wall -I `ocamlc -where` -o final.native embed_native.o main.c \</userinput>
<computeroutput moreinfo="none">   -L `ocamlc -where` -lasmrun -ltermcap -lm -ldl</computeroutput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">./final.native</userinput>
<computeroutput moreinfo="none">Before calling OCaml</computeroutput>
<computeroutput moreinfo="none">hello embedded world 1</computeroutput>
<computeroutput moreinfo="none">hello embedded world 2</computeroutput>
<computeroutput moreinfo="none">After calling OCaml</computeroutput></programlisting>

      <para>The <literal moreinfo="none">embed_native.o</literal> is a standalone object file that
        has no further references to OCaml code beyond the runtime library, just as with the
        bytecode runtime. Do remember that the link order of the libraries is significant in modern
        GNU toolchains (especially as used in Ubuntu 11.10 and later) that resolve symbols from left
        to right in a single pass.<indexterm class="singular">
          <primary>debugging</primary>
          <secondary>activating debug runtime</secondary>
        </indexterm></para>

      <tip>
        <title>Activating the Debug Runtime</title>

        <para>Despite your best efforts, it is easy to introduce a bug into some components, such as
          C bindings, that causes heap invariants to be violated. OCaml includes a <literal
            moreinfo="none">libasmrund.a</literal> variant of the runtime library which is compiled
          with extra debugging checks that perform extra memory integrity checks during every
          garbage collection cycle. Running these extra checks will abort the program nearer the
          point of corruption and help isolate the bug in the C code.</para>

        <para>To use the debug library, just link your program with the
        <literal moreinfo="none">-runtime-variant d</literal> flag:</para>

        <para role="sourcecode"><ulink role="orm:hideurl:ital"
        url="https://github.com/realworldocaml/examples/tree/beta3/code/back-end-embed/run_debug_hello.out">Terminal</ulink></para>

        <programlisting format="linespecific" language="console"><prompt
            moreinfo="none">$ </prompt><userinput moreinfo="none">ocamlopt -runtime-variant d -verbose -o hello.native hello.ml</userinput>
<prompt moreinfo="none">$ </prompt><userinput moreinfo="none">./hello.native</userinput>
<computeroutput moreinfo="none">### OCaml runtime: debug mode ###</computeroutput>
<computeroutput moreinfo="none">Initial minor heap size: 2048k bytes</computeroutput>
<computeroutput moreinfo="none">Initial major heap size: 992k bytes</computeroutput>
<computeroutput moreinfo="none">Initial space overhead: 80%</computeroutput>
<computeroutput moreinfo="none">Initial max overhead: 500%</computeroutput>
<computeroutput moreinfo="none">Initial heap increment: 992k bytes</computeroutput>
<computeroutput moreinfo="none">Initial allocation policy: 0</computeroutput>
<computeroutput moreinfo="none">Hello OCaml World!</computeroutput></programlisting>

        <para>If you get an error that <literal moreinfo="none">libasmrund.a</literal> is not found,
          it's probably because you're using OCaml 4.00 and not 4.01. It's only installed by default
          in the very latest version, which you should be using via the <literal moreinfo="none"
            >4.01.0</literal> OPAM switch.<indexterm class="endofrange" startref="CPfast"/></para>
      </tip>
    </sect2>
  </sect1>

  <sect1 id="summarizing-the-file-extensions">
    <title>Summarizing the File Extensions</title>

    <para>We've seen how the compiler uses intermediate files to store various
    stages of the compilation toolchain. Here's a cheat sheet of all them in
    one place.<indexterm class="singular">
        <primary>files</primary>

        <secondary>chart of file extensions</secondary>
      </indexterm><indexterm class="singular">
        <primary>compilation process</primary>

        <secondary>file extensions</secondary>
      </indexterm></para>

    <para> <xref linkend="Table2301"/> shows the intermediate files generated by <command moreinfo="none"
      >ocamlc</command>.</para>

    <table id="Table2301"><title>Intermediate files generated by the OCaml compiler toolchain</title>
      <tgroup cols="2">
        <colspec align="left"/>

        <colspec align="left"/>

        <thead>
          <row>
            <entry>Extension</entry>

            <entry>Purpose</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><literal>.ml</literal></entry>

            <entry>Source files for compilation unit module
            implementations.</entry>
          </row>

          <row>
            <entry><literal>.mli</literal></entry>

            <entry>Source files for compilation unit module interfaces. If
            missing, generated from the <literal moreinfo="none">.ml</literal>
            file.</entry>
          </row>

          <row>
            <entry><literal>.cmi</literal></entry>

            <entry>Compiled module interface from a corresponding <literal
            moreinfo="none">.mli</literal> source file.</entry>
          </row>

          <row>
            <entry><literal>.cmo</literal></entry>

            <entry>Compiled bytecode object file of the module
            implementation.</entry>
          </row>

          <row>
            <entry><literal>.cma</literal></entry>

            <entry>Library of bytecode object files packed into a single
            file.</entry>
          </row>

          <row>
            <entry><literal>.o</literal></entry>

            <entry>C source files are compiled into native object files by the
            system <literal moreinfo="none">cc</literal>.</entry>
          </row>

          <row>
            <entry><literal>.cmt</literal></entry>

            <entry>Typed abstract syntax tree for module
            implementations.</entry>
          </row>

          <row>
            <entry><literal>.cmti</literal></entry>

            <entry>Typed abstract syntax tree for module interfaces.</entry>
          </row>

          <row>
            <entry><literal>.annot</literal></entry>

            <entry>Old-style annotation file for displaying <literal>typed</literal>, superseded by
                <literal moreinfo="none">cmt</literal> files.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The native code compiler generates some additional files (see <xref linkend="Table2302"
        />).<indexterm class="singular">
        <primary>native-code compiler</primary>
        <secondary>files generated by</secondary>
      </indexterm></para>

    <table id="Table2302"> <title>Intermediate outputs produced by the native code OCaml toolchain</title>
      <tgroup cols="2">
        <colspec align="left"/>

        <colspec align="left"/>

        <thead>
          <row>
            <entry>Extension</entry>

            <entry>Purpose</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><literal>.o</literal></entry>

            <entry>Compiled native object file of the module
            implementation.</entry>
          </row>

          <row>
            <entry><literal>.cmx</literal></entry>

            <entry>Contains extra information for linking and cross-module
            optimization of the object file.</entry>
          </row>

          <row>
            <entry><literal>.cmxa and .a</literal></entry>

            <entry>Library of <literal moreinfo="none">cmx</literal> and
            <literal moreinfo="none">o</literal> units, stored in the <literal
            moreinfo="none">cmxa</literal> and <literal
            moreinfo="none">a</literal> files respectively. These files are
            always needed together.</entry>
          </row>

          <row>
            <entry><literal>.S </literal><emphasis>or</emphasis>
              <literal>.s</literal></entry>

            <entry>Assembly language output if <literal
            moreinfo="none">-S</literal> is specified.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>
</chapter>
