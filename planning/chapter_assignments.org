* Schedule

** March 7th: Any 2 substantial Chapters
** June 30th: Half the chapters
** Nov 30th: Draft suitable for final review

* Chapter list

|  # | Chapter                             | Author | Status |
|----+-------------------------------------+--------+--------|
| 01 | Preface/Forward                     |        |        |
| 02 | A Guided Tour                       | yaron  | ###    |
| 03 | Variables and Functions             | yaron  | ###    |
| 04 | Lists, Options and Pattern-matching | jason  | #      |
| 05 | Records and Variants                | yaron  | ##     |
| 06 | Error Handling                      | yaron  | ###    |
| 07 | Programming with Mutation           |        |        |
| 08 | Files, Modules and Programs         | yaron  | ###    |
| 09 | Functors and first-class modules    | yaron  |        |
| 10 | Synchronous I/O                     |        |        |
| 11 | Concurrent Programming              | anil   |        |
| 12 | Objects                             | jason  | ##     |
| 13 | Tuning the Runtime                  | anil   |        |
| 14 | Foreign Function Interface          | anil   |        |
| 15 | Camlp4                              | anil   |        |
| 16 | OCamlbuild / Oasis                  | anil   |        |
| 17 | ocamllex/ocamlyacc/menhir           |        |        |


** Status key
 - Blank: no progress
 - #: In progress
 - ##: 1st Draft is finished
 - ###: Chapter is effectively complete, i.e., has undergone a round of
   review and fixes

* Chapter proposals
** Basic types and expressions
 - Before our current Chapter 2
 - Cover the basic types, and where to find functionality relating to
   them.  The basic organizational scheme of Core should be mentioned
   (find int functions in Int, string in String, etc.)
 - basics of simple expressions, syntax and typing if/then/else
** Designing modules

 Design tips for OCaml modules.  Suggestions on idioms like signature
 includes; conventions on naming functions; suggestions about building
 useful abstractions.

 Maybe also some clever type-design tricks should be included:
 type-indexed values and phantom types come up from time to time, and
 are pretty handy.

** Unicode

Maybe a chapter on how to use Unicode effectively in OCaml?  I've
never done this, so I'm not the best person.  But it does seem like a
common enough issue.
** Laziness
 How to use laziness in OCaml, including:
 - pattern matching of lazy values
 - declaring mutually recursive values lazy values
 - lazy lists
** Language minutae
 Not really a chapter idea, but some concepts that should get written
 down somewhere, and I'm not sure where.
 - Order of evaluation.  This is actually pretty surprising in OCaml,
   and should be made clear.
 - syntax of conditionals
 - laziness of || and &&
 - type constraints
 - nominal vs structural types
 - private types, and private type abbreviations
** Maps and Hashtables
 - Maps and Hashtables in Core are unusual.  Perhaps worth talking
   about them and the typing disciplined behind them.
** Polymorphic compare
 - Polymorphic hash and compare are subtle and problematic concepts.
   Seems worth discussing them somewhere

** Organization of Core
 Not sure where this should go, but there are a number of topics to
 cover:
 - the idiom of one module for every type, including the core types
   (Bool, Exn, Fn, Int, etc.)
 - The use of standardized interface components (List, Option, String,
   Array etc, all satisfy the container interface.)
 - Modules with unusual structure like Map and Hashtbl.  When you
   create a Map, you can either create a polymorphic one
   (Map.Poly.create), or one for a specific type (Int.Map.create), but
   you end up with an element of the same polymorphic map datatype
   either way.


